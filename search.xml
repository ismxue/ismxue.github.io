<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>系统设计类题目</title>
      <link href="/2022/10/07/leetcode/xi-tong-she-ji-lei-ti-mu/"/>
      <url>/2022/10/07/leetcode/xi-tong-she-ji-lei-ti-mu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/design-underground-system/" target="_blank" rel="noopener">1396. 设计地铁系统</a></p><p>这类题目看似复杂，其实读懂后，根据题意要求一步一步分解并统计出需要的信息即可。</p><ul><li>求平均时间，则需要知道startStation到endStation这段路中<strong>累计通过的人数和时间</strong></li><li>checkOut中可以统计累计通过的人数和时间，但是该函数中缺少startStation和startTime信息</li><li>checkIn中统计checkOut中需要的startStation和startTime信息</li><li>最后信息统计完成，通过除法便得到时间均值</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UndergroundSystem</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>personInfo <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>stationInfo <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">checkIn</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> id<span class="token punctuation">,</span> stationName<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type id: int        :type stationName: str        :type t: int        :rtype: None        """</span>        self<span class="token punctuation">.</span>personInfo<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>stationName<span class="token punctuation">,</span> t<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">checkOut</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> id<span class="token punctuation">,</span> stationName<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type id: int        :type stationName: str        :type t: int        :rtype: None        """</span>        startStation <span class="token operator">=</span> self<span class="token punctuation">.</span>personInfo<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        startTime <span class="token operator">=</span> self<span class="token punctuation">.</span>personInfo<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>startStation<span class="token punctuation">,</span> stationName<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>stationInfo<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stationInfo<span class="token punctuation">[</span><span class="token punctuation">(</span>startStation<span class="token punctuation">,</span> stationName<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            self<span class="token punctuation">.</span>stationInfo<span class="token punctuation">[</span><span class="token punctuation">(</span>startStation<span class="token punctuation">,</span> stationName<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> t <span class="token operator">-</span> startTime        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stationInfo<span class="token punctuation">[</span><span class="token punctuation">(</span>startStation<span class="token punctuation">,</span> stationName<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">-</span> startTime<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">## 注意：不能这样分开写。因为是第一次对该字典的键和值赋初值</span>            <span class="token comment" spellcheck="true"># self.stationInfo[(startStation,stationName)][0]=1</span>            <span class="token comment" spellcheck="true"># self.stationInfo[(startStation,stationName)][1]=t-startTime</span>    <span class="token keyword">def</span> <span class="token function">getAverageTime</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> startStation<span class="token punctuation">,</span> endStation<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type startStation: str        :type endStation: str        :rtype: float        """</span>        allPeople <span class="token operator">=</span> self<span class="token punctuation">.</span>stationInfo<span class="token punctuation">[</span><span class="token punctuation">(</span>startStation<span class="token punctuation">,</span> endStation<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        allTime <span class="token operator">=</span> self<span class="token punctuation">.</span>stationInfo<span class="token punctuation">[</span><span class="token punctuation">(</span>startStation<span class="token punctuation">,</span> endStation<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>allTime <span class="token operator">+</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> allPeople <span class="token comment" spellcheck="true"># python2和python3的除法略有区别。统一变成浮点除法</span><span class="token comment" spellcheck="true"># Your UndergroundSystem object will be instantiated and called as such:</span><span class="token comment" spellcheck="true"># obj = UndergroundSystem()</span><span class="token comment" spellcheck="true"># obj.checkIn(id,stationName,t)</span><span class="token comment" spellcheck="true"># obj.checkOut(id,stationName,t)</span><span class="token comment" spellcheck="true"># param_3 = obj.getAverageTime(startStation,endStation)</span><span class="token comment" spellcheck="true">#------------------------------------------</span><span class="token comment" spellcheck="true"># 或者也可以使用字典的get函数</span><span class="token keyword">class</span> <span class="token class-name">UndergroundSystem</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>personInfo <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>stationInfo <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">checkIn</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> id<span class="token punctuation">,</span> stationName<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type id: int        :type stationName: str        :type t: int        :rtype: None        """</span>        self<span class="token punctuation">.</span>personInfo<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>stationName<span class="token punctuation">,</span> t<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">checkOut</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> id<span class="token punctuation">,</span> stationName<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type id: int        :type stationName: str        :type t: int        :rtype: None        """</span>        startStation <span class="token operator">=</span> self<span class="token punctuation">.</span>personInfo<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        startTime <span class="token operator">=</span> self<span class="token punctuation">.</span>personInfo<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        count<span class="token punctuation">,</span>allTime<span class="token operator">=</span>self<span class="token punctuation">.</span>stationInfo<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">(</span>startStation<span class="token punctuation">,</span> stationName<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 字典的get函数可以赋默认值</span>        self<span class="token punctuation">.</span>stationInfo<span class="token punctuation">[</span><span class="token punctuation">(</span>startStation<span class="token punctuation">,</span> stationName<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> allTime<span class="token operator">+</span>t <span class="token operator">-</span> startTime<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">getAverageTime</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> startStation<span class="token punctuation">,</span> endStation<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type startStation: str        :type endStation: str        :rtype: float        """</span>        allPeople<span class="token punctuation">,</span>allTime <span class="token operator">=</span> self<span class="token punctuation">.</span>stationInfo<span class="token punctuation">[</span><span class="token punctuation">(</span>startStation<span class="token punctuation">,</span> endStation<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>allTime <span class="token operator">+</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> allPeople <span class="token comment" spellcheck="true"># python2和python3的除法略有区别。统一变成浮点除法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="1472-设计浏览器历史记录"><a href="#1472-设计浏览器历史记录" class="headerlink" title="1472. 设计浏览器历史记录"></a><a href="https://leetcode.cn/problems/design-browser-history/" target="_blank" rel="noopener">1472. 设计浏览器历史记录</a></h1><ul><li>用栈保存数据</li><li>visit时，如果当前位置上面还有记录，则需要删除</li><li>back和forward时，当前位置与左（右）边界比较，并再更新该位置</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BrowserHistory</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> homepage<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type homepage: str        """</span>        self<span class="token punctuation">.</span>res<span class="token operator">=</span><span class="token punctuation">[</span>homepage<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>current<span class="token operator">=</span><span class="token number">0</span> <span class="token comment" spellcheck="true"># 记录当前位置</span>    <span class="token keyword">def</span> <span class="token function">visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type url: str        :rtype: None        """</span>        <span class="token comment" spellcheck="true"># 以栈为例，如果当前位置上面还有记录，则需要删除</span>        self<span class="token punctuation">.</span>res<span class="token operator">=</span>self<span class="token punctuation">.</span>res<span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>current<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 或者del self.res[self.current + 1:]</span>        self<span class="token punctuation">.</span>res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>current<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">back</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> steps<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type steps: int        :rtype: str        """</span>        self<span class="token punctuation">.</span>current<span class="token operator">-=</span>steps <span class="token comment" spellcheck="true"># 更新当前位置</span>        self<span class="token punctuation">.</span>current<span class="token operator">=</span>max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 并与0比较，再更新当前位置</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>res<span class="token punctuation">[</span>self<span class="token punctuation">.</span>current<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> steps<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type steps: int        :rtype: str        """</span>        self<span class="token punctuation">.</span>current<span class="token operator">+=</span>steps <span class="token comment" spellcheck="true"># 更新当前位置</span>        self<span class="token punctuation">.</span>current<span class="token operator">=</span>min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>current<span class="token punctuation">,</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>res<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 并与栈的长度比较，再更新当前位置</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>res<span class="token punctuation">[</span>self<span class="token punctuation">.</span>current<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Your BrowserHistory object will be instantiated and called as such:</span><span class="token comment" spellcheck="true"># obj = BrowserHistory(homepage)</span><span class="token comment" spellcheck="true"># obj.visit(url)</span><span class="token comment" spellcheck="true"># param_2 = obj.back(steps)</span><span class="token comment" spellcheck="true"># param_3 = obj.forward(steps)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="211-添加与搜索单词-数据结构设计"><a href="#211-添加与搜索单词-数据结构设计" class="headerlink" title="211. 添加与搜索单词 - 数据结构设计"></a><a href="https://leetcode.cn/problems/design-add-and-search-words-data-structure/" target="_blank" rel="noopener">211. 添加与搜索单词 - 数据结构设计</a></h1><ul><li>使用队列达到先进先出</li><li>使用两个队列，分别保存猫和狗</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AnimalShelf</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cat <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dog <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> animal<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token keyword">if</span> animal<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>cat<span class="token punctuation">.</span>append<span class="token punctuation">(</span>animal<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>dog<span class="token punctuation">.</span>append<span class="token punctuation">(</span>animal<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">dequeueAny</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>dog <span class="token operator">and</span> self<span class="token punctuation">.</span>cat<span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>cat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> self<span class="token punctuation">.</span>dog<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>dog<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>cat<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>dog<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>dog<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>cat<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>cat<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">dequeueDog</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dog<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>dog <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">dequeueCat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>cat<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>cat <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Your AnimalShelf object will be instantiated and called as such:</span><span class="token comment" spellcheck="true"># obj = AnimalShelf()</span><span class="token comment" spellcheck="true"># obj.enqueue(animal)</span><span class="token comment" spellcheck="true"># param_2 = obj.dequeueAny()</span><span class="token comment" spellcheck="true"># param_3 = obj.dequeueDog()</span><span class="token comment" spellcheck="true"># param_4 = obj.dequeueCat()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="1109-航班预订统计"><a href="#1109-航班预订统计" class="headerlink" title="1109. 航班预订统计"></a><a href="https://leetcode.cn/problems/corporate-flight-bookings/solutions/12937/5118_hang-ban-yu-ding-tong-ji-by-user9081a/" target="_blank" rel="noopener">1109. 航班预订统计</a></h1><blockquote><ul><li>定义 counter[] 数组记录<strong>每站的人数变化</strong>，counter[i] 表示第 i+1 站。遍历 bookings[]：bookings[i] = [i, j, k] 表示在 i 站增加 k 人即 counters[i-1] += k，在 j+1 站减少 k 人即 counters[j] -= k</li><li>遍历（整理）counter[] 数组，得到每站总人数： 每站的人数为前一站人数加上当前人数变化 counters[i] += counters[i - 1]</li></ul></blockquote><p>小而美的算法技巧：<a href="https://labuladong.github.io/algo/2/20/25/" target="_blank" rel="noopener">差分数组</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">corpFlightBookings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bookings<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type bookings: List[List[int]]        :type n: int        :rtype: List[int]        """</span>        counter<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k <span class="token keyword">in</span> bookings<span class="token punctuation">:</span>            counter<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+=</span>k            <span class="token keyword">if</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">:</span>                counter<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-=</span>k        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            counter<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>counter<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>counter<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> counter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="393-UTF-8-编码验证"><a href="#393-UTF-8-编码验证" class="headerlink" title="393. UTF-8 编码验证"></a><a href="https://leetcode.cn/problems/utf-8-validation/solution/python-zi-fu-chuan-fang-fa-jie-jue-by-powcai/" target="_blank" rel="noopener">393. UTF-8 编码验证</a></h1><p><a href="https://leetcode.com/problems/utf-8-validation/discuss/2568917/LeetCode-The-Hard-Way-Explained-Line-By-Line" target="_blank" rel="noopener">模拟验证的过程</a></p><ul><li>位运算</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">validUtf8</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        cnt <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token keyword">if</span> cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> d <span class="token operator">>></span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0b110</span><span class="token punctuation">:</span> cnt <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> d <span class="token operator">>></span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0b1110</span><span class="token punctuation">:</span> cnt <span class="token operator">=</span> <span class="token number">2</span>                <span class="token keyword">elif</span> d <span class="token operator">>></span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0b11110</span><span class="token punctuation">:</span> cnt <span class="token operator">=</span> <span class="token number">3</span>                <span class="token keyword">elif</span> d <span class="token operator">>></span> <span class="token number">7</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> d <span class="token operator">>></span> <span class="token number">6</span> <span class="token operator">!=</span> <span class="token number">0b10</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>                cnt <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> cnt <span class="token operator">==</span> <span class="token number">0</span>作者：powcai链接：https<span class="token punctuation">:</span><span class="token operator">//</span>leetcode<span class="token punctuation">.</span>cn<span class="token operator">/</span>problems<span class="token operator">/</span>utf<span class="token number">-8</span><span class="token operator">-</span>validation<span class="token operator">/</span>solution<span class="token operator">/</span>python<span class="token operator">-</span>zi<span class="token operator">-</span>fu<span class="token operator">-</span>chuan<span class="token operator">-</span>fang<span class="token operator">-</span>fa<span class="token operator">-</span>jie<span class="token operator">-</span>jue<span class="token operator">-</span>by<span class="token operator">-</span>powcai<span class="token operator">/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字符串</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">validUtf8</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>        data <span class="token operator">=</span> <span class="token punctuation">[</span>bin<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print(data)</span>        cnt <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token keyword">if</span> cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> d<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>                <span class="token keyword">elif</span> d<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"110"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> cnt <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> d<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"1110"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> cnt <span class="token operator">=</span> <span class="token number">2</span>                <span class="token keyword">elif</span> d<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"11110"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> cnt <span class="token operator">=</span> <span class="token number">3</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token operator">not</span> d<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>                cnt <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> cnt <span class="token operator">==</span> <span class="token number">0</span>作者：powcai链接：https<span class="token punctuation">:</span><span class="token operator">//</span>leetcode<span class="token punctuation">.</span>cn<span class="token operator">/</span>problems<span class="token operator">/</span>utf<span class="token number">-8</span><span class="token operator">-</span>validation<span class="token operator">/</span>solution<span class="token operator">/</span>python<span class="token operator">-</span>zi<span class="token operator">-</span>fu<span class="token operator">-</span>chuan<span class="token operator">-</span>fang<span class="token operator">-</span>fa<span class="token operator">-</span>jie<span class="token operator">-</span>jue<span class="token operator">-</span>by<span class="token operator">-</span>powcai<span class="token operator">/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章：如何解决括号相关的题</title>
      <link href="/2022/10/04/labuladong/di-san-zhang-ru-he-jie-jue-gua-hao-xiang-guan-de-ti/"/>
      <url>/2022/10/04/labuladong/di-san-zhang-ru-he-jie-jue-gua-hao-xiang-guan-de-ti/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.github.io/algo/4/33/130/" target="_blank" rel="noopener">如何解决括号相关的问题</a></p><h1 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode.cn/problems/valid-parentheses/" target="_blank" rel="noopener">20. 有效的括号</a></h1><p>如果当前是左括号，则入栈<br>如果当前是右括号，且栈不为空、栈顶是与其匹配的左括号，则出栈</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: bool        """</span>        dic<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'('</span><span class="token punctuation">:</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token string">'{'</span><span class="token punctuation">:</span><span class="token string">'}'</span><span class="token punctuation">,</span><span class="token string">'['</span><span class="token punctuation">:</span><span class="token string">']'</span><span class="token punctuation">}</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> c <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span>            <span class="token keyword">elif</span> stack <span class="token operator">and</span> c<span class="token operator">==</span>dic<span class="token punctuation">[</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># 和栈顶的左括号不匹配</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="921-使括号有效的最少添加"><a href="#921-使括号有效的最少添加" class="headerlink" title="921. 使括号有效的最少添加"></a><a href="https://leetcode-cn.com/problems/minimum-add-to-make-parentheses-valid/" target="_blank" rel="noopener">921. 使括号有效的最少添加</a></h1><p>统计不可匹配的括号数 = 使括号有效的最少添加</p><ul><li>加一个’?’打底，防止栈为空并且需要pop时报错</li><li>若栈顶为左括号，且当前元素为右括号，可以互相抵消。此时栈顶出栈</li><li>其他情况：抵消不了. 此时，不管是左括号还是右括号, 通通入栈</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minAddToMakeValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> S<span class="token punctuation">)</span><span class="token punctuation">:</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'?'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 加一个'?'打底，防止栈为空并且需要pop时报错</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> S<span class="token punctuation">:</span>            <span class="token keyword">if</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span> <span class="token operator">and</span> i<span class="token operator">==</span><span class="token string">')'</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 栈顶为左括号，且当前元素为右括号，可以互相抵消。此时栈顶出栈</span>                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 抵消不了的元素通通入栈</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="1541-平衡括号字符串的最少插入次数"><a href="#1541-平衡括号字符串的最少插入次数" class="headerlink" title="1541. 平衡括号字符串的最少插入次数"></a><a href="https://leetcode.cn/problems/minimum-insertions-to-balance-a-parentheses-string/" target="_blank" rel="noopener">1541. 平衡括号字符串的最少插入次数</a></h1><ul><li>将双括号替换为<code>]</code></li><li>如果是左括号，则入栈</li><li>如果是右括号，则根据是否有左括号与之匹配，更新相关的细节</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minInsertions</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: int        """</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"?"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 用一个字符打底，防止栈为空。这是一种常用的操作</span>        s<span class="token operator">=</span>s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"))"</span><span class="token punctuation">,</span><span class="token string">"]"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#替换后，直接变成了三种类型的判断</span>        count<span class="token operator">=</span><span class="token number">0</span> <span class="token comment" spellcheck="true"># 统计遍历过程中需要修改的步骤</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token string">"("</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 左括号，入栈</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token string">"]"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 双右括号类型</span>                <span class="token keyword">if</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"("</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 匹配，可抵消。栈顶出栈</span>                    stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"?"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 没有左括号与之匹配，需要增加1个左括号</span>                    count<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token string">")"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 单右括号类型</span>                <span class="token keyword">if</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"("</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 有左括号与当前的单右括号匹配，但需增加一个右括号。然后栈顶出栈</span>                    count<span class="token operator">+=</span><span class="token number">1</span>                    stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"?"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 没有左括号与当前的单右括号匹配，需增加一个左括号和一个右括号</span>                    count<span class="token operator">+=</span><span class="token number">2</span>        <span class="token keyword">return</span> count<span class="token operator">+</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>   <span class="token comment" spellcheck="true"># 其中，len(stack)-1为抵消后剩下的左括号数量，需要双倍的右括号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="1249-移除无效的括号"><a href="#1249-移除无效的括号" class="headerlink" title="1249. 移除无效的括号"></a><a href="https://leetcode.cn/problems/minimum-remove-to-make-valid-parentheses/solution/python-by-leo_g-rlez/" target="_blank" rel="noopener">1249. 移除无效的括号</a></h1><ul><li><code>(</code>入栈</li><li><code>)</code><ul><li>有<code>(</code>与之抵消，出栈</li><li>否则当前字符用空字符代替</li></ul></li><li>无法抵消的<code>(</code>也用空字符代替</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minRemoveToMakeValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: str        """</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        s<span class="token operator">=</span>list<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 临时转为list</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"("</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 只有左括号，才入栈</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">")"</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> stack<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 当前是右括号且栈不为空（栈中有左括号，因此可抵消），出栈</span>                    stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span> <span class="token comment" spellcheck="true"># 无法与当前右括号抵消，当前字符用空字符代替</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> stack<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 无法抵消的左括号也用空字符代替</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 列表转字符串，并消除空字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用</title>
      <link href="/2022/05/03/ji-suan-ji-ji-chu/docker-shi-yong/"/>
      <url>/2022/05/03/ji-suan-ji-ji-chu/docker-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="https://docs.docker.com/get-started/" target="_blank" rel="noopener">安装</a></h1><p>Support ：Mac with Intel chip， Mac with Apple chip， Windows， Linux</p><p><img src="https://s2.loli.net/2022/05/03/HSoTUxcFJP69eyW.png" alt="20220503205841"></p><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p><a href="https://docker-curriculum.com/#multi-container-environments" target="_blank" rel="noopener">简明教程</a><br><a href="https://github.com/wsargent/docker-cheat-sheet" target="_blank" rel="noopener">Docker Cheat Sheet</a></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a><a href="https://www.youtube.com/watch?v=bi0cKgmRuiA" target="_blank" rel="noopener">示例</a></h2><p>功能：程序返回任意一部电影。按y持续返回，按n退出。</p><p>python程序和Dockerfile文件内容分别如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token comment" spellcheck="true"># crawl IMDB Top 250 and randomly select a movie</span>URL <span class="token operator">=</span> <span class="token string">'http://www.imdb.com/chart/top'</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>URL<span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#soup = BeautifulSoup(response.text, 'lxml') # faster</span>    <span class="token comment" spellcheck="true"># print(soup.prettify())</span>    movietags <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'td.titleColumn'</span><span class="token punctuation">)</span>    inner_movietags <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'td.titleColumn a'</span><span class="token punctuation">)</span>    ratingtags <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'td.posterColumn span[name=ir]'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_year</span><span class="token punctuation">(</span>movie_tag<span class="token punctuation">)</span><span class="token punctuation">:</span>        moviesplit <span class="token operator">=</span> movie_tag<span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        year <span class="token operator">=</span> moviesplit<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># last item </span>        <span class="token keyword">return</span> year    years <span class="token operator">=</span> <span class="token punctuation">[</span>get_year<span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token keyword">for</span> tag <span class="token keyword">in</span> movietags<span class="token punctuation">]</span>    actors_list <span class="token operator">=</span><span class="token punctuation">[</span>tag<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> tag <span class="token keyword">in</span> inner_movietags<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># access attribute 'title'</span>    titles <span class="token operator">=</span> <span class="token punctuation">[</span>tag<span class="token punctuation">.</span>text <span class="token keyword">for</span> tag <span class="token keyword">in</span> inner_movietags<span class="token punctuation">]</span>    ratings <span class="token operator">=</span> <span class="token punctuation">[</span>float<span class="token punctuation">(</span>tag<span class="token punctuation">[</span><span class="token string">'data-value'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> tag <span class="token keyword">in</span> ratingtags<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># access attribute 'data-value'</span>    n_movies <span class="token operator">=</span> len<span class="token punctuation">(</span>titles<span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        idx <span class="token operator">=</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n_movies<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{titles[idx]} {years[idx]}, Rating: {ratings[idx]:.1f}, Starring: {actors_list[idx]}'</span><span class="token punctuation">)</span>        user_input <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'Do you want another movie (y/[n])? '</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user_input <span class="token operator">!=</span> <span class="token string">'y'</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">FROM python:3.10ADD main.py .RUN pip install requests beautifulsoup4CMD [ "python", "./main.py" ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用docker可以和本地环境进行很好的隔离。当前环境中可能没有相关的packages，但是用docker可以确保程序在container中执行，而不会改变当前的环境。</p><p>如果使用本地环境，则由于包安装不完全，可能出现<br><img src="https://s2.loli.net/2022/05/03/EULObZtFaih4Dq3.png" alt="20220503172208"></p><p>而如果使用docker，则只需要使用Dockerfile构建image，其中Dockerfile中有包的安装命令，并让程序在container中执行即可。</p><pre><code># 给image打标签，所以用-tdocker build -t python-imdb .# 因为需要通过输入y或n来与终端交互，所以用-itdocker run -it python-imdb  </code></pre><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><a href="https://github.com/docker/for-mac/issues/770" target="_blank" rel="noopener">Docker for Mac doesn’t listen on 2375 解决方式</a><ul><li>可以使变量<a href="https://blog.csdn.net/u011630575/article/details/49839893" target="_blank" rel="noopener">永久生效</a></li><li><a href="https://unix.stackexchange.com/questions/117467/how-to-permanently-set-environmental-variables" target="_blank" rel="noopener">Linux中使变量生效</a></li></ul></li><li><a href="https://blog.csdn.net/qq_43557600/article/details/108661926" target="_blank" rel="noopener">pip导出当前项目的依赖包</a></li></ul><pre><code>pip install pipreqspipreqs . --encoding=utf8 --force# “.” 指的是将导出依赖包的文件放在当前目录下# “--encoding=utf8” 指的是存放文件的编码为utf-8,否则会报错# “--force”  --force 强制执行，当生成目录下的requirements.txt存在时强覆盖</code></pre><ul><li><p><a href="https://blog.csdn.net/Thanours/article/details/109265315" target="_blank" rel="noopener">pycharm如何连接远程服务器的docker容器进行运行和调试代码</a></p></li><li><p>停止、删除所有的docker容器和镜像</p></li></ul><p>列出所有的容器 ID</p><pre><code>docker ps -aq</code></pre><p>停止所有的容器</p><pre><code>docker stop $(docker ps -aq)</code></pre><p>删除所有的容器</p><pre><code>docker rm $(docker ps -aq)</code></pre><p>删除所有的镜像</p><pre><code>docker rmi $(docker images -q)</code></pre><h2 id="不通过hub，直接分享images-要求相同系统"><a href="#不通过hub，直接分享images-要求相同系统" class="headerlink" title="不通过hub，直接分享images (要求相同系统)"></a><a href="https://stackoverflow.com/a/62176367" target="_blank" rel="noopener">不通过hub，直接分享images (要求相同系统)</a></h2><p><del>如果跨系统，<a href="https://stackoverflow.com/questions/69054921/docker-on-mac-m1-gives-the-requested-images-platform-linux-amd64-does-not-m" target="_blank" rel="noopener">则build image 时进行说明</a></del></p><p>用docker images 查看当前images</p><p>然后：</p><pre><code>docker save app:1.0 | gzip | DOCKER_HOST=ssh://user@remotehost docker load</code></pre><p>或者分开写：</p><ul><li>docker save [image] -o file.tar</li><li>用scp 或者 sftp把 tar文件传给其他服务器</li><li>docker load -i file.tar</li></ul>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3D数据分析与处理</title>
      <link href="/2022/04/23/ji-suan-ji-ji-chu/3d-shu-ju-fen-xi-yu-chu-li/"/>
      <url>/2022/04/23/ji-suan-ji-ji-chu/3d-shu-ju-fen-xi-yu-chu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="open3D"><a href="#open3D" class="headerlink" title="open3D"></a>open3D</h1><ul><li><a href="https://www.youtube.com/watch?v=Rsh4poEpahI" target="_blank" rel="noopener">YT Introduction：Open3D: A Modern Open-Source Library for 3D Data Processing</a></li><li><a href="https://github.com/isl-org/Open3D" target="_blank" rel="noopener">Open3D: A Modern Library for 3D Data Processing</a></li><li><a href="https://github.com/isl-org/Open3D-ML" target="_blank" rel="noopener">Open3D-ML</a></li><li><a href="https://www.youtube.com/watch?v=zF3MreN1w6c&list=PLkmvobsnE0GEZugH1Di2Cr_f32qYkv7aN" target="_blank" rel="noopener">Open3D Python Tutorial，YT</a><ul><li><a href="https://github.com/niconielsen32/ComputerVision" target="_blank" rel="noopener">相关代码</a></li></ul></li><li><a href="https://blog.csdn.net/weixin_46098577/article/details/120167360" target="_blank" rel="noopener">Open3D 点云数据处理基础（Python版）</a></li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><ul><li><a href="https://panjinquan.blog.csdn.net/article/details/121301896?spm=1001.2101.3001.6650.7&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-7.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-7.pc_relevant_aa&utm_relevant_index=12" target="_blank" rel="noopener">双目三维重建系统(双目标定+立体校正+双目测距+点云显示)Python</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C和CPP内存分配</title>
      <link href="/2022/01/15/c/c-he-cpp-nei-cun-fen-pei/"/>
      <url>/2022/01/15/c/c-he-cpp-nei-cun-fen-pei/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言内存分配及释放"><a href="#C语言内存分配及释放" class="headerlink" title="C语言内存分配及释放"></a>C语言内存分配及释放</h1><ul><li>释放内存后，要把指针置为NULL，<a href="https://www.youtube.com/watch?v=xDVC3wKjS64" target="_blank" rel="noopener">防止内存泄漏</a></li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/01/15/n8qsROukxZGa4Wp.png" alt="20220115181505"><br><img src="https://s2.loli.net/2022/01/15/lM2qYJOdyTnvifS.png" alt="20220115181523"><br><img src="https://s2.loli.net/2022/01/15/Uuo2wB5WhsP9Fdz.png" alt="20220115181750"><br><img src="https://s2.loli.net/2022/01/15/iGNcBLTfxH2O4Rh.png" alt="20220115181815"><br>如果不释放，heap中太满了，则*ptr中存放null<br><img src="https://s2.loli.net/2022/01/15/S652lPDVn3uCcWo.png" alt="20220115181950"><br><img src="https://s2.loli.net/2022/01/15/Dhb4VQ8Fpjmq9C1.png" alt="20220115182140"><br>用free（指针名）释放内存<br><img src="https://s2.loli.net/2022/01/15/z14NQlOaniYGUtk.png" alt="20220115184822"><br><img src="https://s2.loli.net/2022/01/15/x2fw79KA6M1R8eG.png" alt="20220115185137"></p><h1 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h1><p><img src="https://s2.loli.net/2022/01/15/hyVP4j2CFp8Ruxv.png" alt="20220115191534"><br><img src="https://s2.loli.net/2022/01/15/jcrqJfbIDA8hgWx.png" alt="20220115191608"><br><img src="https://s2.loli.net/2022/01/15/a7mTL1RCoP9wSWM.png" alt="20220115191703"></p><h1 id="C-内存分配及释放"><a href="#C-内存分配及释放" class="headerlink" title="C++内存分配及释放"></a>C++内存分配及释放</h1><p><img src="https://s2.loli.net/2022/01/15/4YF2sdUkKroQGlD.png" alt="20220115191342"></p><h1 id="C-智能指针"><a href="#C-智能指针" class="headerlink" title="C++智能指针"></a>C++智能指针</h1><h2 id="教程1：-SMART-POINTERS-in-C"><a href="#教程1：-SMART-POINTERS-in-C" class="headerlink" title="教程1： SMART POINTERS in C++ "></a>教程1： <a href="https://www.youtube.com/watch?v=e2LMAgoqY_k" target="_blank" rel="noopener">SMART POINTERS in C++ </a></h2><ul><li>unique ptr<br><img src="https://s2.loli.net/2022/01/15/lX1bPBGQekvxqwn.png" alt="20220115205255"><br><img src="https://s2.loli.net/2022/01/15/gaJRI4CPxy6Yuo3.png" alt="20220115205402"><br><img src="https://s2.loli.net/2022/01/15/xsjfdMW5l8tQZX4.png" alt="20220115205544"><br><img src="https://s2.loli.net/2022/01/15/A4tQODjiwyuvsYe.png" alt="20220115205652"></li><li>shared ptr<br><img src="https://s2.loli.net/2022/01/15/oBmp1dLjzZ9UYqN.png" alt="20220115210022"></li></ul><p>在离开原来的scope后，原来shared的指针计数就自动减少了<br><img src="https://s2.loli.net/2022/01/15/yozRJGUBbcFsfq5.png" alt="20220115210345"></p><h2 id="教程2"><a href="#教程2" class="headerlink" title="教程2"></a>教程2</h2><p><img src="https://s2.loli.net/2022/01/15/xVDESkOBGrfmQKc.png" alt="20220115193109"></p><ul><li><a href="https://www.youtube.com/watch?v=EyfE0-lfO4A" target="_blank" rel="noopener">unique pointer</a></li></ul><p><img src="https://s2.loli.net/2022/01/15/hVLkeq9HDnRplvM.png" alt="20220115193804"></p><p><img src="https://s2.loli.net/2022/01/15/Qjh4Ce9PFE7T6AI.png" alt="20220115201305"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"demo1.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span>  std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Foo Dest"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    如果不加 delete f;，则存在内存泄漏，即不会调用析构函数</span>    Foo <span class="token operator">*</span>f<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>f<span class="token operator">-</span><span class="token operator">></span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">delete</span> f<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"======"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    采用了智能指针，不存在内存泄漏</span>    unique_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方式1</span>    unique_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> p2<span class="token operator">=</span>make_unique<span class="token operator">&lt;</span>Foo<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方式2</span>    Foo <span class="token operator">*</span>f1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//方式3</span>    unique_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span> <span class="token function">p3</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>p1<span class="token operator">-</span><span class="token operator">></span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用1</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用2</span>    cout<span class="token operator">&lt;&lt;</span>p3<span class="token operator">-</span><span class="token operator">></span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"======"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    Foo <span class="token operator">*</span>f2<span class="token operator">=</span>p2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Foo <span class="token operator">*</span>f3<span class="token operator">=</span>p2<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>f2<span class="token operator">-</span><span class="token operator">></span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>f3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"======"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    p2<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>f3<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>f2<span class="token operator">-</span><span class="token operator">></span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//10</span><span class="token comment" spellcheck="true">//Foo Dest</span><span class="token comment" spellcheck="true">//======</span><span class="token comment" spellcheck="true">//10</span><span class="token comment" spellcheck="true">//20</span><span class="token comment" spellcheck="true">//30</span><span class="token comment" spellcheck="true">//======</span><span class="token comment" spellcheck="true">//20</span><span class="token comment" spellcheck="true">//20</span><span class="token comment" spellcheck="true">//======</span><span class="token comment" spellcheck="true">//20</span><span class="token comment" spellcheck="true">//Foo Dest</span><span class="token comment" spellcheck="true">//Foo Dest</span><span class="token comment" spellcheck="true">//Foo Dest</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://www.youtube.com/watch?v=-dREJCf2ve4" target="_blank" rel="noopener">Shared Pointer </a></li></ul><p><img src="https://s2.loli.net/2022/01/15/eHrWb8SFzlEt2vO.png" alt="20220115203238"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"demo1.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span>  std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Foo Dest"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    shared_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span><span class="token function">sp</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>sp<span class="token operator">-</span><span class="token operator">></span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>sp<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"======"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    shared_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span>sp1<span class="token operator">=</span>sp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果用赋值，则计数增加</span>    cout<span class="token operator">&lt;&lt;</span>sp<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>sp1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"======"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    shared_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span><span class="token operator">&amp;</span>sp2<span class="token operator">=</span>sp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果传引用，则计数不会有影响</span>    cout<span class="token operator">&lt;&lt;</span>sp2<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"======"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果传指针，则计数不会有影响</span>    shared_ptr<span class="token operator">&lt;</span>Foo<span class="token operator">></span><span class="token operator">*</span>sp3<span class="token operator">=</span><span class="token operator">&amp;</span>sp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果传引用，则计数不会有影响</span>    cout<span class="token operator">&lt;&lt;</span>sp3<span class="token operator">-</span><span class="token operator">></span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//100</span><span class="token comment" spellcheck="true">//1</span><span class="token comment" spellcheck="true">//======</span><span class="token comment" spellcheck="true">//2</span><span class="token comment" spellcheck="true">//2</span><span class="token comment" spellcheck="true">//======</span><span class="token comment" spellcheck="true">//2</span><span class="token comment" spellcheck="true">//======</span><span class="token comment" spellcheck="true">//2</span><span class="token comment" spellcheck="true">//Foo Dest</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多线程中使用<br><img src="https://s2.loli.net/2022/01/15/MbJ7ClTYmfzScaH.png" alt="20220115204704"><br><img src="https://s2.loli.net/2022/01/15/J4YIyEsztjQFSPn.png" alt="20220115204932"></p><h2 id="在数组中使用"><a href="#在数组中使用" class="headerlink" title="在数组中使用"></a>在数组中使用</h2><blockquote><p>unique_ptr 的数组智能指针，没有<em> 和 -&gt; 操作，但支持下标操作[]&gt;<br>shared_ptr 的数组智能指针，有 </em> 和 -&gt; 操作，但不支持下标操作[]，只能通过 get() 去访问数组的元素&gt;<br>shared_ptr 的数组智能指针，必须要自定义deleter</p></blockquote><ul><li>unique_ptr</li></ul><p><a href="https://www.cnblogs.com/xiaojianliu/p/12704192.html" target="_blank" rel="noopener">数组与智能指针</a></p><ul><li>shared_ptr</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">define</span> N 2</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// allocate N int memory blocks</span>    <span class="token keyword">int</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//   分配一片新的内存空间，并对其赋值</span>    <span class="token keyword">int</span><span class="token operator">*</span> ptr1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr1<span class="token operator">=</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里是浅拷贝</span>    <span class="token comment" spellcheck="true">// print the values in allocated memories</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ptr[i] and *(ptr+i) can be used interchangeably</span>        cout <span class="token operator">&lt;&lt;</span> ptr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span><span class="token operator">*</span><span class="token punctuation">(</span>ptr1<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    使用 shared_ptr 指针，然后用*(ptr2.get()+i) 取里面的元素</span>    std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ptr2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>default_delete<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr2<span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//</span>        cout <span class="token operator">&lt;&lt;</span> ptr2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 或者 cout &lt;&lt; *(ptr2.get()+i) &lt;&lt; endl;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，使用shared_ptr过程中有<a href="https://zhuanlan.zhihu.com/p/78123220" target="_blank" rel="noopener">几点需要注意</a>:构造shared_ptr的方法，如下示例代码所示，我们尽量使用shared_ptr构造函数或者make_shared的方式创建shared_ptr，禁止使用裸指针赋值的方式，这样会使shared_ptr难于管理指针的生命周期。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 使用裸指针赋值构造，不推荐，裸指针被释放后，shared_ptr就野了，不能完全控制裸指针的生命周期，失去了智能指针价值</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>sp <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token keyword">delete</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// sp将成为野指针，使用sp将crash</span><span class="token comment" spellcheck="true">// 将裸指针作为匿名指针传入构造函数，一般做法，让shared_ptr接管裸指针的生命周期，更安全</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">sp1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用make_shared，推荐做法，更符合工厂模式，可以连代码中的所有new，更高效；方法的参数是用来初始化模板类</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>sp2 <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOF</title>
      <link href="/2021/12/26/c/tof/"/>
      <url>/2021/12/26/c/tof/</url>
      
        <content type="html"><![CDATA[<h1 id="Fixed-Point"><a href="#Fixed-Point" class="headerlink" title="Fixed Point"></a>Fixed Point</h1><p><a href="https://www.youtube.com/watch?v=YXKDjVcCWyE" target="_blank" rel="noopener">Fixed Point Numbers</a><br><img src="https://s2.loli.net/2021/12/26/KbPmHQviIzh7SyD.png" alt="20211226215546"><br><img src="https://s2.loli.net/2021/12/26/O9PSoGFY3Ua8RBE.png" alt="20211226215602"><br><img src="https://s2.loli.net/2021/12/26/JXZI8rcLDdzf3PQ.png" alt="20211226215613"><br><img src="https://s2.loli.net/2021/12/26/udSeaQk6xEKnOmG.png" alt="20211226215624"><br><img src="https://s2.loli.net/2021/12/26/Qkt1T45nIHgpbrZ.png" alt="20211226215635"><br><img src="https://s2.loli.net/2021/12/26/ZP5YCxKJdomHO8w.png" alt="20211226215705"></p><p><a href="https://www.youtube.com/watch?v=f9dCo6SlCFU" target="_blank" rel="noopener">Time-of-Flight (ToF) Tips: Tips to Boost 3D Performance and Cut Integration Time &amp; Cost</a><br><img src="https://s2.loli.net/2021/12/26/LD7gCrGVKqOJXcE.png" alt="20211226215816"><br><img src="https://s2.loli.net/2021/12/26/jukJHSzALnmsDME.png" alt="20211226215829"></p><p><a href="https://www.youtube.com/watch?v=gc1Nl3mmCuY" target="_blank" rel="noopener">Floating Point Numbers</a><br><img src="https://s2.loli.net/2021/12/26/u13qTJspWx8Uwl4.png" alt="20211226215909"><br><img src="https://s2.loli.net/2021/12/26/yYXOtxuJg2zrlp7.png" alt="20211226215920"><br><img src="https://s2.loli.net/2021/12/26/o1jY3xPchZtlLCi.png" alt="20211226220043"><br><img src="https://s2.loli.net/2021/12/26/6E7mzgqjMo4WJVy.png" alt="20211226220102"></p><p><a href="https://www.youtube.com/watch?v=QFlbvSeBkwY" target="_blank" rel="noopener">Fixed Point Binary Fractions</a></p><p><img src="https://s2.loli.net/2021/12/26/w8RL2SXIkeZDNOB.png" alt="20211226220142"><br><img src="https://s2.loli.net/2021/12/26/lGdbzXqTYpvDkNi.png" alt="20211226220157"><br><img src="https://s2.loli.net/2021/12/26/eIwxifZXjRS74OF.png" alt="20211226220211"></p><h1 id="Jitter"><a href="#Jitter" class="headerlink" title="Jitter"></a>Jitter</h1><p>抖动是对信号时域变化的测量结果，它从本质上描述了信号周期距离其理想值的偏离程度<br><img src="https://s2.loli.net/2022/05/16/zdqnEWOR2weDG5c.png" alt="20220516000447"></p><h2 id="周期抖动（period-jitter）"><a href="#周期抖动（period-jitter）" class="headerlink" title="周期抖动（period jitter）"></a>周期抖动（period jitter）</h2><p>周期抖动是时钟信号的实际周期长度与理想周期长度之间的偏差。通过统计大量周期的长度，可提供这些时钟周期的平均值、最大最小值、标准差等信息</p><p><img src="https://s2.loli.net/2022/05/15/HKSxarnZRDMliN5.png" alt="20220515234038"></p><h2 id="周期间抖动（cycle-cycle-jitter）"><a href="#周期间抖动（cycle-cycle-jitter）" class="headerlink" title="周期间抖动（cycle-cycle jitter）"></a>周期间抖动（cycle-cycle jitter）</h2><p>周期间抖动测量任意两个相邻时钟或数据的周期宽度的变化，该指标在分析锁相环性质时具有显著的意义<br><img src="https://s2.loli.net/2022/05/15/VRYckhBzIUOpP8G.png" alt="20220515234059"></p><h2 id="时间间隔误差（timer-interval-error，TIE）"><a href="#时间间隔误差（timer-interval-error，TIE）" class="headerlink" title="时间间隔误差（timer interval error，TIE）"></a>时间间隔误差（timer interval error，TIE）</h2><p>时间间隔误差测量时钟或数据的每个活动边沿与其理想位置的偏差。TIE说明了周期抖动在各个时期的累计效应 </p><p><img src="https://s2.loli.net/2022/05/15/ZQIlPJbke2grMBo.png" alt="20220515234129"><br><img src="https://s2.loli.net/2022/05/15/FvH2TMQ6JKNawL8.png" alt="20220515233917"></p><h1 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h1><ul><li>延迟锁定环（Delay Lock Loop，DLL）是一种由延迟线控制的数字电路，用来自动调节一路信号的延时。其主要是用于产生一个精准的时间delay，该delay是对输入信号的周期做精确的等分出来的, 比如一个输入信号周期为20ns, 可以设计出等分10份的delay, 即最小2ns的delay.</li><li>输入信号的jitter，frequency 漂移会影响DLL</li></ul><p><img src="https://s2.loli.net/2022/05/16/7yA9NoJfHDvnSrl.png" alt="20220516001727"></p><ul><li>EPC标定盒子的目的是为相机屏蔽环境光，并在传感器前面提供一个光学参考平面。这是一种为成像器创建平场照明的简单方法，这对于高质量校准非常重要</li><li>能够构建一个延迟锁定环 (DLL)，它可以连续跟踪光信号的相位，因此可以在飞行时间设置中提供几乎瞬时的距离测量</li></ul><h1 id="标定"><a href="#标定" class="headerlink" title="标定"></a>标定</h1><ul><li><p>EPC</p><ul><li>通过DLL单元的等间隔delay时间模拟距离的变化</li></ul></li><li><p>Sony</p><ul><li>等间隔调整物理距离 &lt; - &gt; 等间隔调整收发端的时间</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP代码结构</title>
      <link href="/2021/12/26/c/cpp-dai-ma-jie-gou/"/>
      <url>/2021/12/26/c/cpp-dai-ma-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h1><h2 id="head-file"><a href="#head-file" class="headerlink" title="head file"></a>head file</h2><p><a href="https://www.youtube.com/watch?v=5UMHbzZGQuE" target="_blank" rel="noopener">Header files and libraries (Kevin Lynch)</a><br><a href="https://www.youtube.com/watch?v=qaGzc56Rekg" target="_blank" rel="noopener">What are header files in C++ ( PROGRAMMING TUTORIAL for beginners)</a><br><img src="https://s2.loli.net/2021/12/26/AEbDW5o3TPG2ujr.png" alt="20211226210828"><br><img src="https://s2.loli.net/2021/12/26/APwdGKp4RFY5uJc.png" alt="20211226210857"><br><img src="https://s2.loli.net/2021/12/26/HathKkSPmg36JjT.png" alt="20211226210915"></p><ul><li>各组配套的函数都是相互独立的，只有在link后，才生成可执行文件</li><li>头文件用于声明，源文件用于实现该声明 （两者的文件名甚至可以不对应，为编程规范，文件名应该互相对应）</li><li>源文件在调用其他文件的函数时，只需要包含相应的头文件即可（在编译时，只需找全它所需要的内容）。编译好后，在运行时，才和.cpp（实现）进行配套</li></ul><p>示例：<br>头文件 Pizza.h：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> CPP_PIZZA_H</span><span class="token macro property">#<span class="token directive keyword">define</span> CPP_PIZZA_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">void</span> <span class="token function">menu</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string myMenu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//CPP_PIZZA_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的源文件 MyPizza.cpp:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Pizza.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">void</span> <span class="token function">menu</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string myMenu<span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"this is my menu: "</span><span class="token operator">&lt;&lt;</span>myMenu<span class="token operator">&lt;&lt;</span>std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件demo1.cpp对其进行调用:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Pizza.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Hello World"</span><span class="token operator">&lt;&lt;</span>std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token function">menu</span><span class="token punctuation">(</span><span class="token string">"fruit pizza!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Hello World</span><span class="token comment" spellcheck="true">//this is my menu: fruit pizza!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的CMakeLists.txt (cpp文件在同一目录下):</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">cmake_minimum_required</span><span class="token punctuation">(</span>VERSION <span class="token number">3.20</span><span class="token punctuation">)</span><span class="token function">project</span><span class="token punctuation">(</span>CPP<span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>CMAKE_CXX_STANDARD <span class="token number">14</span><span class="token punctuation">)</span><span class="token function">add_executable</span><span class="token punctuation">(</span>demo1 demo1<span class="token punctuation">.</span>cpp MyPizza<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：虽然可以把<code>#include &lt;iostream&gt;</code>写到Pizza.h中，这样源文件MyPizza.cpp和demo1.cpp都可省略<code>#include &lt;iostream&gt;</code> （因为通过<code>#include &quot;Pizza.h&quot;</code> 也加载了<code>#include &lt;iostream&gt;</code>），但本着互相独立的原则，尽量不要这样写<br><a href="https://www.runoob.com/w3cnote/cpp-header.html" target="_blank" rel="noopener">理解 C++ 中的头文件和源文件的作用</a><br><a href="https://blog.csdn.net/qq_30815237/article/details/88948632" target="_blank" rel="noopener">C++头文件和源文件，编译过程</a><br><a href="https://blog.csdn.net/K346K346/article/details/48877773" target="_blank" rel="noopener">C/C++ 头文件的作用和用法</a></p><ul><li><a href="https://blog.csdn.net/qq_33530388/article/details/60138971" target="_blank" rel="noopener">头文件与库文件的区别</a><ul><li>在编程过程中，程序代码往往被拆成很多部分，每部分放在一个独立的源文件中，而不是将所有的代码放在一个源文件中。考虑一个简单的小例子：程序中有两个函数main()和abc()。main()函数位于main.cpp，abc()函数位于abc.cpp，main()函数中调用abc()函数。在编译阶段，由于编译是对单个文件进行编译，所以编译main.cpp时，编译器不知道是否存在abc()函数以及abc()调用是否正确，因此需要头文件辅助。运行时，编译器不知道abc的用法是否正确（因为abc在另一个文件abc.cpp中），只有借助头文件中的函数声明来判断。对main.cpp进行编译时，不会涉及abc.cpp文件，只会涉及main.cpp 和abc.h（因为abc.h被include）文件。</li><li>库文件中包含一系列的子程序。例如abc.cpp 源文件中实现了abc()函数，我们假设abc()函数是包含重要算法的函数，我们需要将abc()函数提供给客户使用，但是不希望客户看到算法源代码。为了达到这一目的，我们可以将abc.cpp编译程库文件，库文件是二进制的，在库文件中是看不到原始的源代码的。库和可执行文件的区别是，库不是独立程序，他们是向其他程序提供服务的代码。 当然使用库文件的好处不仅仅是对源代码进行保密，使用库文件还可以减少重复编译的时间，增强程序的模块化。将库文件连接到程序中，有两种方式，一种是静态连接库，另一种是动态连接库。</li></ul></li></ul></blockquote><h2 id="Compiling-assembling-and-linking"><a href="#Compiling-assembling-and-linking" class="headerlink" title="Compiling, assembling, and linking"></a><a href="https://www.youtube.com/watch?v=N2y6csonII4" target="_blank" rel="noopener">Compiling, assembling, and linking</a></h2><p><img src="https://s2.loli.net/2021/12/26/ZCFU3PmkMI2V96r.png" alt="20211226215003"><br><img src="https://s2.loli.net/2021/12/26/4NwbpfOi7REDdJI.png" alt="20211226215028"></p><h2 id="libraries"><a href="#libraries" class="headerlink" title="libraries"></a>libraries</h2><p><a href="https://www.youtube.com/watch?v=a5kUr-u2UNo" target="_blank" rel="noopener">C++ Libraries For Beginners</a></p><p><img src="https://s2.loli.net/2021/12/27/gAokXtbCKdWMqcT.png" alt="20211227001032"><br>但是这样调用Graphics会很花时间，而且别人的Graphics部分可能会有隐私保护（别人不想把实现过程暴露给你），于是生成库文件.dll（常放于bin文件夹）/.lib（常放于lib文件夹）供你调用：<br><img src="https://s2.loli.net/2021/12/26/oFvugUiSW7alkV6.png" alt="20211226235659"><br><img src="https://s2.loli.net/2021/12/26/8rSscYkGwR4iEWp.png" alt="20211226235901"><br><img src="https://s2.loli.net/2021/12/27/XYA82Oxi5lRQmdo.png" alt="20211226235959"><br><img src="https://s2.loli.net/2021/12/27/Eyjo48afivzXpl6.png" alt="20211227000643"><br><img src="https://s2.loli.net/2021/12/27/wHKkgcJL8mpq53W.png" alt="20211227000557"><br><img src="https://s2.loli.net/2021/12/27/xAm2iJ8nfX1vkHe.png" alt="20211227000518"><br><img src="https://s2.loli.net/2021/12/27/MHIsS72GB6zku8d.png" alt="20211227000533"><br><img src="https://s2.loli.net/2021/12/26/rHLvCbidSTQa2MJ.png" alt="20211226215145"><br><img src="https://s2.loli.net/2021/12/26/cWAfTQsMjdw4uhl.png" alt="20211226215157"><br><img src="https://s2.loli.net/2021/12/27/ciUyR9zZvNTVru2.png" alt="20211227000844"></p><h2 id="CMakeList-txt"><a href="#CMakeList-txt" class="headerlink" title="CMakeList.txt"></a>CMakeList.txt</h2><h3 id="Modern-Simple-CMake-Tutorial"><a href="#Modern-Simple-CMake-Tutorial" class="headerlink" title="Modern Simple CMake Tutorial"></a><a href="https://www.youtube.com/watch?v=mKZ-i-UfGgQ" target="_blank" rel="noopener">Modern Simple CMake Tutorial</a></h3><blockquote><p><a href="https://codevion.github.io/#!cpp/cmake.md" target="_blank" rel="noopener">对应文档：Modern Simple CMake Tutorial</a><br><a href="https://github.com/dmonopoly/gtest-cmake-example" target="_blank" rel="noopener">关于gtest的使用示例：gtest-cmake-example</a><br>其他资料：</p><ul><li><a href="https://cliutils.gitlab.io/modern-cmake/" target="_blank" rel="noopener">详细的例子及使用：An Introduction to Modern CMake</a></li><li><a href="https://www.jetbrains.com/help/clion/quick-cmake-tutorial.html" target="_blank" rel="noopener">CLion：Quick CMake tutorial</a></li><li><a href="https://www.jetbrains.com/help/clion/creating-google-test-run-debug-configuration-for-test.html" target="_blank" rel="noopener">CLion：Google Test tutorial</a></li></ul></blockquote><ul><li><p>cmake 和 make<br>文件一开始只有main.cpp和CMakeList.txt；用<code>cmake .</code>可以根据CMakeList.txt生成中间文件<br>然后用<code>make</code>可以根据中间文件生成可执行文件<br><img src="https://s2.loli.net/2022/01/15/nCjUy2iPeuKxtSG.png" alt="20220115135712"><br>但是这样有些混乱，所以新建一个build文件夹，在里面进行这些操作：mkdir build -&gt; cmake .. -&gt; make</p></li><li><p>构建自定义库并链接到可执行文件中（方式1）<br>可以构建自己定义的库文件，然后在源文件中调用。目录结构如下：</p></li></ul><pre><code>include/└── demo1.hsrc/└── demo1.cppmain.cpp CMakeLists.txt</code></pre><p><img src="https://s2.loli.net/2022/01/15/o5NYSBWxQLaMVZX.png" alt="20220115153756"><br><img src="https://s2.loli.net/2022/01/15/Qm4aws67z1uS3KR.png" alt="20220115153821"><br><img src="https://s2.loli.net/2022/01/15/LRYyE2dzNeWgqAw.png" alt="20220115153845"><br>对应的CMakeList.txt文件为：</p><pre><code>cmake_minimum_required(VERSION 3.20)project(project1)set(CMAKE_CXX_STANDARD 14)set(CMAKE_CXX_STANDARD_REQUIRED ON)#通过demo1.cpp构建mylib库add_library(mylib STATIC src/demo1.cpp)#这个库文件要包含include文件夹目录中的头文件target_include_directories(mylib PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)# 构建可执行文件add_executable(hello main.cpp)#该可执行文件要链接到上面的库文件target_link_libraries(hello PUBLIC mylib)</code></pre><ul><li>构建自定义库并链接到可执行文件中（方式2）<br>可以把自己构建的库文件进一步整合，让外面的CMakeList.txt文件用add_subdirectory(文件夹名)的方式添加库。这时需要在这个子文件夹中添加一个CMakeList.txt文件</li></ul><pre><code>MyLibDir├── CMakeLists.txt├── include│   └── demo1.h└── src    └── demo1.cppmain.cpp CMakeLists.txt </code></pre><p>MyLibDir文件夹中的CMakeList.txt写为</p><pre><code>#通过demo1.cpp构建mylib库add_library(mylib STATIC src/demo1.cpp)#这个库文件要包含include文件夹目录中的头文件target_include_directories(mylib PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)</code></pre><p>外面的CMakeList.txt写为</p><pre><code>cmake_minimum_required(VERSION 3.20)project(project1)set(CMAKE_CXX_STANDARD 14)set(CMAKE_CXX_STANDARD_REQUIRED ON)add_subdirectory(MyLibDir) # 添加了这个目录# 构建可执行文件add_executable(hello main.cpp)#该可执行文件要链接到上面的库文件target_link_libraries(hello PUBLIC mylib)</code></pre><ul><li>当有多个源文件时</li></ul><p><img src="https://s2.loli.net/2022/01/15/49nihWrvb5xcPK7.png" alt="20220115162513"><br>示例：<br><img src="https://s2.loli.net/2022/01/15/YFyZ8Db9pMX1RKc.png" alt="20220115162655"></p><p>可行方式1:逐个添加<br><img src="https://s2.loli.net/2022/01/15/9X3CqvcWOyQo42x.png" alt="20220115162919"><br>可行方式2:扫描文件夹，添加多个<br><img src="https://s2.loli.net/2022/01/15/7WutcyDzUJH6ToB.png" alt="20220115163500"></p><ul><li>调用外部的库（已经通过命令行安装好了）</li></ul><p><img src="https://s2.loli.net/2022/01/15/ZDObTwsPU1AgMoB.png" alt="20220115161346"><br>示例：<br><img src="https://s2.loli.net/2022/01/15/a6UFI4zZhNMyOdi.png" alt="20220115161742"></p><ul><li>调用外部的库（手动安装）<br><img src="https://s2.loli.net/2022/01/15/YhArsz9G7EZR62b.png" alt="20220115162026"> </li></ul><p>示例：<br><img src="https://s2.loli.net/2022/01/15/U2xbnlVEfKkmrX8.png" alt="20220115162325"></p><h3 id="cmakelist-txt-工程示例"><a href="#cmakelist-txt-工程示例" class="headerlink" title="cmakelist.txt 工程示例"></a><a href="https://github.com/SFUMECJF/cmake-examples-Chinese" target="_blank" rel="noopener">cmakelist.txt 工程示例</a></h3><p><img src="https://s2.loli.net/2022/07/18/T8XCQdeFw17Z36t.png" alt="20220718225133"></p><ul><li><a href="https://cliutils.gitlab.io/modern-cmake/" target="_blank" rel="noopener">An Introduction to Modern CMake</a></li><li><a href="https://www.jianshu.com/p/cdd6e56c2422" target="_blank" rel="noopener">Cmake命令之project介绍</a>：在调用project命令指定当前工程名字的同时，cmake内部会为一些变量赋值</li><li><a href="https://zhuanlan.zhihu.com/p/102955723" target="_blank" rel="noopener">CMake之install方法的使用</a></li></ul><h2 id="C和C-的混编"><a href="#C和C-的混编" class="headerlink" title="C和C++的混编"></a>C和C++的混编</h2><p><a href="https://www.youtube.com/watch?v=m5Y3Ghv2PUE&t=411s" target="_blank" rel="noopener">extern “C” In C++</a></p><h3 id="C-中调用C"><a href="#C-中调用C" class="headerlink" title="C++中调用C"></a>C++中调用C</h3><ul><li>方式1: 简单方式 - 在.cpp中用<code>extern &quot;C&quot; {}</code> 包裹.c对应的.h头文件<br><img src="https://s2.loli.net/2022/01/15/932IratSyEcs4ZT.png" alt="20220115230642"><br>在C++中调用C函数,需要在.cpp中include用 <code>extern &quot;C&quot; {}</code>把.c对应的头文件包一下，告诉编译器，那部分用C的规则去调用C函数<br><img src="https://s2.loli.net/2022/01/15/hBng1FRNplkmSPW.png" alt="20220115211825"><br><img src="https://s2.loli.net/2022/01/15/3Z1rejkGh5OJfcg.png" alt="20220115211839"></li></ul><p>如果直接混编，则会报错：undefiend reference to …<br><img src="https://s2.loli.net/2022/01/15/7jBpNRtfbuI3TAP.png" alt="20220115215150"><br><img src="https://s2.loli.net/2022/01/15/3s2oC6zlcFw5xiA.png" alt="20220115214931"><br>所以需要把c的头文件包一下，才会正确：<br> <img src="https://s2.loli.net/2022/01/15/SOXz6knwBgVflqi.png" alt="20220115214631"></p><ul><li><p>方式2:通用方式 - 直接在.c对应的.h头文件中进行包裹。也是告诉编译器以C语言的命名方式去加载这些符号。<br>这样的话，不管是外面的.c还是.cpp调用这个当前.c中的函数，都OK<br><img src="https://s2.loli.net/2022/01/15/DOAsxUJYkXHRuzF.png" alt="20220115230835"></p><h3 id="C中调用C"><a href="#C中调用C" class="headerlink" title="C中调用C++"></a>C中调用C++</h3></li><li><p>需要把.cpp对应的.h头文件包用宏包裹一下，告诉编译器这部分C++代码用C的规则编译<br><img src="https://s2.loli.net/2022/01/15/foeZRGrXhS68Ttj.png" alt="20220115234912"><br><img src="https://s2.loli.net/2022/01/15/AeJ1Lfi4uDImq8p.png" alt="20220115234956"></p></li></ul><h3 id="统一规则"><a href="#统一规则" class="headerlink" title="统一规则"></a>统一规则</h3><p>不管是C中调用C++，还是C++中调用C，为了实现通用性，可以把.c和.cpp对应的.h头文件用下面的宏包裹起来：</p><p><code>example.h</code>头文件</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> CPP_PIZZA_H</span><span class="token macro property">#<span class="token directive keyword">define</span> CPP_PIZZA_H</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token keyword">extern</span> <span class="token string">"C"</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// </span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//CPP_PIZZA_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整示例：main.cpp中调用demo1.cpp和demo2.c源文件中的函数，其中demo2.c中调用demo1.cpp中的函数<br><img src="https://s2.loli.net/2022/01/15/UswltiZV9uW5gPA.png" alt="20220115235949"></p><pre><code>I am in C++ file======I am in C fileI am in C++ file, here, I am called by .c file</code></pre><p><img src="https://s2.loli.net/2022/01/16/aXwoM9H5NOIEKVZ.png" alt="20220116000014"><br><img src="https://s2.loli.net/2022/01/16/IAuJ8M3CFv9or4B.png" alt="20220116000030"><br><img src="https://s2.loli.net/2022/01/16/dEQRcZaeOb3NxwM.png" alt="20220116000054"><br><img src="https://s2.loli.net/2022/01/16/i4IbA35YEMOkP8l.png" alt="20220116000148"><br><img src="https://s2.loli.net/2022/01/16/ZmeUlYkPvo8TQEA.png" alt="20220116000243"><br><img src="https://s2.loli.net/2022/01/16/pTA6LrQUKfRV2GF.png" alt="20220116000400"></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/19/labuladong/dfs-suan-fa-miao-sha-wu-dao-dao-yu-wen-ti/"/>
      <url>/2021/10/19/labuladong/dfs-suan-fa-miao-sha-wu-dao-dao-yu-wen-ti/</url>
      
        <content type="html"><![CDATA[<hr><p>title: DFS算法秒杀五道岛屿问题<br>top: false<br>cover: false<br>toc: true<br>mathjax: true<br>date: 2021-10-18 17:43:22<br>password:<br>summary:<br>tags: labuladong</p><h2 id="categories-LeetCode"><a href="#categories-LeetCode" class="headerlink" title="categories: LeetCode"></a>categories: LeetCode</h2><h1 id="200-岛屿数量"><a href="#200-岛屿数量" class="headerlink" title="200. 岛屿数量"></a><a href="https://leetcode-cn.com/problems/number-of-islands/" target="_blank" rel="noopener">200. 岛屿数量</a></h1><p>利用dfs深度优先搜索解决：</p><ul><li>心里先想象出一棵搜索树</li><li>在节点处判断：<ul><li>如果满足条件（即：该节点没有超过二维数组范围且是岛屿（用1表示）），则把该点置为水（用0表示,表示淹没该节点）以避免重复搜索。并在此节点的基础上，继续向搜索树下面（下面的选择有上下左右四个分支）搜索</li><li>若不满足条件，则返回</li></ul></li><li>一开始时，搜索树的入口：grid[i][j]处若为1，则进入搜索树。用count来计数，每进入一次树，count+=1</li><li>递归函数<code>dfs()</code>的功能：找到一块陆地，并以这块陆地为中心（先淹没当前陆地），然后尽可能地淹没它周围的陆地</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numIslands</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># gird[i][j] 点若是岛屿，则把该点置0，避免后续重复搜索到。然后从该点的上下左右继续搜</span>            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">and</span>  grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span>                <span class="token comment" spellcheck="true"># 淹没周围陆地</span>                dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>        count <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 每进入一次搜索树，cont+=1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 搜索树的入口</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                    dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>                    count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    函数功能：找到一小块陆地，并从这块陆地开始，淹没周围其他陆地</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        找到了陆地</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 找到当前陆地，并淹没</span>            <span class="token comment" spellcheck="true">// 以当前节点为中心，继续淹没周围陆地</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 上</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 右</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token comment" spellcheck="true">// 相当于递归结束的条件</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">numIslands</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        遍历整个陆地</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                如果当前的这小块是陆地，则执行淹没操作，并把count+1</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="1254-统计封闭岛屿的数目"><a href="#1254-统计封闭岛屿的数目" class="headerlink" title="1254. 统计封闭岛屿的数目"></a><a href="https://leetcode-cn.com/problems/number-of-closed-islands/" target="_blank" rel="noopener">1254. 统计封闭岛屿的数目</a></h1><p>上题求岛屿的数量，也就是说，靠边的岛屿也算。而本题求封闭岛屿的数量，这时靠边的岛屿不算数。所以需在要上题的基础上，<strong>把靠边的岛屿排除掉（即淹没掉）</strong></p><p>与上一题不同的是，本题：</p><ul><li>0为陆地，1为水域，二维数组中保存的是int类型</li><li>先把靠边的岛屿淹没掉，然后进行for循环遍历</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//        先淹没四条边上的岛屿，因为四周的岛屿不算数</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">,</span>grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 淹没第0列相关的岛屿</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token number">-1</span> <span class="token punctuation">,</span>grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 淹没最后一列相关的岛屿</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 淹没第一行相关的岛屿</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>m<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 淹没最后一行相关的岛屿</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    函数功能：找到一小块陆地，并从这块陆地开始，淹没周围其他陆地</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        找到了陆地</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 找到当前陆地，并淹没</span>            <span class="token comment" spellcheck="true">// 以当前节点为中心，继续淹没周围陆地</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 上</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 右</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token comment" spellcheck="true">// 相当于递归结束的条件</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">closedIsland</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        先淹没四条边上的岛屿，因为四周的岛屿不算数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">,</span>grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 淹没第0列相关的岛屿</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token number">-1</span> <span class="token punctuation">,</span>grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 淹没最后一列相关的岛屿</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 淹没第一行相关的岛屿</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>m<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 淹没最后一行相关的岛屿</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        遍历整个陆地</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                如果当前的这小块是陆地，则执行淹没操作，并把count+1</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="1020-飞地的数量"><a href="#1020-飞地的数量" class="headerlink" title="1020. 飞地的数量"></a><a href="https://leetcode-cn.com/problems/number-of-enclaves/" target="_blank" rel="noopener">1020. 飞地的数量</a></h1><p>遇上一题类似的是，本题同样需要淹没四周的岛屿。本题统计封闭岛屿的面积<br>与上一题不同的是，本题</p><ul><li>0为水域，1为陆地</li><li>淹没四周的岛屿后，本题不再淹没里面的岛屿，而是统计它的面积</li></ul><p>所以在主函数签名中，当遍历整个陆地时，把上一题的</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//        遍历整个陆地</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                如果当前的这小块是陆地，则执行淹没操作，并把count+1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//        遍历整个陆地</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                如果当前的这小块是陆地，则执行淹没操作，并把count+1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不再淹没陆地，而是统计陆地的面积</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    函数功能：找到一小块陆地，并从这块陆地开始，淹没周围其他陆地</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        找到了陆地</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 找到当前陆地，并淹没</span>            <span class="token comment" spellcheck="true">// 以当前节点为中心，继续淹没周围陆地</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 上</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 右</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token comment" spellcheck="true">// 相当于递归结束的条件</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">numEnclaves</span><span class="token punctuation">(</span>vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        先淹没四周的岛屿，因为四周的岛屿不算数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 淹没第0列相关的岛屿</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 淹没最后一列相关的岛屿</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 淹没第一行相关的岛屿</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 淹没最后一行相关的岛屿</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        遍历整个陆地</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                如果当前的这小块是陆地，则执行淹没操作，并把count+1</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="695-岛屿的最大面积"><a href="#695-岛屿的最大面积" class="headerlink" title="695. 岛屿的最大面积"></a><a href="https://leetcode-cn.com/problems/max-area-of-island/" target="_blank" rel="noopener">695. 岛屿的最大面积</a></h1><p>本题计算岛屿的最大面积，则改写dfs函数即可。dfs函数不仅有淹没的功能，而且加上新的功能：在淹没过程中统计淹没的面积（给dfs函数设置返回值，记录每次淹没的陆地的个数）。</p><p>在主函数签名中，更新最大值即可。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    函数功能：找到一小块陆地，并从这块陆地开始，淹没周围其他陆地.同时统计淹没的面积</span>    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录此次淹没过程中，一共淹没的面积</span><span class="token comment" spellcheck="true">//        找到了陆地</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmp<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前是陆地，计数+1</span>            grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 找到当前陆地，并淹没</span>            <span class="token comment" spellcheck="true">// 以当前节点为中心，继续淹没周围陆地，并把淹没的面积统计起来</span>            <span class="token keyword">int</span> u<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 上</span>            <span class="token keyword">int</span> d<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下</span>            <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左</span>            <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 右</span>            <span class="token keyword">return</span> tmp<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>u<span class="token operator">+</span>d<span class="token operator">+</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回此次总的淹没面积</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token comment" spellcheck="true">// 相当于递归结束的条件</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">maxAreaOfIsland</span><span class="token punctuation">(</span>vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxVal<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 保存最大值</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        遍历整个陆地</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                如果当前的这小块是陆地，则执行淹没操作，并用dfs(i, j, grid)得到当前淹没的面积</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    maxVal<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxVal<span class="token punctuation">,</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 更新最大值</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="1905-统计子岛屿"><a href="#1905-统计子岛屿" class="headerlink" title="1905. 统计子岛屿"></a><a href="https://leetcode-cn.com/problems/count-sub-islands/" target="_blank" rel="noopener">1905. 统计子岛屿</a></h1><p>grid1表示为A ，grid2表示为B，则类别对应关系为</p><ul><li><p>B岛</p><ul><li>A岛 </li><li>A水  </li></ul></li><li><p>B水</p><ul><li>A岛 </li><li>A水  </li></ul></li></ul><ol><li>先淹没不符合题意的B中的岛屿小格子<br>本题要求被grid1完全包含的grid2中的子岛屿数。对于B中任何一个网格，</li></ol><ul><li>若B格是水，则不管A格是什么，都没必要淹没B格，保留原样即可</li><li>若B格是岛<ul><li>若A格是岛，则也不需进行任何操作，保留原样即可</li><li>若A格是水，则需要以B格为中心，淹没掉它周围的岛屿</li></ul></li></ul><p><img src="https://i.loli.net/2021/10/19/WK7ioDafrevFH26.png" alt="20211019160157"></p><ol start="2"><li>然后统计B中子岛屿个数，边统计边淹没</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    函数功能：找到一小块陆地，并从这块陆地开始，淹没周围其他陆地</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        找到了陆地</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 找到当前陆地，并淹没</span>            <span class="token comment" spellcheck="true">// 以当前节点为中心，继续淹没周围陆地，并把淹没的面积统计起来</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 上</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 右</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">countSubIslands</span><span class="token punctuation">(</span>vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid1<span class="token punctuation">,</span> vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        遍历整个陆地</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                若grid1中为水，grid2中为陆地，则淹没grid2中的这部分</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>grid2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>grid2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        统计grid2中的子岛屿个数，边统计边淹没</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>grid2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="694-不同岛屿的个数"><a href="#694-不同岛屿的个数" class="headerlink" title="694. 不同岛屿的个数"></a><a href="https://www.cnblogs.com/grandyang/p/7698778.html" target="_blank" rel="noopener">694. 不同岛屿的个数</a></h1><p><img src="https://i.loli.net/2021/10/19/c4di9jlReEL6CAP.png" alt="20211019173854"></p><p>在第200题的基础上，本题只需要在进行上下左右遍历时记录好次序即可</p><ul><li>在递归函数dfs中增加一个字符串，用来记录遍历的过程；增加一个int的start标志位，用来记录方向</li></ul><blockquote><p>注意：在<code>void dfs(int i, int j, vector&lt;vector&lt;int&gt;&gt; &amp;grid, string &amp;sb, int start)</code>中，sb要设为引用（即：<code>string &amp;sb</code>），这样才能在void中修改后，sb也随着发生变化。若不是引用,则退出dfs函数后，sb仍为空，没有效果。比如：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// appending to string</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">helper</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    a<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"!"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    return a;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">helper1</span><span class="token punctuation">(</span>string  a<span class="token punctuation">)</span><span class="token punctuation">{</span>    a<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"+++"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string a<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token function">helper</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hello!</span>    <span class="token function">helper1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 无效，仍为hello!</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//#include &lt;bits/stdc++.h></span><span class="token comment" spellcheck="true">//using namespace std;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    函数功能：找到一小块陆地，并从这块陆地开始，淹没周围其他陆地</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>sb<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        找到了陆地</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 找到当前陆地，并淹没</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 以当前节点为中心，继续淹没周围陆地.分别用1234作为标记</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">,</span> sb<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 上</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">,</span> sb<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">,</span> sb<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">,</span> sb<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 右</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">numDistinctIslands</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        遍历整个陆地</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                如果当前的这小块是陆地，则执行淹没操作，并把count+1</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    string sb<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">,</span> sb<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一开始进入，start相当于一个flag，随便一个（除了1234的）数字都可以</span><span class="token comment" spellcheck="true">//                    cout&lt;&lt;sb&lt;&lt;endl;</span>                    res<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int main() {</span><span class="token comment" spellcheck="true">//    Solution so;</span><span class="token comment" spellcheck="true">//    vector&lt;vector&lt;int>> grid = {{1, 1, 0, 1, 1},</span><span class="token comment" spellcheck="true">//                                {1, 0, 0, 0, 0},</span><span class="token comment" spellcheck="true">//                                {0, 0, 0, 0, 1},</span><span class="token comment" spellcheck="true">//                                {1, 1, 0, 1, 1}};</span><span class="token comment" spellcheck="true">//    cout &lt;&lt; so.numDistinctIslands(grid)&lt;&lt;endl;</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Quotes I Have Enjoyed</title>
      <link href="/2021/10/16/growth/quotes-i-have-enjoyed/"/>
      <url>/2021/10/16/growth/quotes-i-have-enjoyed/</url>
      
        <content type="html"><![CDATA[<hr><hr><p>在战略上，要分清主次。没必要的工作不用做，搞清楚什么是对自己最重要，什么该果断放弃，说一句“没时间”并不丢人，反而是逐渐走向成熟的体现。</p><p>已经是中年人了，再与年轻人们内卷拼体力是没有意义的，要拼<strong>眼界与思考的格局</strong>，<strong>找到问题的关键，并把时间花在刀刃上</strong>。我记得我以前写过一个知乎回答，说自己一天日常可以工作十多个小时，现在看起来，算是过时的了。现在仍然有一天工作十多个小时的觉悟，但条件是这事情确实重要，确实有意义，值得去做。最坏的情况是，忙但不知道自己的目标为何，辛苦却走向死路，那就既给自己虚幻的安全感与满足感，又注定了接下来悲剧的命运，下场是最惨的，还不如躺平享受人生。</p><p>一个比较资深的人，首要任务不是一味自己埋头工作，而是总结过去走过的弯路，特别是那些花费几个月却没有成效的努力，想清楚怎么去做，花多少时间和资源去做，哪个部分可以拿来主义，哪个部分必然存在亮点和创新。 - <a href="https://zhuanlan.zhihu.com/p/451903256" target="_blank" rel="noopener">田渊栋</a></p><p>要把有限的精力用在自己认为最有价值的事情上，不要被负面情绪裹挟浪费时间；如果不爽的事你觉得挺重要，那就设置更高的目标、专注更重要的事。</p><hr><p>在舒适区的边缘拥抱不确定性，是成长的唯一途径 - 认知觉醒</p><p>缩短不重要任务的时间，而把时间留给那些<a href="https://www.youtube.com/watch?v=763kY8W9FAQ" target="_blank" rel="noopener">重要的工作</a></p><ul><li>给事情安排优先级</li><li>缩短不必要的任务时间</li><li>寻找20%投入80%产出的事情</li></ul><p>永远都没有最好的时机</p><p>不是努力就有皇冠加冕 - 力量从哪里来</p><ul><li>不要被动等待认可</li><li>要主动争取支持</li><li>当你对现有的体系不满，认为自己坚持的东西是对的时候，其实想让自己坚持的东西成为更普遍的现实，<a href="https://www.bilibili.com/video/BV1Fb4y1R7Ys?from=search&seid=8594502826684916597&spm_id_from=333.337.0.0" target="_blank" rel="noopener">那唯一的路径就是在现实的环境里自己成功</a></li><li>所谓自觉，就是你可以愤怒，但是你不要抱怨。想要什么样的环境就自己动手去创造它</li></ul><hr><p>仅满足于勤快高效的做事，而不思考今日的努力会带来怎样的明天，是对人性的背叛 - <a href="https://www.listennotes.com/it/podcasts/%E6%96%87%E5%8C%96%E6%9C%89%E9%99%90/vol108-%E8%87%B42025%E5%B9%B4%E7%9A%84%E4%B8%96%E7%95%8C%E4%BD%A0%E5%80%BC%E5%BE%97%E6%8B%A5%E6%9C%89%E8%AE%B8%E5%A4%9A%E5%85%B6%E4%BB%96%E5%B9%B8%E7%A6%8F-M5Pj94Z8Wkc/" target="_blank" rel="noopener">文化有限</a></p><p>What you do matters, but why you do it matters more.</p><p>懦夫从不启程，弱者死于路中，只剩我们前行，一步都不能停。 - 鞋狗</p><p>每天工作<em>小时并不是目标，要更关注的是在<strong>有限的时间里完成了什么事情</strong>，而且这些事情是否有完成的<strong>必要</strong>和<strong>价值</strong>。我会有目的的放弃很多不重要的事情，从而把精力专注于<em>*完成少数几件最有价值</em></em>的事情。 - 老石谈芯</p><p>情绪这玩意，一文不值。 - 李笑来</p><p>一个人不知道他不知道这个事本身就是最可怕的，因为你不知道任何时候你都在“一个人一辈子只能也只是庸庸碌碌地活着然后迷茫地走向死亡”。 - 李笑来</p><p>所有的失眠焦虑都是因为你闲得慌。与其花时间进行精神内耗，不如采取行动。</p><p>其实没什么感觉，反正这个世界上，没有谁能够一直陪着谁，我也不太需要。 - 喜欢你</p><p>大道至简，吃饭就好好吃饭，睡觉就好好睡觉，工作就好好工作。 </p><p>要不断学习，终身学习，不断提升自己的操作系统。否则人永远在为自己的无知买单。</p><hr><p>Mood</p><ul><li><p>冲突是人生的必须</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/326615082" target="_blank" rel="noopener">与成</a></p><ul><li>在我人生的某一天，我都有可能会后悔做了某个决定。选择有很多最终只有一个会发生，任何选择都会有其代价，因此，我们总是会幻想另个选择才是我们的黄金时代。所以对于今天，此时此刻的我来说，洞悉本心，忠于理想，然后享受<strong>蓄水赋能</strong>的本身，不断精进是永恒不变的真理，在对的方向上不断去赌，直到证明这个选择是正确的为止。</li><li>我的面试从来不会失败，是因为我坚信只要有HC，哪怕就一个那也肯定会属于我。整个秋招过程中，看到特别多人说自己被面试官KPI了，我并不赞同这个观点，<strong>谁都不是面试官的KPI</strong>。面试是双向的，企业选择你的时候，你也要去选择企业，<strong>如果一开始就这么认为，很容易会变成自我感动的表演人格，而且还会给自己找无穷多外部借口，对自己诚实是毅力的来源吧</strong>。</li><li>一以贯之的努力，不得懈怠的人生。每天的微小积累会决定最终结果，这就是答案。</li><li>人生是选择的总和，最重要的不是怎么选，而是做出一个个选择，在这一个个选择中创造命运，成为自己，努力不要回头。</li></ul></li><li><p>信任别人这件事，说到底是为了<strong>让自己愉悦，而不是你给别人的恩赐</strong>。说直白些，他不需要你的信任也能活，所以不要假借“信任”二字，变相勒索情绪价值。想想，是你更需要他，还是他更需要你</p></li><li><p>用心，专注，然后全力以赴</p></li><li><p>要做一个精神富有的人，不要被环境同化，用钱可以以最快速度离开不喜欢的环境</p></li><li><p>真正的大神，聪明的人都是<strong>把精力花在自己身上</strong>，哪有时间浪费来和别人解释</p></li><li><p>“人生如长河，滚滚向前，我们一头扎进去，就不要费力回头了。<strong>我们顺流而下，反而会遇到更多更精彩的人</strong>，我的努力，就是为他们准备的。人一生很短暂，没有必要总是在一些人身上浪费太多时间，一个人勇敢往前面走，<strong>把点扩成面，去接触更多的人，去开拓更多的疆域，才是真正有价值的人生</strong>。”  - <a href="https://www.zhihu.com/question/385812424/answer/1414969605" target="_blank" rel="noopener">健身小老太</a></p></li><li><p>尽量不要吃“书本”快餐等，理性看待二手知识。即便别人已经给你提炼出最经典的内容，但这并不能代替你独立思考。任何知识，应该有自我感悟，自我体系生成的过程。有时候，不要被碎片化的时间所捆绑，应该腾出一些时间，进行独立思考，自己琢磨事物的本质和发展规律</p></li><li><p><a href="https://www.youtube.com/watch?v=FKNNOcAwdVY" target="_blank" rel="noopener">ishie</a></p><ul><li>现在做什么事，不要觉得晚</li><li>再好的朋友也要相敬如宾</li><li>不要做老好人，要接受有人不喜欢你的事实，学会拒绝</li><li>快速 结束 不正确的情感关系 止损</li><li>如果你现在眼前一团糟，换一个地方还是一团糟 （一个不会游泳的人，老换游泳池是不能解决问题的）</li><li>不了解一个人的时候，千万不要下定论</li><li>除生死之外，所有的事都是小事</li><li>脾气越大，本事越小；脾气越小，本身越大。发脾气不能解决任何事</li></ul></li><li><p>不要停止人际关系的修炼，<code>好好说话</code>这四个字，藏着你一生的好运。生气解决不了任何问题，真正的高情商懂得自如运用情绪，用<a href="https://www.youtube.com/watch?v=z0e0mBLLO8I" target="_blank" rel="noopener">最小的代价换得最大回报</a></p><ol><li>不否定对方的夸奖</li><li>会站在对方的利益点说话</li><li>在公共场合能淡定圆场</li><li>说话有边界感</li><li>对不了解的事不随意做出评判</li><li>能站在他人的立场思考</li><li>能运用情绪控制场面</li></ol></li></ul><hr><p>Education</p><ul><li>适当地慢慢放手，让孩子自己做决定，不要养成依赖型人格</li><li>培养孩子的自学能力，根据自己的情况改进方法，并且去实践</li><li>给孩子做出榜样，才可能激励孩子努力<ul><li>我们遇到的很多家长之所以无法教育孩子，是因为孩子很清楚自己父母的成长路径，如果父母不够努力，孩子就不会尊重父母，也不会听从父母的建议</li><li>所以你要教育他努力，最好的办法是<strong>让他看到你努力的过程和成绩</strong>，而不是陪着她写作业做一些没用的鸡毛蒜皮的事儿</li><li>作为家庭的管理者，跟工厂管理者一样，你不要去帮员工做事情，而是制定好规则，并且跟郭台铭和马斯克一样，就在工厂住，让员工看到你比他还努力</li></ul></li><li>把孩子培养成独立的人，让她拥有解决问题的能力，而不是帮她解决问题。在她面对挑战的时候，观察她，引导她。有些地方严一点，有些地方松一点。和她一起面对负面情绪，解决问题，让她知道原来这挑战（或负面情绪）也不是一件可怕的事情</li></ul><hr><p>消费</p><ul><li>我们80,90这一代都嘲笑父母那一辈只知道省吃俭用存钱，天天告诉父母通货膨胀钱存在银行里贬值，赶紧花掉。可就是父母那一辈傻傻的只知道存钱不被通货膨胀洗脑，却帮我们买了房结了婚买了车，我们这一代自认为前卫时尚买买买，背负各种债，连个孩子都不敢多生，天天焦虑。傻逼年轻人别再被狗屁综艺影视剧广告洗脑了，他们都是资本家精心设计的</li><li>“买衣服之前问问自己如果喜欢的男孩子约你出去玩你会不会穿出去。否的话就不会买。”  - <a href="https://www.youtube.com/watch?v=YOYZAyHJdAs" target="_blank" rel="noopener">IC实验室</a></li><li>富人把钱都投入再生产，普通人就是花光所有的钱。能把钱放进你口袋里的是资产，把钱从你口袋里掏出来的是负债</li><li>不被消费主义裹挟，不被浮躁的价值导向干扰，不为面子买单。放弃部分短期利益，换来更多长期回报。</li></ul><hr><p>You can’t just sit there and put everyone’s lives ahead of yours and think that counts as love. You just can’t. You have to do things.</p><p>We can`t choose where we come from,but we can choose where we go from there.</p><p>Why do nice people choose the wrong people to date?<br>Are we talking about anyone specific?…Hmm…We accepted the love we think we deserve.</p><p>I feel myself so small…I’m just asking myself that why do I and everyone love or pick people who treat us as nothing.<br>we accepted the love we think we deserve…You are not small, you’re beautiful.</p><p>It’s nice to have things to look forward to.</p><p>I love my mom so much. I don’t care if that’s corny to say. I think on my next birthday, I’m going to buy her a present. I think that should be a tradition. The kid gets gifts from everybody, and he buys one present for his mom since she was there, too. It think that would be nice.  - 壁花少年</p><hr><p>True change is actually not behavior change, it is not results change, it is not process change, it is <strong>identity change</strong>.</p><p>Noticing - People think they lack motivation, when in fact they lack clarity.<br>Wanting - Environment plays a role. Create environment for you to succeed in your goal.<br>Doing - Optimize for the start line, not finish line.<br>Liking what you do - We repeat behaviors, because we like them. - <a href="https://www.youtube.com/watch?v=U_nzqnXWvSo" target="_blank" rel="noopener">Atomic Habits</a></p>]]></content>
      
      
      <categories>
          
          <category> Growth </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Growth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP新式转型</title>
      <link href="/2021/10/16/c/cpp-xin-shi-zhuan-xing/"/>
      <url>/2021/10/16/c/cpp-xin-shi-zhuan-xing/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.cplusplus.com/doc/oldtutorial/typecasting/" target="_blank" rel="noopener">Type Casting</a></p></blockquote><h1 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a><a href="https://en.cppreference.com/w/cpp/language/dynamic_cast" target="_blank" rel="noopener">dynamic_cast</a></h1><p>用于父类和子类之间的转换（一般是父类向子类的安全向下转）</p><p>dynamic_cast can be used only <strong>with pointers and references to objects.</strong> Its purpose is to ensure that the result of the type conversion is a <strong>valid complete object</strong> of the requested class. （注意：适用于指针或引用；转换必须完整）</p><p><a href="https://www.geeksforgeeks.org/g-fact-33/" target="_blank" rel="noopener">RTTI （Run-time type Information） in C++</a></p><ul><li>派生类到基类的转换<ul><li>因为派生类中含有基类part，所以派生类可以<strong>完整</strong>转到基类</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">D</span><span class="token operator">:</span> <span class="token keyword">public</span> B <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    B <span class="token operator">*</span>pb<span class="token punctuation">;</span>    D d<span class="token punctuation">;</span> D <span class="token operator">*</span>pd<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    成功转换</span>    pb<span class="token operator">=</span><span class="token keyword">dynamic_cast</span><span class="token operator">&lt;</span>B<span class="token operator">*</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pb<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token string">"success"</span><span class="token operator">:</span> <span class="token string">"cannot cast"</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    成功转换</span>    pb<span class="token operator">=</span><span class="token keyword">dynamic_cast</span><span class="token operator">&lt;</span>B<span class="token operator">*</span><span class="token operator">></span> <span class="token punctuation">(</span>pd<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pb<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token string">"success"</span><span class="token operator">:</span> <span class="token string">"cannot cast"</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>基类到派生类的转换<ul><li>基类带有<strong>多态属性</strong>时（即：基类中有virtual性质的成员函数），且能实现<strong>完整</strong>转换（即：基类的指针指向的是派生类的对象,如<code>CBase * pba = new CDerived;</code>）时，才能成功转换</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// dynamic_cast</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;exception></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基类中有virtual性质的成员函数</span><span class="token keyword">class</span> <span class="token class-name">CBase</span> <span class="token punctuation">{</span> <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">dummy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CDerived</span><span class="token operator">:</span> <span class="token keyword">public</span> CBase <span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        基类指针pba指向派生类对象，可以完整转换</span>        CBase <span class="token operator">*</span> pba <span class="token operator">=</span> <span class="token keyword">new</span> CDerived<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        基类指针pbb指向基类对象，不能完整转换</span>        CBase <span class="token operator">*</span> pbb <span class="token operator">=</span> <span class="token keyword">new</span> CBase<span class="token punctuation">;</span>        CDerived <span class="token operator">*</span> pd<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        实现完整转换，成功</span>        pd <span class="token operator">=</span> <span class="token keyword">dynamic_cast</span><span class="token operator">&lt;</span>CDerived<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>pba<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pd<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Null pointer on first type-cast"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        不能实现完整转换</span>        pd <span class="token operator">=</span> <span class="token keyword">dynamic_cast</span><span class="token operator">&lt;</span>CDerived<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>pbb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pd<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Null pointer on second type-cast"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>exception<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Exception: "</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a><a href="https://en.cppreference.com/w/cpp/language/static_cast" target="_blank" rel="noopener">static_cast</a></h1><ul><li>static_cast can perform conversions between pointers to related classes, not only <strong>from the derived class to its base</strong>, but also <strong>from a base class to its derived</strong>. This ensures that at least the classes are compatible if the proper object is converted, but <strong>no safety check</strong> is performed during runtime to check if the object being converted is in fact a full object of the destination type. （实现基类与派生类的互相转换，但是没有安全检查,可能运行时会出错。如下面的代码，实现的是不完整的转换）</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// This would be valid, although b would point to an incomplete object of the class and could lead to runtime errors if dereferenced.</span><span class="token keyword">class</span> <span class="token class-name">CBase</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CDerived</span><span class="token operator">:</span> <span class="token keyword">public</span> CBase <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>CBase <span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> CBase<span class="token punctuation">;</span>CDerived <span class="token operator">*</span> b <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>CDerived<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>static_cast can also be used to perform any other non-pointer conversion that could also be performed implicitly, like for example <strong>standard conversion between fundamental types</strong> （也可以用于基本类型的转换,如double转int）</li></ul><h1 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a><a href="https://en.cppreference.com/w/cpp/language/reinterpret_cast" target="_blank" rel="noopener">reinterpret_cast</a></h1><ul><li>reinterpret_cast <strong>converts any pointer type to any other pointer type, even of unrelated classes.</strong> </li><li>It can also <strong>cast pointers to or from integer types</strong>. </li></ul><h1 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a><a href="https://en.cppreference.com/w/cpp/language/const_cast" target="_blank" rel="noopener">const_cast</a></h1><p>const_cast manipulates the constness of an object, either <strong>to be set or to be removed.</strong> 可以把对象的常量属性去除<br><code>const_cast&lt; here&gt;</code> 中，here必须是a reference, pointer-to-object, or pointer-to-data-member</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 去除常量属性，实现+1运算</span><span class="token comment" spellcheck="true">// const_cast</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>pi <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//只有通过const_cast把const属性去掉后，才能*i+=1;</span>    <span class="token function">print</span> <span class="token punctuation">(</span> <span class="token keyword">const_cast</span><span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">></span> <span class="token punctuation">(</span>pi<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 11</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// const_cast</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token keyword">const_cast</span><span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="When-should-static-cast-dynamic-cast-const-cast-and-reinterpret-cast-be-used"><a href="#When-should-static-cast-dynamic-cast-const-cast-and-reinterpret-cast-be-used" class="headerlink" title="When should static_cast, dynamic_cast, const_cast and reinterpret_cast be used?"></a><a href="https://stackoverflow.com/questions/332030/when-should-static-cast-dynamic-cast-const-cast-and-reinterpret-cast-be-used" target="_blank" rel="noopener">When should static_cast, dynamic_cast, const_cast and reinterpret_cast be used?</a></h1><blockquote><p>static_cast is the first cast you should attempt to use. It does things like implicit conversions between types (such as int to float, or pointer to void*), and it can also call explicit conversion functions (or implicit ones). In many cases, explicitly stating static_cast isn’t necessary, but it’s important to note that the T(something) syntax is equivalent to (T)something and should be avoided (more on that later). A T(something, something_else) is safe, however, and guaranteed to call the constructor.</p><p>static_cast can also cast through inheritance hierarchies. It is unnecessary when casting upwards (towards a base class), but when casting downwards it can be used as long as it doesn’t cast through virtual inheritance. It does not do checking, however, and it is undefined behavior to static_cast down a hierarchy to a type that isn’t actually the type of the object.</p><hr><p>const_cast can be used to remove or add const to a variable; no other C++ cast is capable of removing it (not even reinterpret_cast). It is important to note that modifying a formerly const value is only undefined if the original variable is const; if you use it to take the const off a reference to something that wasn’t declared with const, it is safe. This can be useful when overloading member functions based on const, for instance. It can also be used to add const to an object, such as to call a member function overload.</p><p>const_cast also works similarly on volatile, though that’s less common.</p><hr><p>dynamic_cast is exclusively used for handling polymorphism. You can cast a pointer or reference to any polymorphic type to any other class type (a polymorphic type has at least one virtual function, declared or inherited). You can use it for more than just casting downwards – you can cast sideways or even up another chain. The dynamic_cast will seek out the desired object and return it if possible. If it can’t, it will return nullptr in the case of a pointer, or throw std::bad_cast in the case of a reference.</p><p>dynamic_cast has some limitations, though. It doesn’t work if there are multiple objects of the same type in the inheritance hierarchy (the so-called ‘dreaded diamond’) and you aren’t using virtual inheritance. It also can only go through public inheritance - it will always fail to travel through protected or private inheritance. This is rarely an issue, however, as such forms of inheritance are rare.</p><hr><p>reinterpret_cast is the most dangerous cast, and should be used very sparingly. It turns one type directly into another — such as casting the value from one pointer to another, or storing a pointer in an int, or all sorts of other nasty things. Largely, the only guarantee you get with reinterpret_cast is that normally if you cast the result back to the original type, you will get the exact same value (but not if the intermediate type is smaller than the original type). There are a number of conversions that reinterpret_cast cannot do, too. It’s used primarily for particularly weird conversions and bit manipulations, like turning a raw data stream into actual data, or storing data in the low bits of a pointer to aligned data.</p></blockquote><p><img src="https://i.loli.net/2021/07/10/vK8DspI3TqmUHAz.png" alt="effective c++ P117"></p><ul><li>有相同派生类的基类指针转换</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> A1<span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">A1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> A2<span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">A2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> B1 <span class="token operator">:</span> A1<span class="token punctuation">,</span> A2<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    B1 d<span class="token punctuation">;</span>    A1<span class="token operator">*</span> pb1 <span class="token operator">=</span> <span class="token operator">&amp;</span>d<span class="token punctuation">;</span>    A2<span class="token operator">*</span> pb2 <span class="token operator">=</span> <span class="token keyword">dynamic_cast</span><span class="token operator">&lt;</span>A2<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>pb1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//L1</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>pb2<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 有相同派生类的基类 可以转换成功 </span><span class="token comment" spellcheck="true">//    Static_cast from 'A1 *' to 'A2 *', which are not related by inheritance, is not allowed</span><span class="token comment" spellcheck="true">//    A2* pb22 = static_cast&lt;A2*>(pb1);  //L2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚函数，虚表，虚表指针</title>
      <link href="/2021/10/16/c/xu-han-shu-xu-biao-xu-biao-zhi-zhen/"/>
      <url>/2021/10/16/c/xu-han-shu-xu-biao-xu-biao-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="虚函数，虚表，虚表指针-（great-explanation-）"><a href="#虚函数，虚表，虚表指针-（great-explanation-）" class="headerlink" title="虚函数，虚表，虚表指针 （great explanation!!!）"></a><a href="https://www.youtube.com/watch?v=Z_FiER8aAqM" target="_blank" rel="noopener">虚函数，虚表，虚表指针 （great explanation!!!）</a></h1><h2 id="基类指针指向基类对象"><a href="#基类指针指向基类对象" class="headerlink" title="基类指针指向基类对象"></a>基类指针指向基类对象</h2><p><img src="https://i.loli.net/2021/10/15/gFL1W3QS84GUhKY.png" alt="20211015215621"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"A f1()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"A f2()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"A f3()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"A f4()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token operator">:</span><span class="token keyword">public</span> A<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"B f1()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"B f2()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"B f4()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    A <span class="token operator">*</span>p<span class="token punctuation">,</span> o1<span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token operator">&amp;</span>o1<span class="token punctuation">;</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//A f1()</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//A f2()</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//A f3()</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//A f4()</span><span class="token comment" spellcheck="true">//    p->f4(5); // 报错，因为o1对象没有形如f4(int)的函数。no matching function for call to 'A::f4(int)'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基类指针指向派生类对象"><a href="#基类指针指向派生类对象" class="headerlink" title="基类指针指向派生类对象"></a>基类指针指向派生类对象</h2><p>知识点：静态绑定，动态绑定（下的多态特性）</p><p><img src="https://i.loli.net/2021/10/15/1RyiVo6EtDM7jKf.png" alt="20211015220421"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"A f1()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"A f2()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"A f3()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"A f4()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token operator">:</span><span class="token keyword">public</span> A<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"B f1()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"B f2()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"B f4()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    A <span class="token operator">*</span>p<span class="token punctuation">;</span>    B o2<span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token operator">&amp;</span>o2<span class="token punctuation">;</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//A f1()   静态绑定，访问的是基类</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//B f2()   动态绑定（即：多态特性），访问的是派生类</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//A f3()   B类中没有f3()的实现，所以只能访问从基类继承而来的 A f3()</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//A f4()   同理，B类中没有形如 f4()的函数 （注意：f4()和f4(int)是不同的），所以只能访问从基类继承而来的 A f4()</span><span class="token comment" spellcheck="true">//    p->f4(5); // 报错，因为虽然o2对象有形如f4(int)的函数，但是是基类指针p指向o2，p并没有访问函数f4(int)的权限。no matching function for call to 'A::f4(int)'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="派生类指针指向派生类对象"><a href="#派生类指针指向派生类对象" class="headerlink" title="派生类指针指向派生类对象"></a>派生类指针指向派生类对象</h2><p>知识点：隐藏。在隐藏中，类的函数特性只对<strong>函数的名称</strong>敏感</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"A f1()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"A f2()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"A f3()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"A f4()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token operator">:</span><span class="token keyword">public</span> A<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"B f1()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"B f2()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    using A::f4;   // 或者添加这句</span>    <span class="token keyword">void</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"B f4()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    B <span class="token operator">*</span>p<span class="token punctuation">;</span>    B o2<span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token operator">&amp;</span>o2<span class="token punctuation">;</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//B f1()   隐藏 基类的f1函数</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//B f2()   隐藏 基类的f2函数</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//A f3()   B类中没有f3()的实现，所以只能访问从基类继承而来的 A f3()</span>    p<span class="token operator">-</span><span class="token operator">></span>A<span class="token operator">::</span><span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//A f4()   B类中有2个f4函数(继承的和自己的)。若要调用继承的，则需要指定为A::f4(),或者在类B中添加 using A::f4;</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">f4</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//B f4(5) 调用自己的f4(int)函数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="c-父类指针指向子类对象"><a href="#c-父类指针指向子类对象" class="headerlink" title="c++父类指针指向子类对象"></a><a href="https://www.cnblogs.com/zhangbaochong/p/5380016.html" target="_blank" rel="noopener">c++父类指针指向子类对象</a></h1><ul><li><a href="https://www.runoob.com/cplusplus/cpp-polymorphism.html" target="_blank" rel="noopener">三角形矩形继承形状类</a></li></ul><p>示例1：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> A <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"foo"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"bar"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">A</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> B<span class="token operator">:</span>A<span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"b_foo"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"b_bar"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  A<span class="token operator">*</span> p<span class="token operator">=</span><span class="token keyword">new</span> B<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用A的构造器， 输出bar</span>  p<span class="token operator">-</span><span class="token operator">></span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 静态绑定，输出foo</span>  p<span class="token operator">-</span><span class="token operator">></span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 多态特性的动态绑定，输出b_bar</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A's foo()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A's bar()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token operator">:</span> <span class="token keyword">public</span> A<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B's foo()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        A<span class="token operator">::</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B's bar()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    B bobj<span class="token punctuation">;</span>    A <span class="token operator">*</span>aptr <span class="token operator">=</span> <span class="token operator">&amp;</span>bobj<span class="token punctuation">;</span>    aptr<span class="token operator">-</span><span class="token operator">></span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"********"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    A aobj <span class="token operator">=</span> <span class="token operator">*</span>aptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//转化为A类对象</span>    aobj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//多态，调用B的foo</span>B's <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用A::foo();</span>A's <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//虽然是A::foo()中的bar(); 但传给指针的地址还是bobj的地址，且bar()也用virtual进行多态了。所以是B的bar()</span><span class="token comment" spellcheck="true">//如果A中的bar函数不是虚函数，这里就调用的是A的bar函数</span>B's <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token comment" spellcheck="true">//转化为A的对象后调用A的相关函数</span>A's <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>A's <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="基类函数声明为虚函数"><a href="#基类函数声明为虚函数" class="headerlink" title="基类函数声明为虚函数"></a>基类函数声明为虚函数</h1><ul><li>当基类指针指向派生类对象时，为了实现完整删除，<strong>需要</strong>把基类的析构函数设为virtual</li><li>当派生类指针指向派生类对象时，<strong>无需</strong>将基类的析构函数设为virtual，也可以实现完整删除</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"create Base"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"delete Base"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Der</span> <span class="token operator">:</span> <span class="token keyword">public</span> Base<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Der</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"create Der"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Der</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Delete Der"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Der <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token keyword">new</span> Der<span class="token punctuation">;</span>    <span class="token keyword">delete</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//create Base</span><span class="token comment" spellcheck="true">//create Der</span><span class="token comment" spellcheck="true">//Delete Der</span><span class="token comment" spellcheck="true">//delete Base</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="重载，隐藏，重写"><a href="#重载，隐藏，重写" class="headerlink" title="重载，隐藏，重写"></a><a href="https://blog.csdn.net/weixin_39640298/article/details/88725073" target="_blank" rel="noopener">重载，隐藏，重写</a></h1><ul><li>重载：在同一作用域中，<strong>同名函数</strong>的<strong>形式参数（参数个数、类型或者顺序）不同时</strong>，构成函数重载。（注意：只需关注<strong>同一作用域</strong>中<strong>函数名称相同</strong>，<strong>形参不同</strong>即可）<ul><li><code>void funcA();</code>和<code>void funcA() const;</code>也属于重载。<ul><li>原因是：在类中，由于隐含的this形参的存在，const版本的function函数使得作为形参的this指针的类型变为指向const对象的指针，而非const版本的使得作为形参的this指针就是正常版本的指针。此处是发生重载的本质</li><li>调用规则：const对象默认调用const成员函数，非const对象默认调用非const成员函数</li></ul></li><li><code>void funcB(int a);</code> 和<code>void funcB(const int a);</code>是非法的，不能通过编译<ul><li>这属于非引用传参，形参是否const是等价的</li><li>当使用引用或指针传参时，有无const是不同的。指向const对象的指针（或引用）和指向非const对象的指针（或引用）做形参的函数是不同的</li></ul></li></ul></li><li><a href="https://www.youtube.com/watch?v=UURcpaMa0bg" target="_blank" rel="noopener">隐藏</a>：不同作用域中定义的<strong>同名函数</strong>构成隐藏（不要求函数返回值和函数参数类型相同）。比如派生类成员函数隐藏与其同名的基类成员函数、类成员函数隐藏全局外部函数。（注意：只需关注<strong>函数名相同</strong>即可）</li><li>重写：派生类中与基类同返回值类型、同名和同参数的虚函数重定义，构成虚函数覆盖，也叫虚函数重写。（注意：<strong>函数签名必须一致</strong>，<strong>基类函数是virtual的</strong>，<strong>基类指针指向派生类对象</strong>，才会有多态）<ul><li>重写的特殊情况：<a href="https://stackoverflow.com/questions/1689195/what-the-c-rules-in-regard-to-covariant-return-types" target="_blank" rel="noopener">协变返回类型</a></li></ul></li></ul><p><a href="https://www.nowcoder.com/test/question/done?tid=49101790&qid=55520#summary" target="_blank" rel="noopener">相关例题</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"global function"</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A function"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">polyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span><span class="token string">"A Polymorphism_多态"</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token keyword">public</span> A <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B function"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">polyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span><span class="token string">"B Polymorphism_多态"</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    A <span class="token operator">*</span>pa<span class="token operator">=</span><span class="token keyword">new</span> B<span class="token punctuation">;</span>    B <span class="token operator">*</span>pb<span class="token operator">=</span><span class="token keyword">new</span> B<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    隐藏了全局函数func，调用A的func函数</span>    pa<span class="token operator">-</span><span class="token operator">></span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结果为：A function</span>    <span class="token comment" spellcheck="true">//    隐藏了全局函数func 和 A的func函数，调用B的func函数</span>    pb<span class="token operator">-</span><span class="token operator">></span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结果为：B function</span>    <span class="token comment" spellcheck="true">//    类A中的polyFunc()是虚函数，可以实现多态，因此动态绑定后调用类B的polyFunc()函数</span>    pa<span class="token operator">-</span><span class="token operator">></span><span class="token function">polyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结果为B Polymorphism_多态</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu中使用gtest</title>
      <link href="/2021/10/12/c/zai-ubuntu-zhong-shi-yong-gtest/"/>
      <url>/2021/10/12/c/zai-ubuntu-zhong-shi-yong-gtest/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://google.github.io/googletest/" target="_blank" rel="noopener">GoogleTest User’s Guide官方教程</a><br><a href="https://blog.jetbrains.com/rscpp/2015/09/01/unit-testing-google-test/" target="_blank" rel="noopener">Unit Testing C++ with Google Test</a>，以及<a href="https://www.youtube.com/watch?v=16FI1-d2P4E&t=5s" target="_blank" rel="noopener">配套视频</a>。教程简洁明了，非常推荐</p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在任意文件夹下打开终端,安装并编译gtest,并将产生的库拷贝到/usr/lib中</p><pre><code>sudo apt-get install libgtest-devsudo apt-get install cmakecd /usr/src/gtestsudo cmake CMakeLists.txtsudo makesudo cp *.a /usr/lib</code></pre><h1 id="gtest的使用示例"><a href="#gtest的使用示例" class="headerlink" title="gtest的使用示例"></a>gtest的使用示例</h1><h2 id="What-is-the-difference-between-TEST-TEST-F-and-TEST-P"><a href="#What-is-the-difference-between-TEST-TEST-F-and-TEST-P" class="headerlink" title="What is the difference between TEST, TEST_F and TEST_P?"></a><a href="https://stackoverflow.com/questions/58600728/what-is-the-difference-between-test-test-f-and-test-p" target="_blank" rel="noopener">What is the difference between TEST, TEST_F and TEST_P?</a></h2><ul><li>TEST() is useful when you want to write unit tests for static or global functions or simple classes. <a href="https://github.com/google/googletest/blob/565f1b848215b77c3732bca345fe76a0431d8b34/googletest/test/googletest-port-test.cc#L54" target="_blank" rel="noopener">Example test</a></li><li>TEST_F() is useful when you need access to objects and subroutines in the unit test （F is for <strong>fixture</strong>）. <a href="https://github.com/google/googletest/blob/e8a82dc7ede61c4af3b9d75aa0e953b8cecfc8bb/googletest/test/gtest_unittest.cc#L102" target="_blank" rel="noopener">Example test</a></li><li>TEST_P() is useful when you want to write tests with a <strong>parameter</strong>. Instead of writing multiple tests with different values of the parameter, you can write one test using TEST_P() which uses GetParam() and can be instantiated using INSTANTIATE_TEST_SUITE_P(). <a href="https://github.com/google/googletest/blob/eafd2a91bb0c4fd626aae63ae852812fbd4999f2/googletest/test/googletest-param-test-test.cc#L679" target="_blank" rel="noopener">Example test</a></li></ul><p>接下来，我们根据几个示例来说明其用法。</p><h2 id="测试用例：使用宏TEST-进行单元测试"><a href="#测试用例：使用宏TEST-进行单元测试" class="headerlink" title="测试用例：使用宏TEST()进行单元测试"></a><a href="https://www.srcmake.com/home/google-cpp-test-framework" target="_blank" rel="noopener">测试用例：使用宏TEST()进行单元测试</a></h2><blockquote><p>函数功能：实现一个开方根函数，并对其测试</p></blockquote><p>在自定义的Ｃ++项目目录下测试一个开方根函数（如CLionProjects/gtest1）.在该目录下构建以下文件：</p><pre><code>touch sqrt.cpptouch sqrt_test.cpptouch CMakeLists.txt</code></pre><ul><li>sqrt.cpp中有一个<code>squareRoot()</code>函数，用于实现开方功能</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token comment" spellcheck="true">// Get the Square root of a number. </span><span class="token keyword">double</span> <span class="token function">squareRoot</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> a<span class="token punctuation">)</span>     <span class="token punctuation">{</span>    <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// NaN check</span>        <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">else</span>        <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>sqrt_test.cpp用于测试sqrt.cpp中的<code>squareRoot()</code>函数是否正确<ul><li>这里需要把测试的头文件<code>#include &lt;gtest/gtest.h&gt;</code>和源文件<code>#include &quot;sqrt.cpp&quot;</code>包含进去</li><li>构建两个测试：<code>TEST(SquareRootTest, PositiveNos)</code>和<code>TEST(SquareRootTest, NegativeNos)</code><ul><li><code>TEST(TestSuiteName, TestName)</code>：The first argument is the name of the <strong>test suite</strong>, and the second argument is the test’s name <strong>within the test suite.</strong> .Tests from different test suites <strong>can have the same individual name</strong>.</li><li><code>TEST()</code>的参数名称可以随意取，但尽量与真实含义相符。比如我们给测试取一个<code>SquareRootTest</code>名称，如果函数<code>squareRoot</code>参数是正数，则对其开方（相应地，构建<code>TEST(SquareRootTest, PositiveNos)</code>）；如果是负数，则返回－１（相应地，构建<code>TEST(SquareRootTest, NegativeNos)</code>）．；名称必须是有效的C++标识符，且不能有下划线。</li></ul></li><li><code>ASSERT_EQ(expected, actual);</code></li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sqrt.cpp"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;gtest/gtest.h></span></span><span class="token function">TEST</span><span class="token punctuation">(</span>SquareRootTest<span class="token punctuation">,</span> PositiveNos<span class="token punctuation">)</span>     <span class="token punctuation">{</span>     <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token function">squareRoot</span><span class="token punctuation">(</span><span class="token number">36.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span><span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token function">squareRoot</span><span class="token punctuation">(</span><span class="token number">324.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span><span class="token number">25.4</span><span class="token punctuation">,</span> <span class="token function">squareRoot</span><span class="token punctuation">(</span><span class="token number">645.16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">squareRoot</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token function">TEST</span><span class="token punctuation">(</span>SquareRootTest<span class="token punctuation">,</span> NegativeNos<span class="token punctuation">)</span>     <span class="token punctuation">{</span>    <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token function">squareRoot</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">15.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token function">squareRoot</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  测试的主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>     <span class="token punctuation">{</span>    testing<span class="token operator">::</span><span class="token function">InitGoogleTest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">RUN_ALL_TESTS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CMakeLists.txt中负责关联文件并构建测试的可执行文件<code>executeTests</code></li></ul><pre><code>cmake_minimum_required(VERSION 2.6)# Locate GTestfind_package(GTest REQUIRED)include_directories(${GTEST_INCLUDE_DIRS})# Link runTests with what we want to test and the GTest and pthread libraryadd_executable(executeTests sqrt_test.cpp)target_link_libraries(executeTests ${GTEST_LIBRARIES} pthread)</code></pre><ul><li>运行可执行文件</li></ul><pre><code>cmake CMakeLists.txtmake./executeTests// 或者新建一个build文件夹，在该文件夹下编译// mkdir build// cd build// cmake ..// make// ./executeTests</code></pre><p>最后的结果为：</p><p><img src="https://i.loli.net/2021/10/10/OyErx1kMVTupaAo.png" alt="20211010121618"></p><h2 id="测试用例：使用宏TEST-F-进行单元测试"><a href="#测试用例：使用宏TEST-F-进行单元测试" class="headerlink" title="测试用例：使用宏TEST_F()进行单元测试"></a><a href="http://www.yolinux.com/TUTORIALS/Cpp-GoogleTest.html" target="_blank" rel="noopener">测试用例：使用宏TEST_F()进行单元测试</a></h2><blockquote><p>函数功能：用相同的数据，实现加法和乘法的同时测试</p></blockquote><p><code>TEST_F()</code>中的Ｆ是fixture的意思，适用于测试数据被多次使用的场景（或者不同数据执行很类似的行为，如100+5,100+10）。比如有两个数ｘ和ｙ，分别需要验证它们的加法和乘法行为，<code>TEST_F()</code>可以共用一份测试数据，避免不同的测试行为重复创建数据。</p><p>在自定义的Ｃ++项目目录下创建文件（如CLionProjects/gtest２）</p><h3 id="加法及加法测试"><a href="#加法及加法测试" class="headerlink" title="加法及加法测试"></a>加法及加法测试</h3><ul><li>构建头文件Addition.h</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> GTEST2_ADDITION_H</span><span class="token macro property">#<span class="token directive keyword">define</span> GTEST2_ADDITION_H</span><span class="token keyword">class</span> <span class="token class-name">Addition</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">twoValues</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//GTEST2_ADDITION_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>构建源文件Addition.cpp</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Addition.h"</span></span><span class="token keyword">int</span> Addition<span class="token operator">::</span><span class="token function">twoValues</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>构建测试文件Addition_Test.cpp<ul><li>AdditionTest类继承::testing::Test</li><li>注意要包含<code>#include &quot;Addition.cpp&quot;</code>和<code>#include &lt;gtest/gtest.h&gt;</code></li><li><code>TEST_F(TestFixtureName, TestName)</code>：第一个参数<strong>必须是测试类名</strong>，第二个参数为TestName.</li><li>For each test defined with TEST_F(), googletest will create a fresh test fixture at runtime, immediately <strong>initialize it via SetUp()</strong>, run the test, <strong>clean up by calling TearDown()</strong>, and then delete the test fixture. Note that different tests in the same test suite have different test fixture objects, and googletest always <strong>deletes a test fixture before it creates the next one</strong>. googletest <strong>does not reuse</strong> the same test fixture for multiple tests. Any changes one test makes to the fixture do not affect other tests.</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Addition.cpp"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;gtest/gtest.h></span></span><span class="token comment" spellcheck="true">// 继承::testing::Test</span><span class="token keyword">class</span> <span class="token class-name">AdditionTest</span> <span class="token operator">:</span> <span class="token keyword">public</span> <span class="token operator">::</span>testing<span class="token operator">::</span>Test<span class="token punctuation">{</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">TearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>AdditionTest<span class="token punctuation">,</span>twoValues<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    Addition addition<span class="token punctuation">;</span>    <span class="token function">EXPECT_EQ</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span>addition<span class="token punctuation">.</span><span class="token function">twoValues</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_EQ</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>addition<span class="token punctuation">.</span><span class="token function">twoValues</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="乘法及乘法测试"><a href="#乘法及乘法测试" class="headerlink" title="乘法及乘法测试"></a>乘法及乘法测试</h3><p>－　构建头文件Multiply.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> GTEST2_MULTIPLY_H</span><span class="token macro property">#<span class="token directive keyword">define</span> GTEST2_MULTIPLY_H</span><span class="token keyword">class</span> <span class="token class-name">Multiply</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">twoValues</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//GTEST2_MULTIPLY_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>构建源文件Multiply.cpp</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Multiply.h"</span></span><span class="token keyword">int</span> Multiply<span class="token operator">::</span><span class="token function">twoValues</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>构建测试文件Multiply_Test.cpp<ul><li>注意要包含<code>#include &quot;Multiply.cpp&quot;</code>和<code>#include &lt;gtest/gtest.h&gt;</code></li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Multiply.cpp"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;gtest/gtest.h></span></span><span class="token keyword">class</span> <span class="token class-name">MultiplyTest</span> <span class="token operator">:</span> <span class="token keyword">public</span> <span class="token operator">::</span>testing<span class="token operator">::</span>Test<span class="token punctuation">{</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">TearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>MultiplyTest<span class="token punctuation">,</span> twoValues<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    Multiply multiply<span class="token punctuation">;</span>    <span class="token function">EXPECT_EQ</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> multiply<span class="token punctuation">.</span><span class="token function">twoValues</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_EQ</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> multiply<span class="token punctuation">.</span><span class="token function">twoValues</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加法和乘法汇总后一起测试"><a href="#加法和乘法汇总后一起测试" class="headerlink" title="加法和乘法汇总后一起测试"></a>加法和乘法汇总后一起测试</h3><ul><li>构建Main_TestAll.cpp<ul><li>注意要把<code>#include &quot;Addition_Test.cpp&quot;</code>，<code>#include &quot;Multiply_Test.cpp&quot;</code>和<code>#include &lt;gtest/gtest.h&gt;</code>包含进去</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Addition_Test.cpp"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Multiply_Test.cpp"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;gtest/gtest.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    testing<span class="token operator">::</span><span class="token function">InitGoogleTest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">RUN_ALL_TESTS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CMakeLists.txt文件</li></ul><pre><code>cmake_minimum_required(VERSION 3.10)project(gtest2)set(CMAKE_CXX_STANDARD 14)#加载相关的头文件和库文件find_package(GTest REQUIRED)include_directories(${GTEST_INCLUDE_DIRS})#加法和乘法都测试add_executable(executeTests Main_TestAll.cpp)target_link_libraries(executeTests ${GTEST_LIBRARIES} pthread)</code></pre><ul><li>编译并运行</li></ul><pre><code>cmake CMakeLists.txtmake./executeTests</code></pre><p>最后结果为<br><img src="https://i.loli.net/2021/10/11/JnmvdHCVI75bzca.png" alt="20211011164619"></p><blockquote><p>如果要单独测试，比如只测试加法，则在Addition_Test.cpp中添加测试的main函数。并修改对应的CMakeLists.txt即可</p><ul><li>Addition_Test.cpp</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Addition.cpp"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;gtest/gtest.h></span></span><span class="token keyword">class</span> <span class="token class-name">AdditionTest</span> <span class="token operator">:</span> <span class="token keyword">public</span> <span class="token operator">::</span>testing<span class="token operator">::</span>Test<span class="token punctuation">{</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">TearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>AdditionTest<span class="token punctuation">,</span>twoValues<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    Addition addition<span class="token punctuation">;</span>    <span class="token function">EXPECT_EQ</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span>addition<span class="token punctuation">.</span><span class="token function">twoValues</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_EQ</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>addition<span class="token punctuation">.</span><span class="token function">twoValues</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>   testing<span class="token operator">::</span><span class="token function">InitGoogleTest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">RUN_ALL_TESTS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CMakeLists.txt文件</li></ul><pre><code>cmake_minimum_required(VERSION 3.10)project(gtest2)set(CMAKE_CXX_STANDARD 14)#加载相关的头文件和库文件find_package(GTest REQUIRED)include_directories(${GTEST_INCLUDE_DIRS})##单独测试加法#add_executable(exec1 Addition_Test.cpp)#target_link_libraries(exec1 ${GTEST_LIBRARIES} pthread)</code></pre></blockquote><h2 id="测试用例：使用宏TEST-P-进行单元测试"><a href="#测试用例：使用宏TEST-P-进行单元测试" class="headerlink" title="测试用例：使用宏TEST_P()进行单元测试"></a><a href="https://blog.jetbrains.com/rscpp/2015/09/01/unit-testing-google-test/" target="_blank" rel="noopener">测试用例：使用宏TEST_P()进行单元测试</a></h2><h3 id="加法测试"><a href="#加法测试" class="headerlink" title="加法测试"></a>加法测试</h3><blockquote><p>函数功能：写一个加法函数，然后对其测试</p></blockquote><ul><li>构建文件demo1_test.cpp</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;gtest/gtest.h></span></span><span class="token comment" spellcheck="true">//加法函数</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">TEST</span><span class="token punctuation">(</span>Addition<span class="token punctuation">,</span> CanAddTwoNumbers<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">EXPECT_TRUE</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用加法函数</span><span class="token comment" spellcheck="true">//    如果产生错误，则输出相关的错误信息</span><span class="token comment" spellcheck="true">//    如EXPECT_EQ(２, add(2,2)) &lt;&lt; "Two plus two must equal four";　因为２!=4,则输出"Two plus two must equal four"</span>    <span class="token function">EXPECT_EQ</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Two plus two must equal four"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    testing<span class="token operator">::</span><span class="token function">InitGoogleTest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">RUN_ALL_TESTS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>构建文件CMakeLists.txt</li></ul><pre><code>cmake_minimum_required(VERSION 3.10)project(gtest3)set(CMAKE_CXX_STANDARD 14)#加载gtest相关的头文件和库文件find_package(GTest REQUIRED)include_directories(${GTEST_INCLUDE_DIRS})# 简单的TEST用例add_executable(demo1 demo1_test.cpp)target_link_libraries(demo1 ${GTEST_LIBRARIES} pthread)</code></pre><p>最终结果为：<br><img src="https://i.loli.net/2021/10/12/hU7iJSALqkn8clj.png" alt="20211012102120"></p><blockquote><p>函数功能：模拟ATＭ机的存取款及查询余额的功能</p></blockquote><ul><li>构建文件demo2_bank.cpp<ul><li>展示了<code>TEST()，TEST_F()TEST_P()</code>的简单用法</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;gtest/gtest.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//========================TEST()的使用=========================</span><span class="token comment" spellcheck="true">//构建一个账户类。余额初始话为０，该账户有存取款功能</span><span class="token keyword">struct</span> BankAccount <span class="token punctuation">{</span>    <span class="token keyword">int</span> balance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">BankAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">explicit</span> <span class="token function">BankAccount</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">balance</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    存款后，余额增加</span>    <span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        balance <span class="token operator">+</span><span class="token operator">=</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    如果取款金额小于余额，则取款成功，返回true.否则返回false</span>    <span class="token keyword">bool</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">&lt;=</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            balance <span class="token operator">-</span><span class="token operator">=</span> amount<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试账户初始余额是否为０</span><span class="token function">TEST</span><span class="token punctuation">(</span>AccountTest<span class="token punctuation">,</span> BankAccountStartsEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BankAccount account<span class="token punctuation">;</span>    <span class="token function">EXPECT_EQ</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> account<span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//========================TEST_F()的使用=========================</span><span class="token comment" spellcheck="true">//想重复使用BankAccount类。于是构建一个BankAccountTest，并继承testing::Test</span><span class="token keyword">struct</span> BankAccountTest <span class="token operator">:</span> <span class="token keyword">public</span> testing<span class="token operator">::</span>Test <span class="token punctuation">{</span>    BankAccount <span class="token operator">*</span>account<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    新建账户</span>    <span class="token function">BankAccountTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        account <span class="token operator">=</span> <span class="token keyword">new</span> BankAccount<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    删除账户</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">BankAccountTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">delete</span> account<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数必须是类名。测试账户余额是否初始化为０</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>BankAccountTest<span class="token punctuation">,</span> BankAccountStartsEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">EXPECT_EQ</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> account<span class="token operator">-</span><span class="token operator">></span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第一个参数必须是类名。测试是否存钱成功</span><span class="token function">TEST_F</span><span class="token punctuation">(</span>BankAccountTest<span class="token punctuation">,</span> CanDepositMoney<span class="token punctuation">)</span> <span class="token punctuation">{</span>    account<span class="token operator">-</span><span class="token operator">></span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_EQ</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> account<span class="token operator">-</span><span class="token operator">></span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//========================TEST_P()的使用=========================</span><span class="token comment" spellcheck="true">//构建一个账户状态的类（结构体）</span><span class="token keyword">struct</span> account_state <span class="token punctuation">{</span>    <span class="token keyword">int</span> initial_balance<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始金额</span>    <span class="token keyword">int</span> withdraw_amount<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//　取钱金额</span>    <span class="token keyword">int</span> final_balance<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//　　　最终金额</span>    <span class="token keyword">bool</span> success<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 　　是否取钱成功</span>    <span class="token keyword">friend</span> ostream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> account_state <span class="token operator">&amp;</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        os <span class="token operator">&lt;&lt;</span> <span class="token string">"initial_balance: "</span> <span class="token operator">&lt;&lt;</span> state<span class="token punctuation">.</span>initial_balance           <span class="token operator">&lt;&lt;</span> <span class="token string">" withdraw_amount: "</span> <span class="token operator">&lt;&lt;</span> state<span class="token punctuation">.</span>withdraw_amount           <span class="token operator">&lt;&lt;</span> <span class="token string">" final_balance: "</span> <span class="token operator">&lt;&lt;</span> state<span class="token punctuation">.</span>final_balance           <span class="token operator">&lt;&lt;</span> <span class="token string">" success: "</span> <span class="token operator">&lt;&lt;</span> state<span class="token punctuation">.</span>success<span class="token punctuation">;</span>        <span class="token keyword">return</span> os<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继承BankAccountTest类，以便使用account</span><span class="token comment" spellcheck="true">//继承testing::WithParamInterface&lt;参数>　，这里的参数指定为账户状态account_state</span><span class="token keyword">struct</span> WithdrawAccountTest <span class="token operator">:</span> BankAccountTest<span class="token punctuation">,</span> testing<span class="token operator">::</span>WithParamInterface<span class="token operator">&lt;</span>account_state<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">WithdrawAccountTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        account<span class="token operator">-</span><span class="token operator">></span>balance <span class="token operator">=</span> <span class="token function">GetParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>initial_balance<span class="token punctuation">;</span>　<span class="token comment" spellcheck="true">//GetParam()来调用相应的账户状态</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数必须是类名。测试最终余额</span><span class="token function">TEST_P</span><span class="token punctuation">(</span>WithdrawAccountTest<span class="token punctuation">,</span> FinalBalance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">auto</span> as <span class="token operator">=</span> <span class="token function">GetParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> success <span class="token operator">=</span> account<span class="token operator">-</span><span class="token operator">></span><span class="token function">withdraw</span><span class="token punctuation">(</span>as<span class="token punctuation">.</span>withdraw_amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    需要取出　as.withdraw_amount　块钱，测是是否成功</span>    <span class="token function">EXPECT_EQ</span><span class="token punctuation">(</span>as<span class="token punctuation">.</span>final_balance<span class="token punctuation">,</span> account<span class="token operator">-</span><span class="token operator">></span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EXPECT_EQ</span><span class="token punctuation">(</span>as<span class="token punctuation">.</span>success<span class="token punctuation">,</span> success<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//TEST_P不能直接运行，需要用INSTANTIATE_TEST_CASE_P给它指定相应的参数</span><span class="token function">INSTANTIATE_TEST_CASE_P</span><span class="token punctuation">(</span>Default<span class="token punctuation">,</span> WithdrawAccountTest<span class="token punctuation">,</span>                        testing<span class="token operator">::</span><span class="token function">Values</span><span class="token punctuation">(</span>                                account_state<span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                account_state<span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span>                        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以从100中取出50；不可以从100中取出200.这里没有用到final_balance</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    testing<span class="token operator">::</span><span class="token function">InitGoogleTest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">RUN_ALL_TESTS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>构建文件CMakeLists.txt</li></ul><pre><code>cmake_minimum_required(VERSION 3.10)project(gtest3)set(CMAKE_CXX_STANDARD 14)#加载gtest相关的头文件和库文件find_package(GTest REQUIRED)include_directories(${GTEST_INCLUDE_DIRS})# 简单的TEST，TEST_F,TEST_P用例add_executable(demo2 demo2_bank.cpp)target_link_libraries(demo2 ${GTEST_LIBRARIES} pthread)</code></pre><p>最终结果为<br><img src="https://i.loli.net/2021/10/12/qxWEGUiovL3hkpn.png" alt="20211012102206"></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="官方文档GUIDES"><a href="#官方文档GUIDES" class="headerlink" title="官方文档GUIDES"></a>官方文档GUIDES</h2><h3 id="Googletest-Primer"><a href="#Googletest-Primer" class="headerlink" title="Googletest Primer"></a>Googletest Primer</h3><p>Googletest Primer的<a href="http://www.yeolar.com/note/2014/12/21/gtest/" target="_blank" rel="noopener">中文翻译版</a></p><ul><li>ASSERT_<em> versions generate fatal failures when they fail, and abort the current function. EXPECT_</em> versions generate nonfatal failures, which don’t abort the current function. Usually EXPECT_<em> are preferred, as they allow more than one failure to be reported in a test. However, you should use ASSERT_</em> if it doesn’t make sense to continue when the assertion in question fails.</li></ul><p><img src="https://i.loli.net/2021/10/10/1E3DApcsQU8JImi.png" alt="20211010171137"></p><ul><li>Test Fixtures：Using the Same Data Configuration for Multiple Tests</li></ul><p><img src="https://i.loli.net/2021/10/10/BIZAgyoajWCOKLd.png" alt="20211010172702"></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2021/10/06/c/she-ji-mo-shi/"/>
      <url>/2021/10/06/c/she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://refactoringguru.cn/" target="_blank" rel="noopener">Refactoring.Guru</a><br><a href="https://design-patterns.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">图说设计模式</a></p></blockquote><h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><p>创建型模式提供创建对象的机制， 增加已有代码的灵活性和可复用性。</p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p><img src="https://i.loli.net/2021/10/06/E5ArbziCxah3P4Y.png" alt></p><p>工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的责任，而仅仅“消费”产品；简单工厂模式通过这种做法实现了对责任的分割，它提供了<strong>专门的工厂类用于创建对象</strong>。</p><p>简单工厂模式最大的优点在于实现<strong>对象的创建和对象的使用分离</strong>，将对象的创建交给专门的工厂类负责</p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>工厂方法解决了在<strong>不指定具体类的情况下创建产品对象</strong>的问题。如果你希望用户能扩展你软件库或框架的内部组件， 可使用工厂方法</p><p>假设你使用开源 UI 框架编写自己的应用。 你希望在应用中使用圆形按钮， 但是原框架仅支持矩形按钮。 你可以使用 圆形按钮Round­Button子类来继承标准的 按钮Button类。 但是， 你需要告诉 UI框架UIFramework类使用新的子类按钮代替默认按钮。</p><p>为了实现这个功能， 你可以根据基础框架类开发子类 圆形按钮 UIUIWith­Round­Buttons ， 并且重写其 create­Button创建按钮方法。 基类中的该方法返回 按钮对象， 而你开发的子类返回 圆形按钮对象。 现在， 你就可以使用 圆形按钮 UI类代替 UI框架类</p><p><img src="https://i.loli.net/2021/10/06/IhZq3dvnkafgzHl.png" alt></p><p>在工厂方法模式中，工厂父类负责定义<strong>创建产品对象的公共接口</strong>，而工厂子类则负责<strong>生成具体的产品对象</strong>，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</p><p>在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。这个核心类仅仅负责<strong>给出具体工厂必须实现的接口</strong>，而不负责哪一个产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品</p><p>客户端代码仅通过其抽象接口与工厂和产品进行交互。 该接口允许同一客户端代码与不同产品进行交互。 你只需<strong>创建一个具体工厂类并将其传递给客户端</strong>代码即可</p><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p><img src="https://i.loli.net/2021/10/07/ZaIpCy6Ff87GOJA.png" alt></p><p>当系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构中属于不同类型的具体产品时（比如一个公司既生产电视，又生产手机，手表等产品）需要使用抽象工厂模式。</p><p>抽象工厂模式包含四个角色：</p><ul><li>抽象工厂用于声明生成抽象产品的方法；</li><li>具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；</li><li>抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；</li><li>具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Each distinct product of a product family should have a base interface. All * variants of the product must implement this interface. */</span><span class="token comment" spellcheck="true">// 电视类</span><span class="token keyword">class</span> <span class="token class-name">AbstractProductA</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">AbstractProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> std<span class="token operator">::</span>string <span class="token function">UsefulFunctionA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Concrete Products are created by corresponding Concrete Factories. */</span><span class="token comment" spellcheck="true">// 华为电视类</span><span class="token keyword">class</span> <span class="token class-name">ConcreteProductA1</span> <span class="token operator">:</span> <span class="token keyword">public</span> AbstractProductA <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    std<span class="token operator">::</span>string <span class="token function">UsefulFunctionA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"The result of the product A1."</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小米电视类</span><span class="token keyword">class</span> <span class="token class-name">ConcreteProductA2</span> <span class="token operator">:</span> <span class="token keyword">public</span> AbstractProductA <span class="token punctuation">{</span>    std<span class="token operator">::</span>string <span class="token function">UsefulFunctionA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"The result of the product A2."</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Here's the the base interface of another product. All products can interact * with each other, but proper interaction is possible only between products of * the same concrete variant. */</span><span class="token comment" spellcheck="true">// 手机类</span><span class="token keyword">class</span> <span class="token class-name">AbstractProductB</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Product B is able to do its own thing...     */</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">AbstractProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> std<span class="token operator">::</span>string <span class="token function">UsefulFunctionB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * ...but it also can collaborate with the ProductA.     *     * The Abstract Factory makes sure that all products it creates are of the     * same variant and thus, compatible.     */</span><span class="token comment" spellcheck="true">//     这个函数可以类比为：函数参数是一个电视类，可以用手机来操控电视</span>    <span class="token keyword">virtual</span> std<span class="token operator">::</span>string <span class="token function">AnotherUsefulFunctionB</span><span class="token punctuation">(</span><span class="token keyword">const</span> AbstractProductA <span class="token operator">&amp;</span>collaborator<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Concrete Products are created by corresponding Concrete Factories. */</span><span class="token comment" spellcheck="true">// 华为手机类</span><span class="token keyword">class</span> <span class="token class-name">ConcreteProductB1</span> <span class="token operator">:</span> <span class="token keyword">public</span> AbstractProductB <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    std<span class="token operator">::</span>string <span class="token function">UsefulFunctionB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"The result of the product B1."</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * The variant, Product B1, is only able to work correctly with the variant,     * Product A1. Nevertheless, it accepts any instance of AbstractProductA as an     * argument.     */</span><span class="token comment" spellcheck="true">//     用华为手机操控电视</span>    std<span class="token operator">::</span>string <span class="token function">AnotherUsefulFunctionB</span><span class="token punctuation">(</span><span class="token keyword">const</span> AbstractProductA <span class="token operator">&amp;</span>collaborator<span class="token punctuation">)</span> <span class="token keyword">const</span> override <span class="token punctuation">{</span>        <span class="token keyword">const</span> std<span class="token operator">::</span>string result <span class="token operator">=</span> collaborator<span class="token punctuation">.</span><span class="token function">UsefulFunctionA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"The result of the B1 collaborating with ( "</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">" )"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小米手机类</span><span class="token keyword">class</span> <span class="token class-name">ConcreteProductB2</span> <span class="token operator">:</span> <span class="token keyword">public</span> AbstractProductB <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    std<span class="token operator">::</span>string <span class="token function">UsefulFunctionB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"The result of the product B2."</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * The variant, Product B2, is only able to work correctly with the variant,     * Product A2. Nevertheless, it accepts any instance of AbstractProductA as an     * argument.     */</span><span class="token comment" spellcheck="true">//     用小米手机操控电视</span>    std<span class="token operator">::</span>string <span class="token function">AnotherUsefulFunctionB</span><span class="token punctuation">(</span><span class="token keyword">const</span> AbstractProductA <span class="token operator">&amp;</span>collaborator<span class="token punctuation">)</span> <span class="token keyword">const</span> override <span class="token punctuation">{</span>        <span class="token keyword">const</span> std<span class="token operator">::</span>string result <span class="token operator">=</span> collaborator<span class="token punctuation">.</span><span class="token function">UsefulFunctionA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"The result of the B2 collaborating with ( "</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">" )"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * The Abstract Factory interface declares a set of methods that return * different abstract products. These products are called a family and are * related by a high-level theme or concept. Products of one family are usually * able to collaborate among themselves. A family of products may have several * variants, but the products of one variant are incompatible with products of * another. */</span><span class="token comment" spellcheck="true">// 抽象的工厂类。比如这个公司既生产电视，又生产手机</span><span class="token keyword">class</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> AbstractProductA <span class="token operator">*</span><span class="token function">CreateProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> AbstractProductB <span class="token operator">*</span><span class="token function">CreateProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Concrete Factories produce a family of products that belong to a single * variant. The factory guarantees that resulting products are compatible. Note * that signatures of the Concrete Factory's methods return an abstract product, * while inside the method a concrete product is instantiated. */</span><span class="token comment" spellcheck="true">// 华为公司类，这个类用于构建对应的电视对象和手机对象</span><span class="token keyword">class</span> <span class="token class-name">ConcreteFactory1</span> <span class="token operator">:</span> <span class="token keyword">public</span> AbstractFactory <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    AbstractProductA <span class="token operator">*</span><span class="token function">CreateProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">ConcreteProductA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 构建华为电视对象</span>    <span class="token punctuation">}</span>    AbstractProductB <span class="token operator">*</span><span class="token function">CreateProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">ConcreteProductB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 构建华为手机对象</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Each Concrete Factory has a corresponding product variant. */</span><span class="token comment" spellcheck="true">// 小米公司类，这个类用于构建对应的电视对象和手机对象</span><span class="token keyword">class</span> <span class="token class-name">ConcreteFactory2</span> <span class="token operator">:</span> <span class="token keyword">public</span> AbstractFactory <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    AbstractProductA <span class="token operator">*</span><span class="token function">CreateProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">ConcreteProductA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 构建小米电视对象</span>    <span class="token punctuation">}</span>    AbstractProductB <span class="token operator">*</span><span class="token function">CreateProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">ConcreteProductB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 构建小米手机对象</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * The client code works with factories and products only through abstract * types: AbstractFactory and AbstractProduct. This lets you pass any factory or * product subclass to the client code without breaking it. */</span><span class="token comment" spellcheck="true">//客户端只需和抽象的电视类和手机类进行交互</span><span class="token keyword">void</span> <span class="token function">ClientCode</span><span class="token punctuation">(</span><span class="token keyword">const</span> AbstractFactory <span class="token operator">&amp;</span>factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> AbstractProductA <span class="token operator">*</span>product_a <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> AbstractProductB <span class="token operator">*</span>product_b <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> product_b<span class="token operator">-</span><span class="token operator">></span><span class="token function">UsefulFunctionB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> product_b<span class="token operator">-</span><span class="token operator">></span><span class="token function">AnotherUsefulFunctionB</span><span class="token punctuation">(</span><span class="token operator">*</span>product_a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> product_a<span class="token punctuation">;</span>    <span class="token keyword">delete</span> product_b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Client: Testing client code with the first factory type:\n"</span><span class="token punctuation">;</span>    ConcreteFactory1 <span class="token operator">*</span>f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ConcreteFactory1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ClientCode</span><span class="token punctuation">(</span><span class="token operator">*</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 客户与华为的产品交互</span>    <span class="token keyword">delete</span> f1<span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Client: Testing the same client code with the second factory type:\n"</span><span class="token punctuation">;</span>    ConcreteFactory2 <span class="token operator">*</span>f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ConcreteFactory2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ClientCode</span><span class="token punctuation">(</span><span class="token operator">*</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 客户与小米的产品交互</span>    <span class="token keyword">delete</span> f2<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Client: Testing client code with the first factory type:</span><span class="token comment" spellcheck="true">//The result of the product B1.</span><span class="token comment" spellcheck="true">//The result of the B1 collaborating with ( The result of the product A1. )</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//Client: Testing the same client code with the second factory type:</span><span class="token comment" spellcheck="true">//The result of the product B2.</span><span class="token comment" spellcheck="true">//The result of the B2 collaborating with ( The result of the product A2. )</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="建造者模式（生成器模式）"><a href="#建造者模式（生成器模式）" class="headerlink" title="建造者模式（生成器模式）"></a>建造者模式（生成器模式）</h2><p>无论是在现实世界中还是在软件系统中，都存在一些复杂的对象，它们拥有多个组成部分，如汽车，它包括车轮、方向盘、发送机等各种部件。而对于大多数用户而言，无须知道这些部件的装配细节，也几乎不会使用单独某个部件，而是使用一辆完整的汽车，可以通过建造者模式对其进行设计与描述，建造者模式可以将部件和其组装过程分开，一步一步<strong>创建一个复杂的对象</strong>。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</p><p>在软件开发中，也存在大量类似汽车一样的复杂对象，它们拥有一系列成员属性，这些成员属性中有些是引用类型的成员对象。而且在这些复杂对象中，还可能存在一些限制条件，如某些属性没有赋值则复杂对象不能作为一个完整的产品使用；有些属性的赋值必须按照某个顺序，一个属性没有赋值之前，另一个属性可能无法赋值等。</p><p>复杂对象相当于一辆有待建造的汽车，而对象的属性相当于汽车的部件，<strong>建造产品的过程就相当于组合部件的过程</strong>。由于组合部件的过程很复杂，因此，这些部件的<strong>组合过程往往被“外部化”到一个称作建造者的对象里</strong>，建造者返还给客户端的是一个已经建造完毕的完整产品对象，而用户无须关心该对象所包含的属性以及它们的组装方式，这就是建造者模式的模式动机。</p><p><img src="https://i.loli.net/2021/10/07/6u475bxBIDpmYvR.png" alt></p><p>建造者模式的结构中还引入了一个指挥者类Director，该类的作用主要有两个：一方面它隔离了客户与生产过程；另一方面它负责控制产品的生成过程。<strong>指挥者针对抽象建造者编程</strong>，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象</p><p>在客户端代码中，无须关心产品对象的具体组装过程，只需确定具体建造者的类型即可，建造者模式将复杂对象的构建与对象的表现分离开来，这样使得同样的构建过程可以创建出不同的表现。</p><p><img src="https://i.loli.net/2021/10/07/IeKj68pFN1A7lVh.png" alt></p><ul><li>优点<ul><li>在建造者模式中， 客户端不必知道产品内部组成的细节，<strong>将产品本身与产品的创建过程解耦</strong>，使得相同的创建过程可以创建不同的产品对象。</li><li>每一个具体建造者都<strong>相对独立</strong>，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者， 用户使用不同的具体建造者即可得到不同的产品对象 。</li><li>可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li><li>增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”。</li></ul></li></ul><p>建造者模式包含如下四个角色：</p><ul><li>抽象建造者为创建一个产品对象的各个部件指定抽象接口；（要有主食,饮料,甜点等）</li><li>具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；（实现各个部件的构造和装配）</li><li>产品角色是被构建的复杂对象，包含多个组成部件；（建好的套餐）</li><li>指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造 （KFC服务员，用来指挥建造者如何构建套餐，比如汉堡配可乐，汉堡配可乐配冰淇淋，鸡肉卷配豆浆）</li></ul><blockquote><p>假设第一个建造者使用木头和玻璃制造房屋， 第二个建造者使用石头和钢铁， 而第三个建造者使用黄金和钻石。 在调用同一组步骤后， 第一个建造者会给你一栋普通房屋， 第二个会给你一座小城堡， 而第三个则会给你一座宫殿。 但是， 只有在调用构造步骤的客户端代码可以通过通用接口与建造者进行交互时， 这样的调用才能返回需要的房屋。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * It makes sense to use the Builder pattern only when your products are quite * complex and require extensive configuration. * * Unlike in other creational patterns, different concrete builders can produce * unrelated products. In other words, results of various builders may not * always follow the same interface. */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//具体的产品：建好的套餐，套餐中可能包含不同的parts（可能是各种主食和（或）饮料和（或）甜点的组合）</span><span class="token keyword">class</span> <span class="token class-name">Product1</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> parts_<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    展示套餐中包含的内容</span>    <span class="token keyword">void</span> <span class="token function">ListParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Product parts: "</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>parts_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>parts_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span> parts_<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> parts_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> parts_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * The Builder interface specifies methods for creating the different parts of * the Product objects. */</span><span class="token keyword">class</span> <span class="token class-name">Builder</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">ProducePartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 生产主食</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">ProducePartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 生产饮料</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">ProducePartC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 生产甜点</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * The Concrete Builder classes follow the Builder interface and provide * specific implementations of the building steps. Your program may have several * variations of Builders, implemented differently. */</span><span class="token comment" spellcheck="true">// 具体的建造者：实现各个部件的构造和装配</span><span class="token keyword">class</span> <span class="token class-name">ConcreteBuilder1</span> <span class="token operator">:</span> <span class="token keyword">public</span> Builder<span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    Product1<span class="token operator">*</span> product<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * A fresh builder instance should contain a blank product object, which is     * used in further assembly.     */</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ConcreteBuilder1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">ConcreteBuilder1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">delete</span> product<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>product<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Product1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 产生一个新的产品</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * All production steps work with the same product instance.     */</span>    <span class="token keyword">void</span> <span class="token function">ProducePartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> override<span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>product<span class="token operator">-</span><span class="token operator">></span>parts_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"PartA1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 套餐中放一个主食</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">ProducePartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> override<span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>product<span class="token operator">-</span><span class="token operator">></span>parts_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"PartB1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 套餐中放一个饮料</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">ProducePartC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> override<span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>product<span class="token operator">-</span><span class="token operator">></span>parts_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"PartC1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 套餐中翻一个甜点</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Concrete Builders are supposed to provide their own methods for     * retrieving results. That's because various types of builders may create     * entirely different products that don't follow the same interface.     * Therefore, such methods cannot be declared in the base Builder interface     * (at least in a statically typed programming language). Note that PHP is a     * dynamically typed language and this method CAN be in the base interface.     * However, we won't declare it there for the sake of clarity.     *     * Usually, after returning the end result to the client, a builder instance     * is expected to be ready to start producing another product. That's why     * it's a usual practice to call the reset method at the end of the     * `getProduct` method body. However, this behavior is not mandatory, and     * you can make your builders wait for an explicit reset call from the     * client code before disposing of the previous result.     */</span>    <span class="token comment" spellcheck="true">/**     * Please be careful here with the memory ownership. Once you call     * GetProduct the user of this function is responsable to release this     * memory. Here could be a better option to use smart pointers to avoid     * memory leaks     */</span>    Product1<span class="token operator">*</span> <span class="token function">GetProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Product1<span class="token operator">*</span> result<span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>product<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * The Director is only responsible for executing the building steps in a * particular sequence. It is helpful when producing products according to a * specific order or configuration. Strictly speaking, the Director class is * optional, since the client can control builders directly. */</span><span class="token comment" spellcheck="true">// 服务员的角色：负责告诉建造者怎么组装套餐，是只有主食，还是既有主食又有饮料</span><span class="token keyword">class</span> <span class="token class-name">Director</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @var Builder     */</span><span class="token keyword">private</span><span class="token operator">:</span>    Builder<span class="token operator">*</span> builder<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The Director works with any builder instance that the client code passes     * to it. This way, the client code may alter the final type of the newly     * assembled product.     */</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">set_builder</span><span class="token punctuation">(</span>Builder<span class="token operator">*</span> builder<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>builder<span class="token operator">=</span>builder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * The Director can construct several product variations using the same     * building steps.     */</span>    <span class="token keyword">void</span> <span class="token function">BuildMinimalViableProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 套餐中只有主食</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>builder<span class="token operator">-</span><span class="token operator">></span><span class="token function">ProducePartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">BuildFullFeaturedProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 套餐中都有</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>builder<span class="token operator">-</span><span class="token operator">></span><span class="token function">ProducePartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>builder<span class="token operator">-</span><span class="token operator">></span><span class="token function">ProducePartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>builder<span class="token operator">-</span><span class="token operator">></span><span class="token function">ProducePartC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * The client code creates a builder object, passes it to the director and then * initiates the construction process. The end result is retrieved from the * builder object. */</span><span class="token comment" spellcheck="true">/** * I used raw pointers for simplicity however you may prefer to use smart * pointers here */</span><span class="token comment" spellcheck="true">// 客户只需要和服务员进行交互</span><span class="token keyword">void</span> <span class="token function">ClientCode</span><span class="token punctuation">(</span>Director<span class="token operator">&amp;</span> director<span class="token punctuation">)</span><span class="token punctuation">{</span>    ConcreteBuilder1<span class="token operator">*</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ConcreteBuilder1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    director<span class="token punctuation">.</span><span class="token function">set_builder</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Standard basic product:\n"</span><span class="token punctuation">;</span>    director<span class="token punctuation">.</span><span class="token function">BuildMinimalViableProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Product1<span class="token operator">*</span> p<span class="token operator">=</span> builder<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">ListParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> p<span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Standard full featured product:\n"</span><span class="token punctuation">;</span>    director<span class="token punctuation">.</span><span class="token function">BuildFullFeaturedProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">=</span> builder<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">ListParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> p<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Remember, the Builder pattern can be used without a Director class.</span><span class="token comment" spellcheck="true">//    不用服务员的话，也可以自行组装套餐</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Custom product:\n"</span><span class="token punctuation">;</span>    builder<span class="token operator">-</span><span class="token operator">></span><span class="token function">ProducePartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token operator">-</span><span class="token operator">></span><span class="token function">ProducePartC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">=</span>builder<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">ListParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> p<span class="token punctuation">;</span>    <span class="token keyword">delete</span> builder<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Director<span class="token operator">*</span> director<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Director</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ClientCode</span><span class="token punctuation">(</span><span class="token operator">*</span>director<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> director<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>对于系统中的某些类来说，只有一个实例很重要，例如，一个系统中可以存在多个打印任务，但是只能有一个正在工作的任务；一个系统只能有一个计时工具。</p><p>所以要让类自身负责保存它的<strong>唯一实例</strong>。这个类可以保证<strong>没有其他实例被创建</strong>，并且它可以提供一个访问该实例的方法。这就是单例模式的模式动机。</p><p>单例模式的要点有三个：一是某个类<strong>只能有一个实例</strong>；二是它必须<strong>自行创建这个实例</strong>；三是它必须自行向<strong>整个系统</strong>提供这个实例。</p><ul><li>单例类拥有一个<strong>私有构造函数</strong>，确保用户无法通过new关键字直接实例化它。除此之外，该模式中包含一个<strong>静态私有成员变量</strong>与静态公有的工厂方法，该工厂方法负责<strong>检验实例的存在性并实例化自己</strong>，然后存储在静态成员变量中，以确保只有一个实例被创建<ul><li>将默认构造函数设为私有， 防止其他对象使用单例类的new运算符。</li><li>新建一个静态构建方法作为构造函数。 该函数会 “偷偷” 调用私有构造函数来创建对象， 并将其保存在一个静态成员变量中。 此后所有对于该函数的调用都将返回这一缓存对象。</li></ul></li></ul><p><img src="https://i.loli.net/2021/10/07/IWCx8DuRq6lsNOm.png" alt></p><blockquote><p><a href="https://www.tutorialspoint.com/Explain-Cplusplus-Singleton-design-pattern" target="_blank" rel="noopener">Explain C++ Singleton design pattern.</a></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> data_<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    私有的静态成员变量：实例instance</span>    <span class="token keyword">static</span> Singleton <span class="token operator">*</span>instance<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    私有的构造函数，确保只有类本身能够实例化它</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    赋值构造和拷贝构造函数都设为delete</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span>Singleton <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>    Singleton <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Singleton <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    公有的静态方法，负责检查实例的存在及实例化自己</span>    <span class="token keyword">static</span> Singleton <span class="token operator">*</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    对实例的操作数据进行赋值及取值操作</span>    <span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data_<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data_ <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要初始化静态成员变量</span>Singleton <span class="token operator">*</span>Singleton<span class="token operator">::</span>instance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    把实例赋值给s指针</span>    Singleton <span class="token operator">*</span>s <span class="token operator">=</span> Singleton<span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s<span class="token operator">-</span><span class="token operator">></span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始数据为0</span>    Singleton <span class="token operator">*</span>s1 <span class="token operator">=</span> Singleton<span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s1<span class="token operator">-</span><span class="token operator">></span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s1<span class="token operator">-</span><span class="token operator">></span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// s和s1都是同一个东西，赋值后数据为100</span><span class="token comment" spellcheck="true">//    s和s1相同，都在同一个地址中</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> s1 <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">// 100</span><span class="token comment" spellcheck="true">// 0x1a1c20</span><span class="token comment" spellcheck="true">// 0x1a1c20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><p>结构型模式(Structural Pattern)描述如何将<strong>类</strong>或者<strong>对象</strong>结合在一起形成更大的结构，就像搭积木，可以通过 简单积木的组合形成复杂的、功能更为强大的结构。</p><p>结构型模式可以分为<strong>类结构型模式</strong>和<strong>对象结构型模式</strong></p><blockquote><p>在系统中尽量使用关联关系来替代继 承关系，因此大部分结构型模式都是对象结构型模式</p></blockquote><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><blockquote><p>不同国家的插座是不同的，有国标，美标，英标等。适配器如同转换插座，让电器可以适用于各种国家的插座</p></blockquote><ul><li>Target：一个玩具，默认输出一串正的字符串</li><li>Adaptee：另外一个国家有一个叫Adaptee的玩具，它输出的字符串是反的</li><li>Adapter是Target的子类：Adapter适配器类继承了Target类后，把Target类中的Request进行覆写，如果字符串是Adaptee玩具产生的，则对其进行翻转<ul><li>Adapter的构造函数为<code>(Adaptee *adaptee) : adaptee_(adaptee) {}</code>,  用这种方式把adaptee指针对象传送给Adapter</li></ul></li><li>ClientCode函数：客户端只需要和Target类型的对象交互即可。<ul><li><code>ClientCode(target)</code>：Target的Request函数正常输出正序字符串</li><li><code>ClientCode(adapter)</code>：如果是Adaptee产生的字符串，因为用了adapter适配器，Target的Request函数同样正序输出</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token comment" spellcheck="true">//using namespace std;</span><span class="token comment" spellcheck="true">/** * The Target defines the domain-specific interface used by the client code. */</span><span class="token comment" spellcheck="true">//target：一个玩具，默认输出一串正的字符串</span><span class="token keyword">class</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Target</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> std<span class="token operator">::</span>string <span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Target: The default target's behavior."</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * The Adaptee contains some useful behavior, but its interface is incompatible * with the existing client code. The Adaptee needs some adaptation before the * client code can use it. */</span><span class="token comment" spellcheck="true">// 另外一个国家有一个叫Adaptee的玩具，它输出的字符串是反的</span><span class="token keyword">class</span> <span class="token class-name">Adaptee</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    std<span class="token operator">::</span>string <span class="token function">SpecificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">".eetpadA eht fo roivaheb laicepS"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * The Adapter makes the Adaptee's interface compatible with the Target's * interface. */</span><span class="token comment" spellcheck="true">// Adapter适配器类继承了Target类后，把Target类中的Request进行覆写，如果字符串是Adaptee玩具产生的，则对其进行翻转</span><span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token operator">:</span> <span class="token keyword">public</span> Target <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    Adaptee <span class="token operator">*</span>adaptee_<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Adapter</span><span class="token punctuation">(</span>Adaptee <span class="token operator">*</span>adaptee<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">adaptee_</span><span class="token punctuation">(</span>adaptee<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    std<span class="token operator">::</span>string <span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 覆写Target类中的Request函数</span>        std<span class="token operator">::</span>string to_reverse <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>adaptee_<span class="token operator">-</span><span class="token operator">></span><span class="token function">SpecificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token operator">::</span><span class="token function">reverse</span><span class="token punctuation">(</span>to_reverse<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> to_reverse<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Adapter: (TRANSLATED) "</span> <span class="token operator">+</span> to_reverse<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * The client code supports all classes that follow the Target interface. */</span><span class="token comment" spellcheck="true">// 客户端只需要和正常的Target类进行交互即可。</span><span class="token keyword">void</span> <span class="token function">ClientCode</span><span class="token punctuation">(</span><span class="token keyword">const</span> Target <span class="token operator">*</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> target<span class="token operator">-</span><span class="token operator">></span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Client: I can work just fine with the Target objects:\n"</span><span class="token punctuation">;</span>    Target <span class="token operator">*</span>target <span class="token operator">=</span> <span class="token keyword">new</span> Target<span class="token punctuation">;</span>    <span class="token function">ClientCode</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n\n"</span><span class="token punctuation">;</span>    Adaptee <span class="token operator">*</span>adaptee <span class="token operator">=</span> <span class="token keyword">new</span> Adaptee<span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Client: The Adaptee class has a weird interface. See, I don't understand it:\n"</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Adaptee: "</span> <span class="token operator">&lt;&lt;</span> adaptee<span class="token operator">-</span><span class="token operator">></span><span class="token function">SpecificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n\n"</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Client: But I can work with it via the Adapter:\n"</span><span class="token punctuation">;</span>    Adapter <span class="token operator">*</span>adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Adapter</span><span class="token punctuation">(</span>adaptee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ClientCode</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> target<span class="token punctuation">;</span>    <span class="token keyword">delete</span> adaptee<span class="token punctuation">;</span>    <span class="token keyword">delete</span> adapter<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Client: I can work just fine with the Target objects:</span><span class="token comment" spellcheck="true">//Target: The default target's behavior.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//Client: The Adaptee class has a weird interface. See, I don't understand it:</span><span class="token comment" spellcheck="true">//Adaptee: .eetpadA eht fo roivaheb laicepS</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        Client: But I can work with it via the Adapter:</span><span class="token comment" spellcheck="true">//Adapter: (TRANSLATED) Special behavior of the Adaptee.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>适配器也可以通过多重继承的方式，覆写Target的Request函数</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 通过多重继承，覆写Target的Request请求</span><span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token operator">:</span> <span class="token keyword">public</span> Target<span class="token punctuation">,</span> <span class="token keyword">public</span> Adaptee <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Adapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    std<span class="token operator">::</span>string <span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override <span class="token punctuation">{</span>        std<span class="token operator">::</span>string to_reverse <span class="token operator">=</span> <span class="token function">SpecificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token operator">::</span><span class="token function">reverse</span><span class="token punctuation">(</span>to_reverse<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> to_reverse<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Adapter: (TRANSLATED) "</span> <span class="token operator">+</span> to_reverse<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p><img src="https://i.loli.net/2021/10/08/7FAOLa8HwbEIvM1.png" alt><br>为了使组合类的数量不要增长太多，桥接模式通过将继承改为<strong>组合</strong>的方式来解决这个问题。 具体来说， 就是抽取其中一个维度并使之成为独立的类层次， 这样就可以在初始类中引用这个新层次的对象， 从而使得一个类不必拥有所有的状态和行为。</p><p><img src="https://i.loli.net/2021/10/08/F4Nvj69KmhBukiE.png" alt><br><img src="https://i.loli.net/2021/10/08/mQkcnPKSwe4b3NG.png" alt><br>抽象对象控制程序的外观， 并将真实工作委派给连入的实现对象。 不同的实现只要遵循相同的接口就可以互换， 使同一 GUI 可在 Windows 和 Linux 下运行。</p><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p><img src="https://i.loli.net/2021/10/08/e8TA7j59BqcMyWV.png" alt></p><ul><li>如果你需要实现树状对象结构， 可以使用组合模式。</li><li>组合模式为你提供了两种共享公共接口的基本元素类型： 简单叶节点和复杂容器。 容器中可以包含叶节点和其他容器。 这使得你可以构建树状嵌套递归对象结构。</li><li>如果你希望客户端代码以相同方式处理简单和复杂元素， 可以使用该模式。</li><li>组合模式中定义的所有元素共用同一个接口。 在这一接口的帮助下， 客户端不必在意其所使用的对象的具体类。</li></ul><h2 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h2><p><img src="https://i.loli.net/2021/10/08/3MIVmhyGQ2SjlPv.png" alt><br><img src="https://i.loli.net/2021/10/08/vd2Nwa7mk4XeC1y.png" alt></p><p>与继承关系相比，关联关系的主要优势在于<strong>不会破坏类的封装性</strong>，而且继承是一种耦合度较大的静态关系，无法在程序运行时动态扩展。在软件开发阶段，关联关系虽然不会比继承关系减少编码量，但是到了软件维护阶段，由于关联关系使系统具有较好的松耦合性，因此使得系统更加容易维护。当然，关联关系的缺点是比继承关系要创建更多的对象。<br>使用装饰模式来实现扩展比继承更加灵活，它以对客户透明的方式动态地给一个对象附加更多的责任。装饰模式可以在不需要创造更多子类的情况下，将对象的功能加以扩展。</p><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p><img src="https://i.loli.net/2021/10/16/iOGHJRCUQFEBrgy.png" alt></p><p><img src="https://i.loli.net/2021/10/16/4BNMwpUbqmcC8vI.png" alt><br>外观类为包含许多活动部件的复杂子系统提供一个简单的接口。 与直接调用子系统相比， <strong>外观提供的功能可能比较有限， 但它却包含了客户端真正关心的功能。</strong></p><p>如果你的程序需要与包含几十种功能的复杂库整合， 但只需使用其中非常少的功能， 那么使用外观模式会非常方便，</p><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>在享元模式中可以共享的相同内容称为内部状态(IntrinsicState)，而那些需要外部环境来设置的不能共享的内容称为外部状态(Extrinsic State)，由于区分了内部状态和外部状态，因此可以通过设置不同的外部状态使得相同的对象可以具有一些不同的特征，而相同的内部状态是可以共享的。</p><p>在享元模式中通常会出现工厂模式，需要创建一个享元工厂来负责维护一个享元池(Flyweight Pool)用于存储具有相同内部状态的享元对象。</p><p>在享元模式中共享的是享元对象的内部状态，外部状态需要通过环境来设置。在实际使用中，能够共享的内部状态是有限的，因此享元对象一般都设计为较小的对象，它所包含的内部状态较少，这种对象也称为细粒度对象。享元模式的目的就是使用共享技术来实现大量细粒度对象的复用。</p><blockquote><p>对象的常量数据通常被称为内在状态， 其位于对象中， 其他对象只能读取但不能修改其数值。 而对象的其他状态常常能被其他对象 “从外部” 改变， 因此被称为外在状态。</p><p>享元模式建议<strong>不在对象中存储外在状态</strong>， 而是将其<strong>传递给依赖于它的一个特殊方法</strong>（将一个<strong>仅存储内在状态的对象称为享元</strong>）。 程序只在对象中保存内在状态， 以方便在不同情景下重用。 这些对象的区别仅在于其内在状态 （与外在状态相比， 内在状态的变体要少很多）， 因此你所需的对象数量会大大削减。</p></blockquote><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>示例1<br><img src="https://i.loli.net/2021/10/16/lWIti9CwUDZQJXB.png" alt></p><p>示例2<br><img src="https://i.loli.net/2021/10/16/N9cvgjr8sAmkp5y.png" alt></p><h1 id="行为模式"><a href="#行为模式" class="headerlink" title="行为模式"></a>行为模式</h1><p>行为模式负责对象间的高效沟通和职责委派。</p><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p><img src="https://i.loli.net/2021/10/16/V5fXF7sH2i48zrM.png" alt></p><p><img src="https://i.loli.net/2021/10/16/lAmVS7kBqQ3MXuh.png" alt></p><p><img src="https://i.loli.net/2021/10/16/mvwnQMzr7qUiXxH.png" alt></p><p><img src="https://i.loli.net/2021/10/16/FYK8nucv1MRNXa6.png" alt></p><p><img src="https://i.loli.net/2021/10/16/bvSOQxYscVyMak2.png" alt></p><h2 id="命令设计模式"><a href="#命令设计模式" class="headerlink" title="命令设计模式"></a>命令设计模式</h2><p><img src="https://i.loli.net/2021/10/18/D72yepsQkGtfzuX.png" alt><br><img src="https://i.loli.net/2021/10/18/onQbRIOqH7dSKPv.png" alt><br><img src="https://i.loli.net/2021/10/18/hCvKtixIm7qgsdU.png" alt><br><img src="https://i.loli.net/2021/10/18/zEb9VQlUp2fqun1.png" alt></p><ul><li>模式动机<br>在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是哪个，我们只需在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计，使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活。</li></ul><p>命令模式可以对发送者和接收者完全解耦 （比如点餐者和厨师），发送者与接收者之间没有直接引用关系，发送请求的对象只需要知道如何发送请求，而不必知道如何完成请求。这就是命令模式的模式动机。</p><ul><li>模式定义<br>命令模式(Command Pattern)：将<strong>一个请求封装为一个对象</strong>，从而使我们可用不同的请求对客户进行参数化（比如不同的顾客有不同的点餐单）；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式是一种对象行为型模式，其别名为动作(Action)模式或事务(Transaction)模式。</li></ul><h2 id="中介者设计模式"><a href="#中介者设计模式" class="headerlink" title="中介者设计模式"></a>中介者设计模式</h2><p><img src="https://i.loli.net/2021/10/18/DEhzWKT5fH9aJnB.png" alt><br><img src="https://i.loli.net/2021/10/18/8Q9fkdPYaqxGU3m.png" alt><br><img src="https://i.loli.net/2021/10/18/3G1JTzBos7wyI2b.png" alt></p><p>对于一个模块，可能由很多对象构成，而且这些对象之间可能存在相互的引用，为了<strong>减少对象两两之间复杂的引用关系</strong>，使之成为一个松耦合的系统，我们需要使用中介者模式，这就是中介者模式的模式动机。</p><p>中介者模式(Mediator Pattern)定义：用一个中介对象来<strong>封装一系列的对象交互</strong>，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式又称为调停者模式，它是一种对象行为型模式。</p><p>中介者模式可以使对象之间的关系数量急剧减少。中介者承担两方面的职责：</p><ul><li>中转作用（结构性）：通过中介者提供的中转作用，各个同事对象就不再需要显式引用其他同事，当需要和其他同事进行通信时，通过中介者即可。该中转作用属于中介者在结构上的支持。</li><li>协调作用（行为性）：中介者可以更进一步的对同事之间的关系进行封装，同事可以一致地和中介者进行交互，而不需要指明中介者需要具体怎么做，中介者根据封装在自身内部的协调逻辑，对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。该协调作用属于中介者在行为上的支持。</li></ul><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p><img src="https://i.loli.net/2021/10/18/qN1tskL4RaxcPAv.png" alt><br><img src="https://i.loli.net/2021/10/18/L5wTougnRkeYUAd.png" alt><br><img src="https://i.loli.net/2021/10/18/KVFoYWycgAB6t3R.png" alt><br><img src="https://i.loli.net/2021/10/18/WQolk1uZUaxBmsR.png" alt></p><ul><li><p>模式动机<br>建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应做出反应。在此，发生改变的对象称为观察目标，而被通知的对象称为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间没有相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展，这就是观察者模式的模式动机。</p></li><li><p>模式定义<br>观察者模式(Observer Pattern)：定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式又叫做发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。</p></li></ul><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><p>其主要思想是程序在任意时刻仅可处于几种有限的状态中。 在任何一个特定状态中， 程序的行为都不相同， 且可瞬间从一个状态切换到另一个状态。 不过， 根据当前状态， 程序可能会切换到另外一种状态， 也可能会保持当前状态不变。 这些数量有限且预先定义的状态切换规则被称为转移。</p><p>你还可将该方法应用在对象上。 假如你有一个 文档Document类。 文档可能会处于 草稿Draft 、 ​ 审阅中Moderation和 已发布Published三种状态中的一种。 文档的 publish发布方法在不同状态下的行为略有不同：</p><ul><li>处于 草稿状态时， 它会将文档转移到审阅中状态。</li><li>处于 审阅中状态时， 如果当前用户是管理员， 它会公开发布文档。</li><li>处于 已发布状态时， 它不会进行任何操作。</li></ul><p><img src="https://i.loli.net/2021/10/18/3qaeFSfL2nTymgx.png" alt="20211018155025"></p><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>策略模式是一种行为设计模式， 它能让你定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换。</p><p>策略模式建议找出负责用许多不同方式完成特定任务的类， 然后<strong>将其中的算法抽取到一组被称为策略的独立类中</strong>。</p><p><img src="https://i.loli.net/2021/10/18/qpQyk5cNUJT974G.png" alt="20211018171805"><br><img src="https://i.loli.net/2021/10/18/3MrR7lxFGiWVsnt.png" alt="20211018171920"></p><ul><li><p>模式动机</p><ul><li>完成一项任务，往往可以有多种不同的方式，每一种方式称为一个策略，我们可以根据环境或者条件的不同选择不同的策略来完成该项任务。</li><li>在软件开发中也常常遇到类似的情况，实现某一个功能有多个途径，此时可以使用一种设计模式来使得系统可以灵活地选择解决途径，也能够方便地增加新的解决途径。</li><li>在软件系统中，有许多算法可以实现某一功能，如查找、排序等，一种常用的方法是硬编码(Hard Coding)在一个类中，如需要提供多种查找算法，可以将这些算法写到一个类中，在该类中提供多个方法，每一个方法对应一个具体的查找算法；当然也可以将这些查找算法封装在一个统一的方法中，通过if…else…等条件判断语句来进行选择。这两种实现方法我们都可以称之为硬编码，如果需要增加一种新的查找算法，需要修改封装算法类的源代码；更换查找算法，也需要修改客户端调用代码。在这个算法类中封装了大量查找算法，该类代码将较复杂，维护较为困难。</li><li>除了提供专门的查找算法类之外，还可以在客户端程序中直接包含算法代码，这种做法更不可取，将导致客户端程序庞大而且难以维护，如果存在大量可供选择的算法时问题将变得更加严重。</li><li>为了解决这些问题，<strong>可以定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法，在这里，每一个封装算法的类我们都可以称之为策略(Strategy)，为了保证这些策略的一致性，一般会用一个抽象的策略类来做算法的定义，而具体每种算法则对应于一个具体策略类。</strong></li></ul></li><li><p>模式定义<br>策略模式(Strategy Pattern)：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。</p></li></ul><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p><img src="https://i.loli.net/2021/10/18/AwTqYQtnB2VJ46d.png" alt="20211018172953"><br><img src="https://i.loli.net/2021/10/18/IGXaJMp45HUs97T.png" alt="20211018173156"></p><p>还有另一种名为钩子的步骤。 钩子是内容为空的可选步骤。 即使不重写钩子， 模板方法也能工作。 钩子通常放置在算法重要步骤的前后， 为子类提供额外的算法扩展点。</p><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><p>访问者模式建议将<strong>新行为放入一个名为访问者的独立类中</strong>， 而不是试图将其整合到已有类中。 现在， 需要执行操作的原始对象将作为参数被传递给访问者中的方法， 让方法能访问对象所包含的一切必要数据。</p><p><img src="https://i.loli.net/2021/10/18/OgpVZzKLSa56suf.png" alt="20211018173743"></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>71-简化路径</title>
      <link href="/2021/10/03/leetcode/71-jian-hua-lu-jing/"/>
      <url>/2021/10/03/leetcode/71-jian-hua-lu-jing/</url>
      
        <content type="html"><![CDATA[<ol start="71"><li>简化路径</li></ol><ul><li>用<code>/</code>对字符串进行分隔<ul><li>可以使用stringstream来分隔字符串，然后对每一段分别处理</li></ul></li><li>继续讨论分隔后的元素。用一个向量保存有意义的子字符串<ul><li>若为<code>&quot;&quot;</code> 或者<code>.</code>,则直接忽略，用continue直接跳过</li><li>若为<code>..</code>且当前向量不为空，则pop出栈顶的一个元素（是<code>..</code>时,代表回上一级目录，则把栈顶的元素出栈，表示删掉它上面挨着的一个路径）</li><li>如果遇到不是点，也不是空格，不是回退到上一级目录，那么进栈</li></ul></li></ul><blockquote><p>比如输入”/../“ ，则分隔后内容为<code>..</code>, 此时保存元素的栈为空，这种情况也要直接忽略（不能入栈）。因此有<code>else if (t != &quot;..&quot;)</code>时，才能进行入栈操作:<code>v.push_back(t)</code> 。否则会出现：<br><img src="https://i.loli.net/2021/10/03/UD8rneqvthj9sFA.png" alt="20211003223958"></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">simplifyPath</span><span class="token punctuation">(</span>string path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string res<span class="token punctuation">,</span> t<span class="token punctuation">;</span>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector <span class="token operator">&lt;</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> t <span class="token operator">==</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token string">".."</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token string">".."</span><span class="token punctuation">)</span> v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>string s <span class="token operator">:</span> v<span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"/"</span> <span class="token operator">+</span> s<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"/"</span> <span class="token operator">:</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N叉树操作</title>
      <link href="/2021/10/03/leetcode/n-cha-shu-cao-zuo/"/>
      <url>/2021/10/03/leetcode/n-cha-shu-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="589-N-叉树的前序遍历"><a href="#589-N-叉树的前序遍历" class="headerlink" title="589. N 叉树的前序遍历"></a><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/" target="_blank" rel="noopener">589. N 叉树的前序遍历</a></h1><ul><li>先操作根节点，再递归操作根节点的子节点</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node {public:    int val;    vector&lt;Node*> children;    Node() {}    Node(int _val) {        val = _val;    }    Node(int _val, vector&lt;Node*> _children) {        val = _val;        children = _children;    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归结束的条件</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录当前根节点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> child <span class="token operator">:</span> root<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 对各个子节点进行遍历</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">preorder</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="590-N-叉树的后序遍历"><a href="#590-N-叉树的后序遍历" class="headerlink" title="590. N 叉树的后序遍历"></a><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/" target="_blank" rel="noopener">590. N 叉树的后序遍历</a></h1><ul><li>先递归操作根节点的子节点，再操作根节点</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node {public:    int val;    vector&lt;Node*> children;    Node() {}    Node(int _val) {        val = _val;    }    Node(int _val, vector&lt;Node*> _children) {        val = _val;        children = _children;    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归结束的条件</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> child <span class="token operator">:</span> root<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 对各个子节点进行遍历</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录当前根节点</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">postorder</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="429-N-叉树的层序遍历"><a href="#429-N-叉树的层序遍历" class="headerlink" title="429. N 叉树的层序遍历"></a><a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/" target="_blank" rel="noopener">429. N 叉树的层序遍历</a></h1><ul><li>用一个队列记录层序遍历的过程</li><li>记录当前层的队列大小，当前层中每有一个节点出队，就把这个节点对应的子节点入队</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node {public:    int val;    vector&lt;Node*> children;    Node() {}    Node(int _val) {        val = _val;    }    Node(int _val, vector&lt;Node*> _children) {        val = _val;        children = _children;    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 若为空，则返回{}</span>        vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存全局结果</span>        queue <span class="token operator">&lt;</span> Node <span class="token operator">*</span> <span class="token operator">></span> q<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用队列记录遍历过程</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先把当前根节点入队</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> n<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录这批次的队列长度</span>            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> tmp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存每一层的数据</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>  <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Node <span class="token operator">*</span>curRoot <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取到当前队头</span>                tmp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>curRoot<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把当前队头的值保存在tmp中</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 队头出队</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>child <span class="token operator">:</span> curRoot<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">)</span><span class="token punctuation">{</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每出一个当前队头，就把当前队头的子节点入队</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把这层的数据保存在res中</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="559-N-叉树的最大深度"><a href="#559-N-叉树的最大深度" class="headerlink" title="559. N 叉树的最大深度"></a><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/" target="_blank" rel="noopener">559. N 叉树的最大深度</a></h1><p>找到子树的最大深度，然后+1 （因为当前节点也占一个深度）</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node {public:    int val;    vector&lt;Node*> children;    Node() {}    Node(int _val) {        val = _val;    }    Node(int _val, vector&lt;Node*> _children) {        val = _val;        children = _children;    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 递归结束的条件</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存子节点的最大深度</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>child<span class="token operator">:</span>root<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 因为当前节点也占一个深度，所以子节点的最大深度+1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的遍历</title>
      <link href="/2021/09/28/leetcode/er-cha-shu-de-bian-li/"/>
      <url>/2021/09/28/leetcode/er-cha-shu-de-bian-li/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/liang-chong-die-dai-by-powcai/" target="_blank" rel="noopener"><strong>前序、中序、后序、层序遍历 打包，讲解很棒！</strong></a></p><p>只需要<strong>改变遍历的顺序</strong>即可</p><h1 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/di-gui-he-die-dai-by-powcai-5/" target="_blank" rel="noopener">前序遍历</a></h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[int]        """</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span><span class="token keyword">return</span>             res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        helper<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/solution/dong-hua-yan-shi-94-er-cha-shu-de-zhong-xu-bian-li/" target="_blank" rel="noopener">中序遍历</a></h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[int]        """</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span>             helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        helper<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/liang-chong-die-dai-by-powcai/" target="_blank" rel="noopener">后序遍历</a></h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span>             helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        helper<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h1><h2 id="剑指-Offer-32-I-从上到下打印二叉树"><a href="#剑指-Offer-32-I-从上到下打印二叉树" class="headerlink" title="剑指 Offer 32 - I. 从上到下打印二叉树"></a><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/solution/mian-shi-ti-32-i-cong-shang-dao-xia-da-yin-er-ch-4/" target="_blank" rel="noopener">剑指 Offer 32 - I. 从上到下打印二叉树</a></h2><ul><li><strong>队列</strong>中存储当前层的节点，然后利用<strong>先进先出</strong>特性得到结果 。构建队列： <code>queue = collections.deque()</code><ul><li>同一层的节点，左儿子先进入，右儿子后进入 （如 queue的 2，3）</li><li>对于子节点，左儿子弹出后，将左儿子的左右孙子连接到右儿子后面（如 queue的3，4，5）。右儿子弹出后，将右儿子的左右孙子继续连接到左儿子的左右孙子后面（如 queue的 4,5,6,7）</li></ul></li></ul><blockquote><p>以如下二叉树为例，说明队列的先进先出，并得到层序遍历的打印结果[1,2,3,4,5,6,7]<br><img src="https://img-blog.csdnimg.cn/2020080220292811.png" alt>          </p><table><thead><tr><th>res（存储节点的值）</th><th>queue （存储节点，因为要判断是否有左右子节点）</th></tr></thead><tbody><tr><td>[]</td><td>1</td></tr><tr><td>[1]</td><td>2,3</td></tr><tr><td>[1,2]</td><td>3,4,5</td></tr><tr><td>[1,2,3]</td><td>4,5,6,7</td></tr><tr><td>[1,2,3,4]</td><td>5,6,7</td></tr><tr><td>[1,2,3,4,5]</td><td>6,7</td></tr><tr><td>[1,2,3,4,5,6]</td><td>7</td></tr><tr><td>[1,2,3,4,5,6,7]</td><td>空</td></tr></tbody></table></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[int]        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">from</span> collections <span class="token keyword">import</span> deque        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        queue<span class="token operator">=</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>            node<span class="token operator">=</span>queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">102. 二叉树的层序遍历</a></h2><p>上一题把所有遍历的结果保存在数组中，即<code>[1,2,3,4,5,6,7]</code>。该题与上题的不同之处在于，这一次把每一层的元素保存在结果中，即 <code>[[1],[2,3],[4,5,6,7]]</code>.</p><p>所以只需要在<code>range(len(queue))</code> 范围内，增加临时变量temp保存当前层的结果。</p><blockquote><p>注意！即便<br><code>if node.left: queue.append(node.left)</code><br><code>if node.right: queue.append(node.right)</code> 会改变queue的长度，<code>for i in range(len(queue))</code>在超出当时赋值<code>range(len(queue))</code>范围后才跳出for循环（即，i的变化范围是0|0,1|0,1,2,3|,而不会随着循环语句中queue的改变而改变for循环次数)</p><p>如：</p><pre class="line-numbers language-python"><code class="language-python">nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    nums<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果为： 0 1 2 。不随着nums的变化而改变for循环的次数</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[List[int]]        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        queue <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>            tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                         node <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span> queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span> queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：手把手带你刷二叉搜索树-第三期</title>
      <link href="/2021/09/27/labuladong/di-yi-zhang-shou-ba-shou-dai-ni-shua-er-cha-sou-suo-shu-di-san-qi/"/>
      <url>/2021/09/27/labuladong/di-yi-zhang-shou-ba-shou-dai-ni-shua-er-cha-sou-suo-shu-di-san-qi/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/mu-lu-ye-1/mu-lu-ye-1/bst3" target="_blank" rel="noopener">手把手带你刷二叉搜索树-第三期</a></p><h1 id="96-不同的二叉搜索树"><a href="#96-不同的二叉搜索树" class="headerlink" title="96. 不同的二叉搜索树"></a><a href="https://leetcode-cn.com/problems/unique-binary-search-trees/" target="_blank" rel="noopener">96. 不同的二叉搜索树</a></h1><p>求1,2,…,n构成的二叉搜索树的数量，我们可以把1,2,…n分别作为根节点。</p><ul><li>则对特定的根节点<code>i</code>，它的左子搜索树由1到i-1构成（能构建的左子搜索树种类有<code>x</code>种），右子搜索树由i+1到n构成（能构建的右子搜索树种类有<code>y</code>种）。则以i为根节点的搜索树种类有<code>x*y</code>种</li><li>累加各个根节点对应的结果，即为最后结果</li></ul><h2 id="方法1：递归"><a href="#方法1：递归" class="headerlink" title="方法1：递归"></a>方法1：递归</h2><ul><li>递归函数的含义：<ul><li>因为左子树和右子树的问题类型是一样的，都是由<strong>一系列递增数据的节点</strong>构成搜索树（只是节点范围不同），比如1,2,3和5,6,7构成的二叉搜索树的数量是一样的。所以递归函数<code>helper(int n)</code>表示<strong>n个递增数据点构成的搜索树数量</strong></li></ul></li><li>base case：<ul><li>当左子树为空，右子树有n-1个节点时，此时能构成<code>1*y</code>种。所以可以理解为当节点为空时，能构成1种搜索树；</li><li>因此，当n为0时（表示空节点），<code>helper(int n)</code>的结果为1</li></ul></li><li>对于特定的根节点i，它的左边有i-1个节点（所以能构建<code>helper(i-1)</code>种左子搜索树），右边有n-i个节点（所以能构建<code>helper(n-i)</code>种右子搜索树）</li></ul><p>根据递归函数的含义，我们把代码写为（注意这时会超时）：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// base case</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">helper</span><span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码之所以会超时，是因为每次递归时都要计算<code>helper()</code>函数。所以为了减少计算量，我们可以把已经计算好的结果保存起来，在递归过程中，若某个结果已经知道，则直接返回该结果即可，不必继续递归下去。所以只需要在上面的基础上，增加这三行代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> record<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 增加这一行：用一个字典保存结果.字典的键为n，值为helper(n)对应的结果</span><span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> record<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 增加这一行：如果这个结果已经保存了，则直接返回</span>record<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>res<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 增加这一行：用于保存当前结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改以后，正确的代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> record<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 增加这一行：用一个字典保存结果.字典的键为n，值为helper(n)对应的结果</span>    <span class="token keyword">int</span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// base case        </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> record<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 增加这一行：如果这个结果已经保存了，则直接返回</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">helper</span><span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 左边返回的结果*右边返回的结果</span>        <span class="token punctuation">}</span>        record<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>res<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 增加这一行：用于保存当前结果</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2：动态规划"><a href="#方法2：动态规划" class="headerlink" title="方法2：动态规划"></a>方法2：动态规划</h2><ul><li>类比递归函数的含义，我们可以把dp数组的含义表示为：<strong>把i个递增数据点构成的搜索树数量保存在dp[i]中</strong></li><li>状态转移方程：当前的结果<code>dp[i]</code>=左子树结果<code>dp[j]</code>（其中<code>0&lt;=j&lt;i</code>）*右子树结果<code>dp[i-j-1]</code></li><li>base case: <code>dp[0]=1;</code></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 左子树节点数量+右子树节点数量=i-1</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="95-不同的二叉搜索树-II"><a href="#95-不同的二叉搜索树-II" class="headerlink" title="95. 不同的二叉搜索树 II"></a><a href="https://leetcode-cn.com/problems/unique-binary-search-trees-ii/" target="_blank" rel="noopener">95. 不同的二叉搜索树 II</a></h1><p>本题要求返回二叉搜索树的“样子”，则对特定的根节点i，它左边的节点范围为1到i-1，右边的节点范围为i+1到n。此时左右两边的问题类型是一样的，只是数据的范围不同。所以我们构造一个辅助的递归函数，该函数的参数中记录搜索树的节点范围</p><ul><li>递归函数<code>helper(int start, int end)</code>的含义：<strong>返回start到end节点范围的二叉搜索树的“样子”</strong>。注意这个范围是<strong>闭区间</strong></li><li>base case：在构建左右子树时，因为下面的代码会导致helper()的start&gt;end，所以用<code>if (start&gt;end) return vector&lt;TreeNode *&gt;{nullptr};</code> 进行特判，这种情况表示左子树为空（或者右子树为空）</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector <span class="token operator">&lt;</span> TreeNode <span class="token operator">*</span> <span class="token operator">></span> left <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector <span class="token operator">&lt;</span> TreeNode <span class="token operator">*</span> <span class="token operator">></span> right <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以理解为后序遍历：对左子树做点什么，对右子树做点什么。然后根据这些结果，拼装当前根节点对应的二叉搜索树</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>TreeNode <span class="token operator">*</span><span class="token operator">></span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>TreeNode <span class="token operator">*</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token operator">></span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 递归结束的条件</span>             <span class="token keyword">return</span> vector<span class="token operator">&lt;</span>TreeNode <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">nullptr</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            后序遍历：左</span>            vector <span class="token operator">&lt;</span> TreeNode <span class="token operator">*</span> <span class="token operator">></span> left <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 左子树的样子</span><span class="token comment" spellcheck="true">//            后序遍历：右</span>            vector <span class="token operator">&lt;</span> TreeNode <span class="token operator">*</span> <span class="token operator">></span> right <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 右子树的样子</span><span class="token comment" spellcheck="true">//            后序遍历：中</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>l<span class="token operator">:</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>r<span class="token operator">:</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    TreeNode <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 根，左，右，构建当前的树</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>TreeNode <span class="token operator">*</span><span class="token operator">></span> <span class="token function">generateTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：手把手带你刷二叉搜索树-第二期</title>
      <link href="/2021/09/27/labuladong/di-yi-zhang-shou-ba-shou-dai-ni-shua-er-cha-sou-suo-shu-di-er-qi/"/>
      <url>/2021/09/27/labuladong/di-yi-zhang-shou-ba-shou-dai-ni-shua-er-cha-sou-suo-shu-di-er-qi/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitee.io/algo/2/20/27/" target="_blank" rel="noopener">手把手带你刷二叉搜索树-第二期</a></p><p>实现 Binary Search Tree （BST）的基础操作：判断 BST 的合法性、增、删、查。</p><h1 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98. 验证二叉搜索树"></a><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/solution/die-dai-yu-di-gui-by-powcai/" target="_blank" rel="noopener">98. 验证二叉搜索树</a></h1><h2 id="方法1：利用携带的最大最小值进行判断"><a href="#方法1：利用携带的最大最小值进行判断" class="headerlink" title="方法1：利用携带的最大最小值进行判断"></a>方法1：利用携带的最大最小值进行判断</h2><ul><li>root 需要做的不只是和左右子节点比较，而是要和整个左子树和右子树<strong>所有节点</strong>比较</li><li>使用辅助函数，增加函数参数列表，在<strong>参数中携带额外信息</strong>（<strong>当前节点</strong>需要比较的最小值和最大值）<ul><li>辅助递归函数的含义：给定一个最小值和一个最大值，判断它是否为合法的二叉搜索树</li><li>相当于前序遍历。根节点需要判断它是否在最大值最小值的范围内，若不在，则返回false。若在，则调整左右子树的比较范围，并返回左右子树<code>相与</code>之后的结果。</li><li>初始时刻，直接赋予最小值<code>-float(&quot;inf&quot;)</code>、最大值<code>float(&quot;inf&quot;)</code>。对于根节点，它和无穷小无穷大进行比较，显然是合法的，然后再考虑左右子树</li></ul></li></ul><blockquote><p>了解了递归函数后，时刻明白递归函数的<strong>含义</strong>以及它的<strong>功能</strong>，不要跳进递归函数中</p><blockquote><p><del>在递归的过程中修改最值（<strong>自顶向下</strong>的过程中，根节点先与最小值<code>-float(&quot;inf&quot;)</code> 和最大值<code>float(&quot;inf&quot;)</code> 比较，满足条件。然后左子树与最小值<code>-float(&quot;inf&quot;)</code> 和最大值（根节点值）比较。右子树同理。）<strong>在递归时，比较的最小值从<code>-float(&quot;inf&quot;)</code> 逐渐增大，最大值从<code>float(&quot;inf&quot;)</code> 逐渐减小</strong>）</del></p></blockquote><p><del>以该不合法的二叉搜索树树为例：</del><br><del>- 遍历到15 时，15与 <code>[10, float(&quot;inf&quot;)]</code> 比较，结果是True（此时最小值为10）</del><br><del>- 对于15的左子树，它的比较范围变成了[10,15]，但现在是6，结果为False <img src="https://img-blog.csdnimg.cn/20200802113813779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70" alt></del></p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: bool        """</span>        <span class="token keyword">def</span> <span class="token function">valid</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>mi<span class="token punctuation">,</span>ma<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> root<span class="token operator">==</span>None<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>val<span class="token operator">&lt;=</span>mi<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>val<span class="token operator">>=</span>ma<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> valid<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> mi <span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">and</span> valid<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> ma<span class="token punctuation">)</span>        <span class="token keyword">return</span> valid<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token operator">-</span>float<span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> float<span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">valid</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">long</span> mi<span class="token punctuation">,</span> <span class="token keyword">long</span> ma<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">>=</span> ma<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;=</span> mi<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">valid</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> mi<span class="token punctuation">,</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">valid</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">,</span> ma<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">valid</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> LONG_MIN<span class="token punctuation">,</span> LONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2：中序遍历二叉搜索树后，判断其是否为没有重复元素的递增数组"><a href="#方法2：中序遍历二叉搜索树后，判断其是否为没有重复元素的递增数组" class="headerlink" title="方法2：中序遍历二叉搜索树后，判断其是否为没有重复元素的递增数组"></a>方法2：中序遍历二叉搜索树后，判断其是否为没有重复元素的递增数组</h2><ul><li>最后的<code>return nodes == sorted(set(nodes))</code>, 要<strong>先set，再 sorted</strong>，这样返回的是列表形式，即判断列表是否等于列表（<del>若先sorted，再set，返回的是一个集合，即判断列表是否等于集合，出现错误）</del> 。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: bool        """</span>        nodes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 中序遍历后，判断其是否递增</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>            inOrder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            nodes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            inOrder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token keyword">return</span> nodes        inOrder<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> nodes <span class="token operator">==</span> sorted<span class="token punctuation">(</span>set<span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    中序遍历，并将结果保存在vec中</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>vec<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">inOrder</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> vec<span class="token punctuation">;</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> vec<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        调用中序遍历函数，并将结果复制到vec1中</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">vec1</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//        对vec去重并排序</span>        set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">s</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vec<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        判断去重排序后的结果是否与原结果一致</span>        <span class="token keyword">return</span> vec1<span class="token operator">==</span>vec<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>P.S. C++给vector去重并排序</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">////    给vector去重并排序</span><span class="token comment" spellcheck="true">////    方法1：用set去重，sort排序</span><span class="token comment" spellcheck="true">//    set&lt;int>s(vec.begin(),vec.end());</span><span class="token comment" spellcheck="true">//    vec.assign(s.begin(),s.end());</span><span class="token comment" spellcheck="true">//    sort(vec.begin(),vec.end());</span><span class="token comment" spellcheck="true">////    方法2：用sort函数排序，然后用unique函数</span><span class="token comment" spellcheck="true">////    unique() 函数将重复的元素放到 vector 的尾部，然后返回指向第一个重复元素的迭代器,</span><span class="token comment" spellcheck="true">////    再用 erase() 函数擦除从这个元素到最后元素的所有的元素</span>    <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>v<span class="token operator">:</span>vec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法3：递归函数"><a href="#方法3：递归函数" class="headerlink" title="方法3：递归函数"></a>方法3：递归函数</h2><ul><li>明确递归函数的含义：判断以root为根的树是否为合法的二叉搜索树。因为中序遍历时是升序排列，所以在遍历过程判断前一个数是否比当前数小；判断后，把前一个数更新为当前数，用于后续继续判断</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> pre<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始的前一个节点先赋值nullptr</span>    <span class="token keyword">bool</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归结束的条件</span>        <span class="token comment" spellcheck="true">// 中序遍历：左。判断左子树是否合法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 中序遍历：中。如果前一个数比当前节点数大，则不合法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token operator">!=</span><span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-</span><span class="token operator">></span>val<span class="token operator">>=</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        pre<span class="token operator">=</span>root<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果前一个数小于当前节点数，则当前节点变为pre节点，用于后续的右子树比较</span>        <span class="token keyword">return</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 中序遍历：右</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="700-二叉搜索树中的搜索"><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700. 二叉搜索树中的搜索"></a><a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/" target="_blank" rel="noopener">700. 二叉搜索树中的搜索</a></h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :type val: int        :rtype: TreeNode        """</span>        <span class="token comment" spellcheck="true"># 递归结束的条件</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> None        <span class="token comment" spellcheck="true"># 找到目标，做点什么</span>        <span class="token keyword">if</span> root<span class="token punctuation">.</span>val<span class="token operator">==</span>val<span class="token punctuation">:</span> <span class="token keyword">return</span> root        <span class="token comment" spellcheck="true"># 类似二分搜索思想</span>        <span class="token keyword">if</span> root<span class="token punctuation">.</span>val<span class="token operator">></span>val<span class="token punctuation">:</span>            <span class="token keyword">return</span> seatchBST<span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span> root<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>val<span class="token punctuation">:</span>            <span class="token keyword">return</span> searchBST<span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="701-二叉搜索树的插入操作"><a href="#701-二叉搜索树的插入操作" class="headerlink" title="701.二叉搜索树的插入操作"></a><a href="https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/submissions/" target="_blank" rel="noopener">701.二叉搜索树的插入操作</a></h1><p>对数据结构的操作无非遍历 + 访问，遍历就是“找”，访问就是“改”。具体到这个问题，插入一个数，就是先找到插入位置，然后进行插入操作。</p><p>上一个问题，我们总结了 BST 中的遍历框架，就是“找”的问题。直接套框架，加上“改”的操作即可。一旦涉及“<strong>改</strong>”，函数就要<strong>返回 TreeNode 类型</strong>，并且<strong>对递归调用的返回值进行接收。</strong></p><ul><li>递归函数的含义：插入数据，并返回根节点</li><li>相当于前序遍历。当前的根需要做的事情：找到空余根节点，把这个数据插入，然后返回root。如果这次没有空余的节点，则在左右子树中插入，然后返回根节点</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :type val: int        :rtype: TreeNode        """</span>        <span class="token comment" spellcheck="true"># 找到空位置（可行的空位置可能不止一处），插入新节点        </span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            root<span class="token operator">=</span>TreeNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>            <span class="token keyword">return</span> root        <span class="token comment" spellcheck="true"># 已经存在了，直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token operator">==</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> root        <span class="token comment" spellcheck="true"># 如果val大，插到右子树，反之插到左子树</span>        <span class="token keyword">if</span> val<span class="token operator">></span>root<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            root<span class="token punctuation">.</span>right<span class="token operator">=</span>self<span class="token punctuation">.</span>insertIntoBST<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>val<span class="token punctuation">)</span>        <span class="token keyword">elif</span> val<span class="token operator">&lt;</span> root<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            root<span class="token punctuation">.</span>left<span class="token operator">=</span>self<span class="token punctuation">.</span>insertIntoBST<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>val<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">////Definition for a binary tree node.</span><span class="token comment" spellcheck="true">//struct TreeNode {</span><span class="token comment" spellcheck="true">//    int val;</span><span class="token comment" spellcheck="true">//    TreeNode *left;</span><span class="token comment" spellcheck="true">//    TreeNode *right;</span><span class="token comment" spellcheck="true">//    TreeNode() : val(0), left(nullptr), right(nullptr) {}</span><span class="token comment" spellcheck="true">//    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}</span><span class="token comment" spellcheck="true">//    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}</span><span class="token comment" spellcheck="true">//};</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode <span class="token operator">*</span><span class="token function">insertIntoBST</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// if (root->val == val)  // 不要这个也可以，因为题目保证了数据不重复</span>        <span class="token comment" spellcheck="true">//     return root;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">></span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>            root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>            root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="450-删除二叉搜索树中的节点"><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450. 删除二叉搜索树中的节点"></a><a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/" target="_blank" rel="noopener">450. 删除二叉搜索树中的节点</a></h1><ul><li>情况1：若当前的叶子节点就是要删除的，则直接删除</li><li>情况2：若要删除的节点对应的左右孩子有一个为空，一个不为空，则让不为空的子孩子代替当前节点</li><li>情况3：若要删除的节点的左右孩子都不为空<ul><li>因为这是二叉搜索树，则左子树的所有元素都比右子树的小。所以<a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/solution/miao-dong-jiu-wan-shi-liao-by-terry2020-tc0o/" target="_blank" rel="noopener">可以把左子树拼接到右子树最左边的节点处，然后用右子树代替当前节点</a></li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    找到当前节点的最左节点</span>    TreeNode <span class="token operator">*</span><span class="token function">getMin</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            root <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    TreeNode <span class="token operator">*</span><span class="token function">deleteNode</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归结束的条件</span><span class="token comment" spellcheck="true">//      当前元素就是要删除的元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 处理没有子节点或者只有一个子节点的情况</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 处理两个子节点都不为空的情况</span>            TreeNode <span class="token operator">*</span>minR <span class="token operator">=</span> <span class="token function">getMin</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            minR<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>            root <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 去右子树删除</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 去左子树删除</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 处理完子树后，返回最终的root</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在处理情况3时，也可以</p><ul><li>（1）让右子树的最小元素节点的值代替当前节点的值（或让左子树的最大元素代替当前节点）</li><li>（2）右子树的最小元素节点一定在它的左节点，于是用while循环找到最小元素节点</li><li>（3）然后把这个最小元素节点的<strong>值</strong>赋值给当前root，转而去删除右子树中的这个最小元素节点</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :type key: int        :rtype: TreeNode        """</span>        <span class="token comment" spellcheck="true"># 若无根节点，直接返回；（递归结束的条件）</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span><span class="token keyword">return</span> None        <span class="token comment" spellcheck="true"># 若找到目标值</span>        <span class="token keyword">if</span> root<span class="token punctuation">.</span>val<span class="token operator">==</span>key<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 处理无子节点/只有一个子节点的情况</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>left<span class="token operator">==</span>None<span class="token punctuation">:</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>right            <span class="token keyword">if</span> root<span class="token punctuation">.</span>right<span class="token operator">==</span>None<span class="token punctuation">:</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>left            <span class="token comment" spellcheck="true"># 找到右子树的最左（小）节点，并替换</span>            minNode<span class="token operator">=</span>self<span class="token punctuation">.</span>getMin<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            root<span class="token punctuation">.</span>val<span class="token operator">=</span>minNode<span class="token punctuation">.</span>val            <span class="token comment" spellcheck="true"># 转而删除最小节点</span>            root<span class="token punctuation">.</span>right<span class="token operator">=</span>self<span class="token punctuation">.</span>deleteNode<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>minNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 二叉搜索树</span>        <span class="token keyword">elif</span> root<span class="token punctuation">.</span>val<span class="token operator">></span>key<span class="token punctuation">:</span>            root<span class="token punctuation">.</span>left<span class="token operator">=</span>self<span class="token punctuation">.</span>deleteNode<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            root<span class="token punctuation">.</span>right<span class="token operator">=</span>self<span class="token punctuation">.</span>deleteNode<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> root    <span class="token keyword">def</span> <span class="token function">getMin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 最小值一定在左叶子节点处</span>        <span class="token keyword">while</span> root<span class="token punctuation">.</span>left<span class="token operator">!=</span>None<span class="token punctuation">:</span>            root<span class="token operator">=</span>root<span class="token punctuation">.</span>left        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">getMin</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    TreeNode<span class="token operator">*</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归结束的条件</span><span class="token comment" spellcheck="true">//      当前元素就是要删除的元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token operator">==</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 处理没有子节点或者只有一个子节点的情况</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 处理两个子节点都不为空的情况</span>            TreeNode <span class="token operator">*</span>minVal <span class="token operator">=</span> <span class="token function">getMin</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">=</span> minVal<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>            root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> minVal<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token operator">&lt;</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 小于目标值，则在右子树中找，并返回右子树</span>            root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 大于目标值，在左子树中找，并返回左子树</span>            root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">=</span><span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 处理完子树后，返回最终的root</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：手把手带你刷二叉搜索树-第一期</title>
      <link href="/2021/09/27/labuladong/di-yi-zhang-shou-ba-shou-dai-ni-shua-er-cha-sou-suo-shu-di-yi-qi/"/>
      <url>/2021/09/27/labuladong/di-yi-zhang-shou-ba-shou-dai-ni-shua-er-cha-sou-suo-shu-di-yi-qi/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://mp.weixin.qq.com/s/ioyqagZLYrvdlZyOMDjrPw" target="_blank" rel="noopener">手把手带你刷二叉搜索树-第一期</a></p><ul><li>二叉树<ul><li>二叉树算法设计的总路线：<strong>把当前节点要做的事做好，其他的交给递归框架，不用当前节点操心。</strong>    （可以理解成<strong>递归</strong>方法的应用）<ul><li>明确递归结束的条件 （已经到了叶子节点）</li><li>把root该做的事情做完， 然后左右子节点递归调用该方法</li></ul></li><li>如果当前节点会对下面的子节点<strong>有整体影响</strong>，可以通过<strong>辅助函数增长参数列表</strong>，借助参数传递信息。</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python">void traverse<span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">//</span> root 需要做什么？在这做。    <span class="token operator">//</span> 其他的不用 root 操心，抛给框架    traverse<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    traverse<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如这道例题： </p><h1 id="100-相同的树"><a href="#100-相同的树" class="headerlink" title="100. 相同的树"></a><a href="https://leetcode-cn.com/problems/same-tree/solution/ji-yu-xie-shu-suan-fa-de-tao-lu-kuang-jia-de-pytho/" target="_blank" rel="noopener">100. 相同的树</a></h1><ul><li>函数内先判断两个root节点是否相等，然后递归调用该函数，判断左右子节点是否相等</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type p: TreeNode        :type q: TreeNode        :rtype: bool        """</span>        <span class="token keyword">if</span> p<span class="token operator">==</span>None <span class="token operator">and</span> q <span class="token operator">==</span>None<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token comment" spellcheck="true"># 都为空节点</span>        <span class="token keyword">if</span> p<span class="token operator">==</span>None <span class="token operator">or</span> q <span class="token operator">==</span>None<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># 其中一个为空节点（上一行已经判断了都空的情况）</span>        <span class="token keyword">if</span> p<span class="token punctuation">.</span>val<span class="token operator">!=</span>q<span class="token punctuation">.</span>val<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># 值不相等</span>        <span class="token comment" spellcheck="true"># 调用递归，判断左右子树是否都满足isSameTree</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>isSameTree<span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span>q<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>isSameTree<span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span>q<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>二叉搜索树<ul><li>定义：任意<strong>节点的值要大于等于左子树所有节点</strong>的值，且要<strong>小于等于右子树的所有节点</strong>的值。</li><li>因此，<strong>中序遍历</strong>二叉搜索树后，可以得到<strong>递增</strong>数组。</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python">void BST<span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> int target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">==</span> target<span class="token punctuation">)</span>        <span class="token operator">//</span> 找到目标，做点什么    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>         BST<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">></span> target<span class="token punctuation">)</span>        BST<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="230-二叉搜索树中第K小的元素"><a href="#230-二叉搜索树中第K小的元素" class="headerlink" title="230. 二叉搜索树中第K小的元素"></a><a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by--48/" target="_blank" rel="noopener">230. 二叉搜索树中第K小的元素</a></h1><h2 id="写法1：构造辅助递归函数"><a href="#写法1：构造辅助递归函数" class="headerlink" title="写法1：构造辅助递归函数"></a>写法1：构造辅助递归函数</h2><p>构造一个辅助的递归函数<code>traverse()</code></p><ul><li>递归函数的含义（不要跳进递归中）：采用中序遍历的方式，<strong>更新当前的root节点对应的排序</strong>（因为这是二叉搜索树，也就是统计此时的节点数量）<ul><li>e.g.,执行<code>traverse(root-&gt;left, k);</code> 后，rank变为2。然后当前节点需要做的事情：用<code>rank++</code>增加，则当前节点的排序变为3.如果排序与k相同，则结果就是此时的root值，用return结束递归。否则执行中序遍历的“后”。</li></ul></li></ul><blockquote><p><a href="https://leetcode.cn/problems/kth-smallest-element-in-a-bst/solution/fu-xue-ming-zhu-er-cha-shu-san-chong-bia-yn34/" target="_blank" rel="noopener">需要两个变量</a>：</p><ul><li>用一个全局变量保存最终的结果；</li><li>用一个全局变量保存当前访问到第几个节点。</li></ul><p>如果不使用全局变量，而是使用函数传参，需要注意「值传递」和「引用传递」的区别：值传递：每个递归的内部都需要对同一个变量修改，如果用普通函数的传参，对于 int 型的参数，使用的是值传递，即拷贝了一份传到了函数里面。那么函数里面对 int 型的修改不会影响外边的变量。</p><p>使用全局变量，可以保证递归函数的每次修改都是反映到全局的，从而保证遍历到第 k 个的时候，所有的递归立刻停止。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    保存结果</span>    <span class="token keyword">int</span> rank<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 保存当前root对应的排名</span>    <span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归结束的条件</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 中序遍历：前</span><span class="token comment" spellcheck="true">//        中序遍历：中</span>        rank<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rank <span class="token operator">==</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token operator">=</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 中序遍历：后</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回结果</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>rank <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>res<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span>        self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>rank <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rank <span class="token operator">==</span> k<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>res <span class="token operator">=</span>root<span class="token punctuation">.</span>val            <span class="token keyword">return</span>        self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> k<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :type k: int        :rtype: int        """</span>        self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>root<span class="token punctuation">,</span>k<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写法2：利用二叉搜索树的框架进行递归"><a href="#写法2：利用二叉搜索树的框架进行递归" class="headerlink" title="写法2：利用二叉搜索树的框架进行递归"></a>写法2：利用二叉搜索树的框架进行递归</h2><pre><code>if (root.val == target)    // 找到目标，做点什么if (root.val &lt; target)     BST(root.right, target);if (root.val &gt; target)    BST(root.left, target);</code></pre><ul><li>统计root树对应的节点数：<strong>每个节点需要记录，以自己为根的这棵二叉树有多少个节点</strong></li><li>如果<code>count+1==k</code>，则此时就是要找的结果</li><li>如果<code>count+1&lt;k</code>,说明目标值在右子树中</li><li>否则在左子树中</li></ul><blockquote><p>在写有返回类型（如函数返回int类型）的if… else语句时，一定要严谨，写成</p><pre><code>ifelse ifelse ifelse 或者剩余情况直接return</code></pre><p><strong>不要少了最后的else语句</strong>（或者return 剩余情况）。否则你以为你都判断了各种情况，但编译器是很严谨的，它并不认为你的if语句都涵盖了各种情况，<a href="https://blog.csdn.net/pikaqiu123321123/article/details/114580378" target="_blank" rel="noopener">报错</a><code>error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type] }</code></p><p>比如，下面的写法就是错误的</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">calNode</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> k <span class="token operator">-</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 编译器就会问：那其余情况呢？怎么没有写出来？</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以写成</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">calNode</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        找到目标，返回结果</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 目标在右子树中</span>        <span class="token keyword">return</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> k <span class="token operator">-</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 目标在左子树中</span>        <span class="token keyword">return</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 或者</span><span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">calNode</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        找到目标，返回结果</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 目标在右子树中</span>        <span class="token keyword">return</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> k <span class="token operator">-</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 涵盖剩余情况 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    统计当前root树的节点数</span>    <span class="token keyword">int</span> <span class="token function">calNode</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">calNode</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">calNode</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">calNode</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        找到目标，返回结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 目标在右子树中</span>            <span class="token keyword">return</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> k <span class="token operator">-</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 目标在左子树中</span>            <span class="token keyword">return</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">root_count</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">0</span>        l<span class="token operator">=</span>self<span class="token punctuation">.</span>root_count<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        r<span class="token operator">=</span>self<span class="token punctuation">.</span>root_count<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> l<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :type k: int        :rtype: int        """</span>        count<span class="token operator">=</span>self<span class="token punctuation">.</span>root_count<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        current<span class="token operator">=</span>count<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">if</span> current<span class="token operator">==</span>k<span class="token punctuation">:</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span>val        <span class="token keyword">elif</span> current<span class="token operator">&lt;</span>k<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>kthSmallest<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>k<span class="token operator">-</span>current<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>kthSmallest<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其他递归写法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        self<span class="token punctuation">.</span>cnt <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans        self<span class="token punctuation">.</span>kthSmallest<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cnt <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>cnt <span class="token operator">==</span> k<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>ans <span class="token operator">=</span> root<span class="token punctuation">.</span>val        self<span class="token punctuation">.</span>kthSmallest<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> k<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="538-把二叉搜索树转换为累加树"><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="538. 把二叉搜索树转换为累加树"></a><a href="https://leetcode-cn.com/problems/convert-bst-to-greater-tree/" target="_blank" rel="noopener">538. 把二叉搜索树转换为累加树</a></h1><ul><li>一般地，二叉搜索树进行中序遍历后，可以把数据变为升序排列。本题要算累加树，而且是<strong>从最大元素开始遍历</strong>，类似于<strong>降序排列后的“前缀和”</strong></li><li>递归函数<code>traverse()</code>的含义：以逆的中序遍历的方式更新全局的累加和sum，并改变当前节点的值</li><li>在递归函数中：<ul><li>要实现二叉搜索树的降序排列，可进行逆的中序遍历：右、中、左</li><li>用一个sum变量更新当前的累加和</li><li>根节点需要做的是：更新当前的sum，把当前的sum赋值给根节点</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum<span class="token operator">+</span><span class="token operator">=</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>val<span class="token operator">=</span>sum<span class="token punctuation">;</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    TreeNode<span class="token operator">*</span> <span class="token function">convertBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span>        self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sum<span class="token operator">+=</span>root<span class="token punctuation">.</span>val        root<span class="token punctuation">.</span>val<span class="token operator">=</span>self<span class="token punctuation">.</span>sum        self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">convertBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: TreeNode        """</span>        self<span class="token punctuation">.</span>sum<span class="token operator">=</span><span class="token number">0</span>        self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上岸记</title>
      <link href="/2021/09/25/growth/shang-an-ji/"/>
      <url>/2021/09/25/growth/shang-an-ji/</url>
      
        <content type="html"><![CDATA[<ul><li>2021年2月15号,我在重庆的酒店里隔离.一天,接到公司的电话,问有没有意向投递他们部门,我说行呀.然后进行了半小时的电话面试.</li><li>2021年3月初,我居家隔离,并做了测评.测评前一天,HR小姐姐特意打电话过来叮嘱我注意事项,并告诉我最好在安静的环境下,心情好的时候做,比如早晨.于是我第二天一大早起来做了测评.</li><li>2021年3月中旬,我回到学校,HR小姐姐和我提前约了电话面试.于是那天我到图书馆等电话,面试我的是一位海外专家,一上来就告诉我不要紧张,就聊一聊项目.于是在很轻松的氛围中,我们聊了50分钟.几天之后,我做了笔试.</li><li>2021年3月下旬和4月初,进行了专业一面和专业二面(均为一个小时).专业一面是两位专家,先聊了简历和项目,然后做编程题.几天之后是专业二面,二面是一位专家,面试结束时他告诉我我通过了他的面试.于是我继续紧张地等待主管面试,期间不停地刷牛客网</li><li>2021年4月中旬,进行了主管面试.我在图书馆预约了一个研讨空间,本来面试时间是1小时,后来聊的比较开心,面试了将近一个半小时.</li><li>2021年4月底,进行了公司级别的主管面试.然后是五一劳动节,我焦急地等待最后结果.几乎每天都在官网刷offer date和状态码.</li><li>2021年5月11号,我正在食堂吃饭,收到了offer邮件及短信,太开心了,于是随便扒拉了几口饭就回实验室看offer.几天后等待了正式offer,签约.</li></ul><p>整个过程,我都焦急,小心,谨慎地去经历.我内心特别感谢公司,感谢把我简历捞起来的人,感谢HR小姐姐,感谢面试官.这个offer给我的人生带来了一道曙光.</p><p>后来我才知道,其实有个专业的名词-“安全边际”可以形容我当时的状态.我那时候就在安全的边缘,可能随时掉入深渊,可能上岸看到曙光.感谢在那个特别的时刻,伸手给我曙光.此后的每一天,我都要努力扩大自己的安全边际,努力成为更好的自己,努力与公司共成长.</p><p>我深知,在公司,不讲情怀,只讲结果和绩效.所以我要不断学习,升级自己.而内心,我仍然充满感激与敬佩.新的征程，起航！</p><!-- > 今天早晨一起床,就看到MWZ女士被加拿大释放,要回国了.历时一千余天的等候,于今晚抵达深圳机场.在看到她在加拿大机场的发言后,热泪盈眶.感谢祖国,感谢公司.感谢每一位强大的中国人.> > 欢迎WZ,平安归航.  -->]]></content>
      
      
      <categories>
          
          <category> Growth </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Growth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：手把手带你刷二叉树-第三期</title>
      <link href="/2021/09/23/labuladong/di-yi-zhang-shou-ba-shou-dai-ni-shua-er-cha-shu-di-san-qi/"/>
      <url>/2021/09/23/labuladong/di-yi-zhang-shou-ba-shou-dai-ni-shua-er-cha-shu-di-san-qi/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://mp.weixin.qq.com/s/LJbpo49qppIeRs-FbgjsSQ" target="_blank" rel="noopener">手把手带你刷二叉树（第三期）</a></p><ul><li><p>Q：怎么知道以自己为根节点的二叉树长什么样？</p></li><li><p>A：可以通过后序遍历（根的左子树+根的右子树+根）得到自己的样子。如果某个子节点处为空，则用<code>#</code>进行填空</p></li><li><p>Q：怎么知道和别人长得是否一样？</p></li><li><p>A: 构建一个字典，保存当前节点对应的样子及其出现的次数。再构建一个向量，若字典中键对应的值出现2次，说明有重复，将这个节点加入res中（多次重复也只添加一次到res中）</p></li><li><p>注意！！！：本题用前序遍历和后序遍历都可以，但用中序遍历时，会有些特殊的case报错。这是因为用 中序遍历 序列化二叉树时，可能出现<a href="https://leetcode.com/problems/find-duplicate-subtrees/discuss/106011/Java-Concise-Postorder-Traversal-Solution/108467" target="_blank" rel="noopener">symmetric structures of this special case</a> </p></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    记录所有子树及出现的频次</span>    unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> memo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    记录重复的子树节点</span>    vector<span class="token operator">&lt;</span>TreeNode <span class="token operator">*</span><span class="token operator">></span> res<span class="token punctuation">;</span>    string <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        递归结束的条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"#"</span><span class="token punctuation">;</span>        string l<span class="token operator">=</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        string r<span class="token operator">=</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        string current<span class="token operator">=</span>l<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>r<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token function">to_string</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到自己的样子 （逗号换成空格也可以）</span>        memo<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把当前的样子存到memo字典中        </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 若键对应的值为2，说明有重复，加到res中。若后面有多次重复，则不会继续加到res了</span>        <span class="token keyword">return</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>TreeNode <span class="token operator">*</span><span class="token operator">></span> <span class="token function">findDuplicateSubtrees</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findDuplicateSubtrees</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[TreeNode]        """</span>        <span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict        dic <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"#"</span>            l <span class="token operator">=</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            r <span class="token operator">=</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># current = l + "," + str(root.val) + "," + r # 错误，除非用特殊的flag标记</span>            <span class="token comment" spellcheck="true"># current =l + "," +r + "," +  str(root.val) # 正确</span>            current <span class="token operator">=</span> str<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> l <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> r <span class="token comment" spellcheck="true"># 正确</span>            dic<span class="token punctuation">[</span>current<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> dic<span class="token punctuation">[</span>current<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span> res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>            <span class="token keyword">return</span> current        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> res  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第零章：一个方法团灭LEETCODE股票买卖问题</title>
      <link href="/2021/09/11/labuladong/di-ling-zhang-yi-ge-fang-fa-tuan-mie-leetcode-gu-piao-mai-mai-wen-ti/"/>
      <url>/2021/09/11/labuladong/di-ling-zhang-yi-ge-fang-fa-tuan-mie-leetcode-gu-piao-mai-mai-wen-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>labuladong<a href="https://labuladong.gitee.io/algo/1/9/" target="_blank" rel="noopener">一个方法团灭LEETCODE股票买卖问题</a>用的状态机，也就是三维的dp数组（天数，是否处于持有股票的状态（用0和1表示），已经交易的次数）。根据题意不断改变状态转移方程。<br>本文采用二维数组，把是否持有股票的状态用不同的dp数组（buy，sell）表示。</p></blockquote><p>解题框架来自<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/discuss/108871/2-solutions-2-states-DP-solutions-clear-explanation!" target="_blank" rel="noopener">2 solutions, 2 states DP solutions, clear explanation!</a></p><h1 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">121. 买卖股票的最佳时机</a></h1><p>动态规划：</p><ul><li>dp[i]数组的含义：前i天的最大收益<ul><li>当天不卖：dp[i]=dp[i-1]</li><li>当天卖：dp[i]=prices[i]-minPrice</li></ul></li><li>每到新的一天，就更新从开始到当天为止的最低价格</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minPrice<span class="token operator">=</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            minPrice<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>minPrice<span class="token punctuation">,</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 更新最低价</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>以下的题目中，当天结束后可能有持有、不持有（能买，不能卖（因为是冷冻期））的状态。因此用到2~3个dp数组来存储状态</p><h1 id="122-买卖股票的最佳时机-II"><a href="#122-买卖股票的最佳时机-II" class="headerlink" title="122. 买卖股票的最佳时机 II"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">122. 买卖股票的最佳时机 II</a></h1><h2 id="动态规划解法"><a href="#动态规划解法" class="headerlink" title="动态规划解法"></a>动态规划解法</h2><p>不管这个人当天买还是卖还是不操作，他<strong>当天结束后</strong>最终只有两种状态：<strong>持有</strong>股票和<strong>不持有</strong>股票</p><ul><li><code>vector&lt;int&gt;buy(n,0);</code> buy[i]表示第i天处于<strong>持有</strong>股票的状态（即：处于<strong>买</strong>的状态）时的<strong>最大</strong>收益。第i天持有股票是因为有两种情况：<ul><li>前一天也处于持有状态，今天没任何操作：<code>buy[i-1]</code></li><li>前一天处于不持有股票状态，今天买了：<code>sell[i-1]-prices[i]</code></li></ul></li><li><code>vector&lt;int&gt;sell(n,0);</code>sell[i]表示第i天处于<strong>不持有</strong>股票的状态（即：处于<strong>卖</strong>的状态）时的<strong>最大</strong>收益。第i天不持有股票是因为有两种情况：<ul><li>前一天也处于不持有状态，今天没任何操作：<code>sell[i-1]</code></li><li>前一天处于持有股票状态，今天卖了：<code>buy[i-1]+prices[i]</code></li></ul></li><li>base case: 第0天时若持有股票（说明买了第0天的股票），则buy[0]（表示第0天持有股票状态的最大收益）为<code>-prices[0]</code>。由于第0天不能卖出股票，因此sell[0]为0 （表示第0天无收益）</li><li>最后一天不持有的收益比持有的收益大（不持有说明已经卖掉了，持有说明还没卖掉，所以不持有的收益更大），所以返回sell的最后一个元素</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">buy</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">sell</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>buy<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sell<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 持有股票状态</span>            sell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>sell<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buy<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不持有股票状态</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sell<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>也可以用贪心方法解决：每天都买卖<br><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/best-time-to-buy-and-sell-stock-ii-zhuan-hua-fa-ji/" target="_blank" rel="noopener">Krahets</a>的贪心思路</p><ul><li>连续上涨交易日，<strong>每天都买卖</strong><ul><li><code>p3-p1=(p2-p1)+(p3-p2)</code> :第二天把p1卖掉，把p2买了；第三天把p2卖掉，把p3买了</li></ul></li><li>连续下跌交易日，则不买卖收益最大，即不会亏钱</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        profit <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> tmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span> profit <span class="token operator">+=</span> tmp <span class="token comment" spellcheck="true"># 当天的tmp若是正收益，则添加到profit中</span>        <span class="token keyword">return</span> profit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h1 id="123-买卖股票的最佳时机-III"><a href="#123-买卖股票的最佳时机-III" class="headerlink" title="123. 买卖股票的最佳时机 III"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/solution/zui-jian-dan-2-ge-bian-liang-jie-jue-suo-71fe/" target="_blank" rel="noopener">123. 买卖股票的最佳时机 III</a></h1><ul><li>交易次数为2，是188题的特例，为构建通用的框架，我们解决188题</li></ul><h1 id="188-买卖股票的最佳时机-IV"><a href="#188-买卖股票的最佳时机-IV" class="headerlink" title="188. 买卖股票的最佳时机 IV"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/solution/javayi-ge-si-lu-da-bao-suo-you-gu-piao-t-pd1p/" target="_blank" rel="noopener">188. 买卖股票的最佳时机 IV</a></h1><ul><li>交易次数为k</li></ul><p>在122题的基础上，本题限制了交易次数，最多允许交易k次。变量有两个，天数和已交易的次数，因此dp数组为二维：</p><ul><li>buy[i][j]:第i天<strong>持有</strong>股票状态时，一共已经交易了j次了以后的<strong>最大</strong>收益<ul><li>在持有（买）股票时如果用了一次交易次数（需要改变次数j）：buy[i][j]=sell[i-1]<strong>[j-1]</strong>-prices[i]</li></ul></li><li>sell[i][j]:第i天<strong>不持有</strong>股票状态时，一共已经交易了j次了以后的<strong>最大</strong>收益<ul><li>在不持有（卖）股票时,则不需要改变次数j （因为在买的时候已经改变过了）：sell[i][j]=buy[i-1]<strong>[j]</strong>+prices[i]</li></ul></li><li>二维数组有n行（因为是n天），k+1列（如k=2，则可以选择0次、1次、2次交易，所以要k+1列才能存下状态）</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只有0或1天时，无法完成完整的一次交易，返回0.</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">buy</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">sell</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            buy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第0天若处于持有状态，说明买入了(也可能是买了，又卖了，又买了...因此第一列的值都要初始化)当天的股票，此时收益为-prices[0]</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>buy<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>sell<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>sell<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>buy<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sell<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="309-最佳买卖股票时机含冷冻期"><a href="#309-最佳买卖股票时机含冷冻期" class="headerlink" title="309. 最佳买卖股票时机含冷冻期"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" target="_blank" rel="noopener">309. 最佳买卖股票时机含冷冻期</a></h1><p>添加冷冻期后，每天结束后有三种状态</p><ul><li>持有股票：buy[i]。这是因为：<ul><li>前一天持有股票，今天没操作：buy[i]=buy[i-1]</li><li>前一天处于不持有股票且前一天结束后可以买，今天买了: buy[i]=sell[i-1]-prices[i]</li><li>取这两种情况的最大值</li></ul></li><li>不持有股票，当天结束后<strong>可以买</strong>：sell[i]。这是因为：<ul><li>前一天不持有股票且前一天结束后<strong>可以买</strong>，今天没操作：sell[i]=sell[i-1]</li><li>前一天不持有股票且前一天结束后<strong>不可以买</strong>，今天就不是冷冻期了，所以变成可以买的状态：sell[i]=cooldown[i-1]</li><li>取这两种情况的最大值</li></ul></li><li>不持有股票，当天结束后<strong>不可以买</strong>：cooldown[i]。这是因为：<ul><li>前一天持有股票，今天卖了：cooldown[i]=buy[i-1]+prices[i]</li></ul></li></ul><p>结果就是不持有股票时的最大值</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">buy</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">sell</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">cooldown</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>buy<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sell<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 持有股票状态</span>            sell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>sell<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>cooldown<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不持有股票状态,当天结束后可以买</span>            cooldown<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>buy<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不持有股票状态,当天结束后不可以买</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>sell<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cooldown<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="714-买卖股票的最佳时机含手续费"><a href="#714-买卖股票的最佳时机含手续费" class="headerlink" title="714. 买卖股票的最佳时机含手续费"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/" target="_blank" rel="noopener">714. 买卖股票的最佳时机含手续费</a></h1><ul><li>在122题的基础上，把买股票时的手续费扣除即可</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>prices<span class="token punctuation">,</span> <span class="token keyword">int</span> fee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">buy</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sell</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>buy<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sell<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 持有股票状态</span>            sell<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>sell<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buy<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不持有股票状态</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sell<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第零章：单链表的六大解题套路，你都见过么？</title>
      <link href="/2021/09/09/labuladong/di-ling-zhang-dan-lian-biao-de-liu-da-jie-ti-tao-lu-ni-du-jian-guo-me/"/>
      <url>/2021/09/09/labuladong/di-ling-zhang-dan-lian-biao-de-liu-da-jie-ti-tao-lu-ni-du-jian-guo-me/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/mu-lu-ye/lian-biao-ji-qiao" target="_blank" rel="noopener">单链表的六大解题套路，你都见过么？</a></p><h1 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">21. 合并两个有序链表</a></h1><h2 id="方法1：迭代"><a href="#方法1：迭代" class="headerlink" title="方法1：迭代"></a>方法1：迭代</h2><ul><li>逐个比较节点，不断向后移动，最后把未比较过的节点拼接到尾巴上</li><li>添加一个dummy节点便于操作</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) {} *     ListNode(int x) : val(x), next(nullptr) {} *     ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> dummy<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> head<span class="token operator">=</span>dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> l1<span class="token operator">!=</span><span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span>  l2<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> l1<span class="token operator">-</span><span class="token operator">></span>val<span class="token operator">&lt;=</span> l2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                head<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span> l1<span class="token punctuation">;</span>                 l1<span class="token operator">=</span> l1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                head<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span> l2<span class="token punctuation">;</span>                 l2<span class="token operator">=</span> l2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            head<span class="token operator">=</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> l1<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span> l1<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> l2<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span> l2<span class="token punctuation">;</span>        <span class="token keyword">return</span> dummy<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, next=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type list1: Optional[ListNode]        :type list2: Optional[ListNode]        :rtype: Optional[ListNode]        """</span>        dummy<span class="token operator">=</span>ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        head<span class="token operator">=</span>dummy        <span class="token keyword">while</span> list1 <span class="token operator">and</span> list2<span class="token punctuation">:</span>            <span class="token keyword">if</span> list1<span class="token punctuation">.</span>val<span class="token operator">&lt;=</span>list2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                head<span class="token punctuation">.</span>next<span class="token operator">=</span>list1                head<span class="token operator">=</span>head<span class="token punctuation">.</span>next                list1<span class="token operator">=</span>list1<span class="token punctuation">.</span>next            <span class="token keyword">else</span><span class="token punctuation">:</span>                head<span class="token punctuation">.</span>next<span class="token operator">=</span>list2                head<span class="token operator">=</span>head<span class="token punctuation">.</span>next                list2<span class="token operator">=</span>list2<span class="token punctuation">.</span>next        head<span class="token punctuation">.</span>next<span class="token operator">=</span>list1 <span class="token keyword">if</span> list1 <span class="token keyword">else</span> list2        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2：递归"><a href="#方法2：递归" class="headerlink" title="方法2：递归"></a>方法2：递归</h2><ul><li>递归结束的条件：有一个链表为空</li><li>如果当前节点较小，就从当前节点的后面与另一条链表merge，然后返回当前节点对应的链表</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) {} *     ListNode(int x) : val(x), next(nullptr) {} *     ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> dummy<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        递归结束的条件        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//        融合</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;=</span> l2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>            l1<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">,</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            l2<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, next=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type list1: Optional[ListNode]        :type list2: Optional[ListNode]        :rtype: Optional[ListNode]        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> list1<span class="token punctuation">:</span><span class="token keyword">return</span> list2        <span class="token keyword">if</span> <span class="token operator">not</span> list2<span class="token punctuation">:</span><span class="token keyword">return</span> list1        <span class="token keyword">if</span> list1<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>list2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            list1<span class="token punctuation">.</span>next<span class="token operator">=</span>self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>list1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> list2<span class="token punctuation">)</span>            <span class="token keyword">return</span> list1        <span class="token keyword">else</span><span class="token punctuation">:</span>            list2<span class="token punctuation">.</span>next<span class="token operator">=</span>self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>list1<span class="token punctuation">,</span>list2<span class="token punctuation">.</span>next<span class="token punctuation">)</span>            <span class="token keyword">return</span> list2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="23-合并K个升序链表"><a href="#23-合并K个升序链表" class="headerlink" title="23. 合并K个升序链表"></a><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/solution/cpython3java-1bian-li-zhu-ge-he-bing-2gu-hn80/" target="_blank" rel="noopener">23. 合并K个升序链表</a></h1><h2 id="方法1：迭代地使用两两合并的算法"><a href="#方法1：迭代地使用两两合并的算法" class="headerlink" title="方法1：迭代地使用两两合并的算法"></a>方法1：迭代地使用两两合并的算法</h2><ul><li>在上一题合并2个升序链表的基础上，逐一合并所有的链表</li><li>先构建一个空的x链表，不断把当前链表合并到x上，使x不断加长，最后返回x</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>l1<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode <span class="token operator">*</span>dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>head <span class="token operator">=</span> dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;=</span> l2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>                l1 <span class="token operator">=</span> l1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>                l2 <span class="token operator">=</span> l2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            head <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>        <span class="token keyword">return</span> dummy<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ListNode <span class="token operator">*</span><span class="token function">mergeKLists</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>ListNode <span class="token operator">*</span><span class="token operator">></span> <span class="token operator">&amp;</span>lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode <span class="token operator">*</span>x<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ListNode <span class="token operator">*</span>cur<span class="token operator">:</span>lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>            x <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不断加长x链表</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2：优先级队列"><a href="#方法2：优先级队列" class="headerlink" title="方法2：优先级队列"></a>方法2：优先级队列</h2><h3 id="写法1：队列中存放的是值"><a href="#写法1：队列中存放的是值" class="headerlink" title="写法1：队列中存放的是值"></a>写法1：队列中存放的是值</h3><blockquote><p><a href="https://www.geeksforgeeks.org/priority-queue-in-cpp-stl/" target="_blank" rel="noopener">构建 a max heap</a>：<code>priority_queue &lt;int&gt; pq;</code><br><a href="https://www.geeksforgeeks.org/implement-min-heap-using-stl/" target="_blank" rel="noopener">构建 a min heap</a>: <code>priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt; pq;</code></p><ul><li>在<a href="https://labuladong.gitbook.io/algo/mu-lu-ye-1/mu-lu-ye-3/er-cha-dui-xiang-jie-shi-xian-you-xian-ji-dui-lie" target="_blank" rel="noopener">优先级队列（二叉堆）</a>中，最终我们的操作只会在<strong>堆底和堆顶</strong>进行</li></ul></blockquote><ul><li>用优先级队列（二叉堆）这种数据结构，构建一个<strong>最小堆</strong></li><li>把所有的数据通通都放进最小堆priority_queue中，然后取出来，拼接到dummy后面</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">mergeKLists</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>ListNode <span class="token operator">*</span><span class="token operator">></span> <span class="token operator">&amp;</span>lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> pq<span class="token punctuation">;</span>        <span class="token keyword">int</span> sz<span class="token operator">=</span>lists<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        取出全部节点的值，放到堆中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        从堆中取出，然后拼接到dummy后面</span>        ListNode <span class="token operator">*</span>dummy<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>cur<span class="token operator">=</span>dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ListNode <span class="token operator">*</span>tmp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>tmp<span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummy<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.geeksforgeeks.org/heap-queue-or-heapq-in-python/" target="_blank" rel="noopener">Heap queue (or heapq) in Python</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lists<span class="token punctuation">:</span> List<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> lists <span class="token operator">or</span> len<span class="token punctuation">(</span>lists<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> None        <span class="token keyword">import</span> heapq        heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 首先 for 嵌套 while 就是将所有元素都取出放入堆中</span>        <span class="token keyword">for</span> node <span class="token keyword">in</span> lists<span class="token punctuation">:</span>            <span class="token keyword">while</span> node<span class="token punctuation">:</span>                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>next        dummy <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        cur <span class="token operator">=</span> dummy        <span class="token comment" spellcheck="true"># 依次将堆中的元素取出(因为是小顶堆，所以每次出来的都是目前堆中值最小的元素），然后重新构建一个列表返回</span>        <span class="token keyword">while</span> heap<span class="token punctuation">:</span>            cur<span class="token punctuation">.</span>next<span class="token operator">=</span>ListNode<span class="token punctuation">(</span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">)</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>也可以用python把所有元素逐个取出并排序，然后添加到dummy的后面</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lists<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> lists <span class="token operator">or</span> len<span class="token punctuation">(</span>lists<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> None        all_vals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> l <span class="token keyword">in</span> lists<span class="token punctuation">:</span>            <span class="token keyword">while</span> l<span class="token punctuation">:</span>                all_vals<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                l <span class="token operator">=</span> l<span class="token punctuation">.</span>next        all_vals<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        dummy <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        cur <span class="token operator">=</span> dummy        <span class="token keyword">for</span> i <span class="token keyword">in</span> all_vals<span class="token punctuation">:</span>            cur<span class="token punctuation">.</span>next<span class="token operator">=</span>ListNode<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="写法3：队列中存放的是（链表的）指针"><a href="#写法3：队列中存放的是（链表的）指针" class="headerlink" title="写法3：队列中存放的是（链表的）指针"></a>写法3：队列中存放的是（链表的）指针</h3><ul><li>重写一个比较的类，用于构建最小堆，堆中存的是链表指针</li><li>假设一共有k条链表，则先找出头节点中最小的节点，加到堆中</li><li>然后弹出堆顶的指针，若加进去的头结点的后面还有节点，则把这些节点也加到堆中，用于后续比较<ul><li>堆本来就是优先级队列，这里也有种队列的意味：出去一个堆顶指针，则加入一个堆顶对应链表的后面的一个指针（如果存在），用于后续比较。即：一次while循环中，只弹一个且只加一个指针</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) {} *     ListNode(int x) : val(x), next(nullptr) {} *     ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">cmp1</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>a<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">></span> b<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">mergeKLists</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>ListNode <span class="token operator">*</span><span class="token operator">></span> <span class="token operator">&amp;</span>lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        priority_queue <span class="token operator">&lt;</span> ListNode <span class="token operator">*</span> <span class="token punctuation">,</span> vector <span class="token operator">&lt;</span> ListNode <span class="token operator">*</span> <span class="token operator">></span><span class="token punctuation">,</span> cmp1 <span class="token operator">></span> minHeap<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ListNode <span class="token operator">*</span>x <span class="token operator">:</span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 比较k条链表的头结点，并按递增顺序加入最小堆中</span>                minHeap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode <span class="token operator">*</span>dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>x <span class="token operator">=</span> dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>minHeap<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode <span class="token operator">*</span>y <span class="token operator">=</span> minHeap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            minHeap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            x<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> y<span class="token punctuation">;</span>            x <span class="token operator">=</span> x<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                minHeap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummy<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>python中，可以用<a href="https://leetcode.cn/problems/merge-k-sorted-lists/solution/duo-tu-yan-shi-23-he-bing-kge-pai-xu-lian-biao-by-/" target="_blank" rel="noopener">堆排序的优化</a> （暂）<ul><li>其中python3的参考解法：<a href="https://leetcode.cn/problems/merge-k-sorted-lists/solution/python-c-you-xian-dui-lie-zui-xiao-dui-onlogk-by-m/" target="_blank" rel="noopener">PyCode python c++ 优先队列(最小堆）</a></li></ul></li></ul><ul><li><a href="https://wingkwong.github.io/leetcode-the-hard-way/tutorials/basic-topics/heap" target="_blank" rel="noopener">python的最大堆最小堆实现</a></li></ul><h1 id="876-链表的中间结点"><a href="#876-链表的中间结点" class="headerlink" title="876. 链表的中间结点"></a><a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/" target="_blank" rel="noopener">876. 链表的中间结点</a></h1><ul><li>快慢指针</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">middleNode</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode <span class="token operator">*</span>slow<span class="token operator">=</span>head<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>fast<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span><span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            slow<span class="token operator">=</span>slow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            fast<span class="token operator">=</span>fast<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160. 相交链表"></a><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/intersection-of-two-linked-lists-shuang-zhi-zhen-l/" target="_blank" rel="noopener">160. 相交链表</a></h1><p>让 p1 遍历完链表 A 之后开始遍历链表 B，让 p2 遍历完链表 B 之后开始遍历链表 A，这样相当于「逻辑上」两条链表接在了一起</p><ul><li>若有公共交点，则最后指针指向公共交点</li><li>若无公共交点，则最后指针指向NULL</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> headA<span class="token punctuation">,</span> headB<span class="token punctuation">)</span><span class="token punctuation">:</span>        ha<span class="token punctuation">,</span> hb <span class="token operator">=</span> headA<span class="token punctuation">,</span> headB        <span class="token keyword">while</span> ha <span class="token operator">!=</span> hb<span class="token punctuation">:</span>            ha <span class="token operator">=</span> ha<span class="token punctuation">.</span>next <span class="token keyword">if</span> ha <span class="token keyword">else</span> headB            hb <span class="token operator">=</span> hb<span class="token punctuation">.</span>next <span class="token keyword">if</span> hb <span class="token keyword">else</span> headA        <span class="token keyword">return</span> ha<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>headA<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode <span class="token operator">*</span>p1<span class="token operator">=</span>headA<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>p2<span class="token operator">=</span>headB<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p1<span class="token operator">!=</span>p2<span class="token punctuation">)</span><span class="token punctuation">{</span>            p1<span class="token operator">=</span><span class="token punctuation">(</span>p1<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token operator">?</span>p1<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">:</span>headB<span class="token punctuation">)</span><span class="token punctuation">;</span>            p2<span class="token operator">=</span><span class="token punctuation">(</span>p2<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token operator">?</span>p2<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">:</span>headA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> p1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据字符出现频率排序</title>
      <link href="/2021/09/08/leetcode/gen-ju-zi-fu-chu-xian-pin-lu-pai-xu/"/>
      <url>/2021/09/08/leetcode/gen-ju-zi-fu-chu-xian-pin-lu-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>这类问题主要用到lambda排序</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> collectionsm<span class="token operator">=</span>collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span>s<span class="token punctuation">)</span>m<span class="token operator">=</span>sorted<span class="token punctuation">(</span>m<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp">map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mm<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 统计频次</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i<span class="token operator">:</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mm<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">v</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mm<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span>pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>second<span class="token operator">></span>b<span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按值逆序排序</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="451-根据字符出现频率排序"><a href="#451-根据字符出现频率排序" class="headerlink" title="451. 根据字符出现频率排序"></a><a href="https://leetcode-cn.com/problems/sort-characters-by-frequency/" target="_blank" rel="noopener">451. 根据字符出现频率排序</a></h1><ul><li>统计s的频次并存入字典</li><li>将字典转成向量，并把该向量按值的逆序排序</li><li>根据排好序的向量，按键和值生成每个子字符串，并将其加到res结果中</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">frequencySort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: str        """</span>        <span class="token keyword">import</span> collections        m<span class="token operator">=</span>collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        m<span class="token operator">=</span>sorted<span class="token punctuation">(</span>m<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        res<span class="token operator">=</span><span class="token string">""</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> m<span class="token punctuation">:</span>            tmp<span class="token operator">=</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            res<span class="token operator">+=</span>tmp        <span class="token comment" spellcheck="true">## 或者</span>        <span class="token comment" spellcheck="true"># for k,v in m:</span>        <span class="token comment" spellcheck="true">#     tmp=k*v;</span>        <span class="token comment" spellcheck="true">#     res+=tmp</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字典转向量，然后排序</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">frequencySort</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mm<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 统计频次</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i<span class="token operator">:</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mm<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">v</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mm<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span>pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token punctuation">.</span>second<span class="token operator">></span>b<span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按值逆序排序</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string res<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            string <span class="token function">tmp</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">,</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按键和值，生成每个子字符串</span>            res<span class="token operator">+</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>另一种写法：字典转成multimap，multimap可以自动按键升序排序</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">frequencySort</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mm<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 统计频次</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i<span class="token operator">:</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mm<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">></span>multim<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 键和值互相调换，multimap自动按键的升序排列</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>c<span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token operator">:</span>mm<span class="token punctuation">)</span><span class="token punctuation">{</span>            multim<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span>c<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        string res<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">></span><span class="token operator">::</span>iterator it<span class="token operator">=</span>multim<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>multim<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>it<span class="token punctuation">)</span><span class="token punctuation">{</span>            string <span class="token function">tmp</span><span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span>first<span class="token punctuation">,</span>it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token operator">+</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拼接字符串</span>        <span class="token punctuation">}</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 反转</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h1 id="347-前-K-个高频元素"><a href="#347-前-K-个高频元素" class="headerlink" title="347. 前 K 个高频元素"></a><a href="https://leetcode-cn.com/problems/top-k-frequent-elements/" target="_blank" rel="noopener">347. 前 K 个高频元素</a></h1><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">topKFrequent</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mm<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 统计频次</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i<span class="token operator">:</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mm<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">v</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mm<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token punctuation">.</span>second<span class="token operator">></span>b<span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按值逆序排序</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="692-前K个高频单词"><a href="#692-前K个高频单词" class="headerlink" title="692. 前K个高频单词"></a><a href="https://leetcode-cn.com/problems/top-k-frequent-words/" target="_blank" rel="noopener">692. 前K个高频单词</a></h1><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">topKFrequent</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> words<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mm<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 统计频次</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i<span class="token operator">:</span>words<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mm<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">v</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mm<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>second<span class="token operator">==</span>b<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> a<span class="token punctuation">.</span>first<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>first<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> a<span class="token punctuation">.</span>second<span class="token operator">></span>b<span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按值逆序排序</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span>res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用栈实现队列</title>
      <link href="/2021/09/04/leetcode/yong-zhan-shi-xian-dui-lie/"/>
      <url>/2021/09/04/leetcode/yong-zhan-shi-xian-dui-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="面试题09-用两个栈实现队列"><a href="#面试题09-用两个栈实现队列" class="headerlink" title="面试题09. 用两个栈实现队列"></a><a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/mian-shi-ti-09-yong-liang-ge-zhan-shi-xian-dui-l-2/" target="_blank" rel="noopener">面试题09. 用两个栈实现队列</a></h1><ul><li>栈A用于加入元素</li><li>栈B用于反转元素。栈顶元素就是队头元素。删除队头时<ul><li>先判断 B 是否为空，只要 B 不为空， 无论 A 是否为空都是从 B 弹出元素</li><li>B为空时<ul><li>若A为空，则返回-1</li><li>若A不为空，则将其转反转到B中，返回B的栈顶元素</li></ul></li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CQueue</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> A<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> B<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">CQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">appendTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        A<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>B<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 只要 B 不为空， 无论 A 是否为空都是从 B 弹出元素</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// B为空时</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 若A为空，则返回-1</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 若A不为空，则将其转反转到B中</span>                    <span class="token keyword">int</span> cur <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    A<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    B<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        此时B被A逆序填充了，返回B的栈顶元素</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CQueue</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> A<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> B<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">CQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">appendTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        A<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        只要B不为空（不用管A是不是空的），则直接弹出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>B<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp<span class="token operator">=</span>B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ***********以下是B为空的情况***********</span><span class="token comment" spellcheck="true">//        B和A都为空，返回-1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//      B为空。若A里有元素，则将其翻转到B中，返回B的栈顶元素</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp<span class="token operator">=</span>A<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            A<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span>B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CQueue</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>B<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">appendTail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type value: int        :rtype: None        """</span>        self<span class="token punctuation">.</span>A<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :rtype: int        """</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>B<span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>B<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>B <span class="token operator">and</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>A<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>A<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>B<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>A<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>B<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Your CQueue object will be instantiated and called as such:</span><span class="token comment" spellcheck="true"># obj = CQueue()</span><span class="token comment" spellcheck="true"># obj.appendTail(value)</span><span class="token comment" spellcheck="true"># param_2 = obj.deleteHead()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232. 用栈实现队列"></a><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/" target="_blank" rel="noopener">232. 用栈实现队列</a></h1><p>在上题的基础上增加了peek操作和判断是否为空操作</p><ul><li>peek：和pop函数非常类似，只需要把pop函数中相关的（B栈）弹出操作取消掉即可</li><li>empty：若都为空，则返回true</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> A<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> B<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        A<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>B<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 只要 B 不为空， 无论 A 是否为空都是从 B 弹出元素</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// B为空时</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 若A为空，则返回-1</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 若A不为空，则将其转反转到B中</span>                    <span class="token keyword">int</span> cur <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    A<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    B<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        此时B被A逆序填充了，返回B的栈顶元素</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    peek：和pop函数非常类似，只需要把pop函数中相关的（B栈）弹出操作取消掉即可</span>    <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>B<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 只要 B 不为空， 无论 A 是否为空都是取B的栈顶元素</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            B.pop();</span>            <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// B为空时</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 若A为空，则返回-1</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 若A不为空，则将其转反转到B中</span>                    <span class="token keyword">int</span> cur <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    A<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    B<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        此时B被A逆序填充了，返回B的栈顶元素</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        B.pop();</span>        <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    若都为空，则返回true</span>    <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> B<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>697-数组的度</title>
      <link href="/2021/09/03/leetcode/697-shu-zu-de-du/"/>
      <url>/2021/09/03/leetcode/697-shu-zu-de-du/</url>
      
        <content type="html"><![CDATA[<h1 id="697-数组的度"><a href="#697-数组的度" class="headerlink" title="697. 数组的度"></a><a href="https://leetcode-cn.com/problems/degree-of-an-array/" target="_blank" rel="noopener">697. 数组的度</a></h1><ul><li>先统计一次数组，得到度</li><li>滑动窗口的左右指针用于更新并统计信息<ul><li>先增大右窗口，得到符合条件的窗口后,开始缩小左窗口</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findShortestSubArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">,</span> counter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        统计数组的度</span>        <span class="token keyword">int</span> degree <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i<span class="token operator">:</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            degree <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>degree<span class="token punctuation">,</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        滑动窗口</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            counter<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 右指针用于统计频次，然后继续向右跳</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>counter<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> degree<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前已符合条件，开始缩小左指针</span>                counter<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 更新频次</span>                ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 更新窗口的大小</span>                l<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            r<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-盛最多水的容器</title>
      <link href="/2021/09/02/leetcode/11-sheng-zui-duo-shui-de-rong-qi/"/>
      <url>/2021/09/02/leetcode/11-sheng-zui-duo-shui-de-rong-qi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/container-with-most-water/solution/container-with-most-water-shuang-zhi-zhen-fa-yi-do/" target="_blank" rel="noopener">11. 盛最多水的容器</a></p><p>利用双指针，不断更新面积</p><ul><li>决定面积大小的因素：两个柱子（指针）之间的距离以及两柱子的最低高度。所以面积表示为<code>min(height[l],height[r])*(r-l)</code></li><li>如果低柱子不动，让高柱子的那一侧往里跳，<code>(r-l)</code>会变更小，<code>min(height[l],height[r])</code>也不会变大，导致面积只会更小。因此不可以这样</li><li>如果高柱子不动，让低柱子的那一侧往里跳，虽然<code>(r-l)</code>会变更小，但<code>min(height[l],height[r])</code>可能变大，导致面积可能变大。因此高柱子对应的指针不动，低柱子对应的指针向里测跳</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type height: List[int]        :rtype: int        """</span>        area<span class="token operator">=</span><span class="token number">0</span>        l<span class="token operator">=</span><span class="token number">0</span>        r<span class="token operator">=</span>len<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> l<span class="token operator">&lt;</span>r<span class="token punctuation">:</span>            area<span class="token operator">=</span>max<span class="token punctuation">(</span>area<span class="token punctuation">,</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">*</span>min<span class="token punctuation">(</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">></span>height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                r<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                l<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> area<span class="token comment" spellcheck="true"># so=Solution()</span><span class="token comment" spellcheck="true"># print(so.maxArea([1,8,6,2,5,4,8,3,7]))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r<span class="token operator">=</span>height<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> area<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            area<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>area<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;</span>height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">?</span> l<span class="token operator">++</span><span class="token operator">:</span>r<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> area<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-Z字形变换</title>
      <link href="/2021/09/02/leetcode/6-z-zi-xing-bian-huan/"/>
      <url>/2021/09/02/leetcode/6-z-zi-xing-bian-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="6-Z-字形变换"><a href="#6-Z-字形变换" class="headerlink" title="6. Z 字形变换"></a><a href="https://leetcode-cn.com/problems/zigzag-conversion/solution/zzi-xing-bian-huan-by-jyd/" target="_blank" rel="noopener">6. Z 字形变换</a></h1><ul><li>模拟遍历过程<ul><li>用一个flag记录当前是不是需要从上到下（从下到上）转换方向</li><li>初始flag设为-1。记录好当前行后，判断是否需要更新flag</li><li>如果行数为0或1，则直接返回</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> numRows<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> numRows <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> s <span class="token comment" spellcheck="true">#  如果行数为0或1，则直接返回.不要进入后面的for循环。否则i会越界</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">""</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>numRows<span class="token punctuation">)</span><span class="token punctuation">]</span>        i<span class="token operator">=</span><span class="token number">0</span>        flag<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>c            <span class="token keyword">if</span> i<span class="token operator">==</span>numRows<span class="token number">-1</span> <span class="token operator">or</span> i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> flag<span class="token operator">=</span><span class="token operator">-</span>flag            i <span class="token operator">+=</span> flag        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">convert</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numRows <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>        vector <span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numRows<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>c<span class="token operator">:</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">==</span> numRows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token operator">-</span>flag<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i <span class="token operator">+</span><span class="token operator">=</span> flag<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        string ans <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>c<span class="token operator">:</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>32-最长有效括号</title>
      <link href="/2021/08/30/leetcode/32-zui-chang-you-xiao-gua-hao/"/>
      <url>/2021/08/30/leetcode/32-zui-chang-you-xiao-gua-hao/</url>
      
        <content type="html"><![CDATA[<h1 id="32-最长有效括号"><a href="#32-最长有效括号" class="headerlink" title="32. 最长有效括号"></a><a href="https://leetcode-cn.com/problems/longest-valid-parentheses/" target="_blank" rel="noopener">32. 最长有效括号</a></h1><p>括号问题常常可以用栈来处理</p><ul><li>stack<int> idx ;  // 如果是左括号，则左括号的索引入栈</int></li><li>vector<int> v;  // 记录全部有效括号的索引<ul><li>如果当前为右括号，且栈顶有左括号，则记录栈顶左括号的索引和当前右括号的索引。</li><li>然后idx的栈顶出栈，把与当前右括号匹配的左括号的索引删除掉</li></ul></int></li><li>v中记录的是全部有效括号的索引，因此找到这里边最长的连续递增子串的长度即可<ul><li>由于弹出的顺序不同，v中的记录可能是乱序的。因此要先排序，再找连续递增子串</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> idx<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果是左括号，则左括号的索引入栈</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果当前为右括号，且栈顶为左括号，则记录栈顶左括号的索引和当前右括号的索引</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 记录左括号的索引</span>                idx<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 更新与当前右括号匹配的左括号的信息</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>idx<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//  防止栈顶为空</span>                    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>idx<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 与右括号匹配的左括号的索引入转</span>                    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 有括号的索引入栈</span>                    idx<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 匹配过的左括号的索引出栈</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: int        """</span>        idx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">:</span>                idx<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">elif</span> <span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>                v<span class="token punctuation">.</span>append<span class="token punctuation">(</span>idx<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                v<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        v <span class="token operator">=</span> sorted<span class="token punctuation">(</span>v<span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        count <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                count <span class="token operator">+=</span> <span class="token number">1</span>                ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> count<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                count <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章：如何实现一个计算器</title>
      <link href="/2021/08/26/labuladong/di-si-zhang-ru-he-shi-xian-yi-ge-ji-suan-qi/"/>
      <url>/2021/08/26/labuladong/di-si-zhang-ru-he-shi-xian-yi-ge-ji-suan-qi/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/mu-lu-ye-4/shi-xian-ji-suan-qi" target="_blank" rel="noopener">如何实现一个计算器</a></p><h1 id="227-基本计算器-II"><a href="#227-基本计算器-II" class="headerlink" title="227. 基本计算器 II"></a><a href="https://leetcode-cn.com/problems/basic-calculator-ii/" target="_blank" rel="noopener">227. 基本计算器 II</a></h1><p>遇到加号，就让这个数变正<br>遇到减号，就让这个数变负<br>遇到乘号，就让当前的数乘上之前的数<br>遇到除号，就让当前数被之前的数除</p><p>思路：<strong>维护一个栈，若为加减，则直接入栈。若为乘除，则栈顶元素乘除当前元素，然后将栈顶弹出，将乘除后的结果入栈</strong></p><h2 id="方法1：stringstream提取操作子和数字（简洁易懂）"><a href="#方法1：stringstream提取操作子和数字（简洁易懂）" class="headerlink" title="方法1：stringstream提取操作子和数字（简洁易懂）"></a><a href="https://leetcode.com/problems/basic-calculator-ii/discuss/63004/17-lines-C%2B%2B-easy-20-ms" target="_blank" rel="noopener">方法1：stringstream提取操作子和数字（简洁易懂）</a></h2><ul><li>stringstream可以根据char字符自动且<strong>智能地</strong>将字符串分隔。op为当前操作符，n为操作符后面的数字</li><li>在字符串前面添加+后，可使整个过程统一</li><li>也可以用栈代替ans来保存过程中的数字，最后对栈求和</li></ul><blockquote><p>通过<code>while(ss&gt;&gt;op&gt;&gt;n)</code>,<br><code>+-1+10+1</code> 会自动被提取为</p><pre><code>+    -1-    10+    1</code></pre><p>它会尽量转换并分隔字符串。即便<code>+-1</code>也能辨别为<code>+</code>和<code>-1</code></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 遍历过程中，直接更新ans和n。也可以用栈保存，最后对栈求和</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> op<span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> last<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>ss<span class="token operator">>></span>op<span class="token operator">>></span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token string">'+'</span><span class="token operator">||</span> op<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                n<span class="token operator">=</span> <span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token string">'+'</span><span class="token operator">?</span>n<span class="token operator">:</span><span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                ans<span class="token operator">+</span><span class="token operator">=</span>n<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                n<span class="token operator">=</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token string">'*'</span><span class="token operator">?</span>last<span class="token operator">*</span>n<span class="token operator">:</span>last<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                ans<span class="token operator">=</span>ans<span class="token operator">+</span>n<span class="token operator">-</span>last<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相当于抵消掉上一个last值，把当前值代替last值</span>            <span class="token punctuation">}</span>            last<span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2：逐步分解并讨论"><a href="#方法2：逐步分解并讨论" class="headerlink" title="方法2：逐步分解并讨论"></a>方法2：逐步分解并讨论</h2><p>如果是加减，则直接入栈。如果是乘除，则与栈顶元素进行计算后再入栈</p><ul><li>将字符串中的空格去掉 <code>s.erase(remove(s.begin(), s.end(), &#39; &#39;), s.end());</code></li><li>如果是数字，则连续处理该数字</li><li>用一个sign记录（<strong>之前</strong>的）运算符。遇到某个运算符时，说明可以去讨论前面的运算了<ul><li>加减：直接入栈</li><li>乘除：只需要把栈顶的元素弹出来，然后与当前元素相乘或相除，再将结果入栈</li></ul></li><li>根据sign符号（加减乘除）分别进入相应的流程。<strong>先记录sign，再记录number</strong>。如<code>3*2+3</code>, 栈中先记录<code>+3</code> -&gt; sign符号更新为<code>*</code> -&gt; 再记录<code>2</code> -&gt; 遇到+（只要遇到非数字），则处理前面的<code>3*2</code>并将结果6放入栈中 -&gt; 栈中再放<code>+3</code></li></ul><blockquote><p>处理空格时，如果不用erase算法，则可以：</p><ul><li>遇到空格时，应该跳过。因此不要让空格进入if循环即可<ul><li>将<code>if ((!isdigit(c) ) || i == s.size() - 1)</code>改为<code>if ((!isdigit(c) &amp;&amp; c != &#39; &#39;) || i == s.size() - 1)</code>。即：遇到运算符则处理前面的计算</li><li>处理空格时，如果要在for循环里面 <code>if (c == &#39; &#39;) continue;</code>直接跳过。要写成<code>if (c == &#39; &#39; &amp;&amp; i != s.size() - 1)</code>,即:</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">' '</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为类似于 <code>3/2</code>，空格可以直接跳过。但<code>3/2</code> 或<code>3/2</code>这种，当空格不在最后一个时，可以直接跳过。但如果最后一个也是空格，则要老老实实地进入下面的流程，否则空格后直接continue出for循环去了，2还没来得及处理。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录单次的数字</span>        <span class="token keyword">char</span> sign <span class="token operator">=</span> <span class="token string">'+'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录 num 前的符号，初始化为 +</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//          如果是数字，则连续处理该数字</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                num <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> num <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 字符转int</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        如果是符号或最后一个元素（要记得把最后一个元素也添加进来）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span> i <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//     注意：以下讨论的是上一个的sign符号</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">;</span>                    stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> num<span class="token punctuation">;</span>                    stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 更新符号为当前符号，数字清零</span>                sign <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这是现在的sign符号</span>                num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将栈中所有结果求和就是答案</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">+</span><span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>python中，注意负数的除法取整和正数的除法取整<blockquote><p><a href="https://leetcode.cn/problems/basic-calculator-ii/solution/xian-cheng-chu-zai-jia-jian-yong-zhan-ba-hplr/" target="_blank" rel="noopener">我是用 python3 写的代码，这里会有个坑</a>，坑爹的Python3「地板除 // 」。比如在 Python3 中 (-3) // 2 = -2 的，和 c++ 计算负数除法的结果不一样。因此如果在计算的过程中，如果遇到负数的除法，先使用的用「浮点除 / 」再取整的方式获得和 c++一样的结果。</p></blockquote></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">calculate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: int        """</span>        num<span class="token operator">=</span><span class="token number">0</span>        sign<span class="token operator">=</span><span class="token string">"+"</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>int<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">"+-*/"</span> <span class="token operator">or</span> i<span class="token operator">==</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> sign<span class="token operator">==</span><span class="token string">"+"</span><span class="token punctuation">:</span>                    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>                <span class="token keyword">elif</span> sign<span class="token operator">==</span><span class="token string">"-"</span><span class="token punctuation">:</span>                    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token operator">-</span>num<span class="token punctuation">)</span>                <span class="token keyword">elif</span> sign<span class="token operator">==</span><span class="token string">"*"</span><span class="token punctuation">:</span>                    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>num<span class="token punctuation">)</span>                <span class="token keyword">elif</span> sign<span class="token operator">==</span><span class="token string">"/"</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 根据栈顶的正负数，进行区别性的除法</span>                    top<span class="token operator">=</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                     res<span class="token operator">=</span>abs<span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token operator">//</span>num                    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res <span class="token keyword">if</span> top<span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span>res<span class="token punctuation">)</span>                num<span class="token operator">=</span><span class="token number">0</span>                sign<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> sum<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法3：正则表达式"><a href="#方法3：正则表达式" class="headerlink" title="方法3：正则表达式"></a>方法3：正则表达式</h2><ul><li>移除字符串的所有空格 <code>s.erase(remove(s.begin(), s.end(), &#39; &#39;), s.end())</code></li><li>正则表达式将字符串分解，并将分解结果放入向量v中 （如：将<code>5+4-3*2/1</code> 变为 <code>5    +4    -3    *2    /1</code> 进行计算）</li></ul><blockquote><p>注意：这里有一个非常隐蔽的bug:</p><ul><li>通过<code>re(&quot;(?=[-+*/])&quot;)</code> 分隔字符时，若一开始就是符号，则也会提取符号前面的内容。如”-1+2”会分成””,”-1”,”+2”（注意这里有一个””）。所以迭代器要用<code>if ((*it)==&quot;&quot;) it++;</code> 跳过这个空的，从下一个开始算起（因为这道题的测试用例中没有以符号开始的字符串，所以不加这句话也可以，但严格来说，应该加上）</li><li><code>*it</code>只是与空字符串””内容相同（但类型不同），所以可以用<code>if ((*it)==&quot;&quot;)</code> <del>，不能用<code>(*it).size()</code> 或<code>(*it).empty()</code>判断是否为空</del></li></ul></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">regex <span class="token function">re</span><span class="token punctuation">(</span><span class="token string">"(?=[-+*/])"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sregex_token_iterator <span class="token function">it</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> re<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// if ((*it)=="") it++; 注意这句话，这里不加这句话也可以通过。严格来说，应该加上</span>vector <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 去除空格</span><span class="token comment" spellcheck="true">//        正则表达式：按照加减乘除将字符分开。如 1  *2  -3  +4  /5</span>        regex <span class="token function">re</span><span class="token punctuation">(</span><span class="token string">"(?=[-+*/])"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sregex_token_iterator <span class="token function">it</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> re<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// if ((*it)=="") it++; 注意这句话，不加这句话也可以通过。严格来说，应该加上</span>        vector <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        将遍历过程的字符保存到res中，一开始先放一个元素</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            string i <span class="token operator">=</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 若是加减号，则直接入栈</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 若是乘除，则计算后再入栈</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">?</span> res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">stoi</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">stoi</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法4：先分解字符串，再计算"><a href="#方法4：先分解字符串，再计算" class="headerlink" title="方法4：先分解字符串，再计算"></a>方法4：先分解字符串，再计算</h2><ul><li>要实现类似（<code>5+4-3*2/1</code> 变为 <code>5    +4    -3    *2    /1</code>）的功能，如果不想用正则表达式分解，也可以逐步遍历字符串。遇到符号时，若当前cur非空（用以规避一开头就是<code>-</code>的情况），则加到向量v中；其余时候字符加到cur中。</li></ul><p>只需要把正则表达式中的</p><pre class="line-numbers language-cpp"><code class="language-cpp">regex <span class="token function">re</span><span class="token punctuation">(</span><span class="token string">"(?=[-+*/])"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sregex_token_iterator <span class="token function">it</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> re<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">;</span>vector <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>替换为</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string cur<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> c<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cur<span class="token operator">+</span><span class="token operator">=</span>c<span class="token punctuation">;</span><span class="token punctuation">}</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加最后一个cur</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// regex re("(?=[-+*/])");</span>        <span class="token comment" spellcheck="true">// sregex_token_iterator it(s.begin(), s.end(), re, -1), end;</span>        <span class="token comment" spellcheck="true">// vector &lt;string> v(it, end);</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string cur<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cur<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            cur<span class="token operator">+</span><span class="token operator">=</span>c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加最后一个cur</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            string i <span class="token operator">=</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 若是加减号，则直接入栈</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 若是乘除，则计算后再入栈</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">?</span> res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">stoi</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">stoi</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="224-基本计算器"><a href="#224-基本计算器" class="headerlink" title="224. 基本计算器"></a><a href="https://leetcode-cn.com/problems/basic-calculator/" target="_blank" rel="noopener">224. 基本计算器</a></h1><h2 id="方法1：递归"><a href="#方法1：递归" class="headerlink" title="方法1：递归"></a>方法1：递归</h2><p>（这里把加减乘除都考虑了）<br>在上一题方法2的基础上，只要遇到左括号就进入递归，遇到右括号就停止递归。不要跳进递归的过程，相信它能返回你需要的结果。（如<code>100-（1+2）</code>。遇到左括号时，从1开始计算。因为前面i++了。所以此时的i并不会取到<code>(</code> ）</p><ul><li>注意if语句的顺序：得到当前的num。要先判断c是否为<code>(</code> ,再进入加减乘除的计算 ，再判断c是否为<code>)</code>。这个if语句的顺序不能变，要开始递归-&gt;计算-&gt;结束递归，否则可能会跳过某些计算。</li><li>左右括号一定要进入<code>if ((!isdigit(c) &amp;&amp; c != &#39; &#39;) || i==s.size())</code> 语句中。因为括号也起着字段分隔的作用。遇到左括号，num要清零，遇到右括号，说明要有新的sign了（其中，sign可能会被<code>(</code>括号覆盖掉，但没关系，它不会影响计算结果，在下次会被新的运算符覆盖掉）</li><li>用一个全局变量记录当前遍历到的位置。取到当前字符时，i++</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录string的全局下标</span>    <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用于把一个数字从字符转化成数字，因为一个数字可能由多个数字字符和符号组成</span>        <span class="token keyword">char</span> sign <span class="token operator">=</span> <span class="token string">'+'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第一个数字默认符号为'+'</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                num <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> num <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 字符c转成int类型</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 后面加括号防溢出，因为数字的ASCII值比它本身大很多</span><span class="token comment" spellcheck="true">//            左括号：开始递归。注意因为前面i++了，所以这次递归不会取到左括号</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> num <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把括号间的内容看作一个数，递归处理，这行代码要写在下面判断符号的代码前</span><span class="token comment" spellcheck="true">//            处理数字。注意：左右括号一定要进入if语句。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">||</span> i<span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不是数字和空格，那就是符号。到s末尾要结算最后一个数</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">;</span>                    stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> num<span class="token punctuation">;</span>                    stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                sign <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 更新符号位</span>                num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 更新计数</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 右括号这行代码要写在上面判断符号的代码后</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        计算累加和</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">+</span><span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2：（只考虑加减）用栈模拟递归"><a href="#方法2：（只考虑加减）用栈模拟递归" class="headerlink" title="方法2：（只考虑加减）用栈模拟递归"></a>方法2：（只考虑加减）用栈模拟递归</h2><p>用栈模拟递归过程。栈中<strong>Always keep most recent sum at top</strong></p><ul><li>遇到<code>+</code> <code>-</code>，改变sign （sign取值为1 或者-1）</li><li>遇到<code>（</code> : <ul><li>之前的结果入栈，之间的符号入栈</li><li>更新result（用来记录括号里的累加结果）和sign（初始化sign为1）：这里相当于递归过程中重新初始化累加结果和sign</li></ul></li><li>遇到<code>）</code>：<ul><li>用栈中之前记录的sign通过<code>result *= stk.top()</code>更新 result，弹出sign</li><li>然后将栈中之前记录的和与现在的result合并，弹出之前的和，使栈清空</li></ul></li></ul><p>stack中始终记录<strong>最近</strong>的一次（遇到<code>(</code>时）的结果与sign；<br>result记录（遇到<code>(</code>后）此次括号中临时的累加和；<br>遇到右括号时，说明此次计算可以结束了。把临时的res与sign相乘，再与栈中之前保存的累加和相加。把所有的累加结果都更新到res中，并清空栈。</p><h3 id="写法1：用栈模拟递归"><a href="#写法1：用栈模拟递归" class="headerlink" title="写法1：用栈模拟递归"></a><a href="https://leetcode.com/problems/basic-calculator/discuss/62362/JAVA-Easy-Version-To-Understand!!!!!" target="_blank" rel="noopener">写法1：用栈模拟递归</a></h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Always keep most recent sum at top</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> <span class="token function">isdigit</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                result <span class="token operator">+</span><span class="token operator">=</span> sign <span class="token operator">*</span> num<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这里进入括号，栈中保存历史结果，res保存括号中计算中结果，要重置，相当于递归中每层的局部变量</span>                stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Update last sum = current sum * sign 。//栈顶先是符号，然后是操作数</span>                result <span class="token operator">*</span><span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">+</span><span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="写法2：直接写递归"><a href="#写法2：直接写递归" class="headerlink" title="写法2：直接写递归"></a>写法2：<a href="https://leetcode-cn.com/problems/basic-calculator/solution/ru-he-xiang-dao-yong-zhan-si-lu-lai-zi-y-gpca/825280" target="_blank" rel="noopener">直接写递归</a></h3><p>用全局下标记录当前遍历位置</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//全局下标方便递归中使用</span>    <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> sign <span class="token operator">=</span> <span class="token string">'+'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//每次递归初始化</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//遇到空格</span>            <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                cur <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//进括号，递归</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">'0'</span> <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cur <span class="token operator">=</span> cur <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token keyword">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 处理一个数（可能有几位）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> res <span class="token operator">-</span><span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//出括号，返回括号内结果</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> sign <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//遇到操作符</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>640-求解方程</title>
      <link href="/2021/08/26/leetcode/640-qiu-jie-fang-cheng/"/>
      <url>/2021/08/26/leetcode/640-qiu-jie-fang-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="640-求解方程"><a href="#640-求解方程" class="headerlink" title="640. 求解方程"></a><a href="https://leetcode-cn.com/problems/solve-the-equation/" target="_blank" rel="noopener">640. 求解方程</a></h1><blockquote><p>示例 ：</p><p>输入: “x+5-3+x=6+x-2”<br>输出: “x=2”</p></blockquote><p>如果方程没有解，请返回“No solution”。</p><ul><li>如0x=10。此时<strong>x的系数为0，常数不为0</strong></li></ul><p>如果方程有无限解，则返回“Infinite solutions”。</p><ul><li>如2x=2x,也就是0x=0。此时<strong>x的系数为0，常数也为0</strong></li></ul><p>如果方程中只有一个解，要保证返回值 x 是一个整数。</p><ul><li>如2x=10。此时<strong>x的系数不为0，常数不为0</strong></li></ul><p>所以我们需要统计<strong>x的系数之和</strong>以及<strong>常量之和</strong>。然后将常量除以系数即可</p><h2 id="写法1"><a href="#写法1" class="headerlink" title="写法1"></a>写法1</h2><p>第一步：将字符串按照<code>+</code> <code>-</code>分开，并放入向量<code>item</code>中。</p><ul><li>如把<code>x+5-3+x</code> 分为<code>x</code>,<code>+5</code>,<code>-3</code>,<code>+x</code>。则向量item={‘x’,’+5’,’-3’,’+x’}</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">split</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>equation<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    string cur <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i<span class="token operator">:</span>equation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 遇到了一个符号，则把符号前面的字符串添加到item中</span>                item<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                cur <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加后，将cur置空</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cur <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    item<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把最后一项也添加进去</span>    <span class="token keyword">return</span> item<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个函数的功能也可以通过正则表达式来提取</p><ul><li>注意：这里有一个非常隐蔽的bug。通过<code>re(&quot;(?=[-+*/])&quot;)</code> 分隔字符时，若一开始就是符号，则也会提取符号前面的内容。如”-1+2”会分成””,”-1”,”+2”（注意这里有一个””）。所以迭代器要用<code>if ((*it)==&quot;&quot;) it++;</code> 跳过这个空的，从下一个开始算起（因为这道题的测试用例中含有以符号开始的字符串，所以一定要加这句话，否则在后面的<code>stoi(i)</code>函数中转化为int型时，编译器就懵逼了）</li><li><code>*it</code>只是与空字符串””内容相同（但类型不同），所以可以用<code>if ((*it)==&quot;&quot;)</code> <del>，不能用<code>(*it).size()</code> 或<code>(*it).empty()</code>判断是否为空</del></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">split</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>equation<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    regex <span class="token function">re</span><span class="token punctuation">(</span><span class="token string">"(?=[-+])"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sregex_token_iterator <span class="token function">it</span><span class="token punctuation">(</span>equation<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> equation<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> re<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span> it<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意这句话</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token punctuation">{</span>        item<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> item<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>第二步：得到向量item后，统计x的系数之和以及常量系数之和，将其分别存入<code>coeffX</code>及<code>coeffNum</code>中</p><pre class="line-numbers language-cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">cal</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> coeffX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> coeffNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>string i<span class="token operator">:</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            coeffX <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            coeffNum <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>coeffX<span class="token punctuation">,</span>coeffNum<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：由于这是一个等式，所以</p><ul><li>将字符串按照<code>=</code>分成左右两边</li><li>分别统计等式左右的系数之和，然后将左右系数相减<ul><li>如<code>x+5-3+x=6+x-2</code><ul><li>左边：x的系数之和为2，常量之和为2</li><li>右边：x的系数之和为1，常量之和为4</li></ul></li><li>左边-右边，x的系数之和<code>prevX</code>为1，常量之和<code>prevNum</code>为-2。我们得到了1x-2=0</li></ul></li><li>按照x的系数及常量系数是否为0，分别返回相应的字符串结果</li></ul><blockquote><p>注意：在第二步时，用stoi(i)将字符串转成int型时，<code>+x</code>、 <code>-x</code>、 <code>x</code> 这三种不可以直接转，所以需要在原始字符串中将x变为1x。即：<code>x+5-3+x=6+x-2</code> -&gt; <code>1x+5-3+1x=6+1x-2</code> 。这样才可以用stoi(i)转换。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>equation<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//将 'x'换成'1x'</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'x'</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>equation<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        equation<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>equation<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>综上，汇总代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    分隔字符串</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">split</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>equation<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string cur <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i<span class="token operator">:</span>equation<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 遇到了一个符号，则把符号前面的字符串添加到item中</span>                    item<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cur <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加后，将cur置空</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            cur <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        item<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把最后一项也添加进去</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    统计x和常数的系数</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">cal</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> coeffX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> coeffNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>string i<span class="token operator">:</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                coeffX <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这是包含x的项</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                coeffNum <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这是常数项</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>coeffX<span class="token punctuation">,</span>coeffNum<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 汇总函数</span>    string <span class="token function">solveEquation</span><span class="token punctuation">(</span>string equation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将 'x'换成'1x'    </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>equation<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'x'</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>equation<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                equation<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>equation<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        根据'='，将字符串分成左右两边</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> equation<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string l <span class="token operator">=</span> equation<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>        string r <span class="token operator">=</span> equation<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> equation<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可直接写为 string r = equation.substr(idx + 1);</span><span class="token comment" spellcheck="true">//        将子字符串根据加减号分开，并放到向量中</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> itemL<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> itemR<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        统计x和常数的系数</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>preL<span class="token operator">=</span><span class="token function">cal</span><span class="token punctuation">(</span>itemL<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>preR<span class="token operator">=</span><span class="token function">cal</span><span class="token punctuation">(</span>itemR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> prevX<span class="token operator">=</span><span class="token function">cal</span><span class="token punctuation">(</span>itemL<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token function">cal</span><span class="token punctuation">(</span>itemR<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> prevNum<span class="token operator">=</span><span class="token function">cal</span><span class="token punctuation">(</span>itemL<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token function">cal</span><span class="token punctuation">(</span>itemR<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        根据系数返回对应的结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prevX<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> prevNum<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Infinite solutions"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prevX<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> prevNum<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"No solution"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token string">"x="</span><span class="token operator">+</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token operator">-</span>prevNum<span class="token operator">/</span>prevX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写法2"><a href="#写法2" class="headerlink" title="写法2"></a>写法2</h2><p>可以把第一步和第二步整合，在遍历的同时统计x和常数的系数和。</p><ul><li>如果是数字或x，则放到cur中</li><li>如果是加减号<ul><li>前一个为x，则说明是x的系数，放到prevX中   （用i!=0确保前一个字符存在）</li><li>前一个为数字，则说明是常数，放到prevNum中 （用i!=0确保前一个字符存在）</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    统计x和常数的系数</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">splitAndCal</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>equation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string cur <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> sign <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用于记录正负号</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> prevX<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// x的系数</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> prevNum<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 常数系数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> equation<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c<span class="token operator">=</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">||</span>c<span class="token operator">==</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">+</span><span class="token operator">=</span>c<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'+'</span><span class="token operator">||</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> equation<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    prevX<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>sign<span class="token operator">+</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isdigit</span><span class="token punctuation">(</span>equation<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    prevNum<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>sign<span class="token operator">+</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                sign<span class="token operator">=</span>c<span class="token punctuation">;</span>                cur<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        记得加最后一个cur</span>        cur<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'x'</span><span class="token operator">?</span>prevX<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>sign<span class="token operator">+</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>prevNum<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>sign<span class="token operator">+</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">accumulate</span><span class="token punctuation">(</span>prevX<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prevX<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token function">accumulate</span><span class="token punctuation">(</span>prevNum<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prevNum<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 汇总函数</span>    string <span class="token function">solveEquation</span><span class="token punctuation">(</span>string equation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将 'x'换成'1x'</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> equation<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'x'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>equation<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                equation<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>equation<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        根据'='，将字符串分成左右两边</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> equation<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string l <span class="token operator">=</span> equation<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>        string r <span class="token operator">=</span> equation<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        将子字符串根据加减号分开，统计x和常数的系数</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> calL<span class="token operator">=</span> <span class="token function">splitAndCal</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> calR<span class="token operator">=</span> <span class="token function">splitAndCal</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> allX <span class="token operator">=</span> calL<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> calR<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> allNum <span class="token operator">=</span> calL<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> calR<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        根据系数返回对应的结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>allX <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> allNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Infinite solutions"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>allX <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> allNum <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"No solution"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token string">"x="</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span><span class="token operator">-</span>allNum <span class="token operator">/</span> allX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24-两两交换链表中的节点</title>
      <link href="/2021/08/23/leetcode/24-liang-liang-jiao-huan-lian-biao-zhong-de-jie-dian/"/>
      <url>/2021/08/23/leetcode/24-liang-liang-jiao-huan-lian-biao-zhong-de-jie-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/" target="_blank" rel="noopener">24. 两两交换链表中的节点</a></h1><ul><li>链表的题目通常可以通过<strong>画过程示意图</strong>解决</li><li>节点虽然入栈了，但是栈中节点之间的指向仍是<strong>不变</strong>的</li></ul><p><img src="https://i.loli.net/2021/08/23/HeJ6gzSU7YtMlND.png" alt="20210823205247"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) {} *     ListNode(int x) : val(x), next(nullptr) {} *     ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">swapPairs</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        0个或1个节点，直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        stack <span class="token operator">&lt;</span> ListNode <span class="token operator">*</span> <span class="token operator">></span> stk<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 增加虚拟节点，便于返回结果</span>        dummy<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这句话可有可无</span>        ListNode <span class="token operator">*</span>pre <span class="token operator">=</span> dummy<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// pre在后（左边），cur在前（右边）。不断维护栈</span>        ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            入栈</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            出栈</span>            pre<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pre<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> pre<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            pre<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// pre跳过两次后，指向cur</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        处理末尾剩下的：可能0个或1个节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             pre<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 剩1个节点</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            pre<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没剩下节点</span><span class="token comment" spellcheck="true">//        返回结果    </span>        <span class="token keyword">return</span> dummy<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章：如何高效进行模幂运算</title>
      <link href="/2021/08/20/labuladong/di-san-zhang-ru-he-gao-xiao-jin-xing-mo-mi-yun-suan/"/>
      <url>/2021/08/20/labuladong/di-san-zhang-ru-he-gao-xiao-jin-xing-mo-mi-yun-suan/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/mu-lu-ye-3/mu-lu-ye-2/superpower" target="_blank" rel="noopener">如何高效进行模幂运算</a></p><h1 id="372-超级次方"><a href="#372-超级次方" class="headerlink" title="372. 超级次方"></a><a href="https://leetcode-cn.com/problems/super-pow/solution/you-qian-ru-shen-kuai-su-mi-suan-fa-xiang-jie-by-l/" target="_blank" rel="noopener">372. 超级次方</a></h1><p>先把问题分解为子问题</p><h2 id="子问题1：如何高效求幂？"><a href="#子问题1：如何高效求幂？" class="headerlink" title="子问题1：如何高效求幂？"></a>子问题1：如何高效求幂？</h2><p>对应以下题目：</p><h3 id="50-Pow-x-n"><a href="#50-Pow-x-n" class="headerlink" title="50. Pow(x, n)"></a><a href="https://leetcode-cn.com/problems/powx-n/solution/50-powx-n-kuai-su-mi-qing-xi-tu-jie-by-jyd/" target="_blank" rel="noopener">50. Pow(x, n)</a></h3><p><a href="https://leetcode-cn.com/problems/powx-n/solution/50-powx-n-kuai-su-mi-qing-xi-tu-jie-by-jyd/" target="_blank" rel="noopener">快速幂解析（分治法角度）</a></p><ul><li>通过x*x，每次x变为x^2；</li><li>通过n//2向下取整，n变为原来的一半；</li><li>当 n 为奇数时，将多出的一项 x 乘入 res </li></ul><p><img src="https://i.loli.net/2021/08/20/QswtzWypF9arIhb.png" alt="20210820202930"><br><img src="https://s2.loli.net/2022/10/03/ijy8F3T6RzQAbwk.png" alt="image.png"></p><blockquote><p>注意：在C++中，int32 变量 n∈[−2147483648,2147483647] ，因此当 n = -2147483648时执行 n = -n会因越界而赋值出错。<a href="https://leetcode-cn.com/problems/powx-n/solution/50-powx-n-kuai-su-mi-qing-xi-tu-jie-by-jyd/" target="_blank" rel="noopener">解决方法是先将 n存入 long 变量 b ，后面用 b 操作即可。</a></p></blockquote><h3 id="写法1：用while循环并更新结果"><a href="#写法1：用while循环并更新结果" class="headerlink" title="写法1：用while循环并更新结果"></a>写法1：用while循环并更新结果</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        base case，直接返回0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        如果是负数，则转换成正数</span>         <span class="token keyword">long</span> b <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">double</span> res<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> x<span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token operator">-</span>b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//      如果b是奇数，则把当前x乘到res中，比如2^5=(2*2)^2 * (2*1,此时的1为result)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            x <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前x变成x^2,</span>            b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b右移一位,相当于除以2并向下取整</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">myPow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type x: float        :type n: int        :rtype: float        """</span>        <span class="token comment" spellcheck="true"># 递归结束的条件</span>        <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 处理n是负数的情况</span>        <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>            x<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span>x            n<span class="token operator">=</span><span class="token operator">-</span>n        res<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">while</span> n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                res<span class="token operator">*=</span>x            x<span class="token operator">*=</span>x            n<span class="token operator">=</span>n<span class="token operator">>></span><span class="token number">1</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="写法2：用递归（更容易理解）"><a href="#写法2：用递归（更容易理解）" class="headerlink" title="写法2：用递归（更容易理解）"></a>写法2：用递归（更容易理解）</h3><ul><li>根据上面的公式，若n为奇数，则在递归时另外乘以一个x，若n为偶数，则直接递归即可</li><li>为防止溢出，把int型的_n 转成long型</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> _n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 把int _n 转成long，防止溢出</span>        <span class="token keyword">long</span> n <span class="token operator">=</span> _n<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归结束的条件：n为0，除不动了。x的0次方为1，返回1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理n为负数的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> x<span class="token punctuation">;</span>            n <span class="token operator">=</span> <span class="token operator">-</span>n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果n为奇数，则递归时单独乘以一个x；若为偶数，则直接递归</span>        res <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> x <span class="token operator">*</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 整数默认都为地板除        </span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">myPow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type x: float        :type n: int        :rtype: float        """</span>        <span class="token comment" spellcheck="true"># 递归结束的条件</span>        <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 处理n是负数的情况</span>        <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>            x<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span>x            n<span class="token operator">=</span><span class="token operator">-</span>n        res<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">if</span> n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            res<span class="token operator">=</span>self<span class="token punctuation">.</span>myPow<span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span>x        <span class="token keyword">else</span><span class="token punctuation">:</span>            res<span class="token operator">=</span>self<span class="token punctuation">.</span>myPow<span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="子问题2：如何处理数组指数？"><a href="#子问题2：如何处理数组指数？" class="headerlink" title="子问题2：如何处理数组指数？"></a>子问题2：如何处理数组指数？</h2><p><img src="https://i.loli.net/2021/08/20/FbV2YhS7WTrNLH5.png" alt="图片来自labuladong"><br>根据上述规律，可以发现，通过递归，可以缩小该问题规模</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token function">superPow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>  <span class="token function">superPow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因此，子问题2的递归可以写为（注：需要用到子问题1的实现）：</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">int</span> <span class="token function">superPow</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        递归结束的条件（base case）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        取出最后一个元素</span>        <span class="token keyword">int</span> last<span class="token operator">=</span>b<span class="token punctuation">.</span>back<span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        缩小规模</span>        <span class="token keyword">int</span> part1<span class="token operator">=</span> <span class="token function">myPow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> part2<span class="token operator">=</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token function">superPow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> part1<span class="token operator">*</span>part2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="子问题3：如何处理mod运算？"><a href="#子问题3：如何处理mod运算？" class="headerlink" title="子问题3：如何处理mod运算？"></a>子问题3：如何处理mod运算？</h2><p>在mod运算时，<code>(a * b) % k = (a % k)(b % k) % k</code>。也就是：对乘法的结果求模，等价于<strong>先对每个因子都求模</strong>，然后对因子<strong>相乘的结果再求模</strong>。<br>因此，在子问题1和2中，把各个<strong>因子</strong>（也就是幂运算的底）和<strong>有乘法的地方</strong>添加上mod运算即可。</p><ul><li>根据题意，把子问题1各处的double类型的pow适当调整int，才能进行mod （比如说double和long等类型就不支持mod运算）</li></ul><p>本题完整的代码为：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//#include &lt;vector></span><span class="token comment" spellcheck="true">//#include &lt;iostream></span><span class="token comment" spellcheck="true">//using namespace std;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1337</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        把int _n 转成long，防止溢出</span><span class="token comment" spellcheck="true">//        long n = _n;</span><span class="token comment" spellcheck="true">//        递归结束的条件：n为0，除不动了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        处理n为负数的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> x<span class="token punctuation">;</span>            n <span class="token operator">=</span> <span class="token operator">-</span>n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        x <span class="token operator">%</span><span class="token operator">=</span> base<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        如果n为奇数，则递归时单独乘以一个x；若为偶数，则直接递归</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> base <span class="token operator">:</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">superPow</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        递归结束的条件（base case）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        取出最后一个元素</span>        <span class="token keyword">int</span> last <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        缩小规模</span>        <span class="token keyword">int</span> part1 <span class="token operator">=</span> <span class="token function">myPow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> part2 <span class="token operator">=</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token function">superPow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>part1 <span class="token operator">*</span> part2<span class="token punctuation">)</span> <span class="token operator">%</span> base<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int main() {</span><span class="token comment" spellcheck="true">//    int a = 2147483647;</span><span class="token comment" spellcheck="true">//    vector&lt;int> b{2, 0, 0};</span><span class="token comment" spellcheck="true">//    Solution s;</span><span class="token comment" spellcheck="true">//    int ans = s.superPow(a, b);</span><span class="token comment" spellcheck="true">//    cout &lt;&lt; ans &lt;&lt; endl;</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>res<span class="token operator">=</span><span class="token number">0</span>        self<span class="token punctuation">.</span>base<span class="token operator">=</span><span class="token number">1337</span>    <span class="token keyword">def</span> <span class="token function">myPow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 快速幂，base case</span>        <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 处理n是负数的情况</span>        <span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>            x<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span>x            n<span class="token operator">=</span><span class="token operator">-</span>n        x<span class="token operator">=</span>x<span class="token operator">%</span>self<span class="token punctuation">.</span>base        res<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">while</span> n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                res<span class="token operator">*=</span>x            x<span class="token operator">*=</span>x            n<span class="token operator">=</span>n<span class="token operator">>></span><span class="token number">1</span>        <span class="token keyword">return</span> res    <span class="token keyword">def</span> <span class="token function">superPow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> b<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>        last<span class="token operator">=</span>b<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        part1<span class="token operator">=</span>self<span class="token punctuation">.</span>myPow<span class="token punctuation">(</span>a<span class="token punctuation">,</span>last<span class="token punctuation">)</span>        part2<span class="token operator">=</span>self<span class="token punctuation">.</span>myPow<span class="token punctuation">(</span>self<span class="token punctuation">.</span>superPow<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> part1<span class="token operator">*</span>part2<span class="token operator">%</span>self<span class="token punctuation">.</span>base<span class="token comment" spellcheck="true"># a=2</span><span class="token comment" spellcheck="true"># b=[3]</span><span class="token comment" spellcheck="true"># so=Solution()</span><span class="token comment" spellcheck="true"># print(so.superPow(a,b))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>遗留问题：如果是递归计算快速幂myPow，则LeetCode可以通过，本地编译报错。WHY？</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>res<span class="token operator">=</span><span class="token number">0</span>        self<span class="token punctuation">.</span>base<span class="token operator">=</span><span class="token number">1337</span>    <span class="token keyword">def</span> <span class="token function">myPow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre><code>    # 递归结束的条件    if n==0:return 1    # 处理n是负数的情况    if n&lt;0:        x=1/x        n=-n    x=x%self.base    return self.myPow(x*x,n/2) if n%2==0 else self.myPow(x*x,n/2)*x%self.basedef superPow(self, a, b):    if not b: return 1    last=b.pop()    part1=self.myPow(a,last)    part2=self.myPow(self.superPow(a,b),10)    return part1*part2%self.base</code></pre><h1 id="a-2"><a href="#a-2" class="headerlink" title="a=2"></a>a=2</h1><h1 id="b-1-0"><a href="#b-1-0" class="headerlink" title="b=[1,0]"></a>b=[1,0]</h1><h1 id="so-Solution"><a href="#so-Solution" class="headerlink" title="so=Solution()"></a>so=Solution()</h1><h1 id="print-so-superPow-a-b"><a href="#print-so-superPow-a-b" class="headerlink" title="print(so.superPow(a,b))"></a>print(so.superPow(a,b))</h1><p>```</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：题目不让我干什么，我偏要干什么</title>
      <link href="/2021/08/19/labuladong/di-yi-zhang-ti-mu-bu-rang-wo-gan-shi-me-wo-pian-yao-gan-shi-me/"/>
      <url>/2021/08/19/labuladong/di-yi-zhang-ti-mu-bu-rang-wo-gan-shi-me-wo-pian-yao-gan-shi-me/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/mu-lu-ye-1/mu-lu-ye-1/nestinteger" target="_blank" rel="noopener">题目不让我干什么，我偏要干什么</a></p><h1 id="341-扁平化嵌套列表迭代器"><a href="#341-扁平化嵌套列表迭代器" class="headerlink" title="341. 扁平化嵌套列表迭代器"></a><a href="https://leetcode-cn.com/problems/flatten-nested-list-iterator/solution/fu-xue-ming-zhu-xiang-jie-ti-yi-shu-li-d-n4qa/" target="_blank" rel="noopener">341. 扁平化嵌套列表迭代器</a></h1><p>示例 ：<br>输入：nestedList = [1,[4,[6]]]<br>输出：[1,4,6]<br>解释：通过重复调用 next 直到 hasNext 返回 false，next 返回的元素的顺序应该是: [1,4,6]。</p><p>NestedInteger相当于一棵N叉树，叶子节点是int类型，其他节点是vector <nestedinteger>类型。结果中<strong>保存叶子节点</strong></nestedinteger></p><ul><li>用递归实现展平<ul><li>如果是整数，则加到结果中</li><li>如果是NestedInteger，则递归展开该NestedInteger，直到不能展开为止</li><li>由于每次的for循环是有限的，因此不用显式地写递归出口，循环结束就是隐式的出口</li></ul></li><li>因为需要用next得到当前元素，并弹出当前元素，然后得到下一个元素，然后弹出下一个元素…，所以用队列存储结果</li><li>也可以用向量存储结果。这时要记录当前位置的<strong>索引</strong></li></ul><p>各函数功能：</p><ul><li><code>NestedIterator(vector &lt;NestedInteger&gt; &amp;nestedList)</code> 函数实现全部展开</li><li><code>int next()</code> 队列中，函数得到当前元素，并弹出当前元素 （向量中，得到当前元素后，索引向后移动）</li><li><code>bool hasNext()</code>： 队列中，通过NestedInteger的<code>size()</code>判断是否<code>hasNext()</code>，如果size&gt;=1,则说明hasNext （向量中，索引值小于<code>size()</code>，则说明<code>hasNext()</code>）</li></ul><h2 id="方法1-递归"><a href="#方法1-递归" class="headerlink" title="方法1:递归"></a>方法1:递归</h2><h3 id="第一种：队列实现"><a href="#第一种：队列实现" class="headerlink" title="第一种：队列实现"></a>第一种：队列实现</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * // This is the interface that allows for creating nested lists. * // You should not implement it, or speculate about its implementation * class NestedInteger { *   public: *     // Return true if this NestedInteger holds a single integer, rather than a nested list. *      *     bool isInteger() const;  //判断当前元素是整数还是嵌套向量 * *     // Return the single integer that this NestedInteger holds, if it holds a single integer *     // The result is undefined if this NestedInteger holds a nested list *     int getInteger() const; // 得到整数 * *     // Return the nested list that this NestedInteger holds, if it holds a nested list *     // The result is undefined if this NestedInteger holds a single integer *     const vector&lt;NestedInteger> &amp;getList() const; //得到嵌套向量 * }; */</span><span class="token keyword">class</span> <span class="token class-name">NestedIterator</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector <span class="token operator">&lt;</span>NestedInteger<span class="token operator">></span> <span class="token operator">&amp;</span>nestedList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>NestedInteger <span class="token operator">&amp;</span>i<span class="token operator">:</span>nestedList<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">NestedIterator</span><span class="token punctuation">(</span>vector <span class="token operator">&lt;</span>NestedInteger<span class="token operator">></span> <span class="token operator">&amp;</span>nestedList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nestedList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your NestedIterator object will be instantiated and called as such: * NestedIterator i(nestedList); * while (i.hasNext()) cout &lt;&lt; i.next(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># </span><span class="token triple-quoted-string string">"""# This is the interface that allows for creating nested lists.# You should not implement it, or speculate about its implementation# """</span><span class="token comment" spellcheck="true"># class NestedInteger(object):</span><span class="token comment" spellcheck="true">#    def isInteger(self):</span><span class="token comment" spellcheck="true">#        </span><span class="token triple-quoted-string string">"""#        @return True if this NestedInteger holds a single integer, rather than a nested list.#        :rtype bool#        """</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#    def getInteger(self):</span><span class="token comment" spellcheck="true">#        </span><span class="token triple-quoted-string string">"""#        @return the single integer that this NestedInteger holds, if it holds a single integer#        Return None if this NestedInteger holds a nested list#        :rtype int#        """</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#    def getList(self):</span><span class="token comment" spellcheck="true">#        </span><span class="token triple-quoted-string string">"""#        @return the nested list that this NestedInteger holds, if it holds a nested list#        Return None if this NestedInteger holds a single integer#        :rtype List[NestedInteger]#        """</span><span class="token keyword">class</span> <span class="token class-name">NestedIterator</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>nestedList<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nestedList<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">.</span>isInteger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>dq<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">.</span>getInteger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>i<span class="token punctuation">.</span>getList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nestedList<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Initialize your data structure here.        :type nestedList: List[NestedInteger]        """</span>        <span class="token keyword">from</span> collections <span class="token keyword">import</span> deque        self<span class="token punctuation">.</span>dq<span class="token operator">=</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>helper<span class="token punctuation">(</span>nestedList<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :rtype: int        """</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dq<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">hasNext</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :rtype: bool        """</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dq<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Your NestedIterator object will be instantiated and called as such:</span><span class="token comment" spellcheck="true"># i, v = NestedIterator(nestedList), []</span><span class="token comment" spellcheck="true"># while i.hasNext(): v.append(i.next())</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二种：向量实现"><a href="#第二种：向量实现" class="headerlink" title="第二种：向量实现"></a>第二种：向量实现</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">NestedIterator</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加一个索引记录当前位置</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector <span class="token operator">&lt;</span>NestedInteger<span class="token operator">></span> <span class="token operator">&amp;</span>nestedList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>NestedInteger <span class="token operator">&amp;</span>i<span class="token operator">:</span>nestedList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">NestedIterator</span><span class="token punctuation">(</span>vector <span class="token operator">&lt;</span>NestedInteger<span class="token operator">></span> <span class="token operator">&amp;</span>nestedList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nestedList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 也就是 return v[idx++];</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> v<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>        idx<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        return v.size(); // 这里不可以再用size()判断。</span><span class="token comment" spellcheck="true">//        因为idx++，可能使idx越出v,导致内存溢出。ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6030000000c0</span>        <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> idx<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2-迭代"><a href="#方法2-迭代" class="headerlink" title="方法2:迭代"></a>方法2:迭代</h2><blockquote><p><a href="https://leetcode.cn/problems/flatten-nested-list-iterator/solution/fu-xue-ming-zhu-xiang-jie-ti-yi-shu-li-d-n4qa/" target="_blank" rel="noopener">由于「栈」的先进后出的特性，我们需要逆序在栈里放入各个元素</a></p><p>处理流程分为两步：</p><p>在构造函数中应该初始化，把当前列表的各个元素（不用摊平）逆序放入栈中。<br>在 hasNext() 方法中，访问（不弹出）栈顶元素，判断是否为 int：<br>如果是 int 那么说明有下一个元素，返回 true；然后 next() 就会被调用，把栈顶的 int 弹出；<br>如果是 list 需要把当前列表的各个元素（不用摊平）逆序放入栈中。<br>如果栈为空，那么说明原始的嵌套列表已经访问结束了，返回 false。<br>算法整体的流程，通过举例说明。假如输入 [1, [2,3]] 。</p><ol><li>在构造函数中：栈里面放的应该是 stack = [[2, 3], 1]</li><li>在调用 hasNext() 方法时，访问栈顶元素是 1，为 int，那么直接返回 true;</li><li>然后调用 next() 方法，弹出栈顶元素 1；</li><li>再调用 hasNext() 方法时，访问栈顶元素是 [2,3]，为 list，那么需要摊平，继续放到栈中。<pre><code> 当前的栈是 stack = [3, 2]</code></pre></li><li>然后调用 next() 方法，弹出栈顶元素 2；</li><li>然后调用 next() 方法，弹出栈顶元素 3；<blockquote><p>注意：<code>while i.hasNext(): v.append(i.next())</code>中，是<code>while</code>，所以当stack中是[3,2]时，会持续调用<code>next（）</code>函数</p></blockquote></li><li>再调用 hasNext() 方法时，栈为空，因此返回 false，迭代器运行结束。</li></ol></blockquote><p><a href="https://leetcode.com/problems/flatten-nested-list-iterator/discuss/80142/8-line-Python-Solution" target="_blank" rel="noopener">使用stack实现：</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">NestedIterator</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nestedList<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Initialize your data structure here.        :type nestedList: List[NestedInteger]        """</span>        self<span class="token punctuation">.</span>stack <span class="token operator">=</span> nestedList<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 逆序放入stack中</span>    <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :rtype: int        """</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getInteger<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">hasNext</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :rtype: bool        """</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">:</span>            top <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> top<span class="token punctuation">.</span>isInteger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 如果是整数，则返回True</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            self<span class="token punctuation">.</span>stack <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> top<span class="token punctuation">.</span>getList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 如果是nestList，则把stack顶的元素逆序，再反向拼接</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true">#####其他写法</span><span class="token keyword">class</span> <span class="token class-name">NestedIterator</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nestedList<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nestedList<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nestedList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> cur<span class="token punctuation">.</span>getInteger<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">hasNext</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">:</span>            cur <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>isInteger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>cur<span class="token punctuation">.</span>getList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">.</span>getList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://leetcode.com/problems/flatten-nested-list-iterator/discuss/80142/8-line-Python-Solution/350109" target="_blank" rel="noopener">也可以用deque写</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">NestedIterator</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nestedList<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Initialize your data structure here.        :type nestedList: List[NestedInteger]        """</span>        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span>nestedList<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :rtype: int        """</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getInteger<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">hasNext</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :rtype: bool        """</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isInteger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            first <span class="token operator">=</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>extendleft<span class="token punctuation">(</span>first<span class="token punctuation">.</span>getList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章：烧饼排序算法</title>
      <link href="/2021/08/19/labuladong/di-si-zhang-shao-bing-pai-xu-suan-fa/"/>
      <url>/2021/08/19/labuladong/di-si-zhang-shao-bing-pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/mu-lu-ye-4/shao-bing-pai-xu" target="_blank" rel="noopener">烧饼排序算法</a></p><h1 id="969-煎饼排序"><a href="#969-煎饼排序" class="headerlink" title="969. 煎饼排序"></a><a href="https://leetcode-cn.com/problems/pancake-sorting/" target="_blank" rel="noopener">969. 煎饼排序</a></h1><p>通过<strong>递归</strong>思想解决问题 （本题找到<strong>可行解</strong>即可，因此与示例的输出不一致，但仍能通过测试用例）</p><ul><li>先把最大的烧饼放到最后面。怎么放呢？<ul><li>找到最大烧饼对应的索引，翻转0到索引处的烧饼，先使最大烧饼放到最前面（并记录翻转处：1+索引值（因为结果从1开始计数））</li><li>然后翻转整个烧饼列，使得最前面的最大烧饼挪到最后面（并记录翻转处：最后面的n）</li></ul></li><li>最大烧饼的位置不要动，翻转1到次大烧饼（因为是同样的问题，所以用递归）</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">sortN</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        递归结束的条件：只有一个烧饼了</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        找到最大值对应的索引</span>        <span class="token keyword">int</span> maxIdx <span class="token operator">=</span> <span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        翻转开头到索引的烧饼</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> maxIdx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> maxIdx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录位置</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 翻转整个烧饼列</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录位置</span><span class="token comment" spellcheck="true">//        缩小烧饼列，翻转n-1个烧饼</span>        nums<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sortN</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">pancakeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sortN</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章：如何用 BFS 算法秒杀各种智力题</title>
      <link href="/2021/08/17/labuladong/di-san-zhang-ru-he-yong-bfs-suan-fa-miao-sha-ge-chong-zhi-li-ti/"/>
      <url>/2021/08/17/labuladong/di-san-zhang-ru-he-yong-bfs-suan-fa-miao-sha-ge-chong-zhi-li-ti/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://mp.weixin.qq.com/s/Xn-oW7QRu8spYzL3B6zLxw" target="_blank" rel="noopener">如何用 BFS 算法秒杀各种智力题</a></p><p>BFS是一种“<a href="https://www.youtube.com/watch?v=oDqjPvD54Ss" target="_blank" rel="noopener">齐头并进</a>”遍历树的方式</p><ul><li>要用到队列。在while的for循环中，把当前队头pop出去。若找到目标了，则return。若没有找到，则把队头对应的相邻节点（如果这个相邻节点之前没有被访问）加进队列中</li></ul><h1 id="773-滑动谜题"><a href="#773-滑动谜题" class="headerlink" title="773. 滑动谜题"></a><a href="https://leetcode-cn.com/problems/sliding-puzzle/" target="_blank" rel="noopener">773. 滑动谜题</a></h1><ul><li>相当于一棵树。每次0的移动会产生新的状态</li><li>用一个set集合记录节点是否曾被visited</li><li>相邻索引记录的是：<strong>每个格子相邻的格子序号</strong> <del>（而不是具体某一个数字对应的相邻数字序号）</del>，因此不管格子怎么变，这个neighbor索引向量都不变</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// #include &lt;vector></span><span class="token comment" spellcheck="true">// #include &lt;set></span><span class="token comment" spellcheck="true">// #include &lt;unordered_set></span><span class="token comment" spellcheck="true">// #include &lt;queue></span><span class="token comment" spellcheck="true">// #include &lt;string></span><span class="token comment" spellcheck="true">// #include &lt;algorithm></span><span class="token comment" spellcheck="true">// using namespace std;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">slidingPuzzle</span><span class="token punctuation">(</span>vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>board<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        string start<span class="token punctuation">;</span>        string target <span class="token operator">=</span> <span class="token string">"123450"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        将当前数组转成字符串</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                start <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        位置对应的索引</span>        vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> neighbor <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        queue <span class="token operator">&lt;</span>string<span class="token operator">></span> q<span class="token punctuation">;</span>        unordered_set <span class="token operator">&lt;</span>string<span class="token operator">></span> visited<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        队列和visited中插入初始状态</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        visited<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                string cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> step<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果找到了，则返回</span>                <span class="token comment" spellcheck="true">// // 找到数字 0 的索引</span>                <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cur<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">-</span> cur<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> adj <span class="token operator">:</span> neighbor<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//这里一定要创建一个临时的string，使同一批tmp都对应相同的cur，下面tmp的改变不会影响cur</span>                    string tmp <span class="token operator">=</span> cur<span class="token punctuation">;</span>                     <span class="token function">swap</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>adj<span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                    若没被访问，则添加</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                        visited<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            step<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果这一批for循环没找到，则步数+1，继续找</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题常用操作</title>
      <link href="/2021/08/16/leetcode/leetcode-shua-ti-chang-yong-cao-zuo/"/>
      <url>/2021/08/16/leetcode/leetcode-shua-ti-chang-yong-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><h2 id="将向量以特定的分隔符输出到屏幕中"><a href="#将向量以特定的分隔符输出到屏幕中" class="headerlink" title="将向量以特定的分隔符输出到屏幕中"></a>将向量以特定的分隔符输出到屏幕中</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法1：用stringstream</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    stringstream ss<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ss <span class="token operator">&lt;&lt;</span> <span class="token string">'|'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ss <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ss<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1|2|3</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方法2: 用输出流迭代器</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    将结果给stream</span>    ostringstream stream<span class="token punctuation">;</span>    <span class="token function">copy</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ostream_iterator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    去掉最后一个分隔符</span>    string s<span class="token operator">=</span>stream<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方法3：用for_each 和lambda函数的组合</span><span class="token comment" spellcheck="true">// 捕获列表[]中放置局部变量,这样才能在lambda函数中使用该变量，num为lambda自己的参数</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token operator">*</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> <span class="token string">"|"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-根据’-’将string数据进行分隔"><a href="#C-根据’-’将string数据进行分隔" class="headerlink" title="C++根据’,’将string数据进行分隔"></a>C++根据’,’将string数据进行分隔</h2><ul><li>方法1：使用stringstream进行split,用 <code>while (getline(ss, word, delim)){...}</code>将数据分隔</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">////方法1：</span><span class="token comment" spellcheck="true">//添加下面的库：万金油式的库，但比较费时间</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token comment" spellcheck="true">//delim 用来记录分隔符</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">split</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">char</span> delim<span class="token punctuation">)</span> <span class="token punctuation">{</span>    stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    string word<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 分隔符之间的内容</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> vec<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> word<span class="token punctuation">,</span> delim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vec<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string <span class="token function">s</span><span class="token punctuation">(</span><span class="token string">"1,2,3,4,5,6,66"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>vv<span class="token operator">:</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> vv <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方法2：for循环（供参考）</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法2：</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">split</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> vec<span class="token punctuation">;</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">','</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> i <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            start <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vec<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string <span class="token function">s</span><span class="token punctuation">(</span><span class="token string">"1,2,3,4,5,6,66"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>vv<span class="token operator">:</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> vv <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="python字典"><a href="#python字典" class="headerlink" title="python字典"></a>python字典</h3><ol><li>普通字典<a href="https://www.runoob.com/python/python-dictionary.html" target="_blank" rel="noopener">常用的操作</a></li></ol><ul><li>字典按键或值排序<ul><li>注：经过<code>sorted()</code>函数后，<strong>字典</strong>变成了存放元组的<strong>列表</strong></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 按键排序</span>d_k <span class="token operator">=</span> sorted<span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d_k<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [(1, 2), (2, 1), (3, 4), (5, 3)]</span><span class="token comment" spellcheck="true"># 按值排序</span>d_v <span class="token operator">=</span> sorted<span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#取出排序后的键</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> d_k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 3, 5]</span><span class="token comment" spellcheck="true"># 把键按空格输出</span>res<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> d_k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 取出排序后的值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> d_k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [2, 1, 4, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>defaultdict 字典</li></ol><p><a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" target="_blank" rel="noopener">常用的defaultdict字典操作</a></p><p>defaultdict接受一个工厂函数作为参数：<code>dict =defaultdict( factory_function)</code>. 这个factory_function可以是list、set、str、int等等。作用<strong>是当key不存在时，返回的是工厂函数的默认值</strong>。比如list对应[ ]，str对应的是空字符串，set对应set( )，int对应0</p><ul><li>取出字典中的信息</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> collectionss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>d <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># d的键对应的值默认为列表</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> s<span class="token punctuation">:</span>    d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># defaultdict(&lt;class 'list'>, {'yellow': [6, 3], 'blue': [2, 4], 'red': [1]})</span><span class="token comment" spellcheck="true"># 按键排序</span><span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [('blue', [2, 4]), ('red', [1]), ('yellow', [6, 3])]</span><span class="token comment" spellcheck="true"># 打印字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># dict_items([('yellow', [6, 3]), ('blue', [2, 4]), ('red', [1])])</span><span class="token comment" spellcheck="true"># 打印某键对应的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [2, 4]</span><span class="token comment" spellcheck="true"># 打印键</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># dict_keys(['yellow', 'blue', 'red'])</span><span class="token comment" spellcheck="true"># 打印值</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># dict_values([[6, 3], [2, 4], [1]])</span><span class="token comment" spellcheck="true"># 把值以列表的形式输出</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [[6, 3], [2, 4], [1]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>列表按字典序输出结果</li></ol><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'11'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'12'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 按字符串排序，并输出</span><span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['1', '11', '12', '2', '3']</span><span class="token comment" spellcheck="true"># 将 ['1', '11', '12', '2', '3'] 转化成 [1, 11, 12, 2, 3]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token operator">+</span><span class="token string">', '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 经过上面处理后，a字符变成了b这样的</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 按数字大小排序，并输出</span><span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 3, 11, 12]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-字典"><a href="#C-字典" class="headerlink" title="C++字典"></a>C++字典</h3><ol><li>按键或值排序<br>将字典转换成向量。如果是按键排序，则用默认的<code>sort(vec.begin(), vec.end())</code>即可。如果是<a href="https://www.educative.io/edpresso/how-to-sort-a-map-by-value-in-cpp" target="_blank" rel="noopener">按值排序</a>，则构建bool函数（或者用lambda函数），将该函数传到sort函数的参数中 <code>sort(vec.begin(), vec.end(), sortByVal)</code> （或者将sortByVal函数用lambda函数代替）</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span> </span><span class="token comment" spellcheck="true">// for sort function</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// create the map</span>    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mymap <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token punctuation">{</span><span class="token string">"coconut"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"peach"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"mango"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认的按键排序</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The map, sorted by keys, is: "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">::</span> iterator it<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>it<span class="token operator">=</span>mymap<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>mymap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-</span><span class="token operator">></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-</span><span class="token operator">></span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    // 直接将map分配到vector中</span>   vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">vec</span><span class="token punctuation">(</span>mymap<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mymap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">////    或者可以一一推进vector中</span><span class="token comment" spellcheck="true">//    // create a empty vector of pairs</span><span class="token comment" spellcheck="true">//    vector&lt;pair&lt;string, int>> vec;</span><span class="token comment" spellcheck="true">//    // copy key-value pairs from the map to the vector</span><span class="token comment" spellcheck="true">//    map&lt;string, int> :: iterator it2;</span><span class="token comment" spellcheck="true">//    for (it2=mymap.begin(); it2!=mymap.end(); it2++)</span><span class="token comment" spellcheck="true">//    {</span><span class="token comment" spellcheck="true">//        vec.push_back(make_pair(it2->first, it2->second));</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//    将map转成vector后，按值排序 sort the vector by increasing order of its pair's second value</span>    <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>left<span class="token punctuation">,</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> left<span class="token punctuation">.</span>second <span class="token operator">&lt;</span> right<span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// left和right的类型为pair&lt;string, int></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// print the vector</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The map, sorted by value is: "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果：</span><span class="token comment" spellcheck="true">//The map, sorted by keys, is:</span><span class="token comment" spellcheck="true">//apple: 5</span><span class="token comment" spellcheck="true">//coconut: 10</span><span class="token comment" spellcheck="true">//mango: 8</span><span class="token comment" spellcheck="true">//peach: 30</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//The map, sorted by value is:</span><span class="token comment" spellcheck="true">//apple: 5</span><span class="token comment" spellcheck="true">//mango: 8</span><span class="token comment" spellcheck="true">//coconut: 10</span><span class="token comment" spellcheck="true">//peach: 30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>找到multimap中的相同键对应的值，并计算其数量</li></ol><ul><li><a href="https://www.cplusplus.com/reference/map/multimap/count/" target="_blank" rel="noopener">count()</a>: <code>multimap::count(k)</code>统计键值k对应的元素数量</li><li><a href="https://www.cplusplus.com/reference/map/multimap/equal_range/" target="_blank" rel="noopener">equal_range()</a>: <code>multimap::equal_range(k)</code>Returns the bounds of a range that includes all the elements in the container which have a key equivalent to k.</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    multimap<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mm<span class="token punctuation">;</span>    mm<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mm<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mm<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mm<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mm<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mm<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">;</span>c<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">;</span>c<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span>mm<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">":"</span><span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token punctuation">;</span>        multimap<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator it<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>it <span class="token operator">=</span>mm<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>it<span class="token operator">!=</span>mm<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//x    1:    50</span><span class="token comment" spellcheck="true">//y    3:    100 150 200</span><span class="token comment" spellcheck="true">//z    2:    250 300 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><a href="https://www.geeksforgeeks.org/multimap-associative-containers-the-c-standard-template-library-stl/" target="_blank" rel="noopener">multimap</a></li></ol><p>Multimap is similar to map with an addition that multiple elements <strong>can have same keys</strong>. Also, it is NOT required that the key value and mapped value pair has to be unique in this case. One important thing to note about multimap is that multimap <strong>keeps all the keys in sorted order</strong> always. These properties of multimap makes it very much useful in competitive programming.</p><ul><li>可以借助multimap的特性，将map的键值互换，使map按值排序</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mm<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>kv <span class="token operator">:</span> m<span class="token punctuation">)</span>        mm<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">make_pair</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>second<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>kv <span class="token operator">:</span> mm<span class="token punctuation">)</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"m["</span> <span class="token operator">&lt;&lt;</span> kv<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">"] = "</span> <span class="token operator">&lt;&lt;</span> kv<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 结果：</span><span class="token comment" spellcheck="true">// m[6] = 1</span><span class="token comment" spellcheck="true">// m[2] = 5</span><span class="token comment" spellcheck="true">// m[4] = 6</span><span class="token comment" spellcheck="true">// m[1] = 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以将map转化成vector of pairs，然后<a href="https://stackoverflow.com/questions/2699060/how-can-i-sort-an-stl-map-by-value" target="_blank" rel="noopener">使用vector的特性</a>，使map按值排序</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                       <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                       <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                       <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">using</span> mypair <span class="token operator">=</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>mypair<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> mypair <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> mypair <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>second <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>p <span class="token operator">:</span> v<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"m["</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">"] = "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果：</span><span class="token comment" spellcheck="true">//m[6] = 1</span><span class="token comment" spellcheck="true">//m[2] = 5</span><span class="token comment" spellcheck="true">//m[4] = 6</span><span class="token comment" spellcheck="true">//m[1] = 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><h3 id="一维二维升序降序排列"><a href="#一维二维升序降序排列" class="headerlink" title="一维二维升序降序排列"></a>一维二维升序降序排列</h3><p>比如信封有宽度高度。先对宽度（第一个数）进行升序排序，宽度相同时，对高度（第二个数）降序排序 </p><pre class="line-numbers language-python"><code class="language-python">envelopes<span class="token operator">=</span>sorted<span class="token punctuation">(</span>envelopes<span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 用到了lambda表达式</span><span class="token function">sort</span><span class="token punctuation">(</span>envelopes<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> envelopes<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果宽度相同，则高度降序排列</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 宽度升序排列</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="返回最大元素及其索引"><a href="#返回最大元素及其索引" class="headerlink" title="返回最大元素及其索引"></a>返回最大元素及其索引</h3><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>max<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>index<span class="token punctuation">(</span>max<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">{</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token keyword">int</span> res<span class="token operator">=</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最大元素</span>std<span class="token operator">::</span><span class="token function">distance</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 最大元素对应的索引位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="移除重复元素"><a href="#移除重复元素" class="headerlink" title="移除重复元素"></a>移除重复元素</h3><ul><li>Just using vector, sort + unique</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">sort</span><span class="token punctuation">(</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span> <span class="token function">unique</span><span class="token punctuation">(</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Convert to set (using a constructor)</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp">set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">s</span><span class="token punctuation">(</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">正则表达式速查</a></p><blockquote><ul><li><a href="https://stackoverflow.com/questions/26318287/what-does-r-mean-before-a-regex-pattern" target="_blank" rel="noopener">What does ‘r’ mean before a Regex pattern?</a><ul><li>The <code>R</code> or <code>r</code> means that the string is to be treated as a <strong>raw string</strong>, which means <strong>all escape codes will be ignored.</strong></li></ul></li><li><a href="https://dzone.com/articles/introduction-to-regular-expression-with-modern-c" target="_blank" rel="noopener">Modern C++正则表达式用法示例</a></li></ul></blockquote><ul><li>根据加减号将字符串分隔，匹配结果的<strong>结尾</strong>不包括分隔符: <code>regex re(&quot;(?=[-+*/])&quot;)</code><ul><li><code>x(?=y)</code>向前断言: x 被 y 跟随时匹配 x。例如，对于/Jack(?=Sprat)/，“Jack”在跟有“Sprat”的情况下才会得到匹配．/Jack(?=Sprat|Frost)/ “Jack”后跟有“Sprat”或“Frost”的情况下才会得到匹配。不过， 匹配结果不包括“Sprat”或“Frost”。</li><li><a href="https://www.cplusplus.com/reference/regex/regex_traits/value/" target="_blank" rel="noopener">sregex_token_iterator的-1含义</a>：Returns the value represented by the digit c in base radix. If c is not a valid digit character, the function returns -1.</li><li>注意：这里有一个非常隐蔽的bug。通过<code>re(&quot;(?=[-+*/])&quot;)</code> 分隔字符时，若一开始就是符号，则也会提取符号前面的内容。如”-1+2”会分成””,”-1”,”+2”（注意这里有一个””）。所以迭代器要用<code>if ((*it)==&quot;&quot;) it++;</code> 跳过这个空的，从下一个开始算起</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;regex></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string s<span class="token punctuation">{</span><span class="token string">"5+4-3*2/1"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    regex <span class="token function">re</span><span class="token punctuation">(</span><span class="token string">"(?=[-+*/])"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 或者regex re(R"((?=[\+\-\*\/]))");</span>    sregex_token_iterator it<span class="token punctuation">{</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>re<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>end<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span> it<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意这句话</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 5    +4    -3    *2    /1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>根据加减号将字符串分隔，匹配结果不要任何分隔符:  <code>regex re(&quot;[-+*/]&quot;)</code></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;regex></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string s<span class="token punctuation">{</span><span class="token string">"5+4-3*2/1"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    regex <span class="token function">re</span><span class="token punctuation">(</span><span class="token string">"[-+*/]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 或者regex re(R"([\+\-\*\/])");</span>    sregex_token_iterator it<span class="token punctuation">{</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>re<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>end<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span> it<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意这句话</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//  5    4    3    2    1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>与$相关的正则表达式<ul><li>$&amp; - 正则表达式匹配的文本</li><li>$` - 匹配文本的左侧内容</li><li>$’ - 匹配文本的右侧内容</li></ul></li></ul><pre><code>var text = &quot;abc123def&quot;, total, left, right;total = text.replace(/\d+/g, &quot;[$&amp;]&quot;);   // abc[123]defleft = text.replace(/\d+/g, &quot;[$`]&quot;);     // abc[abc]defright = text.replace(/\d+/g, &quot;[$&#39;]&quot;);   // abc[def]def</code></pre><ul><li>按不同的字符分隔字符串。即实现<code>string1.Replace(&quot;-&quot;, &quot;#-&quot;).Split(&quot;#&quot;);</code>: 符号前面加#，然后按#进行分隔<ul><li>添加一个dummy的标志，$&amp;获取当前内容 <code>-1+2*3/4</code> -&gt; <code>#-1#+2#*3#/4</code></li><li>使用stringstream，通过dummy标志分隔 <code>#-1#+2#*3#/4</code> -&gt; <code>-1    +2    *3    /4</code><ul><li>如果只替换一个字符（//replace all occurances of ‘x’ with ‘y’），则用<code>s.replace( s.begin(), s.end(), &#39;x&#39;, &#39;y&#39;);</code> 即可。不必用正则</li><li>向量也可以用replace函数进行局部替换</li></ul></li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;regex></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string test <span class="token operator">=</span> <span class="token string">"-1+2*3/4"</span><span class="token punctuation">;</span>    regex <span class="token function">reg</span><span class="token punctuation">(</span><span class="token string">"(?=[-+*/])"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 或者regex re(R"((?=[\+\-\*\/]))");</span>    test <span class="token operator">=</span> <span class="token function">regex_replace</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> reg<span class="token punctuation">,</span> <span class="token string">"#$&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// #-1#+2#*3#/4</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>    string item <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    stringstream <span class="token function">ss</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i<span class="token operator">:</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1    +2    *3    /4</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><a href="https://stackoverflow.com/questions/10804732/difference-between-and" target="_blank" rel="noopener">Difference between <code>?:</code>, <code>?!</code> and <code>?=</code></a></p><ul><li>The difference between ?= and ?! is that the former requires the given expression to match and the latter requires it to not match. For example a(?=b) will match the “a” in “ab”, but not the “a” in “ac”. Whereas a(?!b) will match the “a” in “ac”, but not the “a” in “ab”.</li><li>The difference between ?: and ?= is that ?= excludes the expression from the entire match while ?: just doesn’t create a capturing group. So for example a(?:b) will match the “ab” in “abc”, while a(?=b) will only match the “a” in “abc”. a(b) would match the “ab” in “abc” and create a capture containing the “b”.</li></ul></li><li><p><a href="https://stringr.tidyverse.org/articles/regular-expressions.html" target="_blank" rel="noopener"><code>\\</code> 含义</a></p><ul><li>If “.” matches any character, how do you match a literal “.”? You need to use an “escape” to tell the regular expression you want to match it exactly, not use its special behaviour. Like strings, regexps use the backslash, <code>\</code>, to escape special behaviour. So to match an ., you need the regexp <code>\.</code>. Unfortunately this creates a problem. We use strings to represent regular expressions, and <code>\</code> is also used as an escape symbol in strings. So to create the regular expression <code>\.</code> we need the string “<code>\\.</code>“.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析递归和回溯的关系</title>
      <link href="/2021/08/16/leetcode/jie-xi-di-gui-he-hui-su-de-guan-xi/"/>
      <url>/2021/08/16/leetcode/jie-xi-di-gui-he-hui-su-de-guan-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="解析递归和回溯的关系"><a href="#解析递归和回溯的关系" class="headerlink" title="解析递归和回溯的关系"></a>解析递归和回溯的关系</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归就是把大问题对应的小问题解决后（注意：大小问题结构一致），再根据小问题的结果完善大问题。遇到递归问题，要想明白：</p><ul><li>递归函数的<strong>含义</strong>：这个函数要实现什么功能？返回什么结果？（一定不要跳进递归，相信这个函数能返回你需要的东西）</li><li>这个函数的<strong>变量</strong>：什么变量会导致结果变化？比如如果是二叉树的递归，就要想清楚这个二叉树的的节点的变量是什么</li><li>得到递归结果后，<strong>要干什么</strong>：如何把递归结果变成题目要求的结果？</li><li>递归结束的条件：递归出口</li></ul><p>以<a href="https://ismxue.github.io/2020/08/17/labuladong/di-san-zhang-di-gui-xiang-jie/">盖房子</a>这道题为例：</p><ul><li>含义：给定一个节点，返回n次后的房子排列</li><li>变量：在这个二叉树中，各个子树的节点颜色是变化的，子树的盖房子次数是变化的，所以递归函数的签名写为<code>def helper(n,color)</code></li><li>干什么：以父节点为例，它的左子节点颜色为G，右节点颜色为R（并且相信左右子树能返回我要的结果）。因此根据题意进行中序遍历：左子树的结果+自己+右子树的结果</li><li>结束条件：盖一次自己（已到达叶子节点）</li></ul><p>以<a href="https://ismxue.github.io/2020/07/24/labuladong/di-ling-zhang-hui-su-suan-fa-jie-ti-tao-lu-kuang-jia/#toc-heading-2">78. 子集</a>的递归写法为例：</p><ul><li>含义：返回的子集结果</li><li>变量：nums。父nums和子nums相差一个元素</li><li>干什么：在得到子结果后，追加新的结果</li><li>结束条件：nums为空 </li></ul><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><h3 id="回溯算法的框架"><a href="#回溯算法的框架" class="headerlink" title="回溯算法的框架"></a>回溯算法的框架</h3><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 递归的出口</span>    <span class="token keyword">if</span> 满足结束条件<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>add<span class="token punctuation">(</span>路径<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">for</span> 选择 <span class="token keyword">in</span> 选择列表<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 做选择, 类似前序遍历</span>        将该选择从选择列表移除        路径<span class="token punctuation">.</span>add<span class="token punctuation">(</span>选择<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 相信它能返回我这次选择后需要的结果</span>        backtrack<span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 撤销选择</span>        路径<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>选择<span class="token punctuation">)</span>        将该选择再加入选择列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回溯算法其实也是一种递归。<strong>在父递归函数中有一个for循环，for循环里面调用子递归函数</strong>。以全排列的这段代码为例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>visited<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 选择列表和路径</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token operator">==</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>visited<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token keyword">in</span> visited<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            visited<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>            backtrack<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>visited<span class="token punctuation">)</span>            visited<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>含义：返回某个节点对应的全排列</li><li>变量：在每个节点处，当前的选择列表和已经走过的路径</li><li>得到结果后，返回即可</li><li>递归结束的条件：已经到达了叶子节点</li></ul><p>在全排列中，以最左侧的节点1为例，在根节点选择了1后，for循环里的<code>backtrack(nums,visited)</code>可以返回以1为基础的全排列。然后通过<code>visited.pop()</code>，现在重新回到根节点，进行第二次for循环，选2。以此类推<br><img src="https://i.loli.net/2021/08/16/IhL8nDMWeQbxBy6.png" alt="20210816133039"></p><h3 id="更新选择列表的方式"><a href="#更新选择列表的方式" class="headerlink" title="更新选择列表的方式"></a>更新选择列表的方式</h3><p>在回溯算法的for循环中，常常用两种方式更新选择列表</p><ul><li>第一种：若选择已经在走过的路径中了，则跳过该选择</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>    <span class="token keyword">if</span> num <span class="token keyword">in</span> visited<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            检查当前num是否在路径中，count返回0（不在）或1（在）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> visited<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二种：通过一个start标志位来剪枝不可行的子树（小于当前选择的选择全部剪掉）</li></ul><p><img src="https://i.loli.net/2021/08/16/JXaAsjDoq5h9FSm.png" alt="20210816135736"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 做选择</span>    visited<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>visited<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 回溯，用nums[i+1:]更新选择列表</span>    backtrack<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>visited<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    visited<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//后面的dfs过程，只能选择nums[i+1:]范围的元素</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    visited<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<a href="https://ismxue.github.io/2020/07/24/labuladong/di-ling-zhang-hui-su-suan-fa-jie-ti-tao-lu-kuang-jia/#toc-heading-2">这些题目中</a>：</p><ul><li>46题全排列就是用的第一种，已经走过的路径就不选了</li><li>78题子集和77题组合就是用的第二种，小于当前选择的选择就不选了。</li><li>78题和77题的不同之处在于：<ul><li>78题结果中记录的是每个节点对应的路径，在没有选择时（<code>if not nums</code>）跳出</li><li>77题结果中记录的是路径长度等于k时的路径，因此在<code>if (visited.size()==k)</code>时，记录当前路径并跳出</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表的构建及基础操作</title>
      <link href="/2021/08/14/leetcode/lian-biao-de-gou-jian-ji-ji-chu-cao-zuo/"/>
      <url>/2021/08/14/leetcode/lian-biao-de-gou-jian-ji-ji-chu-cao-zuo/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.educative.io/edpresso/how-to-create-a-linked-list-in-python" target="_blank" rel="noopener">How to create a Linked List in Python</a></p><ul><li>A <strong>linked list</strong> is a data structure made of a chain of <strong>node objects</strong>. Each <strong>node</strong> contains a value and <strong>a pointer to the next node</strong> in the chain.</li><li>The <strong>head pointer</strong> points to the first node, and the last element of the list points to null. When the list is empty, the head pointer points to null.</li></ul><p><img src="https://i.loli.net/2021/08/13/S7lBQb23sqkDP6U.png" alt></p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 节点类</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> Next <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        self<span class="token punctuation">.</span>next <span class="token operator">=</span> Next<span class="token comment" spellcheck="true"># 链表类：用于存放节点</span><span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>head <span class="token operator">=</span> None    <span class="token comment" spellcheck="true"># 判断链表是否为空</span>    <span class="token keyword">def</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>head <span class="token operator">==</span> None    <span class="token comment" spellcheck="true"># 给链表添加节点</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        newNode<span class="token operator">=</span>Node<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 构建一个新的节点，该节点的值为data</span>        <span class="token comment" spellcheck="true"># 头结点存在，把cur指向头结点，cur逐步跳到链表尾部，然后添加节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>            cur<span class="token operator">=</span>self<span class="token punctuation">.</span>head            <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            cur<span class="token punctuation">.</span>next<span class="token operator">=</span>newNode <span class="token comment" spellcheck="true"># 通过next，在尾部不断连接节点</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 这是一个空链表，则在头结点处添加该节点</span>            self<span class="token punctuation">.</span>head<span class="token operator">=</span>newNode    <span class="token comment" spellcheck="true"># 判断链表的长度</span>    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        count<span class="token operator">=</span><span class="token number">0</span>        cur<span class="token operator">=</span>self<span class="token punctuation">.</span>head        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>            count<span class="token operator">+=</span><span class="token number">1</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next        <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 搜索某个元素是否存在</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>        cur<span class="token operator">=</span>self<span class="token punctuation">.</span>head        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>data<span class="token operator">==</span>item<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># 打印该链表</span>    <span class="token keyword">def</span> <span class="token function">printLL</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cur<span class="token operator">=</span>self<span class="token punctuation">.</span>head        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>data<span class="token punctuation">)</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    L<span class="token operator">=</span>LinkedList<span class="token punctuation">(</span><span class="token punctuation">)</span>    L<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    L<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    L<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># L.size()  </span>    <span class="token comment" spellcheck="true"># print(L.search(2)==True)</span>    L<span class="token punctuation">.</span>printLL<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">struct</span> ListNode <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>next<span class="token punctuation">;</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>next<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LinkedList</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span>head<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 构造函数构建一个空的链表</span>    <span class="token comment" spellcheck="true">//    判断链表是否为空</span>    <span class="token keyword">bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    添加节点</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        创建一个新节点</span>        ListNode <span class="token operator">*</span>newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    判断链表的长度</span>    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//     搜索某个元素是否存在</span>    <span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">==</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>                cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    打印该链表</span>    <span class="token keyword">void</span> <span class="token function">printLL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> cur<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ListNode <span class="token function">n</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LinkedList L<span class="token punctuation">;</span>    L<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    std::cout&lt;&lt;L.size()&lt;&lt;std::endl;</span><span class="token comment" spellcheck="true">//    std::cout&lt;&lt;L.search(2)&lt;&lt;std::endl;</span>    L<span class="token punctuation">.</span><span class="token function">printLL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读“新生-七年就是一辈子”</title>
      <link href="/2021/07/29/growth/du-xin-sheng-qi-nian-jiu-shi-yi-bei-zi/"/>
      <url>/2021/07/29/growth/du-xin-sheng-qi-nian-jiu-shi-yi-bei-zi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://b.xinshengdaxue.com/" target="_blank" rel="noopener">新生-七年就是一辈子</a></p><ul><li><p>人的大脑应该像电脑系统一样，定期打补丁和升级，可悲的是有的人一辈子都没有升级自己的系统，所以经常一开新软件就死机了。</p></li><li><p>能用钱解决的事情就尽量不去花时间和精力，当然，前提是你有这个资本</p></li></ul><hr><h1 id="书摘"><a href="#书摘" class="headerlink" title="书摘"></a>书摘</h1><ul><li>一切的鸡毛蒜皮喋喋不休，都发生在低级的、协议混乱的操作系统之间。有时高级的操作系统，可能会不小心与低级的操作系统“吵”起来，最终一定是高级的那个吃亏……不信你也仔细观察一下，你最终会得到一模一样的结论。 不要跟傻屄争论，他们会把你拉到他们的世界里，用他们多年的丰富经验迅速捣毁你的一切……他们凯旋不用归，而你就惨了，回不来了…… —— 这真的不是玩笑。 幸运的是，每个人都可以主动升级自己的操作系统，差别只不过是，自己是否意识到，自己愿不愿意，自己是否有意愿主动持续地升级……</li><li>夫妻不吵架或者逐步减少吵架频率的方法论无非是： 共同创建协议， 共同遵守协议， 共同升级协议……</li><li>生气，是最浪费时间的行为。浪费的不仅仅是气头上的那一段时间，更为可怕的是在气头上做的决定常常连带一个很微妙且又复杂当期影响，最可怕的是，这个影响其实很容易产生“复利效应”，我的意思是说，“负面的复利效应”……</li><li>多赚钱，快赚钱，有钱到吃得起亏的地步。 这才是正事儿。</li><li>生活中的每个概念都需要审视、清理、升级、再重新审视、重新清理、再次升级的。</li><li>维系交往，是耗费时间精力的，两个人的交往过程中，一定至少有一个是主动的，而我就是那个主动的人，因为我觉得这些“成本”是必然存在，也是必须承担的。</li><li>朋友就是那些愿意与我交往，并且我也钦佩的人。 其实，那篇被断章取义的文章《放下你的无效社交》1主旨说的就是这个。我们钦佩、我们仰慕的人其实很多，但前提是人家愿意跟我们交往。</li><li>朋友就是那些我愿意花时间与精力，与之共同做成至少一件事儿的人。</li><li>友谊中最有价值的部分来自于各自的成长或者共同成长。</li><li>花时间，就是耗费生命。时间就是这样，无论你干什么，它都会流逝，并不会因为你虚度就给你机会重新来过。所以，我很重视自己的时间</li><li>南闯北，要会识人。两种人不能交，第一种，太黑的，第二种，对老婆不好的。 你一路会遇到很多官府的人，那种太黑的，早晚会栽。别跟他们对着干，你要绕着走，没空得罪他们，也没必要跟他们有任何交道。他们太黑，巴结他们也没用 —— 他们太黑，巴结他们，你就变了；还有啊，他们早晚会得罪更黑的人而被干掉，所以，就算你巴结上了，也还是没用的…… 你到个地方，人生地不熟，新认识个人，你咋知道他是什么样啊？告诉你个简单的方法，请他们全家吃饭，多请几次，多观察。要是这个人对老婆很好，那你就好好交，如果他对老婆不好，那你就闪。为啥啊？你想，老婆是他这一生非血缘关系最亲的人，他对自己老婆都不好，怎么可能对你好呢？那不是扯淡吗？说啥都是没用的，得看他干啥…… 即便是二十来年之后想起这番话，也觉得说这是“没人告诉你你就可能永远想不到的思想”。从此之后，我真的是这么做的。</li><li>用嘴道歉的人不值得交往，用行动道歉的人遇到一个就要珍惜一个。</li><li>我经常组局，介绍一些有趣的朋友们相互认识。但有一个原则永远不变，我从来不安排一个人需要求另外一个人帮忙的局 —— 这种不对等的局，没有意思，谁爱组就谁组去，我没兴趣。</li><li>所谓的情商，指的是一个人有多大的能力去创造共赢局面。 不要说多人，就是两个人交往，也最好尽量避免求人的状态，这样的关系没办法长久。最好是能够创造一个两人共赢的局面，各自都开心。这不太容易做到，但肯定值得为此多花时间做功课。</li><li>为了能与那些有一技之长，还追求进步，并且真诚热情的人做朋友，你自己也必须是他们的同类，否则他们是不会跟你做朋友的，对他们来说，直接对你断舍离，不才是最划算的吗？</li><li>只关注价格的那些人事儿多、特别多，而只关注价格的那些人基本上全都是性格纠结的 —— 这不是歧视，这只是陈述事实。</li><li>不要跟性格纠结的人来往，他们是别人的“重力加速度”，而且他们特别理直气壮，正着理直气壮，反着还理直气壮，就好像他们有个仓库，里面装着所有地球人每人至少一张欠条似的。</li><li>把东西做到真好，直至最好，其实是最省心、最省时的方法论。它若是真的已经最好了，</li><li>真诚这个东西，说出来的时候是最容易被低估的，甚至不像是真的。</li><li>做出来的真诚，甚至不用说。</li><li>该干嘛就去干嘛，说那么多有什么用？ 做了，就有变化，有变化，自己先开心，别人看不看得到其实并不重要罢？ 少说导致更专注，更专注导致变化最大化，有时候吓到别人，也怪不得自己罢？</li><li>说服他人有两个重要的终极诀窍。 第一个：让对方自己得出结论，而不是把结论塞给对方。</li><li>第二个，实际上是第一个的升级版：自己成为榜样，对方若是认同，自然就会追随。</li><li>如果有问题非要解决不可，我们一定要分清楚那里面的主次，把最重要的先做好，这个做到了之后，再去关注细节，而这样的时候也确实有能力关注更细的细节，否则，本末倒置，一无所是。</li><li>永远问自己，“什么是最重要的？” —— 先去做那些真正重要、最重要的事儿，先去解决那些真正重要、最重要的问题，至于细节么，那是要等到前面那些事儿做完之后再去做的事情</li><li>为什么要坚持锻炼呢？答案是： 本金最重要。</li><li>学习其实很简单，核心只不过是深入理解最重要的概念，不断总结与之相关的方法论。</li><li>践行才是唯一有效的学习手段。我们不需要榜样，我们要成为他人的榜样。</li><li>学习的结果是不可逆的，尤其对生活的影响更是不可逆的 —— 学了却没有改变生活，那其实就是根本没学会。</li><li>所谓的成功，其实只不过是用正确的方式去做正确的事情，耐心等待正确的结果出现。</li><li>我是一个长期主动持续升级自己的人，我也乐此不彼。并不觉得这有多辛苦，这有多枯燥 —— 还有什么能比进步更令人开心的呢？</li><li>努力和坚持真的并不算资本，因为那本来就是应该的</li><li>在智力上、知识上、经验上，复利效应依然存在的 —— 这是多么令人喜出望外的事实啊！只要能积累的东西，基本上最终都会产生复利效应。</li><li>想到了，就按照正确的想法做了 —— 不管别人是否理解 —— 这就是践行。这并不是什么需要“坚持”的事儿，这只是“是否对得起自己”的事儿而已。不是吗？这明显是有复利效应的事儿啊！</li><li>时间是不可管理的，于是，就只能想办法提高自己的工作效率和生活质量</li><li>想到了，学到了，就当真了；当真了，就当真做了，且真的做到了，这才是践行。</li><li>我这哪里是对自己狠啊？这根本就是对自己的爱惜啊！</li><li>你的苦没人知道。所以，从此坚决不抱怨。</li><li>诉苦、抱怨，根源在于“没办法”了麽。但凡有点办法的人，就忙着做事去了，抱怨、诉苦管啥用啊？</li><li>情绪的鸿沟，只要真正跨越一次，就真的不可逆了，因为你已经明白一个道理，情绪与目标无关，相对于“达成目标”只有行动才是相关事件。</li><li>关键时刻，不要掉链子，没人能帮你，只有靠自己。 情绪这东西，百无一用，行动才是必须的。</li><li>在自己的能力不够的情况下，在自己依然非常渺小的情况下，生活不会给你什么机会让你选择，你要做的只有一件事儿：生活给你什么你就用好什么，这已经是很坚强的态度了。</li><li>衡量一个人是否真正活着的根本方法，就是看他是否有意愿、有能力做出主动的选择。 一生随波逐流，一生逆来顺受，算不上活着，甚至生不如死。在一个关键的节点上，人必须做出主动的选择。只有这样，活着才有意义。</li><li>人要有自信，但，应该是对自己的未来有自信，而对现在的自己，对过去的自己，自信、自负、自卑其实都是无意义的，要现实才对 —— 错了就是错了，蠢了就是蠢了，把自己变得更好才能弥补那些错误，才能承担当初的愚蠢。</li><li>找出那些想当然的念头，挨个审视一遍，看看它对不对？有没有道理？是否应该被升级，或者被替换？这事儿一定要仔细，因为那些不经审视就嵌入操作系统的“想当然”实在是太危险了……</li><li>比起 Windows 不断打补丁，比起 Mac OS 每年一次重要大升级，比起 Ubuntu 每半年一次稳定升级，大多数人呢，是不是非常非常落后？想想是不是非常非常无奈？ 看来，我们必须、也只能自主且持续地更新自己的操作系统…… 否则我们与那些已经报废的计算机有什么区别？</li><li>人就是这样，不仅操作系统可以升级，连硬件都可以升级</li><li>创造恰当甚至精妙的类比，绝对是一种超强的能力，也是超强能力的一种表现。</li><li>终于破冰的那一瞬间，我的感觉就是，过往我砸过的、凿过冰缝、冰洞，终于以某种方式（几乎肯定是我之前完全不知道的方式）形成了一个三角，力学原理瞬间爆发，那冰一下子大面积破开…… 于是，我终于“入水”了。</li><li>分清主次，是一种格外重要、却又常常不被重视的能力。</li><li>厚厚一本书，其实就那么几个概念；讲一个概念就要花费一个章节的篇幅，从结构上来看，其实讲的都一样，无非是一个接一个的概念，要说清楚它是什么，它不是什么，它和别的概念有什么异同；然后就是与它相关的方法论，比如，使用的时候需要注意什么，怎样使用是正确的，怎样使用是错误的，容易发生错误的地方是什么…… 这些都弄明白了，一个概念就算是学透了，这些概念都弄明白了，这本书算是看懂了，就这么简单。 这其实是学习任何概念的方法论啊！</li><li>在任何一个领域，对该领域中重要的概念无知，那就真的与白痴无异 —— 这事儿跟“智商高低”全无关系。所以，学习就是让自己变聪明的过程，习得那个领域中最重要的概念，琢磨清楚相关的方法论，就马上“不那么白痴了”。</li><li>真正有意义值得研究的概念是： 理解速度。 输入是为了处理啊，胡乱处理，甚至无法处理，输入了也没用啊！</li><li>我们的脑子里 —— 就是我们操作系统里 —— 描述正确的、理解完整的概念和方法论越多，我们理解新概念、新方法论的速度越快，融会贯通能力也越强……理解速度快了，阅读速度放慢一点，效率可能更高呢。</li><li>“智商”在我这里就是已经被废弃掉了的概念。而与之相关的“聪明”，自然而然也发生了相应的变化 —— 升级。 在我眼里，聪明人是这样的： 他们脑子里有很多很多（起码足够多）清楚必要的概念及其相关方法论。（并不见得无所不能）</li><li>人分为两种，一种是固守型的（Be Good Type），一种是进取型的（Be Better Type）。这两种人的主要区别在于，他们做事的时候，关注的焦点不一样： 固守型的人（Be Good Type）更关注自己当时的表现，更在意外界对那表现的看法； 进取型的人（Be Better Type）更关注自己当时有无进步，并不在意对外界的看法； 第一种人过分在意自己当时当刻的表现，直接带来的结果就是，如果“感觉有可能做不好”，就直接不做了 —— 省的丢人。第二种人常常并不在意外界的看法，他们知道自己有可能做得并不好，但这并不妨碍他们进步，只要下一次比这一次更好，就是他们想要的结果。他们更习惯于接受挑战，处理压力，更懂得积累的好处。</li><li>仅仅切换一下关注的焦点1，就开启了走向更聪明的道路，有这么简单吗？！的确就这么简单！连变聪明都很简单啊： 只不过是不断清理自己的概念、扔掉该废弃的，不断吸收新的、有必要的概念，并且通过应用不断完善与那些概念相关的方法论。</li><li>那些不相信压力有害健康的人，尽管也遭遇了同样大的压力，却实际上没受到什么影响 —— 事实上，这些人相反恰恰是整个受调查人群中死亡率最低的。 研究者的结论是： 致命的不是压力本身，而是压力与观念（认为压力有害健康甚至致命）的组合。</li><li>固守型的人，在压力下表现会更差，表现差会进一步导致他全方位溃退。进取型的人，在压力下反倒可能更有动力，因为历史经验反复告诉他自己总会越来越好的…… 问题在于，我们不是天生就属于某一个类型的，都是靠积累培养出来的取向。成为一个进取型的人，就是可习得、可积累的。</li><li>所谓的“成长”就是操作系统不断完善的过程； 所谓的“重生”就是操作系统更新换代的节点； 所谓的“不断再生”就是我们意识到这些操作系统更新换代的必要性，于是给自己设置提醒模式，给自己发展自动更新模式的持续动力。(比如给自己设定每七年要有一次大的更新换代……) 只要你开始在意自己的操作系统效率，你就会自然而然地关注它，而打磨操作系统的“方法论”是什么呢？ 概念上来看，我不再使用含混的“价值观”之类的词去描述自己的思考方式与过程，我用我自己定义好并且反复打磨的概念：“操作系统”。然后，我知道构成操作系统的就两样东西：概念和方法论。然后整理出一整套打磨、更新、升级的方法论去维护自己的操作系统效率 —— 这是个迭代的过程。 所谓的成长，从这个意义上描述，就是这样的： 学会了哪些原本不知道的概念和方法论？？ 哪些已有的概念和方法论被进一步打磨了？ 这很重要，因为这样的描述使得“成长”多少可被量化 —— “可量化”很重要，因为量化的结果是最好的反馈。成长从来都是需要过程的（常常是漫长的过程），需要不断有足够的反馈机制去激励。成长可量化了，它就有了足够的动力。而这本身，也是“成长与重生的方法论”。 随着时间的推移，随着实践的深入，最终，你会跟我有一样的感触： 一切都是学识决定的。</li><li>你相信什么这世界就给你什么……</li><li>面对非议的时候， 真正要解决的问题不是去辩解，而是想办法让自己变得更强。 再反过来，面对非议你居然需要辩解的这个事实，从另外一个侧面会暴露另外一个事实：你就是不够强。</li><li>自己错了，就承认，并且想办法承担后果 —— 我觉得大丈夫就应该这样。而别人错了，承认与承担都是别人的事情，用不着我去操心；如果那错造成了我的损失，可也无法上升到法律保护高度，那我就懒得追究 —— 因为我自认自己的时间精力更为宝贵，不应该浪费在这样的地方，甚至连生气的必要都没有，大好的人生在等着自己，哪里有功夫理会那些？</li><li>当我开始觉得争论完全是浪费时间的时候，才开始反应过来，原来讨论和争论并不一回事儿，有核心上的差异： 讨论的目标是为了让自己更明白； 争论的目标是为了彻底说服对方； 一旦归结到这里，就反应过来了，争论是完全无用的，因为其实很难达到效果；讨论才是有意义的 —— 自己的进步才最重要</li><li>争论的冲动常常来于自己的弱小。</li><li>只有自己放弃了争论的习惯之后才反应过来，原来那并不是人微言轻，而是人微易怒。弱小的个体更容易闹情绪，若是有情绪掺杂，那么言论就越发地不靠谱，不靠谱的言论又掺杂着更多的情绪，恶性循环生生不息。 也就是说，争论不仅浪费时间精力，更重要的是它妨碍自己成为一个清醒淡定的人 —— 这可能造成的自我伤害太大了，必须彻底根除。</li><li>放弃争论很久之后，我发现了另外一个由此产生的惊喜： 彻底逃离鄙视链。</li><li>鄙视链也是一样的，那是个循环嵌套的局，一旦置身其中，必然会反过来被鄙视，早晚而已，私下或者公开，谁都逃不掉。不想被鄙视，就别在那个局里。事实上，即便你挣扎着脱离了那个局，一样会被莫名其妙的人鄙视，只不过，因为你自己不在那个局里，所以你清醒，所以你知道，那鄙视是那个人的幻觉，跟你完全没关系。 时常反省，就会知道鄙视与争论一样，通常是自身弱小才更容易产生的冲动，常常是自欺欺人的表现。嗯，被鄙视，其实是自找的。</li><li>我经常自我治疗，不觉得有病是可耻。有病不治且不以为耻反以为荣在我看来才是真正的可耻。</li><li>在选择伴侣的时候，最好…… 寻找同级别的操作系统； 要升级就大家一块儿升级……</li><li>学习真的很简单， 学习 就是掌握一系列新的 概念 。</li><li>为什么持续学习一定会产生好运和惊喜呢？理由也很简单， 只有概念多到一定程度的时候，它们之间才有机会产生“意外的连接” —— 即，所谓的融会贯通。</li><li>认识很多的人，其实是没用的，因为绝大多数人是没有操作系统的，或者即便有，也是过时的操作系统。认识他们没用，不仅没用，甚至是一种罪，因为你在耽误自己可能的效率。 要想办法认识很多真正拥有高效率的操作系统的人。</li><li>一定要想办法把自己打造成一个多任务操作系统。不要做一个低级的单任务操作系统。</li><li>通过恰当的统筹，让自己多开几个进程，齐头并进地去做一些事情，永远是提高效率的基本手段。 而多管齐下，齐头并进，也是创造惊喜的好方法</li><li>很多人其实是不相信自己会变得更好的 —— 本质的原因是他们各项技能在某个时间点开始彻底停止进步，而自己骗自己多少有些难度，于是已经接受自己“就是那样了”的现状…… 这样的人，是没有办法相信自己会有好运的，只因为他们没有办法相信自己会变得更好。这样的人，其实早已经不再有未来，也就更没办法对自己的未来自信 —— 只是他们自己意识不到，没有能力想得这么清楚而已。这样的人，没有坏事发生就已经该谢天谢地了，根本不可能有什么惊喜。</li><li>凡事儿多琢磨一会儿。一旦真开始想了（思考），就可能得到不一样的结论；收获多起来之后，遇到重要的事儿，一般都舍不得不想 —— 知道不多想想就会吃亏的。</li><li>当我们以那个已经存在的大势为焦点，一路深入下去之后，离开的欲望就非常强烈，想要在那个新世界里存在的欲望就无可挥去，既然有从头再来的机会，再死一遍对我们这种反复重生的来说，根本就是早已经习惯了早已经适应了的事情而已。</li><li>我们更应该 对自己的未来自信 ，前提只不过是过去与现在以及未来，我们都在挣扎着进步。</li><li>如果一个系统不能容错，那么它就是脆弱的。因为 任何一个在现实世界里运转的系统所面对的，必然是一个不完美的、不理想的、各种意外频繁发生的现实世界 。有一点错，就直接停止运转，那系统基本上就是个废物。 从这一点上来看，绝大多数人在没有恰当训练之前，不懂得容错，就基本上跟废物差不多。看看那些易怒的人罢。有一点差池，他们就暴跳如雷，大脑充血，系统完全瘫痪……</li><li>我们最好给自己的操作系统设置一定的容错机制。 比如，遇到貌似不能沟通的人（操作系统不同），多想想，就知道起码有以下几个选择： 直接停止沟通（注意不要引爆自己的情绪进而浪费时间）； 只沟通能沟通的（为了节省自己的时间精力） 换个方式沟通（ 开个虚拟机玩玩？） 伪沟通……（为了避免引爆对方的情绪浪费自己的时间） 你看，这就是给自己创建了“容错机制”之后的效果和好处。</li><li>自己必须学会自学，自己的灵魂必须自己塑造，交给谁搞都不可能放心 —— 这事儿必须自己来。</li><li>教，才是最好的学习方法。</li><li>自学真的很简单，简单到什么程度呢？若是一个人竟然在成年后依然没有掌握这个基础的技能，那么他就注定一生只不过是个低级动物。 自学很简单，其实就是不断习得、积累、研究、打磨、升级那些概念和方法论。进一步来看， 自学能力是靠积累增强的。 开始自学的人，越学越快。自学的人好比给自己的脑子开了个黑洞，刚开始看不出来，因为那黑洞的质量太小，乃至于跟没有一样；但随着时间的推移，那黑洞的质量逐步积累，渐渐地，另外一个现象终究会产生 —— 很多知识就好像是“不由自主”地飞进他们的脑子里。 如何解释这个现象呢？善于自学的人，最终会形成一个重要的能力： 融会贯通。</li><li>只有概念多到一定程度的时候，它们之间才有机会产生“意外的连接” —— 即，所谓的融会贯通。 善于自学的人，时时刻刻都在学习、在思考，这极大地增加了他们“偶然”发现什么、“突然”想到什么、“忽然”就得到了什么新结论诸如此类的概率，对他们来说，即便是“偶然”，也是更为高频的“偶然”，进步、持续进步、大幅度进步</li><li>善于学习的人会越来越善于学习，学习能力会越来越强，因为在一个知识点上的感悟，不知道什么时候会在另外一个知识点上发挥效用。知识点（概念与方法论）就好像是有生命的东西一样，它们自己会发酵，它们自己会相互连接，它们自己会相互碰撞，进而产生出更多有生命的东西。 学习几乎是唯一一个可以必然产生惊喜（意外的好运，Serendipity）的日常活动。并且，那些伴随着惊喜的幸福感（多巴胺分泌）就是一直在持续增长。</li><li>自学这事儿， 方法并不首要，首要的是态度。 所有讨厌学习、抗拒学习，最终彻底放弃学习的人，都是因为学习这事儿对他们来说，从来都不是为自己做的事情。他们从来都是“为了别人学习”，比如为了满足父母的要求，或者为了保持面子的需求 —— 反正不是为了自己进步的需求。 不为自己做的事儿，做久是不大可能的 ，于是，自然而然产生讨厌，产生抗拒，自然最终能放弃就马上放弃。</li><li>人无非分为两种： 有一类人做什么事儿都是为了自己而做，即便在某件事儿上做得并不好； 另一类人做什么事儿都是为了别人而做，即便在某件事儿上做的还不错</li><li>在这一点上，人与人之间开始分化，为自己而努力的人逐步变成所谓的精英，为别人对付事儿的人逐步变成所谓的庸众。是啊，为自己做事儿，就肯定更努力啊！为别人做事儿就自然而然地应付了事么！</li><li>那些“表现型”选手，更在意的是自己当前的表现，别人对自己的看法；那些“进取型”选手，更在意的是自己当前的进步过程，更重视自己对自己的评估及其准确性，以便“明天会更好”。后者才可能成为“ 活在未来”的人。 “表现型”选手做事常常不是为了自己的进步 ，而是为了自己当下表现得多好，也就是说，为了获得更多的当时的认可。这细微的差异，长期却造成天壤之别。对于“表现型”选手来说，外部的反馈，构成了全部的“回报”，决定了努力的成本。家长多夸几句，就再多学一点点，以便继续被夸；工资多涨一点，就尽量显得多做一点，否则多不划算啊！这是他们真实的念头。 “进取型”选手做事是为了自己的进步 ，做事的收获，最大的部分不是来自外部的奖励或者赞赏，最大的部分是自己的进步；即便在做得不足够好的时候，甚至外部只有忽视和鄙视的时候，收获依然清晰：无论如何都有一些哪怕看不着但确实体会得到的进步啊！</li><li>人们的生活状态发生变化时，基因也会发生变化。</li><li>眼球快速移动本身，没有任何意义。 阅读，是为了理解，而理解这事儿，慢，即是快；快，便是无。</li><li>信息这东西，必须系统才有价值。碎片化的信息也许有用，但就算完全忽略，也不至于致命。舍了就舍了，没啥。这种勇气其实不少人都有，巴菲特就是其中之一。害怕错过什么，是一种情绪，来自于空虚的情绪：因为什么都没有，所以就渴望有一点什么，所以就特别害怕错过任何机会。充实的人，是不怕错过什么的，因为已经充实，错过点什么，真的无所谓，机会有的是，错过一大把又如何，反正因为充实而能够相信自己确实有实力终归抓到至少一个适合自己的机会。</li><li>不同的作者有不同的组织方式，但大体上都是差不多的。总是要分章节。每一章其实都是在着重讲解一个概念，它的应用，它的方法论。而陆续的章节，通常是必须理解上一个概念之后才能进一步理解的概念，及其应用与方法论。所以，一头扎入内容之前，最好把这些概念大致过一遍，不理解没关系，哪怕先记住那些概念的名字和先后关系都很有帮助。</li><li>在读的过程中，不断整理这些概念与方法论之间的关系，其实是“消化”的必要过程。</li><li>所有的知识都有共同点：它们不一定能用在哪里，它们早晚必然融会贯通。所以，理解过的东西越多，理解新的东西就越快。说穿了，理解能力差，无非就是见识少，仅此而已。</li><li>硬着头皮读完，然后反复读很多遍。这是一个特别重要的本领，很多人不知道。其实，重要的知识，从来都是通过反复学习才能获得的。一下就能学会得东西，通常上价值不大。</li><li>一定要用起来。 很多有用的东西，之所以最终没用，是因为压根没用过。</li><li>不用的东西，没用起来的东西，还不如虚无 —— 因为读过、学过，时间与精力已经耗费了，这可是最宝贵的不可逆不可回收不可再生资源！</li><li>不用，学它干嘛？这与我读书的原则也是相通的：不用认真读的书，读它干嘛？这与我对生活的态度也是一样的，既然活着，就要活好，活得精彩。</li><li>暂时用不起来怎么办？教！我总是重复这句话： 教是最好的学习方法。 把你学到的，总结好的，琢磨清楚的那些知识（不是胡说八道的那些东西）传递出去，分享给你身边的人。</li><li>分享，不仅需要能力支撑，也是培养能力的最重要手段。知识分享，没有成本，只有收益 —— 双方都有的收益。</li><li>别忘了问自己这个最重要的问题： 这个概念、这个方法论、这个道理、这个知识，还可以用在什么地方？ 这是让你真正培养融会贯通能力的方式。所谓的聪明就是这么来的：脑子里有足够多清晰正确的概念与方法论，然后它们之间还有正确应有的关联…… 所以聪明的操作系统总是有更多的想法、更多的方案、更多的可能性。</li><li>知识有两种： 无繁殖能力的知识 有繁殖能力的知识 显然，有繁殖能力的知识，比无繁殖能力的知识更有价值；繁殖能力强的知识，比繁殖能力差的知识更有价值。</li><li>有繁殖力的知识，引发思考，引发行动，引发改变，形成新的局面，并且，那些有繁殖力的知识，还会帮助你吸收、理解、运用更多有繁殖力的知识。再比如说，概率、统计，除了可以帮助我们更准确地理解这个世界之外，甚至可以直接用来赚钱</li><li>没有繁殖能力的知识，倒也不是没用，而是用处不大，甚至可有可无</li><li>有繁殖能力的知识： 可以积累，因为它有积累效应 必须应用，因为它有指导意义 值得传播，因为它可造福大众</li><li>我实在看不出来一个人对豪车品牌如数家珍对他有什么具体的好处（在他并非一个知名汽车节目主持人的情况下），也实在看不出一个人对各种明星八卦明察秋毫的人对自己有什么效率和产能上的提升？天天不看一遍其实天天都一样的“头条”就很难受，其实挺浪费生命的罢。</li><li>资必须自负盈亏，所以只能、且必须靠独立思考； 只有投资未来才有真正的胜算，投资的收益才可能大到有意义的地步。</li><li>学习就是用自己免费的时间与精力再加上少量的金钱去投资自己的未来。</li><li>在我眼里，人分为两种，主动升级自己操作系统的，和不升级自己操作系统的；主动升级自己操作系统的人又分为两种，多模式的和单模式的</li><li>我们永远不要在容易和艰难之间选择，要在错误与正确之间选择 。</li><li>做事之前常常要在脑子里预演至少一次</li><li>有意识地提高自我要求，是切实提高自己水准的前提 —— 我的确相信这事儿。 对自己抬高一点点要求，然后做足功课，更好一点的结果就是自然而然的了。</li><li>花一点时间，想象一下几年之后的你，你希望到那个时候，你自己是什么样子？然后，倒推回来， 提前 按照那个标准 学习、工作 。</li><li>按照未来的你所需要的标准去学习、去工作，将会构建一个完全不同的生活。</li><li>所有人都有进步的可能，只不过是有没有放弃而已，若不放弃，那最多是进步程度大小不同而已。</li><li>花几十块钱（人民币或美元）买回来的一本书，哪怕是有其中一点点的内容（有时哪怕是一句话而已）给我带来惊喜，已经很划算了！</li><li>我永远不可能理解那些嫌书贵的人 —— 省一次打车的钱，就可能带来操作系统的升级，哪怕是个很小的升级或者补丁，怎么叫贵呢？这么重要的东西，又如何便宜的下来呢？</li><li>不能改变的最根本原因在于不愿意改变。</li><li>下个决心，是瞬间的事情，瞬间的决定，行动才是填补后面非瞬间的整个过程的实际内容。若是真想明白了这个道理，就可以直接把 “下决心的这个瞬间决定” 直接跳过 —— 它没必要存在；直接开始行动就好，这才是关键。</li><li>既然改变是个过程，那么就可以把“改变”理解成一股势力，最初相当弱小的势力，它需要时间，需要投入，需要持续投入才能逐步壮大起来。</li><li>千万要小心自己被反向塑造成你原本不应该变成的样子。 近朱者赤，近墨者黑，这不是空话，这也不应该只被肤浅地理解。</li><li>认真筛选自己的朋友，很必要 —— 因为他们终究会成为塑造你的一股力量；认真筛选自己面对的所有人，同样必要 —— 因为他们的力量更大，人多势众，生生不息，连绵不绝，所以更要小心，需要更多挣扎。若有可能，要认真选择自己所身处的环境 —— 因为， 地理位置很重要，远比大多数人想象得更为重要。 出淤泥而不染，濯清涟而不妖，那是莲花，那不是人；而人想要摆脱 反向塑造 ，不仅不可能天然做到，而且需要很多努力、很多挣扎。 人要真诚热爱自己 —— 然而，很多人其实没有这样的勇气。</li><li>观棋不语真君子。 落子不悔真君子。</li><li>在描述逆境的时候，人们更喜欢用“抗争”这个词，历史书、传记看多了，我却觉得用“配合”这个词反倒更恰当。当一个人从逆境中走出来之后，回头再看那逆境，暗流涌动的背后却可能是个机会，一个塑造传奇的机会。历史总是这样，它就像一条河，时不时地莫名其妙就产生了一处漩涡，大多数人被卷入漩涡，葬身河底，可总有一些人，“配合”着那暗流，走出一条生路，就成了传奇。</li><li>人们对自己不擅长的事情有特殊的处理手段—最终会通过包装进行自我保护。“谈钱不就俗了吗？”或者“我才不想成为天天只会算计的人呢！”这其实是对自己的大脑实施“永久性伤害”—很难恢复。</li><li>转移注意力是抵御诱惑的一种常用的有效手段，这其实也是后来理财成功的人常用的手段。他们会尝试着骗自己，把那些定期存款或者股票投资当作“已经丢了”，尽量不去想它，不去看它。</li><li>社会阶层的形成和固化，都与个体的赚钱速度有直接关系，而不是与节俭程度有关系。在赚钱速度很快的人中也有非常节俭的，但这并不意味着他是靠节俭致富的。而且，这个建议不仅会引发负面情绪，还会直接给生活质量带来负面影响 —— —— 无论是心理上还是生理上，都会得到负面影响。</li><li>自制力很重要，但每个人的自制力是不一样的，过分自控只能带来不舒适。另外，要知道一个重要的事实：一个人的自控能力是总量一定的，某些方面的高度自控，会导致在其他方面的失控。</li><li>爱面子其实是绝大多数人存不下钱的根本原因。</li><li>给自己培养一个不那么费钱的兴趣爱好。大多数人出去花钱，根本上来看就是“闲的”</li><li>个兴趣爱好的好处是，闲暇时间有所寄托 —— 没工夫乱花钱，这不挺好的吗？</li><li>理财无非就是“开源节流”。相对来看，“节流”固然重要，“开源”才是正途。对年轻人来说，努力提高自己未来的营收能力才是当务之急。</li><li>要花更多时间去系统地研读正式书籍，多花时间去打磨自己的劳动技能。不要只顾着升级手机系统，也要常常升级自己的大脑，选择更好、更强的思维模式，进而有能力作出不同的选择。</li><li>没有人会自动变好，只有行动才会带来变化，期望本身在没有行动支持的情况下只能变成自我欺骗。 好吧，现在没有借口了。开始存钱吧。</li><li>普遍来看，普通人的赚钱能力在越来越快地提高； 普遍来看，普通人在生活必需上的开销所占比例正在缩小。</li><li>要相信第一条，所以才能坚定不移地想尽一切办法学习如何获得更强的赚钱能力；要相信第二条，所以大可不必刻意或过分降低自己的生活质量去换取未来的财富。这两条都笃信且实践，才能做到“别把自己的青春过得太穷”。</li><li>重复的、枯燥的工作应该自动化完成。</li><li>在今天这个时代，我们可能并不需要打败谁才能过得更好，起码可以过得足够好。细想想，很多人其实是被自己打败的。他们普遍的特点是一样的：在虽然很难但明明可以选择的情况下，误以为自己完全没有选择，于是只能走进死胡同。放弃了选择，就是被打败了。</li><li>用以学识支持的坚毅认定其实选择是存在的，并且是可追求的，是有很大相对优势的</li><li>知道收入分为两种，主动收入和被动收入，而后更重视被动收入，这也是选择，还是一个很重要的选择，更是一个改变未来的选择</li><li>自欺欺人不仅无补，甚至有害，尤其是对自己的大脑 —— 人要珍爱自己的大脑。</li><li>有审美意识，有审美能力，有为自己创造美的意愿和动手能力 —— 这是长期培养之后习得的结果。 审美认知、审美能力，大多数情况下真的与金钱无关，因为更多更重要的审美体系，需要的不只是某一个器官的感受，而是系统思考的能力。比如，除了美食、美景、美人之外，还有很多事物都是美的。 有些语言文字很美 有些科学证明很美 进而还有更多抽象的美。 简洁很美 效率很美 创新很美</li><li>千万不要胡乱从小刻意灌输理财观念，尤其是大多数父母的观念还是错的。要从更本质的地方开始：开启孩子的审美意识，刻意培养他们的审美能力。</li><li>万无一失且又有收益的事情，没理由不做 —— 其实，学习就是这种事情。可惜，绝大多数人并不如此觉得。迫不得已的事情哪怕有风险也得做 —— 对大多数人来说，结婚、生子都是迫不得已的事情。</li><li>不仅仅是理财，生活中的任何方面其实都一样： 安全，要靠避险，而不是冒险；要靠小心，而不是勇气。</li><li>这一代的年轻人和上一代人有很多不一样的地方，最不同的应该是他们所面临的几乎是另一个世界。他们的平均寿命更长了，他们可以掌握的技能更多了，他们的技能变现机会更多了，他们能赚钱的时间更长了……与此同时，他们的生活必需开销比例更低了……还有更重要的： 科技的进步正在某个层面抹平贫富差异所造成的生活质量差异。</li><li>在这个时代，要求年轻人过分节俭，甚至过分降低生活水准，在我看来简直是“不人道”的。而且，有一些钱是绝对不能省的，因为这种“节省”可能会伴随着很高的隐性成本，或者在将来造成很大的负担 —— 今天看起来省了，可将来却要因此付出极大的代价。</li><li>买书的钱不能省。在追求学识的过程中，免费常常是陷阱。因为，我们的时间并不是免费的，同时会随着我们自己的学识变得越来越贵。 舍不得花钱买好书是最“屌丝”的行为，也是最高效地制造“屌丝”的方式。</li><li>一切有助于帮助自己成长的开销都不能省，尤其对年轻人来说更是如此 —— 你的前途取决于此。</li><li>买工具的钱不能省。 一切工具，其发明与使用的目的都是一样的 —— 提高效率。花一点钱提高效率，赚大了；为了省一点钱，却要忍受长期的低效率甚至无效率 —— 只有“屌丝”才会觉得没问题。 好的工具必须买，并且要在可承受范围内买最好的。</li><li>事关安全的钱不能省。</li><li>过分约束自己，其实并不是一个优势策略，尤其是考虑到终极体验的不可替代性的时候。</li><li>甄别“必需”和“必虚” 有些“必需”实际上是“必虚”而已。所谓“必虚”的意思是说，虚荣心使得那个东西看起来“必需”。</li><li>人一辈子基本上要靠3种力量： 体力 智力 财力 它们之间的关系基本上是“相辅相成”的。</li><li>对周期的深入理解，甚至可能影响一个人的性格。在我看来，所谓的不屈不挠，所谓的坚持不懈，更多的时候，只不过是因为对自己身处某个周期的某个位置非常了解，所以才更容易作出的决定。</li><li>价值观影响选择，选择影响行动，行动构成命运。</li><li>不做没用的事，这也是一种价值观导致的选择 —— 因为无用功是一种浪费，是不好的。不淡定没用，淡定却好处多多 —— 起码不影响心情</li><li>由于我是个不太容易生气的人，所以我常常有心思研究别人为什么会生气。每一次愤怒的背后，都有价值观的操纵，对错、好坏、是非的混淆 —— 最终就这么点事。而这样的观察和思考又进一步使得我没办法乱生气 —— 有什么值得生气的呢？都是想不开造成的。平时人们所说的“想不开”，其实无非就是“价值观混乱”。</li><li>人真的不能穷，不能没有积蓄，否则真的会在某一瞬间突然变傻。另外，永远不要“All In”。这在很多时候并不是空话，真的需要放在心上。</li><li>从某个角度望过去，《把时间当作朋友》，其实只不过是一句话： <strong>一切都靠积累</strong>。 《新生 —— 七年就是一辈子》，其实也只不过是一句话： <strong>我们必须主动升级自己的操作系统</strong>。</li><li>两个人闲聊一会儿可能很有收获，可是，这里面有几个前提： 两个人在某个层面上要旗鼓相当 —— 否则难有真正沟通； 两个人在很多层面上有一定默契 —— 否则沟通成本过高； 因为是“私下交流”，于是可以有很多“无所顾忌的表达”……</li><li>大部分群聊是浪费生命。当参与人数多到一定程度的时候，“生产”效率一定趋近于零 —— 这与参与者的知识积累程度其实全无关系。</li><li>在互联网上，最有效的沟通方式是写文章。一个人把自己的想法与思考用文字表述清楚，然后无数人可以读到，认同就认同，若是有人不认同，那他就应该把自己的想法与思考用文字表述清楚，或反驳、或补充，总而言之，足够清楚 —— 且对自己和他人都有积累效应，又不浪费任何人的时间。</li><li>不可否认，把群聊当作消遣倒也不错。不过，若是消遣，其实还有很多很多其它更优的方式，不是吗？比如读本好书，看个好电影…… 闲累的话，就复习本好书，复习个好电影 —— 这只是我个人的方式，我相信每个人都有属于自己的创意。 把任何群设置为“免打扰”，绝对不会错过什么。错过的只不过是几块钱的红包而已 —— 从另外一个角度看，若是连那几块钱都要在乎，那确实可以把整个生命全部扑在群聊上了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Growth </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reading List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章：Git原理之最近公共祖先</title>
      <link href="/2021/07/22/labuladong/di-san-zhang-git-yuan-li-zhi-zui-jin-gong-gong-zu-xian/"/>
      <url>/2021/07/22/labuladong/di-san-zhang-git-yuan-li-zhi-zui-jin-gong-gong-zu-xian/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/mu-lu-ye-1/mu-lu-ye-1/gong-gong-zu-xian" target="_blank" rel="noopener">Git原理之最近公共祖先</a></p><blockquote><p>遇到任何递归类型的问题，无非就是“灵魂三问”</p><ul><li>这个函数是干什么的？(不要跳进递归，没用。)</li><li>这个函数参数中的变量是什么？</li><li>得到函数的递归结果，你应该干什么</li></ul></blockquote><p><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">236. 二叉树的最近公共祖先</a><br><a href="https://www.youtube.com/watch?v=13m9ZCB8gjw" target="_blank" rel="noopener">YT视频解析</a></p><p><img src="https://i.loli.net/2021/07/23/sbh74afqTg2lJRi.png" alt="image.png"></p><ul><li><p>明确递归函数的含义：递归函数返回（<strong>以root为基础的</strong>）两个<code>p,q</code>节点的<strong>最近</strong>公共祖先</p><ul><li>递归函数说：你<strong>不要跳进</strong>递归，你要<strong>相信我</strong>能返回你需要的东西（也就是<strong>最近公共祖先</strong>）；如果我能找到其中一个p（或q），我就返回这个p（或q）；如果都找不到，我就返回NULL<ul><li>比如：p为7，q为8，此时的root为2。你要相信我能返回公共祖先4（你不用管我是怎么知道公共祖先是4的，你相信我就行）</li><li>比如：p为7，q为6，此时的root为2。我返回7</li><li>比如：p为7，q为8，此时的root为6。我只能返回NULL</li></ul></li></ul></li><li><p>递归结束的条件（或者base case）：如果root为空，返回NULL；如果root本身就是p（或q），则返回p（或q）</p></li><li><p>处理递归函数返回的结果（相当于后序遍历）:先求root.left的结果（左），再求root.right的结果（右）。然后根据结果来操作当前的root状态（中）</p><ul><li>如果左右的结果都是NULL，说明p和q都不在以root为根的树中，则返回NULL</li><li>如果左右的结果都不是NULL，说明p和q在root的左右子树中各有一个，则返回当前的root<ul><li>比如：p为7，q为5，此时的root为2。2的左子树返回7，右子树返回5。此时的最近公共祖先就是当前的root：2</li></ul></li><li>如果左结果为NULL，右结果不是NULL，说明p和q都在右子树中，此时返回右结果（如果右结果为NULL，左结果不是NULL，说明p和q都在左子树中，此时返回左结果）<ul><li>比如：p为7，q为5，此时的root为1。root的左子树返回2，右子树返回NULL。则此时1对应的结果就是<code>非NULL</code>的那个子树的结果</li></ul></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># # Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :type p: TreeNode        :type q: TreeNode        :rtype: TreeNode        """</span>        <span class="token comment" spellcheck="true"># base case 或者递归出口</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span><span class="token keyword">return</span> None        <span class="token keyword">if</span> root<span class="token operator">==</span>p <span class="token operator">or</span> root<span class="token operator">==</span>q<span class="token punctuation">:</span><span class="token keyword">return</span> root        <span class="token comment" spellcheck="true"># 后序遍历：左</span>        l<span class="token operator">=</span>self<span class="token punctuation">.</span>lowestCommonAncestor<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 后序遍历：右</span>        r<span class="token operator">=</span>self<span class="token punctuation">.</span>lowestCommonAncestor<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 后序遍历：中</span>        <span class="token comment" spellcheck="true"># 都为空，没找到</span>        <span class="token keyword">if</span> <span class="token operator">not</span> l <span class="token operator">and</span> <span class="token operator">not</span> r<span class="token punctuation">:</span><span class="token keyword">return</span> None        <span class="token comment" spellcheck="true"># 都不为空，左右子树各有一个p q，返回当前root</span>        <span class="token keyword">if</span> l <span class="token operator">and</span> r<span class="token punctuation">:</span><span class="token keyword">return</span> root        <span class="token comment" spellcheck="true"># 一个为空，一个不为空, 返回不为空的结果</span>        <span class="token keyword">return</span> l <span class="token keyword">if</span> l <span class="token keyword">else</span> r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//// * Definition for a binary tree node.</span><span class="token comment" spellcheck="true">//struct TreeNode {</span><span class="token comment" spellcheck="true">//    int val;</span><span class="token comment" spellcheck="true">//    TreeNode *left;</span><span class="token comment" spellcheck="true">//    TreeNode *right;</span><span class="token comment" spellcheck="true">//    TreeNode(int x) : val(x), left(NULL), right(NULL) {}</span><span class="token comment" spellcheck="true">//};</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        递归结束的条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span>p <span class="token operator">||</span> root<span class="token operator">==</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        后序遍历：左右</span>        TreeNode<span class="token operator">*</span> l<span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> r<span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        后序遍历：中</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token operator">==</span><span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> r<span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//都为空，返回空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">and</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 都不为空，返回当前的root</span>        <span class="token keyword">return</span> l<span class="token operator">?</span>l<span class="token operator">:</span>r<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 有一个为空，一个不为空，返回不为空的</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章：用各种遍历框架序列化和反序列化二叉树</title>
      <link href="/2021/07/22/labuladong/di-san-zhang-yong-ge-chong-bian-li-kuang-jia-xu-lie-hua-he-fan-xu-lie-hua-er-cha-shu/"/>
      <url>/2021/07/22/labuladong/di-san-zhang-yong-ge-chong-bian-li-kuang-jia-xu-lie-hua-he-fan-xu-lie-hua-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://labuladong.gitbook.io/algo/mu-lu-ye-1/mu-lu-ye-1/er-cha-shu-de-xu-lie-hua" target="_blank" rel="noopener">二叉树的序列化</a></p><h1 id="297-二叉树的序列化与反序列化"><a href="#297-二叉树的序列化与反序列化" class="headerlink" title="297. 二叉树的序列化与反序列化"></a><a href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/solution/c-python3-dfs_nlr-bfs-by-849061136-szk9/" target="_blank" rel="noopener">297. 二叉树的序列化与反序列化</a></h1><ul><li><p>序列化</p><ul><li>前序遍历：（1）注意递归的出口；（2）将前序遍历的根节点数据保存，然后递归左右子树</li></ul></li><li><p>反序列化</p><ul><li>（1）根据<code>&#39;,&#39;</code>把数据分开；</li><li>（2）pop出第0个数据，并建立根节点；</li><li>（3）递归剩下的数据 <code>根据树的递归性质，第0个元素就是一棵树的根节点，所以只要将列表的这个元素取出作为根节点，剩下的交给递归去解决即可</code></li></ul></li></ul><blockquote><p><a href="https://ismxue.github.io/2020/08/02/labuladong/di-er-zhang-er-cha-sou-suo-shu-cao-zuo-ji-jin/#toc-heading-8">二叉树的遍历</a>：该题也可以用后续遍历及层序遍历解决（不可以用中序，因为中序的话，不知道根节点在哪个位置）</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Codec</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Encodes a tree to a single string.        :type root: TreeNode        :rtype: str        """</span>        self<span class="token punctuation">.</span>res<span class="token operator">=</span><span class="token string">''</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 递归出口：递归结束的条件，将'None,'保存到结果中</span>            <span class="token keyword">if</span> root<span class="token operator">==</span>None<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>res<span class="token operator">+=</span><span class="token string">'None,'</span>                <span class="token keyword">return</span>            <span class="token comment" spellcheck="true"># 前序遍历：中</span>            self<span class="token punctuation">.</span>res<span class="token operator">+=</span>str<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">','</span>            <span class="token comment" spellcheck="true">## 前序遍历：左右</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>res    <span class="token keyword">def</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Decodes your encoded data to tree.        :type data: str        :rtype: TreeNode        """</span>        <span class="token comment" spellcheck="true"># 先把数据根据','分开</span>        data<span class="token operator">=</span>data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 递归</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 记录pop出的数据（也是根节点对应数据）</span>            rootData<span class="token operator">=</span>data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 递归出口</span>            <span class="token keyword">if</span> rootData<span class="token operator">==</span><span class="token string">'None'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> None            <span class="token comment" spellcheck="true"># 创建根节点</span>            root<span class="token operator">=</span>TreeNode<span class="token punctuation">(</span>int<span class="token punctuation">(</span>rootData<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 递归剩下的数据</span>            root<span class="token punctuation">.</span>left<span class="token operator">=</span>dfs<span class="token punctuation">(</span><span class="token punctuation">)</span>            root<span class="token punctuation">.</span>right<span class="token operator">=</span>dfs<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> root        <span class="token keyword">return</span> dfs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Your Codec object will be instantiated and called as such:</span><span class="token comment" spellcheck="true"># ser = Codec()</span><span class="token comment" spellcheck="true"># deser = Codec()</span><span class="token comment" spellcheck="true"># ans = deser.deserialize(ser.serialize(root))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/solution/297-er-cha-shu-de-xu-lie-hua-yu-fan-xu-l-647c/" target="_blank" rel="noopener">DFS</a><br>序列化<br>递归的第一步都是特例的处理，因为这是递归的中止条件：如果根节点为空，返回”null“<br>序列化的结果为：根节点值 + “,” + 左子节点值(进入递归) + “,” + 右子节点值(进入递归)<br>递归就是不断将“根节点”值加到结果中的过程<br>反序列化<br>先将字符串转换成队列（python转换成列表即可）<br>接下来就进入了递归<br>i. 弹出左侧元素，即队列出队<br>ii. 如果元素为“null”，返回null（python返回None）<br>iii. 否则，新建一个值为弹出元素的新节点<br>iv. 其左子节点为队列的下一个元素，进入递归；右子节点为队列的下下个元素，也进入递归<br>v. 递归就是不断将子树的根节点连接到父节点的过程</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Codec</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Encodes a tree to a single string.        :type root: TreeNode        :rtype: str        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'None'</span>        <span class="token keyword">return</span> str<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>serialize<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>serialize<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Decodes your encoded data to tree.        :type data: str        :rtype: TreeNode        """</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">:</span>            val <span class="token operator">=</span> dataList<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token string">'None'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> None            root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>int<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> dfs<span class="token punctuation">(</span>dataList<span class="token punctuation">)</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> dfs<span class="token punctuation">(</span>dataList<span class="token punctuation">)</span>            <span class="token keyword">return</span> root        dataList <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/solution/ji-chong-bu-tong-bian-li-fang-shi-xia-de-0eap/" target="_blank" rel="noopener">序列化与反序列化 C++</a></p><ul><li><p>前序、后序、层序都能够很好的找到根节点，而且不同于一般构造二叉树的问题，此处将空指针的地方指出，相当于比较完整的给出了树的结构。</p></li><li><p>反序列化时，在确定根节点后，紧接着确定某一子树，对当前子树采用递归，形成了相同的问题，类似于序列化过程中的递归问题。</p></li><li><p>反序列化中值得注意的是，前序是利用序列化结果，依次从前往后构造节点，类似于队列；后序依次从后往前，类似于栈；</p></li><li><p>中序时，由于无法从序列化结果中找到根节点位置，也就无法准确划分左右子树，无法形成递归的结构，这种方式不能反序列化！</p></li><li><p>层序遍历思路类似，相对要麻烦一点点点，拿新结点一层一层的往后面接，这里可以考虑直接用vector加上索引（也可以用queue，但是vector访问简洁一点）</p></li></ul><p>c++没有像python那样的split()函数，所以要自己写该函数来处理数据</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Codec</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    string res<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    序列化</span><span class="token comment" spellcheck="true">//    前序遍历</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    递归出口</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"NULL,"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        前序：中</span>        res<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        前序：左右</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Encodes a tree to a single string.</span>    string <span class="token function">serialize</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 去掉结尾的","</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">///////////////////////////////////////////////////////</span><span class="token comment" spellcheck="true">//反序列化</span><span class="token comment" spellcheck="true">//    将string类的数据根据','进行split</span>    queue<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">split</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        queue<span class="token operator">&lt;</span>string<span class="token operator">></span> q<span class="token punctuation">;</span>        <span class="token keyword">int</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如：123,456,789中，start表示每个数字开始的地方</span><span class="token comment" spellcheck="true">//        注意这里的   i &lt;= data.size()  和  if (i == data.size() ||data[i]==',')</span><span class="token comment" spellcheck="true">//        1,2,3,4,5,6   最后的6后面没有逗号，但我们要把6push进去，因此要 取等于号，且if里面有 ||（或）</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>i<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                start<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    对queue&lt;string>类型的数据用递归</span>    TreeNode<span class="token operator">*</span> <span class="token function">deserializeQueue</span><span class="token punctuation">(</span>queue<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> q<span class="token punctuation">)</span><span class="token punctuation">{</span>        string rootData<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 队列的pop是pop最开头的元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rootData<span class="token operator">==</span><span class="token string">"NULL"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TreeNode<span class="token operator">*</span> root<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>rootData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">=</span><span class="token function">deserializeQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">=</span><span class="token function">deserializeQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Decodes your encoded data to tree.</span><span class="token comment" spellcheck="true">//    调用上面的split函数和deserializeQueue函数</span>    TreeNode<span class="token operator">*</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>string data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        queue<span class="token operator">&lt;</span>string<span class="token operator">></span> Q<span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">deserializeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Your Codec object will be instantiated and called as such:</span><span class="token comment" spellcheck="true">// Codec ser, deser;</span><span class="token comment" spellcheck="true">// TreeNode* ans = deser.deserialize(ser.serialize(root));</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读“自学是门手艺”</title>
      <link href="/2021/07/18/growth/du-zi-xue-shi-men-shou-yi/"/>
      <url>/2021/07/18/growth/du-zi-xue-shi-men-shou-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://lixiaolai.com/#/the-craft-of-selfteaching/?id=%e8%87%aa%e5%ad%a6%e6%98%af%e9%97%a8%e6%89%8b%e8%89%ba" target="_blank" rel="noopener">自学是门手艺</a></p><ul><li>你一定要想办法启动自学，否则你没有未来；</li><li>你把自学当作一门手艺，长期反复磨练它；</li><li>你懂得学、练、用、造各个阶段之间的不同，以及针对每个阶段的对应策略；</li><li>面对 “过早引用” 过多的世界，你有你的应对方式；</li><li>你会 “囫囵吞枣”，你会 “重复重复再重复”，你深刻理解 “读书百遍其义自见”；</li><li>以后你最擅长的技能之一就是拆解拆解再拆解；</li><li>你用你的拆解手艺把所有遇到的难点都拆解成能搞定的小任务；</li><li>自学任何一门手艺之前你都不会去问 “有什么用”，而是清楚地知道，无论是什么只要学会了就只能也必然天天去用；</li><li>你没有刚需幻觉，你也没有时间幻觉，你更没有困难幻觉，反正你就是相对更清醒；</li><li>不管你新学什么手艺，你都知道只要假以时日你就肯定能做好，因为所有的手艺精湛，靠的只不过是充足的预算；</li><li>你知道如何不浪费生命，因为只要不是在刻意练习、不是在刻意思考，那就是在 “混时间”；</li><li>你总是在琢磨你能做个什么新作品；</li><li>你刻意地使用你的作品作为有效社交工具，也用作品去过滤无效社交；</li><li>你乐于分享，乐于阅读也更乐于写作 —— 因为这世界怎么帮助你的，你就想着要怎样回报；</li><li>你把全面和完整当作最高衡量标准，也用这个标准去克制、应对自己的注意力漂移；</li><li>你会不断自学新的手艺，因为你越来越理解单一技能的脆弱，越来越理解多项技能的综合威力；</li><li>你越来越依赖互联网，它是你最喜欢的 “书”，而 Google 是你最好的朋友 —— 他总是能帮你找到更好的老师；</li><li>偶尔，你会学会没人教、没人带、甚至没书可参考的手艺，别人都说你 “悟性” 高，可你自己清楚地知道那其实是怎么回事；</li><li>你越来越明白，其实没什么 “秘密”，越简单、越朴素的道理越值得重视；</li><li>你发现你用来思考的时间越来越多 —— 准确地讲，是 “琢磨”…… 只不过是因为你真会琢磨了 —— 你很清楚你应该花时间琢磨的是什么。</li></ul><hr><h1 id="书摘"><a href="#书摘" class="headerlink" title="书摘"></a>书摘</h1><ul><li><p>自学能力，对每个个体来说，是这个变化频率和变化幅度都在不断加大的时代里最具价值的能力。具备这个能力，不一定能直接增加一个人的幸福感（虽然实际上常常确实能），但它一定会缓解甚至消除一个人的焦虑 —— 若是在一个以肉眼可见的方式变化着的环境里生存，却心知肚明自己已然原地踏步许久，自己正在被这个时代甩在身后，谁能不焦虑呢？ </p></li><li><p>自学没有什么 “秘诀”。它是一门手艺，并且，严格意义上来讲，它只是一门手艺。</p></li><li><p>手艺的特点就是无需天分。手艺的特点就是熟练程度决定一切。 </p></li><li><p>十岁不到的时候，绝大多数小朋友就 “看穿” 了父母，后来再 “看穿” 了老师…… 发现他们整天说的都是他们自己做不到的事情…… 于是误以为自己 “看穿” 了整个世界。那时候小朋友们还没学、或者没学好概率这个重要知识，于是，他们并不知道那只不过是 99% 的情况，而且更不知道 “因素的重要性与它所占的比例常常全无正相关”，所以当然不知道那自己尚未见到的 1% 才可能是最重要的……</p></li><li><p>于是，99% 的小朋友们一不小心就把自己 “搭了进去”：* 不仅讨厌老生常谈，而且偏要对着干，干着干着就把自己变成了另外一个属于那 99% 的另外一个老生…… </p></li><li><p>历史上留下来的所有关于自学的技巧，都是人类史上最聪明的人留下来的 —— 你我这样的人，照做就可以了…… 现在你明白怎么回事了吧？</p></li><li><p>记住罢 ——千万不要一不小心就把自己搭进去…… </p></li><li><p>时间就是这样，我们没办法糊弄它。而有了 git 这样的工具之后，我们在什么时候做了什么样的工作，是很容易证明的 —— 这对我们来说真是天大的好事。 </p></li><li><p>为什么一定要掌握自学能力？一句话解释清楚：没有自学能力的人没有未来。<em> 有两个因素需要深入考虑：\</em> 未来的日子还很长; * 这世界进步得太快 </p></li><li><p>“你回头看看呗，想想呗，五年前你在做什么？是不是回头一看的时候，五年前就好像是昨天？道理是一样的，五年之后的某一天你回头想今天，也是 ‘一转眼五年就过去’ 了…… 只不过，你今天觉得需要时间太多，所以不肯学 —— 但是，不管你学还是不学，五年还是会 ‘一转眼就过去’ 的…… 到时候再回头，想起这事的时候，没学的你，一定会后悔 —— 事实上，你已经有很多次后悔过 ‘之前要是学了就好了’，不是吗？” </p></li><li><p>只有一样东西真正可靠 —— 自学能力。于是，经年累月，我磨练出了一套属于我自己的本领：只要我觉得有必要，我什么都肯学，学什么都能学会到够用的程度…… 编程，我不是靠上课学会的；英语，不是哪个老师教我的；写作，也不是谁能教会我的；教书，没有上过师范课程；投资，更没人能教我 —— 我猜，也没人愿意教我…… 自己用的东西自己琢磨，挺好。 </p></li><li><p>人学习就好像是动物进化一样…… 很多人很早就开始停止了进化，本质上跟猴子没啥区别。 </p></li><li><p>刚开始，英语就好像一层毛玻璃，隔在你和你很想要了解的内容之间。然而，由于你对那内容的兴趣和需求是如此强烈，乃至于即便隔着毛玻璃你也会挣扎着去看清楚…… 挣扎久了（其实没两天就不一样），你的 “视力” 就进化了，毛玻璃还在那里，但你好像可以穿透它看清一切……</p></li><li><p>自学编程，也算是一举两得了！ </p></li><li><p>人们阅读的选择很不同而已。有自学能力的人和没有自学能力的人，在这一点上很容易分辨：<strong>有自学能力的人，选择阅读 “有繁殖能力” 的内容</strong>；没有自学能力的人，阅读只是为了消磨时光…… 我把那些能给你带来新视野，能让你改变思考模式，甚至能让你拥有一项新技能的内容称之为 “有繁殖能力的内容”。</p></li><li><p>人都一样，拥有什么样的能力之后，就会忍不住去用，甚至总是连下意识中也要用。 </p></li><li><p>那些靠阅读机器算法推送的内容而杀时间的人，恰恰就是因为他们有阅读能力才去不断地读，读啊读，像是那只被打了兴奋剂后来死在滚轮上的小白鼠。如果这些人哪怕有一点点自学能力，那么他们很快就会分辨出自己正在阅读的东西不会刺激自己的产出，只会消磨自己的时间；那么，他们就会主动放弃阅读那些杀时间的内容，把那时间和精力自然而然地用在筛选有繁殖能力的内容，让自己进步，让自己习得更多技能上去了。</p></li><li><p>所以，只要你有一次 “只靠阅读习得一项新技能” 的经验，你就变成另外一个人了。你会不由自主、哪怕下意识里都会去运用你新习得的能力…… 从这个角度看，自学很上瘾！能上瘾，却不仅无害，还好处无穷，这样的好事，恐怕也就这一个了罢。 </p></li><li><p>绝大多数情况下，没人能教你，也不一定有人愿意教你…… 到最后，你想学会或你必须学会什么东西的时候，你只能靠阅读！ —— 因为其实你谁都靠不上…… </p></li><li><p>对于自学能力强、有很多自学经验的人来说，速成往往真的是可能、可行的。因为他们已经积累的知识与经验会在习得新技能时发挥巨大的作用，乃至于他们看起来相对别人花极少的时间就能完成整个自学任务。也就是说，将来的那个已经习得自学能力、且自学能力已经磨练得很强的你，常常真的可以做到在别人眼里 “速成”。 </p></li><li><p>首先是要学会一个重要的技能：读不懂也要读完，然后重复很多遍。这是最重要的起点。听起来简单，甚至有点莫名其妙 —— 但以后你就会越来越深刻地体会到，这么简单的策略，绝大多数人竟然不懂，也因此吃了很多很多亏。</p></li><li><p>充满了过早引用的知识结构，就不可能是一遍就读懂的。 </p></li><li><p>绝大多数自学能力差的人，都是把一切都当作小说去看，随便看看，粗略看看…… </p></li><li><p>开始 “总结、归纳、整理、组织 关键知识点” 的工作。* 这个自己动手的过程其实真的 “很麻烦”，但它实际上是帮助自己强化记忆的过程，并且对自我记忆强化来说，绝对是不可或缺的过程。习惯于自己动手做罢！习惯于自己不断修改罢！ </p></li><li><p>先关注使用再研究原理。不管怎么样，先用起来，反正，研究透原理，不可能马上做到，需要时间漫漫。用错了没关系，改正就好。用得不好没关系，用多了就会好。只要开始用起来，理解速度就会加快 —— 实践出真知，不是空话。</p></li><li><p>有的时候，就是因为没有犯过错，所以不可能有机会改正，于是，就从未做对过。 </p></li><li><p>自学的过程，实际上需要拆解为以下四个阶段，虽然它们之间常常有部分重叠：学练用造 </p></li><li><p>第一部分的内容，基本用来展示 “学” 的过程。学，就需要重复，甚至很多次重复，尤其是在面对充满了 “过早引用” 现象的知识结构的时候。</p></li><li><p>反复学，最锻炼的是 “归纳整理” 的能力。而且，最有意思的，这在大多数情况下还是自动发生的 —— 只要你不断重复，你的大脑会在不自主之间把那些已经掌握的知识点与当前尚未掌握的知识点区分开来，前者处理起来轻松容易，甚至可以跳过；后者需要投入更多的注意力去仔细处理…… 在这个过程中，绝大多数的归纳整理工作自动完成了。最后再加上一点 “刻意的、收尾性的归纳总结整理工作” —— 大功告成。 </p></li><li><p>到了第二部分，我们终于进入 “用” 的阶段 —— 嗯？“练” 怎么跳过去了？没有，我们的策略是，以用带练 —— 在不断应用的过程中带动刻意练习。</p></li><li><p>练和学，是多少有些重合部分的。比如，你可能反复 “学” 了第一部分两三遍，而后就进入了第二部分，开始接触 “用”，在 “用” 的过程中，只要有空，或者只要有需求，你就可能回去 “复习” 一遍第一部分的内容…… </p></li><li><p>真正开始自学且不断自学之后，刚开始总是觉得时间不够用 —— 因为当时的自己和其他人没什么太大区别。随着时间的推移，不仅差异会出现，自我认知差异也开始越来越明显：别人的时间都白过了，自己的时间都有产出……到了下一个阶段，在其他人不断焦虑的情况下，自己却开始越来越淡定：因为早已习惯了投入大量时间换取新技能……</p></li><li><p>等后来真的开始用这些技能做事，不断地做其他人因为时间白过了或者因为投入的 “预算” 不够而学不会做不到的事情 —— 并且还能充分明白，这并不是自己聪明、有天分的结果；只不过是做了该做的事情，投入了该投入的 “成本” 和 “预算” 而已…… </p></li><li><p>许多年前，资质平庸的我，一直苦恼一件事：为什么自己无论干什么都笨手笨脚、差这儿差那儿的…… 为什么与此同时，总是能看到另外一些人，给人感觉 “一出手就是高手” 呢？！* 这事折磨了我好多年…… 直到后来我当了老师，每年面前流过几万名学生之后，我才 “羞耻” 地反应过来：</p><ul><li>我花在刻意练习上的时间太少了；</li><li>并且，也没有刻意思考哪些地方我应该去刻意练习。</li></ul></li><li><p>而那些看起来 “一出手就是高手” 的人，则恰恰相反，他们不仅花很多时间刻意练习，还总是刻意思考在哪些地方尤其要刻意练习 —— 就是这一点差别造成了那么大的差距。 </p></li><li><p>不做刻意练习的人就是在混时间。 需要刻意练习的地方，因人而异。有的人就是不可能让 “武” 字带把刀，不需要刻意练习，但另外一些人不是。有些人就是朗读十分钟的效果跟别人朗读一小时的效果一样地好，但更多的人并不是……然而，这并不是所谓的 “天分” 差异，这大抵上只相当于正态分布坐标略不相同而已。每个人都一样，都有各自必须刻意练习的地方，都有对别人来说无比容易可偏偏对自己来说就是很难的地方，而且，在这件事上，大家的点虽然各不相同，但总体上需要刻意练习的部分比例都差不多 —— 虽然说不清楚那个比例到底是多少。 </p></li><li><p>所谓 “刻意练习”，其实是 “刻意思考哪里需要刻意练习” 之后最自然不过的事情 —— 所以，“刻意思考” 才是关键。 </p></li><li><p>人们常说：* 凡事，就怕琢磨…… 那些高手，无一例外都是善于琢磨的人…… 可是，他们在琢磨什么呢？为什么他们会琢磨那些事呢？</p></li><li><p>你看，所谓的琢磨，其实真的不是很难，只不过，在此之前，你不知道该琢磨什么而已，一旦知道了，剩下的都再自然不过，都会自然而然地发生 —— 事实上，所谓的差别差距，只不过一线间而已。 </p></li><li><p>拆解， 这么简单的两个字，在人生中的作用重大到不可想像…… 而且它也的确是自学能力中最重要的底层能力之一。 </p></li><li><p>分清概念的方法是什么？其实也不难，就是不断拆解，不断主动整理。每次用图表整理那些概念的时候，就会发现比原来更清晰一些，多次整理，最终就谙熟于心了。 </p></li><li><p>写程序的主要工作量，往往并非来自于在编辑器里敲代码那个阶段。更多的工作量，其实在于如何才能在脑子里把整个流程拆解清楚，考虑到各个方面…… 随着时间的推移，你花在 “拆解” 上的时间会越来越多，因为所有大的工程，都可以被拆解成小工程 —— 于是，也为了做出大工程，拆解的工作首先是必须，其次是最耗时费力但最值得的。 </p></li><li><p>“刚需幻觉” 的根源在于：你不会的东西，对你来说感觉上就不是刚需。 只有真正掌握了那个技能之后，那个技能才会 “变” 成刚需。 </p></li><li><p>在决定学任何东西的时候，最好不要去咨询身边的人 —— 除非你确定对方是高手，最好是自学高手。否则，你遇到的永远是怀疑、打击、甚至嘲笑。最令人遗憾、最令人无奈的是，那些人其实也不是坏人，他们其实也不是故意，他们只是被自己的 “刚需幻觉” 误导了而已，他们（竟然）以为所有人都和他们一样…… 然后，若是你（居然）听信了他们的话，那就实在是太惨了！ </p></li><li><p>对任何一项技能来说，刚需是自学的结果，而不是自学的原因。 </p></li><li><p>做个自驱动的人，而非被外部驱动的被动的人。 这基本上是个越早建立越好的习惯。绝大多数人一生都是被动者，终生只是被外界驱动而已。所以，他们会在某一时刻，“发现” 某个技能是刚需，然后再去学，但可惜却肯定的是，到那时候预算总是并不充裕，总是捉襟见肘。 </p></li><li><p>那些 “貌似一出手就已然是高手” 的人就是在这一方面超越了绝大多数人 —— 在每个层面上，他们都学习得更全面，练习得更全面，使用得更全面，在使用此技能去创造的时候，思考得也就自然更为全面。于是，就产生了 “全面碾压” 的效果。然而，这是很难被人发现的 “秘密”，因为 “全面” 这个事实，只存在于这些高人的大脑之中，很难被展示出来…… 而他们不会想到这是个什么 “秘密” —— 因为他们一直就是这么做的，他们会误以为所有人都是这么做的。 </p></li><li><p>如果一个人有过一次只通过阅读书籍即获得一项新技能的体验，那么，他们内心深处（更准的说法是大脑的底层操作系统）的那个成本计算方法就会发生改变，心里想的更可能是：</p><ul><li>这肯定是有用的，一旦学会，收益可不是几十块钱的书价或几百块课价那么一点点……</li><li>至于是否能学会，主要看我投入的时间精力预算有多少…… </li></ul></li><li><p>书是成本最低的东西，比起最终的收益来讲更是不值一提。</p></li><li><p>更为重要的是，一本书绝对不够 —— 无论是谁写的，无论那个作者多么著名，影响力有多大…… 因为，书也好、教程也罢，这种东西就是有 “篇幅限制” 的。更为关键的是，每个作者都有不一样的视角、不一样的出发点和不一样的讲解方式、组织方法。 </p></li><li><p>当你搞明白了一本书，后面再多读哪怕很多本的时间精力成本都是很低的，但每多读一本，都能让你在这个话题中变得更为完整。 </p></li><li><p>提高对所学知识技能的 “全面程度”，有个最狠的方法 —— 再次说出来不惊人，但实际效果惊到爆：教是最好的学习方法。 </p></li><li><p>我个人最看重的个人品质之一，就是有没有像样的作品。 与有像样作品的人打交道，总是非常值得。并且，跟他们打交道也不费劲，都是思考非常通透的人，通常沟通能力极强。哪怕沟通起来貌似费劲的那一小部分，事实上也不是难以沟通，那只不过是人家简单朴实而已。 </p></li><li><p>我的笔记本主要用来做一件事：罗列整理那些为了做到 “全面完整” 而必须优先做的事。用列表也好、或者用图表也罢，反正都是要不断整理修订的，而它的存在，给了我一个优先级：</p><ul><li>除了这上面罗列的这些东西之外，在当前时间段，别的都不如它们重要。 </li></ul></li><li><p>注意力要放到应该放的地方 </p></li><li><p>能管理好自己的时间的人，学英语学起来更容易…… </p></li><li><p>所谓的价值观，定义很简单：你的价值观，就是你认为什么比什么更重要。 </p></li><li><p>一旦你把整个互联网当作一本大 “书”，把 Google 当作入口，实际发生的效果是：</p><ul><li><p>你把 “老师” 这个角色去中心化了……</p></li><li><p>一方面 “老师” 这个角色的负担降低了，他们不用管你是谁，也不用管你怎么样了，他们该干嘛就干嘛；而另外一方面则对你更重要 —— 你学不同的东西，就可以找不同的老师；即便是相同的东西，你也可以找很多老师；对于任何一个老师，你都可以 “弱水三千只取一瓢”，也就是说，只挑他最厉害的部分去学…… 不就是多买几本书吗？不就是多搜索几次、多读一些文档吗？</p></li></ul></li><li><p>最后，你竟然还有最厉害的一个小招数：无论学会什么，都要进一步刻意思考：这东西我还能用在哪儿呢？于是，你 “一下子” 就升级了 —— 用这样的方式，相对于别人，你最可能 “学会几乎任何一个没人教、没人带，甚至没有书可参考的技能”……</p></li><li><p>你看看自己的路径罢：从 “不得不把自己当作老师去教自己” 开始 —— 虽然起步是不得不，但这个 “不得不”，恰好是后来你变得更为强大的原因和起点 </p></li><li><p>没什么不能自学的，反正都只不过是手艺 —— 只不过，我们每个人都受限于自己的时间精力而已。所以，若是你正在读高一，正在读大一，那就好好珍惜自己有机会可以随意设置充裕预算的时光罢。若是你已为人父母，那就想办法用自己的行动影响下一代罢。然而，其实更为重要的是，无论什么时候，都要这么想：若是还有很长的未来，现在真不算晚……</p></li><li><p>自学不过是一门手艺，而且还是谁都能掌握的。不要 “试试” 而已，而是 “直接开干” —— 这样才好。</p></li><li><p>最后还有个需要补充的是：很多人崇尚 “刻苦”，并且刻意强调其中的 “苦” —— 古训中所谓的 “吃得苦中苦，方为人上人” —— 这一点我并不认同，而且还是深刻地不认同。我的观察是，所谓的 “苦”，是那些完全不会自学的人对自学者的所作所为的错误理解。</p></li><li><p>自学一点都不苦，道理也很简单：因为自学者是自发去学的，原动力在于自己。而不像其他人，是被动地学，原动力并非在于自己。由于原动力在于自己，遇到困难时，当然同样苦恼；可不一样的是，有持续的原动力去克服那些困难，于是，总是在不断克服困难之后获得更大的愉悦、更大的满足感。</p></li><li><p>所以，“刻”，我们很认同，刻意地练习、刻意地思考，刻意地保持好奇心，刻意地去学习一些看起来与当前所掌握的手艺完全不相干的知识…… 至于 “苦” 么，那是别人的误解，我们自己开心着呢 —— 无所不在、无处诉说的幸福。 </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Growth </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reading List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章：高楼扔鸡蛋_进阶</title>
      <link href="/2021/07/15/labuladong/di-er-zhang-gao-lou-reng-ji-dan-jin-jie/"/>
      <url>/2021/07/15/labuladong/di-er-zhang-gao-lou-reng-ji-dan-jin-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://labuladong.gitbook.io/algo/mu-lu-ye-2/mu-lu-ye-4/gao-lou-reng-ji-dan-jin-jie" target="_blank" rel="noopener">labuladong高楼扔鸡蛋</a></p><p><a href="https://www.youtube.com/watch?v=mLV_vOet0ss" target="_blank" rel="noopener">李永乐老师的讲解</a><br><a href="https://www.youtube.com/watch?v=aPY6sps_Q44" target="_blank" rel="noopener">花花酱 LeetCode 887</a></p><p><a href="https://leetcode-cn.com/problems/super-egg-drop/solution/6xing-dai-ma-python3-okn-by-jackwu/" target="_blank" rel="noopener">887. 鸡蛋掉落</a></p><h1 id="方法1-dp数组未优化的暴力解法（会超时）"><a href="#方法1-dp数组未优化的暴力解法（会超时）" class="headerlink" title="方法1:dp数组未优化的暴力解法（会超时）"></a>方法1:<a href="https://leetcode.com/problems/super-egg-drop/discuss/159079/Python-DP-from-kn2-to-knlogn-to-kn" target="_blank" rel="noopener">dp数组未优化的暴力解法（会超时）</a></h1><p>分成两个子楼重新按照1层计数</p><ul><li>dp数组的含义：dp[i][j]表示i个蛋，要确定j层楼，最小的扔鸡蛋次数</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">superEggDrop</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type k: int        :type n: int        :rtype: int        """</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>             dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># if __name__ == '__main__':</span><span class="token comment" spellcheck="true">#     k1=2</span><span class="token comment" spellcheck="true">#     n1=6</span><span class="token comment" spellcheck="true">#     so=Solution()</span><span class="token comment" spellcheck="true">#     print(so.superEggDrop(k1,n1))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="方法2-用一个k状态优化方法1的第三层for循环-（todo）"><a href="#方法2-用一个k状态优化方法1的第三层for循环-（todo）" class="headerlink" title="方法2: 用一个k状态优化方法1的第三层for循环 （todo）"></a><a href="https://leetcode.com/problems/super-egg-drop/discuss/159079/Python-DP-from-kn2-to-knlogn-to-kn" target="_blank" rel="noopener">方法2: 用一个k状态优化方法1的第三层for循环 （todo）</a></h1><blockquote><p>choosing k_1…k_N for each dp[i][1…N]<br>To go one step further, till now, we are still finding the optimal floor k from 1 to j for each dp[i][j]. But is this really the smallest range we can narrow? In fact, we can see that the optimal floor k for each dp[i][j] increases as j increases. This means that once we get the optimal k for dp[i][j], we can save current k value and start the next round of for-loop directly, instead of initiating k from 0 again. In this way, in the third for-loop, k will go from 1 to N only once as j in the second for-loop goes from 1 to N. The total time complexity will be O(kn). The code is shown below:</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">superEggDrop</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> K<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type K: int        :type N: int        :rtype: int        """</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>K<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> K<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> K<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            k <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">while</span> k <span class="token operator">&lt;</span> j<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">and</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token punctuation">]</span> <span class="token operator">></span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    k <span class="token operator">+=</span> <span class="token number">1</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>K<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="方法3-换个角度定义dp数组的含义"><a href="#方法3-换个角度定义dp数组的含义" class="headerlink" title="方法3:换个角度定义dp数组的含义"></a><a href="https://leetcode.com/problems/super-egg-drop/discuss/158974/C++JavaPython-2D-and-1D-DP-O(KlogN)/245317" target="_blank" rel="noopener">方法3:换个角度定义dp数组的含义</a></h1><p>I think we should keep in mind what the dp[m][k] means, it means the <strong>highest levels we can confirm</strong>. Then, we take 1 move to a floor and the egg will break or not. If the egg breaks, it means we should find the answer under this level, and it also means this level can not be higher than dp[m-1][k-1] + 1, otherwise we will unable to get the answer. If the egg doesn’t break, we will use the k eggs and m-1 moves to go higher. So the highest level we can touch is dp[m-1][k-1] + 1 + dp[m-1][k]. We can find the answer use k eggs and m moves in any level which not higher than it.</p><p>始终把楼当成整体</p><ul><li>dp数组的含义：dp[i][j] 表示用j个鸡蛋扔i次可以测出的最大层数（题目求k个鸡蛋，扔多少次，可以测出（超过或等于）n层）<blockquote><p>Q:为什么dp[i][j]数组不定义为用i个鸡蛋扔j次可以测出的最大楼层？（其实也可以，但需要竖着遍历table，有点别扭）<br>A: 假设1个蛋扔5次可以测出n层，5个蛋扔2次也可以测出n层。由于问题是求扔的最少次数，所以我们取的是5个蛋扔2次。因此，每一行表示扔的次数，每一列表示鸡蛋数。在横向遍历dp table时，取到2次5蛋时，return 即可。</p><ul><li>如果不想纠结i和j哪个是蛋数，哪个是扔的次数，把for循环改为<code>while(dp[i][j]&lt;n)</code>循环即可<br><img src="https://i.loli.net/2021/07/17/lbcx5LF4rzC1jtT.png" alt="20210717164515"></li></ul></blockquote></li></ul><ul><li>鸡蛋没碎，鸡蛋数量不变，可用次数减一，dp[i - 1][j]（能测到的最大上层）</li><li>鸡蛋碎了，鸡蛋数量减一，可用次数减一，dp[i - 1][j - 1]（能测到的最大下层）</li><li>1（当前层）</li><li>最大层数 = 上层 + 下层 + 当前层<ul><li>当能测到大于等于n层时，返回i（也就是扔的次数）</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">superEggDrop</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type k: int        :type n: int        :rtype: int        """</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">>=</span> n<span class="token punctuation">:</span>                    <span class="token keyword">return</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//#include&lt;iostream></span><span class="token comment" spellcheck="true">//#include&lt;string></span><span class="token comment" spellcheck="true">//#include &lt;vector></span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//using namespace std;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">superEggDrop</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">>=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 不加这一行，本地编译器可以通过</span>        <span class="token comment" spellcheck="true">// 但在leetcode上编译时（编译器更严格），// 这一行一定要加，随便return个数字就行， return 100之类的</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加这一行只是为了编译通过。函数实际上返回的是i。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int main() {</span><span class="token comment" spellcheck="true">//    int k = 2, n = 6;</span><span class="token comment" spellcheck="true">//    Solution s;</span><span class="token comment" spellcheck="true">//    cout &lt;&lt; s.superEggDrop(k, n) &lt;&lt; endl;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章：以最小插入次数构造回文串</title>
      <link href="/2021/07/15/labuladong/di-er-zhang-yi-zui-xiao-cha-ru-ci-shu-gou-zao-hui-wen-chuan/"/>
      <url>/2021/07/15/labuladong/di-er-zhang-yi-zui-xiao-cha-ru-ci-shu-gou-zao-hui-wen-chuan/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/" target="_blank" rel="noopener">1312. 让字符串成为回文串的最少插入次数</a></p><ul><li>dp数组的含义：对字符串<code>s[i...j]</code> （注意这里是两端闭合的）,最少需要进行dp[i][j]次插入才能变成回文串</li><li>base case：左下角三角形为0，对角线处为0（因为自己本身就是回文串，不需要插入）</li><li>状态转移方程：如果<code>s[i]==s[j]</code>，则<code>dp[i][j]=dp[i+1][j-1]</code>,不需要插入操作，直接从dp[i+1][j-1]转移过来即可；如果<code>s[i]!=s[j]</code>,则取<code>dp[i+1][j]</code>和 <code>dp[i][j-1]</code>的最小值，插入一次操作即可</li><li>最终结果保存在<code>dp[0][n-1]</code>处, 我们用从下到上，从左到右的顺序来填dp表</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minInsertions</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective CPP</title>
      <link href="/2021/07/14/c/effective-cpp/"/>
      <url>/2021/07/14/c/effective-cpp/</url>
      
        <content type="html"><![CDATA[<h1 id="1-让自己习惯C"><a href="#1-让自己习惯C" class="headerlink" title="1. 让自己习惯C++"></a>1. 让自己习惯C++</h1><h2 id="1-视C-为一个语言联邦"><a href="#1-视C-为一个语言联邦" class="headerlink" title="1:视C++为一个语言联邦"></a>1:视C++为一个语言联邦</h2><ul><li>C++以C为基础</li><li>Object-Oriented C++。面向对象编程</li><li>Template C++。泛型编程</li><li>STL。template程序库，各部件紧密配合</li></ul><p><img src="https://i.loli.net/2021/07/14/sDjNbFq96kEJWMl.png" alt><br><img src="https://i.loli.net/2021/07/14/MfO5CQqi3J78wpy.png" alt></p><h2 id="2：尽量以const，enum，inline替换-define"><a href="#2：尽量以const，enum，inline替换-define" class="headerlink" title="2：尽量以const，enum，inline替换#define"></a>2：尽量以const，enum，inline替换#define</h2><ul><li>写#define宏时，为所有实参加上小括号，避免歧义</li><li>有了 consts 、 enums 和 inlines ，我们对预处理器(特别是 #define) 的需求降低了，但并非完全消除。 #include 仍然是必需品，而 #ifdef/#ifndef 也继续扮演控制编译的重要角色（如头文件的防卫式声明）。目前还不到预处理器全面引退的时候，但你应该明确地给予它更长更频繁的假期</li></ul><h2 id="3：尽可能使用const"><a href="#3：尽可能使用const" class="headerlink" title="3：尽可能使用const"></a>3：尽可能使用const</h2><ul><li>只要“某值保持不变” 是事实，就应该用const说出来<br><img src="https://i.loli.net/2021/07/14/CMaAf1zkvHIpRt5.png" alt></li></ul><p><img src="https://i.loli.net/2021/07/14/M156trbOvCFsGHW.png" alt></p><p><img src="https://i.loli.net/2021/07/14/XQ4jDGTNrUPi3Kz.png" alt></p><h2 id="4：确定对象被使用前已先被初始化"><a href="#4：确定对象被使用前已先被初始化" class="headerlink" title="4：确定对象被使用前已先被初始化"></a>4：确定对象被使用前已先被初始化</h2><ul><li>确保每一个构造函数都将对象的每一个成员初始化</li><li>C++ 对”定义于不同的编译单元内的 non-local static对象”的初始化相对次序并无明确定义，所以将non-local static对象搬到自己的专属函数内（该对象在函数内声明为static）<br><img src="https://i.loli.net/2021/07/14/v4PdRTwE6fyeNsb.png" alt></li></ul><h1 id="2-构造-析构-赋值运算"><a href="#2-构造-析构-赋值运算" class="headerlink" title="2. 构造/析构/赋值运算"></a>2. 构造/析构/赋值运算</h1><h2 id="5：了解C-默默编写并调用了哪些函数"><a href="#5：了解C-默默编写并调用了哪些函数" class="headerlink" title="5：了解C++默默编写并调用了哪些函数"></a>5：了解C++默默编写并调用了哪些函数</h2><p><img src="https://i.loli.net/2021/07/14/4EihDB5IjSNwPLA.png" alt></p><ul><li>默默写了构造函数，拷贝构造函数，拷贝赋值函数，析构函数</li><li>如果在类中自己声明了一个构造函数，则编译器<strong>不再为它创建default构造函数</strong>。如果自己没有写拷贝构造函数和拷贝赋值函数，则编译器会为其创建（仅限于生出的代码是<strong>合法</strong>的）<ul><li>如c++不允许“让reference改指向不同对象”，不允许更改const成员。这时<code>p=s</code>的赋值就是错误的</li><li>p的nameValue引用已经和newDog绑定，s同理。所以不能<code>p=s</code></li><li>p的objectValue是const的，不能随便改。所以不能<code>p=s</code></li></ul></li></ul><p><img src="https://i.loli.net/2021/07/14/DfFXzsY78OyJ6cB.png" alt><br><img src="https://i.loli.net/2021/07/14/mS2ey5RuiWAtHTd.png" alt></p><ul><li>如果某个 base classes 将 copy assignment 操作符声明为 private ，编译器将拒绝为其 derived classes 生成一个 copy<br>assignment 操作符</li></ul><h2 id="6：若不想使用编译器自动生成的函数，就该明确拒绝"><a href="#6：若不想使用编译器自动生成的函数，就该明确拒绝" class="headerlink" title="6：若不想使用编译器自动生成的函数，就该明确拒绝"></a>6：若不想使用编译器自动生成的函数，就该明确拒绝</h2><p>有些东西是独一无二的，如房子HomeForSale，这时并不希望它可以被copy</p><ul><li><p>如果你不声明 copy构造函数或 copy assignment 操作符，编译器可能为你产出一份，于是你的 class 支持 copying。如果你声明它们，你的 class还是支持 copying。 但这里的目标却是要<strong>阻止</strong> copying!</p></li><li><p>解决方法1:将成员函数声明为 private 而且故意不实现它们（只声明了但没有实现，当然不可以copy啦）<br><img src="https://i.loli.net/2021/07/14/v3AVtxNhHurqLX4.png" alt></p></li><li><p>解决方法2：只要将 <strong>copy构造</strong>函数和 <strong>copy assignment操作符</strong>声明为 <strong>private</strong> 就可以办到，但不是在 HomeForSale 自身，而是在一个<strong>专门为了阻止 copying 动作而设计的 base class 内</strong></p><ul><li>子类如果写自己的拷贝函数，则需要完整地把父类部分也实现（见条款12）。由于父类部分包含在子类中，而父类的copy函数是私有的，因此子类无法实现父类部分的copy，所以编译器也不会允许子类的拷贝</li></ul></li></ul><blockquote><ul><li>HomeForSale类继承了基类。HomeForSale类在建造自己的copy构造和copy assignment函数函数时，需要把基类部分也实现。然而基类的copy构造和copy assignment函数是私有的，不能为HomeForSale类所用，因此他自己也无法copy构造和copy assignment<ul><li>copy constructor of ‘HomeForSale’ is implicitly deleted because base class ‘Uncopyable’ has an inaccessible copy constructor</li></ul></li></ul></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//如果把Uncopyable类的private注释取消，则编译器允许HomeForSale h3(h1)、h2=h1等操作</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Uncopyable</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    允许子类对象构造和析构</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token function">Uncopyable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Uncopyable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    但阻止子类对象copy</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token function">Uncopyable</span><span class="token punctuation">(</span><span class="token keyword">const</span> Uncopyable <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Uncopyable <span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Uncopyable <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">HomeForSale</span> <span class="token operator">:</span> <span class="token keyword">private</span> Uncopyable <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    HomeForSale h1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//   不允许拷贝和赋值</span><span class="token comment" spellcheck="true">//    HomeForSale h2=h1;</span><span class="token comment" spellcheck="true">//    HomeForSale h3(h1);</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/07/14/JN3kEm5XwVlpnqg.png" alt></p><h2 id="7：为多态基类声明virtual析构函数"><a href="#7：为多态基类声明virtual析构函数" class="headerlink" title="7：为多态基类声明virtual析构函数"></a>7：为多态基类声明virtual析构函数</h2><blockquote><ul><li>“给base Class一个virtual析构函数”这个规则只适用于带多态性质的base class身上（<code>Base* pBase = new Derived</code>）。这种base class的设计<strong>目的是为了用来“通过base class接口处理 derived class 对象”。</strong> <ul><li>比如有一个表示形状的Shape类，这个类中有一个virtual的<code>area()</code>函数，用来计算形状的面积。Shape类有两个子类：矩形Rectangle类和三角形Triangle类，这两个子类中分别实现了各自的计算面积函数<code>area()</code>。</li><li>对客户端而言，它只需要关注base class的接口即可，用这个接口即可处理相应的 derived class 对象。根据基类指针指向的不同对象 （<code>Base* pBase = new Rectangle</code>或者<code>Base* pBase = new Triangle</code>），自动调用各自的面积计算函数</li></ul></li><li>因为<code>Base* pBase = new Derived</code>是把一个<strong>派生类对象</strong>的地址赋值给了基类指针，在销毁时，也需要完整地销毁这个对象。<ul><li>如果基类的析构函数设为virtual，在销毁时，由于多态的性质，会先调用派生类的析构函数，然后调用基类的析构函数，实现了完全销毁</li><li><del>如果基类的析构函数不是virtual，则在销毁时，只调用了基类的析构函数，派生类部分无法被销毁。所以属于部分销毁，出现了内存泄漏，这种做法是不可取的 ~</del></li><li>所以如果一个基类中有virtual的函数，说明这个基类带有多态性质，会出现基类指针指向派生类对象的情况。**为了达到完全销毁，应该将基类的析构函数设为virtual</li></ul></li></ul><p>**</p></blockquote><ul><li>任何class 只要带有 virtual 函数（多态基类表现：它希望子类根据各自情况去实现该函数）都几乎确定应该也有一个<strong>virtual析构</strong>函数</li><li>如果 class 不含 virtual 函数，通常表示它并不意图被用做一个base class。当 class不企图被当作base class，就不要把析构函数设为virtual（如条款6的Uncopyable基类）</li><li>欲实现出 virtual 函数，对象必须携带某些信息，主要用来在运行期决定哪一个virtual 函数该被调用。这份信息通常是由一个所谓 vptr (virtual table pointer) 指针指出。 vptr 指向一个由函数指针构成的数组，称为 vtbl ( virtual table) ;每一个带有virtual函数的 class 都有一个相应的 vtbl。当对象调用某一virtual 函数，实际被调用的函数取决于该对象的 vptr 所指的那个vtbl一一编译器在其中寻找适当的函数指针</li></ul><p><img src="https://i.loli.net/2021/07/15/qZU7CYNsJy5Dw9t.png" alt="图片来自侯捷老师讲义_高级编程下_P51"></p><ul><li>通过在基类中<strong>将析构函数定义成虚函数</strong>才能确保执行正确的析构函数版本<ul><li>现在有一个基类Base，和一个派生类Derived：public Base，用一个基类的指针指向派生类的对象：Base* pBase = new Derived。在delete pBase时，如果Base的析构函数为虚，则会先调用Derived的析构函数，再调用Base的析构函数（像拆包裹一样，先拆外面的，再拆里面的）。如果Base的析构函数非虚，则只会调用Base的析构函数，造成“局部销毁”对象，导致资源泄露<br><img src="https://i.loli.net/2021/07/09/BLPbJTj3UvoHDlC.png" alt="c++ primer P556"></li></ul></li></ul><p>示例：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">a</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"delete a"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token operator">:</span> <span class="token keyword">public</span> a<span class="token punctuation">{</span>    <span class="token operator">~</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"delete b"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    a <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token keyword">new</span> b<span class="token punctuation">;</span>    <span class="token keyword">delete</span> pa<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果输出</span><span class="token comment" spellcheck="true">//delete b</span><span class="token comment" spellcheck="true">//delete a</span><span class="token comment" spellcheck="true">// 删除掉a类中的virtual 修饰这样只会调用a类的析构函数，造成局部销毁，导致资源泄露</span><span class="token comment" spellcheck="true">// 结果输出</span><span class="token comment" spellcheck="true">//delete a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>polymorphic （带多态性质的） base classes 应该声明一个 virtual 析构函数。<strong>如果 class 带有任何 virtual 函数，它就应该拥有一个 virtual 析构函数</strong></li><li>Classes 的设计目的如果不是作为 base classes 使用，或不是为了具备多态性&gt; （polymorphically） ，就不该声明 virtual 析构函数</li></ul></blockquote><h2 id="8：别让异常逃离析构函数（待）"><a href="#8：别让异常逃离析构函数（待）" class="headerlink" title="8：别让异常逃离析构函数（待）"></a>8：别让异常逃离析构函数（待）</h2><blockquote><ul><li>构函数绝对不要吐出异常。如果一个被析构函数调用的函数可能抛出异常，析构函数应该捕捉任何异常，然后吞下它们（不传播）或结束程序</li><li>如果客户需要对某个操作函数运行期间抛出的异常做出反应，那么 class 应该提供一个普通函数（而非在析构函数中）执行该操作</li></ul></blockquote><h2 id="9：绝不在构造和析构过程中调用virtual函数"><a href="#9：绝不在构造和析构过程中调用virtual函数" class="headerlink" title="9：绝不在构造和析构过程中调用virtual函数"></a>9：绝不在构造和析构过程中调用virtual函数</h2><ul><li>由于base class构造函数的执行更早于derived class 构造函数，当 base class 构造函数执行时 derived class 的成员变量<strong>尚未初始化</strong>。这会导致不明确行为。”要求使用对象内部尚未初始化的成分”非常危险，所以 C++ 不让你走这条路</li><li>唯一能够避免此问题的做法就是：<strong>确定你的构造函数和析构函数都没有(在对象被创建和被销毁期间)调用virtual 函数</strong>，而它们调用的所有函数也都服从同一约束</li><li>如果想在每次子类继承基类时，都能有适合于该子类的打印函数被调用，则将该函数设为non-virtual，然后要求 derived class 构造函数传递必要信息给 Base类的构造函数，而后那个构造函数便可安全地调用 non-virual 信息。<ul><li>换句话说，由于你无法使用 virtual 函数从 base classes 向下调用，在构造期间，你可以藉由”令 derived classes 将必要的构造信息向上传递至 base class 构造函数”替换之而加以弥补</li></ul></li></ul><p>示例1：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>logInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>logInfo<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Base<span class="token operator">::</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>logInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printInfo</span><span class="token punctuation">(</span>logInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Base<span class="token operator">::</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>logInfo<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> logInfo <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Derived1</span> <span class="token operator">:</span> Base <span class="token punctuation">{</span> <span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Derived1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a_1<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">a1</span><span class="token punctuation">(</span>a_1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token string">"This is int information"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> a1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Derived2</span> <span class="token operator">:</span> Base <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Derived2</span><span class="token punctuation">(</span><span class="token keyword">double</span> b_1<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">b1</span><span class="token punctuation">(</span>b_1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token string">"This is double information"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">double</span> b1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Derived1 <span class="token function">derived1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// This is int information</span>    Derived2 <span class="token function">derived2</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// This is double information</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例2（与本条款对应的代码）：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Transaction</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>logInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">logTransaction</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>logInfo<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基类的构造函数内调用了logTransaction()函数，用来记录log信息</span>Transaction<span class="token operator">::</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>logInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">logTransaction</span><span class="token punctuation">(</span>logInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//打印出log信息</span><span class="token keyword">void</span> Transaction<span class="token operator">::</span><span class="token function">logTransaction</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>logInfo<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> logInfo <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">BuyTransaction</span> <span class="token operator">:</span> <span class="token keyword">public</span> Transaction <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    子类的构造函数</span><span class="token comment" spellcheck="true">//    子类继承了父类，在构造函数中，也要完整地初始化子类的基类part</span><span class="token comment" spellcheck="true">//    利用辅助函数将子类的信息传递到父类的构造函数中</span>    <span class="token function">BuyTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token function">createLogString</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> string parameters<span class="token punctuation">;</span>    <span class="token keyword">static</span> string <span class="token function">createLogString</span><span class="token punctuation">(</span>string parameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> parameters<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在类外和函数外初始化static类型的的private变量</span>string BuyTransaction<span class="token operator">::</span>parameters <span class="token operator">=</span> <span class="token string">"logInformation"</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    BuyTransaction b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//logInformation</span><span class="token comment" spellcheck="true">//    子类对象调用了父类的non-virtual函数</span>    b<span class="token punctuation">.</span><span class="token function">logTransaction</span><span class="token punctuation">(</span><span class="token string">"Derived object call Base non-virtual function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Derived object call Base non-virtual function</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/07/15/K9JopHPO2nwW4fe.png" alt></p><h2 id="10：令operator-返回一个reference-to-this"><a href="#10：令operator-返回一个reference-to-this" class="headerlink" title="10：令operator=返回一个reference to *this"></a>10：令operator=返回一个reference to *this</h2><ul><li>为了实现”连锁赋值”，赋值操作符必须返回一个reference指向操作符的左侧实参</li><li>适用于所有赋值相关运算，如+=等</li></ul><p>以Base类为例，_返回类型是个reference_，指向当前对象</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// </span>Base<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Base<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回左侧对象</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11：在operator-中处理“自我赋值”"><a href="#11：在operator-中处理“自我赋值”" class="headerlink" title="11：在operator=中处理“自我赋值”"></a>11：在operator=中处理“自我赋值”</h2><ul><li>如果某段代码操作 pointers 或 references 而它们被用来”指向多个相同类型的对象”，就需考虑这些对象是否为同一个<br><img src="https://i.loli.net/2021/07/16/Uny8peRGL7NoTXv.png" alt></li></ul><h2 id="12：复制对象时勿忘其每一个成分"><a href="#12：复制对象时勿忘其每一个成分" class="headerlink" title="12：复制对象时勿忘其每一个成分"></a>12：复制对象时勿忘其每一个成分</h2><p>当编写一个copy（包括拷贝构造和拷贝赋值）函数时，一定要</p><ul><li>复制所有local成员变量</li><li>调用所有base class内的适当的copy函数</li></ul><p><img src="https://i.loli.net/2021/07/16/oUacMRkbDrJTzsL.png" alt></p><p>写派生类的构造函数/拷贝构造函数/拷贝赋值操作时，一定要<strong>完善基类部分</strong></p><p>示例：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    构造函数</span>    <span class="token function">Person</span><span class="token punctuation">(</span>string _name<span class="token punctuation">,</span> <span class="token keyword">int</span> _age<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">name</span><span class="token punctuation">(</span>_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span>_age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person construction function"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    拷贝构造</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">name</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person copy constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    拷贝赋值</span>    Person <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person copy assignment operator"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        name <span class="token operator">=</span> p1<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        age <span class="token operator">=</span> p1<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> string <span class="token operator">&amp;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">:</span> <span class="token keyword">public</span> Person <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    构造函数</span>    <span class="token function">Student</span><span class="token punctuation">(</span>string _name<span class="token punctuation">,</span> <span class="token keyword">int</span> _age<span class="token punctuation">,</span> string _ID<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span>_name<span class="token punctuation">,</span> _age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ID</span><span class="token punctuation">(</span>_ID<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Student construction function"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    拷贝赋值</span>    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student <span class="token operator">&amp;</span>s1<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ID</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>ID<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Student copy constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    拷贝赋值</span>    Student <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student <span class="token operator">&amp;</span>s1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Student copy assignment operator"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        Person<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        ID <span class="token operator">=</span> s1<span class="token punctuation">.</span>ID<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> string <span class="token operator">&amp;</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ID<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    string ID<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Student <span class="token function">s1</span><span class="token punctuation">(</span><span class="token string">"Amy"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"aaa123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s1 information: "</span> <span class="token operator">&lt;&lt;</span> s1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> s1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"=========="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    使用拷贝构造函数</span>    Student <span class="token function">s2</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s2 information: "</span> <span class="token operator">&lt;&lt;</span> s2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> s2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> s2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"=========="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    使用拷贝赋值操作</span>    Student <span class="token function">s3</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"aaa456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s3 <span class="token operator">=</span> s1<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s3 information: "</span> <span class="token operator">&lt;&lt;</span> s3<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> s3<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> s3<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 结果为：</span><span class="token comment" spellcheck="true">// Person construction function</span><span class="token comment" spellcheck="true">// Student construction function</span><span class="token comment" spellcheck="true">// s1 information: Amy    18    aaa123</span><span class="token comment" spellcheck="true">// ==========</span><span class="token comment" spellcheck="true">// Person copy constructor</span><span class="token comment" spellcheck="true">// Student copy constructor</span><span class="token comment" spellcheck="true">// s2 information: Amy    18    aaa123</span><span class="token comment" spellcheck="true">// ==========</span><span class="token comment" spellcheck="true">// Person construction function</span><span class="token comment" spellcheck="true">// Student construction function</span><span class="token comment" spellcheck="true">// Student copy assignment operator</span><span class="token comment" spellcheck="true">// Person copy assignment operator</span><span class="token comment" spellcheck="true">// s3 information: Amy    18    aaa123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-设计与声明"><a href="#4-设计与声明" class="headerlink" title="4. 设计与声明"></a>4. 设计与声明</h1><h2 id="18：让接口容易被正确使用，不易被误用"><a href="#18：让接口容易被正确使用，不易被误用" class="headerlink" title="18：让接口容易被正确使用，不易被误用"></a>18：让接口容易被正确使用，不易被误用</h2><p><img src="https://i.loli.net/2021/07/18/lbIU8W5Dj3VcgB7.png" alt></p><h2 id="19：设计class犹如设计type"><a href="#19：设计class犹如设计type" class="headerlink" title="19：设计class犹如设计type"></a>19：设计class犹如设计type</h2><p><img src="https://i.loli.net/2021/07/18/EkaLKnZiPxqNd2T.png" alt><br><img src="https://i.loli.net/2021/07/18/6fR8jvnV1m7k2Be.png" alt><br><img src="https://i.loli.net/2021/07/18/4oBaRVYH5rkmMTz.png" alt><br><img src="https://i.loli.net/2021/07/18/pIQEPbxSGu8MrnD.png" alt></p><h2 id="20：宁以pass-by-reference-to-const替换pass-by-value"><a href="#20：宁以pass-by-reference-to-const替换pass-by-value" class="headerlink" title="20：宁以pass-by-reference-to-const替换pass-by-value"></a>20：宁以pass-by-reference-to-const替换pass-by-value</h2><ul><li>如果传值的话，实际上传递的是实参的副本（这是一个新对象），这些副本由对象的copy构造函数产生，因此在使用时需要调用很多次构造和析构函数，成本比较高</li><li>如果传引用的话，因为没有任何新对象产生，所以无需调用构造和析构函数，成本较低。为了告诉调用者：你不要改变我的对象，因此需要在前面加const</li></ul><h2 id="21：必须返回对象时，别妄想返回其reference"><a href="#21：必须返回对象时，别妄想返回其reference" class="headerlink" title="21：必须返回对象时，别妄想返回其reference"></a>21：必须返回对象时，别妄想返回其reference</h2><ul><li>所谓reference 只是个名称，代表某个既有对象。任何时候看到一个 reference 声明式，你都应该立刻问自己，它的另一个名称是什么?因为它一定是某物的另一个名称<ul><li>如果一个对象是local对象，而该local对象在函数退出前就被销毁了。这时如果返回该对象的reference的话，很危险，属于无定义行为（如果函数返回指针指向一个local对象，也是一样）</li></ul></li></ul><p><img src="https://i.loli.net/2021/07/18/mUtLqCDyNseiEFA.png" alt><br><img src="https://i.loli.net/2021/07/18/ZdzUTmPjt7Mqo2C.png" alt></p><h2 id="22：将成员变量声明为private"><a href="#22：将成员变量声明为private" class="headerlink" title="22：将成员变量声明为private"></a>22：将成员变量声明为private</h2><p><img src="https://i.loli.net/2021/07/18/M6Cl7OVzLpuxaRc.png" alt><br><img src="https://i.loli.net/2021/07/18/qwPlmFGZsJ1zDXI.png" alt></p><h2 id="23：宁以non-mmber，non-friend替换member函数"><a href="#23：宁以non-mmber，non-friend替换member函数" class="headerlink" title="23：宁以non-mmber，non-friend替换member函数"></a>23：宁以non-mmber，non-friend替换member函数</h2><ul><li>如果某些东西被封装，它就不再可见。愈多东西被封装，愈少人可以看到它。而愈少人看到它，我们就有愈大的弹性去变化它，因为我们的改变仅仅直接影响看到改变的那些人事物</li><li>愈少代码可以看到数据(也就是访问它) ，愈多的数据可被封装，而我们也就愈能自由地改变对象数据，例如改变成员变量的数量、类型等</li><li>non-mmber，non-friend会有较好的封装性，因为它并不增加”能够访问class 内之 private 成分”的函数数量</li><li>在 C++，比较自然的做法是让都使用的函数成为一个 non-member 函数并且位于和类所在的同一个 namespace (命名空间)内</li></ul><p>示例：</p><blockquote><p>P.S., 如果既有头文件<code>.h</code>,又有源文件<code>.cpp</code>,就<strong>不要在头文件中实现函数</strong>。否则会导致multiple definition</p><ul><li>报错的原因是虽然头文件指定只编译一次，但每次编译时，都编译了一次，最后链接的时候自然就报错了<ul><li>解决方法一：头文件只声明，函数主体内容放到.c/.cpp中</li><li>解决方法二：头文件的函数加上关键字inline（仅适用于简短的函数），直接把函数编译进去，自然不会冲突。</li></ul></li></ul></blockquote><p>与类相关东西全部放在同一个namespace  （Stuff）中<br>(1) 设计一个WebBrowser类</p><ul><li>这个类中有个clearBrowser函数，浏览器的其他模块（如书签模块）也会用到该函数</li><li>本着更好封装性的原则，clearBrowser函数<strong>设为non-member类型</strong>，并将其放在和WebBrowser类所在的同一个namespace中</li></ul><p><code>Bookmarks.h</code>文件</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> P1_2_WEBBROWSER_H</span><span class="token macro property">#<span class="token directive keyword">define</span> P1_2_WEBBROWSER_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">namespace</span> Stuff <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">WebBrowser</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">clearBrowser</span><span class="token punctuation">(</span>WebBrowser <span class="token operator">&amp;</span>wb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//P1_2_WEBBROWSER_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Bookmarks.cpp</code>文件</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"WebBrowser.h"</span></span><span class="token keyword">void</span> Stuff<span class="token operator">::</span><span class="token function">clearBrowser</span><span class="token punctuation">(</span>WebBrowser <span class="token operator">&amp;</span>wb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Clear Browser"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 设计一个Bookmarks类，该类需要对WebBrowser类进行书签操作<br><code>Bookmarks.h</code>文件</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> P1_2_BOOKMARKS_H</span><span class="token macro property">#<span class="token directive keyword">define</span> P1_2_BOOKMARKS_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"WebBrowser.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">namespace</span> Stuff <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Bookmarks</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">void</span> <span class="token function">bookmarksFunc</span><span class="token punctuation">(</span>WebBrowser<span class="token operator">&amp;</span> wb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//P1_2_BOOKMARKS_H</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Bookmarks.cpp</code>文件</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Bookmarks.h"</span></span><span class="token keyword">void</span> Stuff<span class="token operator">::</span>Bookmarks<span class="token operator">::</span><span class="token function">bookmarksFunc</span><span class="token punctuation">(</span>Stuff<span class="token operator">::</span>WebBrowser <span class="token operator">&amp;</span>wb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Operate bookmarks "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token function">clearBrowser</span><span class="token punctuation">(</span>wb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3) 使用</p><ul><li>WebBrowser的对象可以使用non-member函数</li><li>与WebBrowser类相关的Bookmarks模块也可以使用WebBrowser类及non-member函数</li></ul><p><code>main.cpp</code>文件</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"WebBrowser.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Bookmarks.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stuff<span class="token operator">::</span>WebBrowser w<span class="token punctuation">;</span>    <span class="token function">clearBrowser</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"======"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    Stuff<span class="token operator">::</span>Bookmarks b<span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token function">bookmarksFunc</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Clear Browser</span><span class="token comment" spellcheck="true">//======</span><span class="token comment" spellcheck="true">//Operate bookmarks</span><span class="token comment" spellcheck="true">//Clear Browser</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24：若所有参数皆需类型转换，请为此采用non-member函数"><a href="#24：若所有参数皆需类型转换，请为此采用non-member函数" class="headerlink" title="24：若所有参数皆需类型转换，请为此采用non-member函数"></a>24：若所有参数皆需类型转换，请为此采用non-member函数</h2><p>如果需要为某个函数的<strong>所有参数</strong>进行<strong>类型转换</strong>，则这个函数必须是个non-member。在下面的例子中，实现有理数的相乘</p><ul><li>（正确示例）采用non-member函数，确保左边的数据<code>left hand side（lhs）</code>和右边的数据<code>right hand side（rhs）</code>都能实现隐式类型转换</li><li>（错误示例）如果用成员函数实现乘法，则<code>const Rational operator*(const Rational &amp;rhs)</code>函数中，相乘操作采用<code>this-&gt;n*=rhs.numerator();</code>和<code>this-&gt;d*=rhs.denominator();</code>,这样只能实现rhs的隐式类型转换，对lhs束手无策，所以无法做类似于<code>2*oneFourth</code>的操作</li></ul><p>正确示例：2需要类型隐式转换，将operator<em>函数写成non-member（注：该函数里的<em>*两个参数是Rational类型的成员引用</em></em>）</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Rational</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Rational</span><span class="token punctuation">(</span><span class="token keyword">int</span> numerator <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> denominator <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 分子分母分别为0,1</span>    <span class="token comment" spellcheck="true">// 分子和分母的访问函数</span>    <span class="token keyword">int</span> <span class="token function">numerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">denominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Rational<span class="token operator">::</span><span class="token function">Rational</span><span class="token punctuation">(</span><span class="token keyword">int</span> numerator<span class="token punctuation">,</span> <span class="token keyword">int</span> denominator<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">n</span><span class="token punctuation">(</span>numerator<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">d</span><span class="token punctuation">(</span>denominator<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> Rational<span class="token operator">::</span><span class="token function">numerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> Rational<span class="token operator">::</span><span class="token function">denominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> d<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将乘法操作写在non-member函数中</span><span class="token keyword">const</span> Rational <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> Rational <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Rational <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Rational</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span><span class="token function">numerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> rhs<span class="token punctuation">.</span><span class="token function">numerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lhs<span class="token punctuation">.</span><span class="token function">denominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> rhs<span class="token punctuation">.</span><span class="token function">denominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Rational <span class="token function">oneFourth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1/4</span>    Rational result<span class="token operator">=</span>oneFourth<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>    Rational result_<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>oneFourth<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>result<span class="token punctuation">.</span><span class="token function">numerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span>result<span class="token punctuation">.</span><span class="token function">denominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2 4</span>    cout<span class="token operator">&lt;&lt;</span>result_<span class="token punctuation">.</span><span class="token function">numerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span>result_<span class="token punctuation">.</span><span class="token function">denominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2 4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>错误示例：operator<em>属于类内成员函数，不可以编译`result=2</em>oneFourth;`</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Rational</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Rational</span><span class="token punctuation">(</span><span class="token keyword">int</span> numerator <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> denominator <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 分子分母分别为0,1</span>    <span class="token keyword">int</span> <span class="token function">numerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">denominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> Rational <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> Rational <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>n<span class="token operator">*</span><span class="token operator">=</span>rhs<span class="token punctuation">.</span><span class="token function">numerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>d<span class="token operator">*</span><span class="token operator">=</span>rhs<span class="token punctuation">.</span><span class="token function">denominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Rational<span class="token operator">::</span><span class="token function">Rational</span><span class="token punctuation">(</span><span class="token keyword">int</span> numerator<span class="token punctuation">,</span> <span class="token keyword">int</span> denominator<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">n</span><span class="token punctuation">(</span>numerator<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">d</span><span class="token punctuation">(</span>denominator<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> Rational<span class="token operator">::</span><span class="token function">numerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> Rational<span class="token operator">::</span><span class="token function">denominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> d<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Rational <span class="token function">oneFourth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1/4</span>    Rational result<span class="token punctuation">;</span>    result<span class="token operator">=</span>oneFourth<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可以编译通过，2被隐式转换为Rational对象</span><span class="token comment" spellcheck="true">//    result=2*oneFourth; //操作符实现不了重载，不可以编译通过</span>    cout<span class="token operator">&lt;&lt;</span>result<span class="token punctuation">.</span><span class="token function">numerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span>result<span class="token punctuation">.</span><span class="token function">denominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25：考虑写出一个不抛弃异常的swap函数（待）"><a href="#25：考虑写出一个不抛弃异常的swap函数（待）" class="headerlink" title="25：考虑写出一个不抛弃异常的swap函数（待）"></a>25：考虑写出一个不抛弃异常的swap函数（待）</h2><h1 id="5-实现"><a href="#5-实现" class="headerlink" title="5. 实现"></a>5. 实现</h1><h2 id="26：尽可能延后变量定义式的出现时间"><a href="#26：尽可能延后变量定义式的出现时间" class="headerlink" title="26：尽可能延后变量定义式的出现时间"></a>26：尽可能延后变量定义式的出现时间</h2><p><img src="https://i.loli.net/2021/07/19/FbkcYs1uZimVlvQ.png" alt><br><img src="https://i.loli.net/2021/07/19/ENjJTzphIAH5Vul.png" alt></p><h2 id="27：尽量少做转型动作"><a href="#27：尽量少做转型动作" class="headerlink" title="27：尽量少做转型动作"></a>27：尽量少做转型动作</h2><p><img src="https://i.loli.net/2021/07/10/vK8DspI3TqmUHAz.png" alt="effective c++ P117"></p><p><img src="https://i.loli.net/2021/07/19/itF9vU2bfnI3AoK.png" alt></p><ul><li>优良的 C++ 代码很少使用转型，但若说要完全摆脱它们又太过不切实际<br><img src="https://i.loli.net/2021/07/19/Mn5DxiaovHJl8my.png" alt></li></ul><h2 id="28：避免返回handles指向对象内部成分"><a href="#28：避免返回handles指向对象内部成分" class="headerlink" title="28：避免返回handles指向对象内部成分"></a>28：避免返回handles指向对象内部成分</h2><p><img src="https://i.loli.net/2021/07/19/ApLlY5wg68kGHeW.png" alt></p><p><img src="https://i.loli.net/2021/07/19/HZomidb63epuh5Q.png" alt></p><h2 id="29：为“异常安全”而努力是值得的（待）"><a href="#29：为“异常安全”而努力是值得的（待）" class="headerlink" title="29：为“异常安全”而努力是值得的（待）"></a>29：为“异常安全”而努力是值得的（待）</h2><h2 id="30：透彻了解inlining的里里外外"><a href="#30：透彻了解inlining的里里外外" class="headerlink" title="30：透彻了解inlining的里里外外"></a>30：透彻了解inlining的里里外外</h2><ul><li>inline 只是对编译器的一个申请，不是强制命令。这项申请可以隐喻提出，也可以明确提出。隐喻方式是将函数定义于class 定义式内，明确声明 inline 函数的做法则是在其定义式前加上关键字iline</li><li>Inline 函数通常一定被置于头文件内，因为大多数建置环境(build environments)在编译过程中进行 inlining，而为了将一个”函数调用”替换为”被调用函数的本体”，编译器必须知道那个函数长什么样子（Inlining 在大多数 C++ 程序中是编译期行为）<ul><li>Templates 通常也被置于头文件内，因为它一旦被使用，编译器为了将它具现化，需要知道它长什么样子</li></ul></li><li>一个表面上看似 inline 的函数是否真是 inline，取决于你的建置环境，主要取决于编译器<br><img src="https://i.loli.net/2021/07/19/1ECkmz5p9tDxvVQ.png" alt><br><img src="https://i.loli.net/2021/07/19/7vN2UOSwgfLyXRI.png" alt><h2 id="31：将文件间的编译依存关系降至最低（深入）"><a href="#31：将文件间的编译依存关系降至最低（深入）" class="headerlink" title="31：将文件间的编译依存关系降至最低（深入）"></a>31：将文件间的编译依存关系降至最低（深入）</h2><img src="https://i.loli.net/2021/07/20/IBSORYx7T6qVi4w.png" alt><br><img src="https://i.loli.net/2021/07/20/cFDpZfiv68JKR2t.png" alt><br><img src="https://i.loli.net/2021/07/20/PRIqWpOlxEwVM1g.png" alt></li></ul><h1 id="6-继承与面向对象设计"><a href="#6-继承与面向对象设计" class="headerlink" title="6. 继承与面向对象设计"></a>6. 继承与面向对象设计</h1><h2 id="32：确定你的public继承塑模出is-a关系"><a href="#32：确定你的public继承塑模出is-a关系" class="headerlink" title="32：确定你的public继承塑模出is-a关系"></a>32：确定你的public继承塑模出is-a关系</h2><p><img src="https://i.loli.net/2021/07/20/iqtUyWsPYxGkF6L.png" alt></p><h2 id="33：避免遮掩继承而来的名称"><a href="#33：避免遮掩继承而来的名称" class="headerlink" title="33：避免遮掩继承而来的名称"></a>33：避免遮掩继承而来的名称</h2><ul><li>只要（变量或函数的）<strong>名称相同</strong>（不管类型是否相同、不管函数是否有不同参数、不管是不是virtual函数），Derived都会把Base中的相关内容遮掩。要避免！</li><li>实在要用的话，以如下为例，若要用Base中的内容的话，需要在Derived中加入<code>using Base::mf1;</code>和<code>using Base::mf3;</code>,或者在main函数中调用时使用<code>d.Base::mf1(x);</code></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">mf1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">mf1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Base:virtual void mf1(int)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">mf3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Base:void mf3()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">mf3</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Base:void mf3(double)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Derived</span><span class="token operator">:</span><span class="token keyword">public</span> Base<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    加这两行，让Base类的mf1和mf3的所有东西在Derived类内可见</span><span class="token comment" spellcheck="true">//    否则，Derived中的mf1和mf3会遮盖Base相关内容，（即便有不同的参数，无论是否是virtual函数）</span>    <span class="token keyword">using</span> Base<span class="token operator">::</span>mf1<span class="token punctuation">;</span>    <span class="token keyword">using</span> Base<span class="token operator">::</span>mf3<span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">mf1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Derived:virtual void mf1()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">mf3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Derived:void mf3()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Derived d<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span><span class="token function">mf1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span><span class="token function">mf1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span><span class="token function">mf3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span><span class="token function">mf3</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果为：</span><span class="token comment" spellcheck="true">//Derived:virtual void mf1()</span><span class="token comment" spellcheck="true">//Base:virtual void mf1(int)</span><span class="token comment" spellcheck="true">//Derived:void mf3()</span><span class="token comment" spellcheck="true">//Base:void mf3(double)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="34-区分接口继承和实现继承"><a href="#34-区分接口继承和实现继承" class="headerlink" title="34: 区分接口继承和实现继承"></a>34: 区分接口继承和实现继承</h2><p>函数接口继承（pure virtual）和实现继承（virtual ，non-virtual）</p><ul><li>pure virtual 函数只具体指定接口继承：<ul><li><code>父类：子类啊，你一定要把这个函数override（覆写）啊</code></li></ul></li><li>简朴的(非纯) impure virtual 函数具体指定接口继承及缺省实现继承：<ul><li><code>父类：子类啊，你要不想override，就（默认）用父类的；要想自己override，就用你自己（子类）的。俗称动态绑定</code></li></ul></li><li>non-virtual 函数具体指定接口继承以及强制性实现继承:<ul><li><code>父类：子类啊，你自己别费力气override了，就老老实实用父类的（子类即便override了也没用。因为这个函数早就在编译时和父类绑定好了，调用时仍用的是父类的函数）。俗称静态绑定</code></li></ul></li></ul><h2 id="35：考虑virtual函数以外的其他选择（待）"><a href="#35：考虑virtual函数以外的其他选择（待）" class="headerlink" title="35：考虑virtual函数以外的其他选择（待）"></a>35：考虑virtual函数以外的其他选择（待）</h2><h2 id="36-绝不重新定义继承而来的non-virtual函数"><a href="#36-绝不重新定义继承而来的non-virtual函数" class="headerlink" title="36:绝不重新定义继承而来的non-virtual函数"></a>36:绝不重新定义继承而来的non-virtual函数</h2><p>如果继承类重新定义了基类的non-virtual函数，则设计便出现了矛盾</p><ul><li>virtual函数（唯一应该覆写的东西）可以实现动态绑定（<code>p3-&gt;virtualFunc();</code>）</li><li>non-virtual函数是<strong>静态绑定</strong>。即便基类指针指向派生类的对象，通过该指针调用的non-virtial函数永远是基类的版本（<code>p3-&gt;nonVirtualFunc();</code>）</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">virtualFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"This is a virtual base function"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">nonVirtualFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"This is a non-virtual base function"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Derived</span><span class="token operator">:</span><span class="token keyword">public</span> Base<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">virtualFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"This is a virtual derived function"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">nonVirtualFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"This is a non-virtual derived function"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">////// 常规地，各自调用各自的函数</span>    Base b1<span class="token punctuation">;</span>    Base <span class="token operator">*</span>p1<span class="token operator">=</span> <span class="token operator">&amp;</span>b1<span class="token punctuation">;</span>    p1<span class="token operator">-</span><span class="token operator">></span><span class="token function">virtualFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this is a virtual base function</span>    p1<span class="token operator">-</span><span class="token operator">></span><span class="token function">nonVirtualFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//This is a non-virtual base function</span>    Derived d1<span class="token punctuation">;</span>    Derived <span class="token operator">*</span>p2<span class="token operator">=</span><span class="token operator">&amp;</span>d1<span class="token punctuation">;</span>    p2<span class="token operator">-</span><span class="token operator">></span><span class="token function">virtualFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//This is a virtual derived function</span>    p2<span class="token operator">-</span><span class="token operator">></span><span class="token function">nonVirtualFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//This is a non-virtual derived function</span><span class="token comment" spellcheck="true">//////////////</span>    Base <span class="token operator">*</span>p3<span class="token operator">=</span><span class="token operator">&amp;</span>d1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 动态绑定，实现了正确调用</span>    p3<span class="token operator">-</span><span class="token operator">></span><span class="token function">virtualFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// This is a virtual derived function</span>    <span class="token comment" spellcheck="true">// 错误调用，通过基类指针调用的non-virtual函数永远是基类的版本，即使该指针指向派生类对象</span>    <span class="token comment" spellcheck="true">// non-virtual函数是静态绑定，因此：</span>    <span class="token comment" spellcheck="true">// 即便派生类重新定义了继承而来的non-virtual函数，也无法调用Derived::nonVirtualFunc()</span>    p3<span class="token operator">-</span><span class="token operator">></span><span class="token function">nonVirtualFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//This is a non-virtual base function</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="37：绝不重新定义继承而来的缺省参数值"><a href="#37：绝不重新定义继承而来的缺省参数值" class="headerlink" title="37：绝不重新定义继承而来的缺省参数值"></a>37：绝不重新定义继承而来的缺省参数值</h2><p>根据36条，我们讨论的是：继承带有<strong>缺省</strong>参数值的<strong>virtual函数</strong></p><blockquote><p>静态绑定又名前期绑定，动态绑定又名后期绑定</p><ul><li>virtual函数系动态绑定，而缺省参数值却是静态绑定。重新定义缺省参数值会出现矛盾</li></ul></blockquote><h2 id="38：通过复合塑模出has-a或“根据某物实现出”"><a href="#38：通过复合塑模出has-a或“根据某物实现出”" class="headerlink" title="38：通过复合塑模出has-a或“根据某物实现出”"></a>38：通过复合塑模出has-a或“根据某物实现出”</h2><ul><li>“public 继承”带有 is-a (是一种)的意义。复合也有它自己的意义。实际上它有两个意义。复合意味 has-a(有一个，“一个类里面的成员是另一个类，如Person类中有一个成员为Address类型的对象”)或 is-implemented-in也rms-of(根据某物实现出，“为了实现这个类，需要复用（reuse）到另一个类的一部分功能，如Set类需要用到List类的一部分，但又不能完全都用”）</li><li>当复合发生于应用域内的对象之间，表现出 has-a 的关系；当它发生于实现域内则是表现 is-implemented-in-terms-of 的关系</li></ul><h2 id="39：明智而审慎地使用private继承"><a href="#39：明智而审慎地使用private继承" class="headerlink" title="39：明智而审慎地使用private继承"></a>39：明智而审慎地使用private继承</h2><ul><li>Private 继承意味 is-implemented-in-terms of (根据某物实现出)。它通常比复合(composition) 的级别低。但是当 derived class 需要访问 proteted base class 的成员，或需要重新定义继承而来的virtual 函数时，这么设计是合理的<ul><li>如果Derived类继承了Base类，你的用意是为了采用Base类内已经备妥的某些特性。private继承意味只有实现部分被继承，接口部分应略去</li><li><strong>尽可能使用复合，必要时才使用private继承</strong></li></ul></li><li>和复合(composition) 不同， private 继承可以造成 empty base 最优化。这对致力于”对象只寸最小化”的程序库开发者而言，可能很重要</li></ul><h3 id="P-S-public-继承-private-继承-protected-继承详解及区别"><a href="#P-S-public-继承-private-继承-protected-继承详解及区别" class="headerlink" title="P.S.,public 继承 / private 继承 / protected 继承详解及区别"></a>P.S.,<a href="https://blog.csdn.net/bzhxuexi/article/details/17026149" target="_blank" rel="noopener">public 继承 / private 继承 / protected 继承详解及区别</a></h3><ul><li>对于公有继承方式<br>(1) 基类成员对其对象的可见性：　　<br>公有成员可见，其他不可见。这里保护成员同于私有成员。<br>　　<br>(2) 基类成员对<strong>派生类</strong>的可见性：　　<br>公有成员和保护成员可见，而私有成员不可见。这里保护成员同于公有成员。<br>　　<br>(3) 基类成员对<strong>派生类对象</strong>的可见性：　　<br>公有成员可见，其他成员不可见。　　</li></ul><p>所以，在公有继承时，派生类的对象可以访问基类中的公有成员；派生类的成员函数可以访问基类中的公有成员和保护成员。这里，一定要区分清楚<strong>派生类的对象和派生类中的成员函数对基类的访问是不同的</strong>。</p><ul><li>对于私有继承方式<br>(1) 基类成员对其对象的可见性：　　<br>公有成员可见，其他成员不可见。　　<br>(2) 基类成员对<strong>派生类</strong>的可见性：　　<br>公有成员和保护成员是可见的，而私有成员是不可见的。　　<br>(3) 基类成员对<strong>派生类对象</strong>的可见性：　　<br>所有成员都是不可见的。　　<br>所以，在私有继承时，<strong>基类的成员只能由直接派生类访问</strong>，而无法再往下继承。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 一个小示例</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base:void f1()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token keyword">private</span> Base <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    私有继承：派生类可以调用基类的f1函数</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Derived d<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Base:void f1()</span><span class="token comment" spellcheck="true">//    私有继承：派生类的对象不能调用基类的f1对象</span><span class="token comment" spellcheck="true">//    d.f1();// 不可以这样用</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对于保护继承方式<br>　　这种继承方式与私有继承方式的情况相同。两者的区别仅在于对派生类的成员而言，对基类成员有不同的可见性。　　上述所说的可见性也就是可访问性。关于可访问性还有另的一种说法。这种规则中，称派生类的对象对基类访问为水平访问，称派生类的派生类对基类的访问为垂直访问。</li></ul><hr><ul><li>一般规则<br>公有继承时，水平访问和垂直访问对基类中的公有成员不受限制；　　<br>私有继承时，水平访问和垂直访问对基类中的公有成员也不能访问；　　<br>保护继承时，对于垂直访问同于公有继承，对于水平访问同于私有继承。　　<br>对于基类中的私有成员，只能被基类中的成员函数和友元函数所访问，不能被其他的函数访问。　　</li></ul><p>基类与派生类的关系: 任何一个类都可以派生出一个新类，派生类也可以再派生出新类，因此，基类和派生类是相对而言的。</p><ul><li>基类与派生类之间的关系</li></ul><ol><li><p>派生类是基类的具体化<br>　　类的层次通常反映了客观世界中某种真实的模型。在这种情况下，不难看出：基类是对若干个派生类的抽象，而派生类是基类的具体化。基类抽取了它的派生类的公共特征，而派生类通过增加行为将抽象类变为某种有用的类型。</p></li><li><p>派生类是基类定义的延续<br>　　先定义一个抽象基类，该基类中有些操作并未实现。然后定义非抽象的派生类，实现抽象基类中定义的操作。例如，虚函数就属此类情况。这时，派生类是抽象的基类的实现，即可看成是基类定义的延续。这也是派生类的一种常用方法。</p></li><li><p>派生类是基类的组合<br>　　在多继承时，一个派生类有多于一个的基类，这时派生类将是所有基类行为的组合。　　派生类将其本身与基类区别开来的方法是添加数据成员和成员函数。因此，继承的机制将使得在创建新类时，只需说明新类与已有类的区别，从而大量原有的程序代码都可以复用，所以有人称类是 “可复用的软件构件”。</p></li></ol><blockquote><p>（1）子类对父类成员的访问权限跟如何继承没有任何关系，“子类可以访问父类的 public 和 protected 成员，不可以访问父类的 private 成员”——这句话对任何一种继承都是成立的。<br>（2）继承修饰符影响着谁可以知道 “继承” 这件事。public 继承大家都知道，有点像 “法定继承人”，因此，任何代码都可以把子类的引用（或指针）直接转换为父类。也因为这个原因，public 继承常用来表达设计中所谓的“is-a” 关系。private 继承则有点像 “私生子”，除了子类自己，没有人知道这层关系，也因此，除了子类自己的代码之外，没有其它人知道自己还有个父亲，于是也就没有其它人可以做相应的类型转换。为此，私有继承常用于表达非“is-a” 的关系，这种情况下子类只是借用父类的某些实现细节。protected 继承则有点特殊，外界同样不知道这层关系，但家族内部的子孙们可以知道，有点像 “自家知道就行了，不许外扬” 的意思，于是子孙们是可以做这种向上转型，其它代码则不可以。因为这种特殊性，protected 继承在实际中用得很少。<br>（3）还需要补充一点，由于 “继承关系” 的可见性受到了影响，那么继承来的财产的可见性也必然受到影响。比如一个成员变量或成员函数，在父类中本来是 public 的，被某个子类 protected 继承之后，对子类来讲，这个成员就相当于 protected 成员了——继承是继承到了，但权限变了。</p></blockquote><h2 id="40：明智而审慎地使用多重继承"><a href="#40：明智而审慎地使用多重继承" class="headerlink" title="40：明智而审慎地使用多重继承"></a>40：明智而审慎地使用多重继承</h2><p><img src="https://i.loli.net/2021/07/20/fp36UX1uEVWh9Jw.png" alt></p><h1 id="7-模板与泛型编程"><a href="#7-模板与泛型编程" class="headerlink" title="7. 模板与泛型编程"></a>7. 模板与泛型编程</h1><h2 id="41：了解隐式接口和编译器多态"><a href="#41：了解隐式接口和编译器多态" class="headerlink" title="41：了解隐式接口和编译器多态"></a>41：了解隐式接口和编译器多态</h2><p><img src="https://i.loli.net/2021/07/21/ILwVShileb3AUjm.png" alt><br><img src="https://i.loli.net/2021/07/21/s9mqCWrUIOEt7lR.png" alt><br><img src="https://i.loli.net/2021/07/21/HDXFxt7IzOhf5V2.png" alt></p><h2 id="42：了解typename的双重意义（待）"><a href="#42：了解typename的双重意义（待）" class="headerlink" title="42：了解typename的双重意义（待）"></a>42：了解typename的双重意义（待）</h2><p>C++ 并不总是把 class 和 typename 视为等价。有时候你一定得使用typename<br><a href="https://ismxue.github.io/2021/06/14/c/cpp-jiao-cheng-bi-ji/#toc-heading-40">typename使用示例</a></p><p><code>typedef typename</code>说明（待）</p><h2 id="43：学习处理模板化基类内的名称"><a href="#43：学习处理模板化基类内的名称" class="headerlink" title="43：学习处理模板化基类内的名称"></a>43：学习处理模板化基类内的名称</h2><blockquote><p>基类：超人类（含有很多特异的功能，如一目千行），超人类（可能）有个全特化的版本（性能少一些，比如不能一目千行）<br>子类在继承了超人类后，产生了一个新类：Student。<br>Student类想使用一目千行的功能。编译器说：你继承的超人类有可能被特化，这个特化版本可能没有一目千行的功能，所以我才不去找一目千行的功能呢。<br>Student类说：好吧，我（用this-&gt; 或using 声明式的方式）告诉你，我继承的这个超人类有这个功能<br>然后，Student类的对象可以调用一目千行的功能了。<br>而通过全特化版本确定的Student类就没有这个功能</p></blockquote><ul><li>模板全特化<ul><li>class 定义式最前头的”template&lt;&gt;”表示这是个特化版的 MsgSender template. 在 template 实参是 CompanyZ 时被使用。这是所谓的模板全特化 (total template specialization) : template MsgSender针对类型 CompanyZ特化了，而且其特化是全面性的，也就是说一旦类型参数被定义为 CompanyZ. 再没有其他template 参数可供变化<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//模板全特化:一个特别版本的CompanyInfo，只有cat()，而没有dog()</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// 特化版的CompanyInfo template，在template实参是CompanyZ时被使用</span><span class="token keyword">class</span> <span class="token class-name">CompanyInfo</span><span class="token operator">&lt;</span>CompanyZ<span class="token operator">></span> <span class="token punctuation">{</span><span class="token string">''</span>'<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ul><li>更具体的标题：（LoggingCompanyInfo）学习处理模板化基类（CompanyInfo）内的名称（<code>dogInfo()</code>和<code>catInfo()</code>函数）<br><img src="https://i.loli.net/2021/07/21/HUjmOoGN6SRCXxr.png" alt><ul><li>LoggingCompanyInfo类继承了CompanyInfo<company>类。而在子类中，需要用到基类的dogInfo函数，但基类的Company是一个template参数。这时编译器没办法知道CompanyInfo<company>是否有个dogInfo函数</company></company></li><li>编译器知道base class templates有可能被特化，而那个特化版本可能不提供和一般性 template 相同的接口。因此它往往拒绝在templatizedbase classes （模板化基类，本例的 CompanyInfo<company>） 内寻找继承而来的名称（本例的<code>dogInfo()</code>）<ul><li>比如特化版本的CompanyInfo<companyz>中就没有<code>dogInfo()</code>函数</companyz></li></ul></company></li><li>解决方法1：在base class 函数调用动作之前加上”this-&gt;”  （<code>this-&gt;dogInfo(info);</code>）</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">LoggingCompanyInfo</span> <span class="token operator">:</span> <span class="token keyword">public</span> CompanyInfo<span class="token operator">&lt;</span>Company<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">logDogInfo</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dogInfo</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用基类CompanyInfo的dogInfo函数；如果 Company == CompanyZ，这个函数不存在</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">logCatInfo</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">catInfo</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用基类CompanyInfo的catInfo函数</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>解决方法2：使用声明式。告诉编译器，请它假设<code>dogInfo()</code>函数位于base class内  （<code>using CompanyInfo&lt;Company&gt;::dogInfo;</code>）</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">LoggingCompanyInfo</span> <span class="token operator">:</span> <span class="token keyword">public</span> CompanyInfo<span class="token operator">&lt;</span>Company<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">using</span> CompanyInfo<span class="token operator">&lt;</span>Company<span class="token operator">></span><span class="token operator">::</span>dogInfo<span class="token punctuation">;</span>    <span class="token keyword">using</span> CompanyInfo<span class="token operator">&lt;</span>Company<span class="token operator">></span><span class="token operator">::</span>catInfo<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">logDogInfo</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">dogInfo</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用基类CompanyInfo的dogInfo函数；如果 Company == CompanyZ，这个函数不存在</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">logCatInfo</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">catInfo</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用基类CompanyInfo的catInfo函数</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可在 derived class templates 内通过”this-&gt;” 指涉 base class templates 内的成员名称，或藉由一个明白写出的 “base class 资格修饰符”完成。</p></blockquote><p>完整示例：</p><ul><li>公司类<ul><li>公司A卖A品种的dog和cat；</li><li>公司B卖B品种的dog和cat（不会用到，只是说明有很多类公司）；</li><li>公司Z卖Z品种的cat；</li></ul></li><li>信息类（表示公司的广告语）<ul><li>CompanyInfo类用于传送公司广告语信息（可传dog和cat）</li><li>一个特别版本的CompanyInfo（模板全特化）, 在template实参是CompanyZ时被使用: 只传Z公司的cat</li><li>一个包含log信息的LoggingCompanyInfo类，继承了CompanyInfo类<ul><li>可调用基类CompanyInfo的dogInfo函数；如果 Company == CompanyZ，这个函数不存在</li><li>调用基类CompanyInfo的catInfo函数</li></ul></li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// A公司类,负责dog和cat</span><span class="token keyword">class</span> <span class="token class-name">CompanyA</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">dog</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">cat</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> CompanyA<span class="token operator">::</span><span class="token function">dog</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CompanyA::dog(): "</span> <span class="token operator">&lt;&lt;</span> msg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CompanyA<span class="token operator">::</span><span class="token function">cat</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CompanyA::cat(): "</span> <span class="token operator">&lt;&lt;</span> msg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// B公司类（不会用到，只是说明company可能有好多类）</span><span class="token keyword">class</span> <span class="token class-name">CompanyB</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">dog</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">cat</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> CompanyB<span class="token operator">::</span><span class="token function">dog</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CompanyB::dog(): "</span> <span class="token operator">&lt;&lt;</span> msg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CompanyB<span class="token operator">::</span><span class="token function">cat</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CompanyB::cat(): "</span> <span class="token operator">&lt;&lt;</span> msg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Z公司类。与上面两类不同的是，它只负责cat</span><span class="token keyword">class</span> <span class="token class-name">CompanyZ</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">cat</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> CompanyZ<span class="token operator">::</span><span class="token function">cat</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CompanyZ::cat(): "</span> <span class="token operator">&lt;&lt;</span> msg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//类模板</span><span class="token comment" spellcheck="true">//CompanyInfo负责为公司传送信息</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> Company<span class="token operator">></span> <span class="token comment" spellcheck="true">// 现在还不确定传送哪个公司，先写成模板,Company表示公司类</span><span class="token keyword">class</span> <span class="token class-name">CompanyInfo</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">dogInfo</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string <span class="token function">msg</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        Company c<span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">dog</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用公司的dog函数</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">catInfo</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string <span class="token function">msg</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        Company c<span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">cat</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用公司的cat函数</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//模板全特化:一个特别版本的CompanyInfo，只有cat()，而没有dog()</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// 特化版的CompanyInfo template，在template实参是CompanyZ时被使用</span><span class="token keyword">class</span> <span class="token class-name">CompanyInfo</span><span class="token operator">&lt;</span>CompanyZ<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">catInfo</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string <span class="token function">msg</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        CompanyZ z<span class="token punctuation">;</span>        z<span class="token punctuation">.</span><span class="token function">cat</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 一个包含log信息的LoggingCompanyInfo类，继承了CompanyInfo类</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> Company<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">LoggingCompanyInfo</span> <span class="token operator">:</span> <span class="token keyword">public</span> CompanyInfo<span class="token operator">&lt;</span>Company<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">logDogInfo</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Before logDogInfo"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dogInfo</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用基类CompanyInfo的dogInfo函数；如果 Company == CompanyZ，这个函数不存在</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"After logDogInfo"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">logCatInfo</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Before logCatInfo"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">catInfo</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用基类CompanyInfo的catInfo函数</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"After logCatInfo"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    对公司A进行操作</span>    CompanyA a<span class="token punctuation">;</span>    CompanyB b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不会用到。只是说明有多类公司</span><span class="token comment" spellcheck="true">//    cout &lt;&lt; "Use CompanyInfo (company A)" &lt;&lt; endl;</span>    CompanyInfo<span class="token operator">&lt;</span>CompanyA<span class="token operator">></span> ms<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表示CompanyInfo类中用到的公司类为CompanyA</span>    string <span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Best A dogs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ms<span class="token punctuation">.</span><span class="token function">dogInfo</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"======"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    cout &lt;&lt; "Use LoggingCompanyInfo (company A)" &lt;&lt; endl;</span>    LoggingCompanyInfo<span class="token operator">&lt;</span>CompanyA<span class="token operator">></span> lms<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//包含log信息的LoggingCompanyInfo类，类中用到公司类CompanyA</span>    string <span class="token function">logInfo</span><span class="token punctuation">(</span><span class="token string">"Best A dogs (add logging)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lms<span class="token punctuation">.</span><span class="token function">logDogInfo</span><span class="token punctuation">(</span>logInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"======"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    cout &lt;&lt; "Use CompanyInfo (company Z)" &lt;&lt; endl;</span>    CompanyZ z<span class="token punctuation">;</span>    CompanyInfo<span class="token operator">&lt;</span>CompanyZ<span class="token operator">></span> msz<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>    string <span class="token function">infoZ</span><span class="token punctuation">(</span><span class="token string">"Best Z cats"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    msz<span class="token punctuation">.</span><span class="token function">catInfo</span><span class="token punctuation">(</span>infoZ<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"======"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    cout &lt;&lt; "Use LoggingCompanyInfo (company Z)" &lt;&lt; endl;</span>    LoggingCompanyInfo<span class="token operator">&lt;</span>CompanyZ<span class="token operator">></span> lmsz<span class="token punctuation">;</span>    string <span class="token function">logInfoZ</span><span class="token punctuation">(</span><span class="token string">"Best Z cats (add logging)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    lmsz.logDogInfo(logInfoZ);  这句话会报错，因为没有Z公司不用logDogInfo</span>    lmsz<span class="token punctuation">.</span><span class="token function">logCatInfo</span><span class="token punctuation">(</span>logInfoZ<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// output:</span><span class="token comment" spellcheck="true">// CompanyA::dog(): Best A dogs</span><span class="token comment" spellcheck="true">// ======</span><span class="token comment" spellcheck="true">// Before logDogInfo</span><span class="token comment" spellcheck="true">// CompanyA::dog(): Best A dogs (add logging)</span><span class="token comment" spellcheck="true">// After logDogInfo</span><span class="token comment" spellcheck="true">// ======</span><span class="token comment" spellcheck="true">// CompanyZ::cat(): Best Z cats</span><span class="token comment" spellcheck="true">// ======</span><span class="token comment" spellcheck="true">// Before logCatInfo</span><span class="token comment" spellcheck="true">// CompanyZ::cat(): Best Z cats (add logging)</span><span class="token comment" spellcheck="true">// After logCatInfo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="44：将与参数无关的代码抽离"><a href="#44：将与参数无关的代码抽离" class="headerlink" title="44：将与参数无关的代码抽离"></a>44：将与参数无关的代码抽离</h2><p><img src="https://i.loli.net/2021/07/21/lULVCc5owOBrY9i.png" alt></p><h2 id="45：运用成员函数模板接受所有兼容类型"><a href="#45：运用成员函数模板接受所有兼容类型" class="headerlink" title="45：运用成员函数模板接受所有兼容类型"></a>45：运用成员函数模板接受所有兼容类型</h2><p><img src="https://i.loli.net/2021/07/21/3HTvaQUSsRpfWoi.png" alt><br><img src="https://i.loli.net/2021/07/21/oQGd46m2YXVwyNp.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基类派生类及动态绑定</title>
      <link href="/2021/07/09/c/ji-lei-pai-sheng-lei-ji-dong-tai-bang-ding/"/>
      <url>/2021/07/09/c/ji-lei-pai-sheng-lei-ji-dong-tai-bang-ding/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用<strong>基类</strong>的<strong>引用</strong>或者<strong>指针</strong>调用一个<strong>虚成员函数</strong>时才会执行<strong>动态绑定</strong></p></blockquote><h1 id="定义基类和派生类"><a href="#定义基类和派生类" class="headerlink" title="定义基类和派生类"></a>定义基类和派生类</h1><h2 id="定义基类"><a href="#定义基类" class="headerlink" title="定义基类"></a>定义基类</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Quote</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    string bookNo<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">double</span> price<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要默认的构造函数</span><span class="token comment" spellcheck="true">//    带参数的构造函数</span>    <span class="token function">Quote</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span> book<span class="token punctuation">,</span><span class="token keyword">double</span> sales_price<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">price</span><span class="token punctuation">(</span>sales_price<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过isbn函数访问私有的bookNo</span>    string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span><span class="token keyword">return</span> bookNo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    计算基类的总价格：普通状态下不打折</span>    <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">net_price</span><span class="token punctuation">(</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span><span class="token keyword">return</span> n<span class="token operator">*</span>price<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 通过virtual关键字，对析构函数进行动态绑定</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>基类有两种成员函数：基类希望派生类直接继承而不要改变的函数；基类希望派生类进行覆盖（override）的函数<ul><li>成员函数如果没有被声明为virtual function，则其解析过程发生在<strong>编译时</strong>而非运行时。（如isbn（）函数，基类和派生类用的都是一样的版本）</li><li>基类将希望派生类进行<strong>覆盖</strong>的函数定义为<strong>虚函数virtual</strong> （如：派生类的书要打折，所以它的价格计算要重新定义）。在函数前面加上virtual使得该函数执行<strong>动态绑定</strong><ul><li>动态绑定（参考下文_调用_部分）<ul><li>使用<strong>基类</strong>的<strong>引用</strong>或者<strong>指针</strong>调用一个<strong>虚成员函数</strong>时才会执行<strong>动态绑定</strong></li><li>通过动态绑定，可以用同一段代码分别处理基类和派生类对象</li><li>函数的运行版本由实参决定，即在<strong>运行时</strong>选择函数的版本，所以<strong>动态绑定也称运行时绑定</strong><blockquote><p>在使用存在继承关系的类型时，必须区分静态类型和动态类型。表达式的<strong>静态类型在编译</strong>时总是已知的；<strong>动态类型直到运行时</strong>才知道</p></blockquote></li></ul></li></ul></li></ul></li></ul><h2 id="定义派生类"><a href="#定义派生类" class="headerlink" title="定义派生类"></a>定义派生类</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Bulk_quote</span><span class="token operator">:</span><span class="token keyword">public</span> Quote<span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    继承了Quote的bookNo和price，并新增了两个新的数据成员min_qty和discount</span>    size_t min_qty<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 享受折扣的最低购买量</span>    <span class="token keyword">double</span> discount<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//折扣</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要默认的构造函数</span>    <span class="token comment" spellcheck="true">//    带参数的构造函数</span>    <span class="token function">Bulk_quote</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> book<span class="token punctuation">,</span><span class="token keyword">double</span> p<span class="token punctuation">,</span>size_t qty<span class="token punctuation">,</span><span class="token keyword">double</span> disc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//子类覆盖基类的net_price函数，定义适用于自己总价的新版本</span>    <span class="token keyword">double</span> <span class="token function">net_price</span><span class="token punctuation">(</span>size_t cnt<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实现派生类的构造函数。并且，派生类必须用基类的构造函数初始化派生类的基类部分</span>Bulk_quote<span class="token operator">::</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> book<span class="token punctuation">,</span><span class="token keyword">double</span> p<span class="token punctuation">,</span>size_t qty<span class="token punctuation">,</span><span class="token keyword">double</span> disc<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Quote</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min_qty</span><span class="token punctuation">(</span>qty<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">discount</span><span class="token punctuation">(</span>disc<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实现自己的net_price函数，并override基类的net_price函数</span><span class="token keyword">double</span> Bulk_quote<span class="token operator">::</span><span class="token function">net_price</span><span class="token punctuation">(</span>size_t cnt<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token operator">>=</span>min_qty<span class="token punctuation">)</span>        <span class="token keyword">return</span> cnt<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>discount<span class="token punctuation">)</span><span class="token operator">*</span>price<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//    量很大，享受折扣价格</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> cnt<span class="token operator">*</span> price<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//量不大，原价购买</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>派生类向基类的类型转换<ul><li>因为在派生类对象中含有与其基类对应的组成部分，所以能把派生类的对象<strong>当做基类对象</strong>使用，也能将基类的指针或引用绑定到<strong>派生类对象的基类部分</strong></li></ul></li><li>一个派生类的函数如果覆盖了某个继承而来的虚函数，则它的<strong>形参类型</strong>和<strong>返回类型</strong>必须与被它覆盖的基类函数完全一致（如 <code>double net_price(size_t cnt) const</code>）</li><li>只有虚函数才能被覆盖</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// f1不是虚函数，这种是不可行的</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token operator">:</span>A<span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/07/09/qpC4i1YB6EzeAog.png" alt="派生类向基类转换"><br><img src="https://i.loli.net/2021/07/09/povIP8NQShyMz3e.png" alt="图片来自侯捷老师讲义_高级编程下_P49"></p><ul><li>c++新标准允许派生类显式地注明（标注关键字override）它使用某个成员函数覆盖了它继承的虚函数，如<code>double net_price(size_t) const override;</code></li><li>派生类必须用基类的构造函数初始化派生类的基类部分：<code>Bulk_quote::Bulk_quote(string&amp; book,double p,size_t qty,double disc): Quote(book,p),min_qty(qty),discount(disc) {}</code></li></ul><h1 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h1><ul><li>通过（是否属于派生类向基类的类型转换），利用动态绑定，既能使用基类Quote的对象调用该函数（即：print_total函数），也能使用派生类对象调用调用它。因此，实际传入print_total的对象类型决定到底执行net_price的哪个版本</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 计算总价</span><span class="token keyword">void</span> <span class="token function">print_total</span><span class="token punctuation">(</span><span class="token keyword">const</span> Quote <span class="token operator">&amp;</span> item<span class="token punctuation">,</span>size_t n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> ret<span class="token operator">=</span>item<span class="token punctuation">.</span><span class="token function">net_price</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"ISBN: "</span><span class="token operator">&lt;&lt;</span>item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">", total due: "</span><span class="token operator">&lt;&lt;</span>ret<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    实例化基类和派生类对象</span>    string <span class="token function">bookNo</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Quote <span class="token function">item</span><span class="token punctuation">(</span>bookNo<span class="token punctuation">,</span> <span class="token number">9.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 构造基类的对象。这本book的ISBN号为123456，单价为9.9</span>    Bulk_quote <span class="token function">bulk</span><span class="token punctuation">(</span>bookNo<span class="token punctuation">,</span> <span class="token number">9.9</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 构造派生类的对象</span>    Quote <span class="token operator">&amp;</span>r<span class="token operator">=</span>bulk<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//r绑定到bulk的Quote部分</span>    <span class="token comment" spellcheck="true">// 如果调用基类，则计算基类的价格</span>    <span class="token function">print_total</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//9.9*100=990</span>    <span class="token comment" spellcheck="true">//如果调用派生类，则计算派生类的价格</span>    <span class="token function">print_total</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 9.9*(1-0.1)*100=891</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//output:</span><span class="token comment" spellcheck="true">//ISBN: 123456, total due: 990</span><span class="token comment" spellcheck="true">//ISBN: 123456, total due: 891</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Quote</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    string bookNo<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">double</span> price<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要默认的构造函数</span><span class="token comment" spellcheck="true">//    带参数的构造函数</span>    <span class="token function">Quote</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span> book<span class="token punctuation">,</span><span class="token keyword">double</span> sales_price<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">price</span><span class="token punctuation">(</span>sales_price<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过isbn函数访问私有的bookNo</span>    string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span><span class="token keyword">return</span> bookNo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    计算基类的总价格：普通状态下不打折</span>    <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">net_price</span><span class="token punctuation">(</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span><span class="token keyword">return</span> n<span class="token operator">*</span>price<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 通过virtual关键字，对析构函数进行动态绑定</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Bulk_quote</span><span class="token operator">:</span><span class="token keyword">public</span> Quote<span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    继承了Quote的bookNo和price，并新增了两个新的数据成员min_qty和discount</span>    size_t min_qty<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 享受折扣的最低购买量</span>    <span class="token keyword">double</span> discount<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//折扣</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要默认的构造函数</span>    <span class="token comment" spellcheck="true">//    带参数的构造函数</span>    <span class="token function">Bulk_quote</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> book<span class="token punctuation">,</span><span class="token keyword">double</span> p<span class="token punctuation">,</span>size_t qty<span class="token punctuation">,</span><span class="token keyword">double</span> disc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//子类覆盖基类的net_price函数，定义适用于自己总价的新版本</span>    <span class="token keyword">double</span> <span class="token function">net_price</span><span class="token punctuation">(</span>size_t cnt<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实现派生类的构造函数。并且，派生类必须用基类的构造函数初始化派生类的基类部分</span>Bulk_quote<span class="token operator">::</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> book<span class="token punctuation">,</span><span class="token keyword">double</span> p<span class="token punctuation">,</span>size_t qty<span class="token punctuation">,</span><span class="token keyword">double</span> disc<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Quote</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min_qty</span><span class="token punctuation">(</span>qty<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">discount</span><span class="token punctuation">(</span>disc<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实现自己的net_price函数，并override基类的net_price函数</span><span class="token keyword">double</span> Bulk_quote<span class="token operator">::</span><span class="token function">net_price</span><span class="token punctuation">(</span>size_t cnt<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token operator">>=</span>min_qty<span class="token punctuation">)</span>        <span class="token keyword">return</span> cnt<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>discount<span class="token punctuation">)</span><span class="token operator">*</span>price<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//    量很大，享受折扣价格</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> cnt<span class="token operator">*</span> price<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//量不大，原价购买</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 计算总价</span><span class="token keyword">void</span> <span class="token function">print_total</span><span class="token punctuation">(</span><span class="token keyword">const</span> Quote <span class="token operator">&amp;</span> item<span class="token punctuation">,</span>size_t n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> ret<span class="token operator">=</span>item<span class="token punctuation">.</span><span class="token function">net_price</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"ISBN: "</span><span class="token operator">&lt;&lt;</span>item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">", total due: "</span><span class="token operator">&lt;&lt;</span>ret<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    实例化基类和派生类对象</span>    string <span class="token function">bookNo</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Quote <span class="token function">item</span><span class="token punctuation">(</span>bookNo<span class="token punctuation">,</span> <span class="token number">9.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 构造基类的对象。这本book的ISBN号为123456，单价为9.9</span>    Bulk_quote <span class="token function">bulk</span><span class="token punctuation">(</span>bookNo<span class="token punctuation">,</span> <span class="token number">9.9</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 构造派生类的对象</span>    Quote <span class="token operator">&amp;</span>r<span class="token operator">=</span>bulk<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//r绑定到bulk的Quote部分</span>    <span class="token comment" spellcheck="true">// 如果调用基类，则计算基类的价格</span>    <span class="token function">print_total</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//9.9*100=990</span>    <span class="token comment" spellcheck="true">//如果调用派生类，则计算派生类的价格</span>    <span class="token function">print_total</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 9.9*(1-0.1)*100=891</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//output:</span><span class="token comment" spellcheck="true">//ISBN: 123456, total due: 990</span><span class="token comment" spellcheck="true">//ISBN: 123456, total due: 891</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="派生类的构造函数，拷贝构造函数和拷贝赋值函数"><a href="#派生类的构造函数，拷贝构造函数和拷贝赋值函数" class="headerlink" title="派生类的构造函数，拷贝构造函数和拷贝赋值函数"></a>派生类的构造函数，拷贝构造函数和拷贝赋值函数</h1><blockquote><p>复制对象时勿忘记每一个成分，实现<strong>完整拷贝</strong> （effective C++， 条款12）</p><ul><li>派生类构造函数在初始化阶段不但要初始化派生类自己的成员，还负责初始化派生类对象的基类部分（如<code>Bulk_quote::Bulk_quote(string&amp; book,double p,size_t qty,double disc): Quote(book,p),min_qty(qty),discount(disc) {}</code>）</li><li>派生类的拷贝、移动、赋值运算符也必须显式地为基类赋值</li></ul></blockquote><p><img src="https://i.loli.net/2021/07/09/i2FIcbJHZT5L6pS.png" alt="c++ primer P555"></p><p><a href="https://blog.csdn.net/u011836078/article/details/24425467?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control" target="_blank" rel="noopener">代码示例:</a>：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Traveler</span> <span class="token punctuation">{</span>    string str<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Traveler</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">str</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">Traveler</span><span class="token punctuation">(</span><span class="token keyword">const</span> Traveler <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">=</span> t<span class="token punctuation">.</span>str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Traveler <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Traveler <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">=</span> t<span class="token punctuation">.</span>str<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string <span class="token function">showString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// class Traveler</span><span class="token keyword">class</span> <span class="token class-name">Pager</span> <span class="token punctuation">{</span>    string str<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Pager</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">str</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">Pager</span><span class="token punctuation">(</span><span class="token keyword">const</span> Pager <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">=</span> t<span class="token punctuation">.</span>str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Pager <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Pager <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">=</span> t<span class="token punctuation">.</span>str<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string <span class="token function">showString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// class Pager</span><span class="token keyword">class</span> <span class="token class-name">BusinessTraveler</span> <span class="token operator">:</span> <span class="token keyword">public</span> Traveler <span class="token punctuation">{</span>    Pager p<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">BusinessTraveler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Traveler</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//default constructor</span>    <span class="token function">BusinessTraveler</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string r<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Traveler</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// constructor</span>    <span class="token function">BusinessTraveler</span><span class="token punctuation">(</span><span class="token keyword">const</span> BusinessTraveler <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Traveler</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// copy-constructor</span>    BusinessTraveler <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> BusinessTraveler <span class="token operator">&amp;</span>b<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// operator assignment</span>    <span class="token punctuation">{</span>        Traveler<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> b<span class="token punctuation">.</span>p<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">friend</span> ostream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>out<span class="token punctuation">,</span> BusinessTraveler <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出流重载</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ostream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>out<span class="token punctuation">,</span> BusinessTraveler <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">.</span><span class="token function">showString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  "</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">showString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> out<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    BusinessTraveler b1<span class="token punctuation">;</span>    BusinessTraveler <span class="token function">b2</span><span class="token punctuation">(</span><span class="token string">"Mike"</span><span class="token punctuation">,</span> <span class="token string">"Pager1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BusinessTraveler <span class="token function">b3</span><span class="token punctuation">(</span><span class="token string">"Jane"</span><span class="token punctuation">,</span> <span class="token string">"Page2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BusinessTraveler <span class="token function">b4</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>    BusinessTraveler b5 <span class="token operator">=</span> b3<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"b1: "</span> <span class="token operator">&lt;&lt;</span>b1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"b2: "</span> <span class="token operator">&lt;&lt;</span> b2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"b3: "</span> <span class="token operator">&lt;&lt;</span> b3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"b4: "</span> <span class="token operator">&lt;&lt;</span> b4 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"b5: "</span> <span class="token operator">&lt;&lt;</span> b5 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果</span><span class="token comment" spellcheck="true">//b1:</span><span class="token comment" spellcheck="true">//b2: Mike  Pager1</span><span class="token comment" spellcheck="true">//b3: Jane  Page2</span><span class="token comment" spellcheck="true">//b4: Mike  Pager1</span><span class="token comment" spellcheck="true">//b5: Jane  Page2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读“把时间当做朋友”</title>
      <link href="/2021/06/20/growth/du-ba-shi-jian-dang-zuo-peng-you/"/>
      <url>/2021/06/20/growth/du-ba-shi-jian-dang-zuo-peng-you/</url>
      
        <content type="html"><![CDATA[<ul><li>因为不知道某个东西有什么用，所以有些人选择去学习，并在后续中根据学到的东西（如英语、表达能力、运动等）产生了更多的价值，并将这些内化为自己心智的一部分；而有些人选择放弃，不学的人永远都不知道这样东西带来的益处。<strong>同样的原因-&gt; 不同的行为-&gt; 不同的结果</strong></li><li>有些人是勤奋的懒惰者。他们看似努力，看似坚持，但其实都在做简单的事，并回避困难。殊不知，<strong>那些困难的事情才是一件事情的关键所在</strong>。最应该花费精力的事情是抓住事情的实质及关键点，并努力解决问题的能力，而不是“假装”地忙碌，用浪费时间的“空耗”来麻痹自己</li><li>合理的时间安排应该是这样的：<strong>迅速做完简单的部分，把节约出来的时间放在困难部分的处理上</strong>。然而，很多人会下意识地回避困难，于是乎，他们的时间安排是这样的：用几乎全部时间处理简单的部分，至于困难的部分，干脆“掩耳盗铃”，视而不见，暗地里希望困难自动消失……</li><li>并不是有兴趣才能做好，而是<strong>做好了才有兴趣</strong>。某件事情只要能做好，并且做到比大多数人好，他就不会对那件事情没兴趣</li><li>给我什么我就用好什么，积累到一定程度再去换能换的东西</li><li>大致记录自己做的事情，相当于给时间一个快照，然后自我总结，自我反馈</li></ul><p>就上述几点，我要时时反思自己。</p><blockquote><p>时间不会听从我们的管理，我们最多只能与时间做朋友；与时间做朋友的方法只不过是“用正确的方式做正确的事情”。</p></blockquote><hr><h1 id="书摘"><a href="#书摘" class="headerlink" title="书摘"></a>书摘</h1><ul><li>只有脆弱的人才不断需要安慰。现实是残酷的，生活是艰难的，无论什么样的时代，无论对哪一个层次的人，都是如此，对大多数年轻人来说，更是如此。人的理性建立在接受现实的基础上，不能接受现实，一切成长都是虚妄。只有坚强的人才能接受现实，只有接受现实，才有可能开始运用心智作出理性的决定，进而才有可能做时间的朋友</li><li>一切都靠积累，一切都可提前准备，越早醒悟越好。人的一生是奋斗的一生，但是有的人一生过得很伟大，有的人一生过得很琐碎。如果我们有一个伟大的理想，一颗善良的心，我们一定能把很多琐碎的日子堆砌起来，变成一个伟大的生命。但是，如果每天庸庸碌碌，没有理想，从此停止进步，那么我们未来的日子堆积起来将永远是一堆琐碎。</li><li>只有想清楚了，才有可能写清楚。想不清楚，甚至连写出来的必要都没有。</li><li>我们无法管理时间。我们真正能够管理的，是我们自己。</li><li>有些认识，哪怕是简单的常识，也需要亲身经历后才能真正体会</li><li>我们把“<strong>因为不知道那东西有什么用而决定学习的人</strong>”称为“甲”，把“因为不知道那东西有什么用而拒绝学习的人”称为“乙”。 在更多的时候，甲很可能想都没有想过“学这东西有什么用”。他从来都不问用途，只是自顾自学去了。许多年后，他自然而然地找到了这项技能的用处，享受了其已有技能所带来的种种好处。于是，这个既有经验成为他心智的一部分。当遇到新的学习机会时，他会自然而然地采取同样的策略——管它有什么用呢，学呗，学了总有用处。他也会自然而然地理解并相信“技不压身”的道理。 说完甲我们来说乙。乙当然永远不会知道这东西对他究竟有什么用，因为他从未拥有过这项技能，更不可能有机会亲身体会。随着时间推移，他凭自己的经验能够得到的结论只能是：“我没学也没什么。”也许有一天，当他因为没有学习这项技能而遇到一点尴尬的时候，可能会慨叹：“当初不懂事，要是学过就好了……”然而，这对他来说，仅限于慨叹。再次遇到学习机会的时候，他依然会选择放弃，只不过除了“不知道学它有什么用”之外还多了一个理由：“现在学也来不及了。”这种拒绝学习的判断，渐渐融入他的心智，难以更易，最终，当他再次面临同样的机会时，他还会与过去一样，做出同样的选择。</li><li>一方面是自己的无限欲望，一方面是要完成的事情太多，一方面是自我满意度的不断下降——这就是人们总是不由自主地期望速成的根源。出路肯定存在，但这出路只有一个起点——接受现实。告诉自己：我有不足，我需要时间，我没办法一蹴而就。</li><li>速成不可能，那该怎么办？答案只有一个字：换。俗话说“一分耕耘，一分收获”，从本质上看也是这一个字，换。</li><li>积累多的人之所以稳健，是因为对他来说，“我要”的欲望可以用“我有”的东西来满足。即便“我有”的暂时不够，他也能借助已经拥有的足够的努力和勤奋（抑或投机取巧的方法和经验），只需假以时日，定能如愿以偿。一旦得偿所愿，不仅“我有”的更多，“我要”的也更容易获得，如此形成良性循环。</li><li>生活的本质就是这样，你想要什么，它偏不给你什么。摆脱这个死循环的方法只有一个——给我什么我就用好什么，积累到一定程度再去换能换的东西。要不断想办法运用心智的力量去识别那些死循环和恶性循环，然后在好像不可能的情况下跳出去。出者存，困者亡。</li><li>我们必须接受这个现实——未知永远存在。而后，我们只能不断地尝试着去适应“在未知中不断前行”。</li><li>焦虑是导致时间浪费、效率低下的根源之一。当人处于焦虑的时候，甚至可能出现一切理智都被清空的情况。另外，焦虑的情绪会让人觉得“必须要做点什么”，但是，在缺乏理智的状态下做出的任何决定和行为都可能带来灾难性的后果。一个相对有效的策略是：当有问题解决不了时，可以先把它记下来，然后继续前行。注意，一定要把它们记下来。</li><li>对现状不满、急于摆脱现状，是人们常常不知不觉落入的陷阱（尽管偶尔这也是少数人真正的动力）。接受现状才是最优策略——有什么做什么，有什么用什么；做什么都做好，用什么都用好。不要常常觉得苦（这会让人忍不住顾影自怜，浪费精力与时间），而要想办法在任何情况下找到情趣——快乐是一种本事。</li><li>与时间做朋友的方法很简单：用正确的方法做正确的事情。</li><li>怎样判断所做的事情是否正确？核心的判断只有一个：看它是否现实。</li><li>几乎一切愚蠢的行为都来自否定现实、逃避现实。只有接受现实，才可能脚踏实地，避免心浮气躁、好高骛远。如果我们把成功朴素地定义为“用正确的方法做正确的事情，并在最后期限之前漂亮地完成”的话，那么，大多数所谓的“时间管理技巧”实际上发挥不了多大的作用，只不过是花拳绣腿。真正有用的往往是简单而又朴素的道理，例如“现实只能接受”。</li><li>“既勤奋又懒惰”的人群，基本上都是把这些现实当作老生常谈的道理——视而不见、听而不闻、从不记录、从不反省，才常常做出荒唐的决定，最终堕落到那分田地。</li><li><strong>所谓做事拖延，不是拖延着做事，而是拖延着不开始做事。</strong>明知自己拖延的人很痛苦，因为他们不是不知道该做什么，而是不知道为什么“无法进入状态”——这是他们能够想出来的对自己的行为最拿得出手的描述。 明明已经焦虑到不行，拖延的人为什么迟迟不开始行动？一个常见的原因是前文所述的“错误估算任务所需时间”， 总以为可以在最后期限之前完成，心里想着“时间还多的是 嘛！”可这并不是本质原因。<strong>本质原因在于恐惧——无论是来自内部的，还是来自外部的。</strong> 来自内部的恐惧在于：只要开始做事，一个人就要面临做错、做不好的风险。这原本是任何人都逃不掉的事情，但最终患上“拖延症”的人犯了一个简单的认知性错误，即认为那些能够做对、做好的人都是直接做对、做好的。从表面上看也好像确是如此。那些能够做对、做好的人，总是显得从容不迫、轻车熟路。面对这样的人，那些犯了错、做不好的人根本没办法不自卑、不怀疑自己…… 所以，很多人做事拖延的原因不过是“不求有功，但求无过”的想法。没有哪一个拖延的人愿意承认自己是这样想的，但当他们扪心自问的时候，他们都知道这描述一针见血。 只要做事，就一定会出问题。这是现实。无论何人，无论何事。如果在做事的过程中没有出现任何问题，那肯定不是在做事，而是在做梦。 认清并接受这个现实很重要。只有这样，才能心平气和地去做事。来自外部的恐惧在于过分在意外界的评价。</li><li>事实上，那些真正能够做对、做好的人，绝不会随意嘲弄、打击别人，因为他们是做对过、做好过的人，他们一路走过来，心里非常清楚做对、做好有多么不易，所以，他们会不吝一切机会去鼓励那些尝试做事情的人。这甚至可以当作一种测试方法：如果一个人经常嘲弄他人，那只能说明他自己不怎么样；否则，他会像那些极少数已经做对、做好的人一样，给予别人真诚的鼓励而非嘲弄。尽管那些能真正做对、做好的人有时也会给出负面评价，但这些评价通常是“建设性的负面评价”，并不是为了获得优越感而发出的嘲弄。 所以，我们没有必要在意来自他人的、非建设性的负面 评价。没有谁从一开始就能做对、做好。所有做对、做好的 人都是一路磕磕绊绊走过来的，这就是生活常态。而动辄给 出非建设性负面评价的人，往往不是正经做事的人，他们和 那些正经做事的人身处不一样的世界，这也是生活常态。</li><li>合理的时间安排应该是这样的：迅速做完简单的部分，把节约出来的时间放在困难部分的处理上。然而，很多人会下意识地回避困难，于是乎，他们的时间安排是这样的：用几乎全部时间处理简单的部分，至于困难的部分，干脆“掩耳盗铃”，视而不见，暗地里希望困难自动消失……</li><li><strong>很多人实际上根本不知道自己所谓的“喜欢做某件事情”很可能只是因为那件事情相对简单、容易获得奖励而已。拖延的人并非不做事，他们做事，甚至做很多事。拖延的人也并非不努力，他们会花很长时间去做事，但做的只是很多简单的事。他们每次回避困难的时候，都不是故意的，并且往往已经给自己找了恰当的借口。</strong></li><li>要学着像一个项目管理者那样思考——他们更多地<strong>关注“方法”</strong>，他们会花费比别人更多（多出许多倍）的时间去落实每一个步骤，在确认无误之后，他们才会有效地分配任务</li><li>在做任何事情之前，通过关注“方法”去反复拆分任务，最终确认每个子任务都是可完成的，这是一个人不可或缺的功课。</li><li>无用的事情，哪怕非常有趣都不应该去做；而有用的事情，哪怕非常无趣，都应该去做。</li><li>害怕当众演说的原因，人们却未必真的了解。其实很简单——准备不足，所以害怕。</li><li>很多人做事半途而废、不了了之的根本原因在于从未想过要给自己执行任务时的表现设计一个验收机制。</li><li><strong>很多人常常拒绝学习，他们拒绝学习的理由和那些痴迷学习的人一样——不知道它有什么用。</strong></li><li>第一，拒绝学习就不可能有机会知道学习之后的收获；第二，由于不知道学习之后的收获是什么，也就不可能知道那收获有多好、多大；第三，既然对学习的好处无从了解，自然就没有学习的动力……</li><li>很多人正是因为没有目标才不停地“学习”。</li><li><strong>实践能力</strong>是自学能力最终转化为真正价值的根本。</li><li>我所见到的绝大多数学生英语水平没有进步的本质原因只是懒惰，他们在第一步就已经放弃实践了。</li><li>拒绝独立思考、把思考的工作交给别人，不仅不省时间，恰恰相反，非常浪费时间——甚至浪费一生的时间。</li><li>很多人就是这样，坚持拒绝思考，然后用天下最累的方式生活而不自知。</li><li>一旦意识到对立论证的存在，应该“哪一个更合理、更现实就接受哪一个”，而非“哪一个更积极就接受哪一个”，因为后者只是自我欺骗而已。</li><li>语言就是一个便宜（甚至免费）而又有效的辅助工具。</li><li>对一个人来说，一定要问自己这个问题：我不喜欢做某件事情，是不是仅仅因为这件事我没有做好？若是因为自己没有做好而不喜欢，就要考虑另一个问题：做好这件事情究竟对自己有没有意义？如果有，那就要努力做，直到做好为止，没有其他选择。</li><li>人们总说他们真正感兴趣的是其他事情。可事实上，出现这种感觉应该仅仅是因为他们还没有开始做那件事，也还没有在那件事上遭受挫折而已。</li><li>兴趣并不是很重要，至少没有我们想象得那么重要。对一个人来说，某件事情只要能做好，并且做到比大多数人好，他就不会对那件事情没兴趣。</li><li><strong>往往并不是有兴趣才能做好，而是做好了才有兴趣。 人们总是搞错顺序，并对这样的错误毫不知晓</strong>。虽然并非绝对，但完成大多数事情，确实都需要熟能生巧。做得多了，自然就能擅长；擅长了，自然就做得比别人好；做得比别人好了，兴趣就浓起来了，而后就更喜欢做、更擅长……进入良性循环。可同样的，做得多，就需要大量的时间投入，所谓“没兴趣”，往往不过是结果，如果将它当作“不去做好”的理由，最终的惩罚就是大量时间白白流逝。</li><li><em><em> 浪费时间、虚度年华的人，有一个共同的特征——拼命想控制自己完全不能控制的事物，却在自己真正能掌控的地方彻底失控。</em></em></li><li>当一个人没有准备好的时候，对他来讲，不存在任何机会。机会时时刻刻都会出现在我们身边，关键在于，我们有没有足够努力，做到“万事俱备，只欠东风”。而当一个人准备好了的时候，随处都是机会，而且所有的机会都是切实的、可以把握的。</li><li>尽管绝大多数人不愿意承认，但他们的所谓“友谊”实际上只不过是某种意义上的“交换关系”。</li><li>资源多的人更喜欢也更可能与另外一个资源数量或者质量对等的人进行交换，因为在这种情况下“公平交易”更容易产生。</li><li>这些被公认为优秀的人，往往并不“低调”，也不“平易近人”。他们不是故意这样做的。他们无意去惹恼身边那些在他们看来“平庸”的人，只不过他们无形中有这样的体会：与这些人交流，沟通成本太高。</li><li>这些被公认为优秀的人，往往并不“低调”，也不“平易近人”。他们不是故意这样做的。他们无意去惹恼身边那些在他们看来“平庸”的人，只不过他们无形中有这样的体会：与这些人交流，沟通成本太高。这些人当中不多见的那些心态平和者，一般都是经历了波折，才终于意识到自己应该保护自己。他们发现，有些误解根本没机会解释。于是，他们开始“谦虚”，他们学会“低调”，他们显得“平易近人”。</li><li>往往只有优秀的人，才会拥有有效的人脉。而且，正因为这些人随时随地都可能要回避“不公平交换”的企图</li><li>某个人经过长期的积累，真正成为某个领域的专家，他必会惊喜于真正意义上的、有价值的、所谓“高效”的人脉居然会破门而入。</li><li>集中精力改变那些自己能够改变的事情，暂时忽略那些自己不能改变的事情。专心打造自己，让自己成为一个优秀的人、一个有用的人、一个独立的人，比什么都重要。打造自己，就等于打造自己的人脉——如果人脉真像传说中那么重要的话。其实，我总觉得关于人脉导致成功的传说虚无缥缈，不过是些不明真相的人臆造出的幻象罢了。</li><li>把时间当作朋友，一路前行。当时间陪伴你足够久的时候，它自会给你的耐心相应的回报。</li><li>我们遇到的尴尬，大多都是自找的。过去犯错误，现在就要承担后果。这就好像黑帮片里的常用台词说的那样：“出来混，迟早要还的。”为了将来不再面临尴尬，必须改变今天的观念和行为。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Growth </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reading List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读“自卑与超越”</title>
      <link href="/2021/06/20/growth/du-zi-bei-yu-chao-yue/"/>
      <url>/2021/06/20/growth/du-zi-bei-yu-chao-yue/</url>
      
        <content type="html"><![CDATA[<h1 id="书摘"><a href="#书摘" class="headerlink" title="书摘"></a>书摘</h1><ul><li>人生目标一旦确定，自我训练自然也会随即而来。随着时间的推移，他便会充实自己，提高个人能力，解决生活中的三大问题。我们不妨以爱情及婚姻为例。如果我们关注伴侣，想要伴侣拥有舒适、幸福、丰富的生活，那我们必然会为此全力以赴。如果我们不思贡献，任由个性不切实际地发展，那我们只会变得跋扈专横，面目可憎。</li><li>意义并非由境况决定，但我们赋予境况的意义决定了我们自身。</li><li>身体的外形和发育总会受到心灵的影响，并会表现出心灵方面的错误和不足。我们经常能观察到，困难无法克服时，心灵上的挫败感就会通过肢体语言表达出来。</li><li>一个人面对自己无法适应或妥善处理的问题时，明确表示自己无法解决该问题，即为自卑情结。这个定义说明，愤怒、眼泪、道歉都是一样的，都是自卑情结的表现方式。</li><li>最好的方法是先了解孩子们想要知道什么，再回答孩子的问题，而不是从自己的角度出发，强迫他们接受我们认为众所周知的事情。我们必须赢得孩子的信任和孩子的情感，让孩子相信我们想和他合作，想帮他一起找到解决问题的方法。</li><li>“婚姻是爱情的结果，是对异性伴侣最亲密的贡献。其表现为二人相互吸引，相互扶持及生儿育女的共同愿望中。我们很容易看出：爱情和婚姻都是合作的表现形式，这种合作不只是为了两个人的幸福，也是为了全人类的利益。”</li><li>如果二者之间的付出都非常真诚，那么谁都不会有低人一等或屈尊降贵的感觉。只有夫妻双方都有这种感觉，才会出现真正的平等。每一方都要尽力为对方分担，丰富对方的生活，这样双方都会有安全感。他们都会有被人需要的感觉，这也是婚姻最坚实的保障，是夫妻关系和谐幸福的意义所在。</li><li>合作的过程中，不可能让夫妻中的一方接受从属地位。两个人中，如果一个只想发号施令，控制对方，那么他们在一起必定不会有美满的结局。在我们当前的条件下，很多男人都觉得自己应该是家里的领导者，是主人，要说一不二——当然，很多女人也这么想。这就是为何很多婚姻都不幸福的原因。没人能平心静气地接受卑微的地位。伴侣之间必须平等，只有平等，他们才能找到解决问题的方法。</li><li>帮助孩子的关键就是永远不要撒谎，永远不要回避问题，我们要了解孩子为什么有此一问，并向孩子解释他想了解且可以接受的部分。</li><li>爱情中的伴侣关系，若是给犹豫和怀疑留有空间，那么必然不会稳固。合作需要天长地久的决心，只有合作中的决心无法撼动，我们才能说这种结合是真正的婚姻与爱情。</li><li>充满爱意的感情都有以下特征：忠诚、真实、可靠、毫无保留、宽和大度……如果一个人不忠不信，那肯定不适合结婚。假如夫妻双方都同意保有个人的自由，那么二者之间就不会有真诚的爱情。这绝非爱情，因为爱情中我们不能随心所欲，肯定要受到合作的约束。</li><li>婚姻破裂的原因通常是夫妻双方没有竭尽全力：他们不想创造幸福的婚姻生活，只是等着索取。若以这种方式对待爱情与婚姻的问题，结局肯定是失败。把爱情与婚姻当作天堂，或者把婚姻当作故事的结尾，都是错误的认知。两个人结婚之后，夫妻关系中的各种可能性才会逐渐萌芽。</li><li>你必须不相信任何事。即不要被眼前的困境束缚了自己，不能相信当下的困境就是人的一生，而是要勇于突破，大胆创造属于自己的生活。</li><li>有这些孩子需要观众，需要市场，否则便无法进步。如果没有人时刻看着，那他们就不会再继续努力。对于这种孩子来说，数学是他们的一大难题和挑战。如果只是让他们背公式的话，一切都没有问题，可一旦让他们自己做题，他们就不知道从何处下手了。这个问题看上去似乎不太严重，但给我们的日常生活带来巨大风险的就是这种随时需要支持和关注的孩子。如果孩子的这种态度一直没有改变，那他成年之后，也会需要别人的支持。只要出现问题，他的反应就是强迫他人帮助自己解决。这种人，一生都不会为其他人的幸福做贡献，反而会一直成为别人的负累。</li><li>为了成功解决爱情与婚姻的问题，参与职业分工，并且与其他人有良好友善的接触非常重要。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Growth </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reading List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP教程笔记</title>
      <link href="/2021/06/14/c/cpp-jiao-cheng-bi-ji/"/>
      <url>/2021/06/14/c/cpp-jiao-cheng-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li><a href="https://www.runoob.com/cplusplus/cpp-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a></li><li>安装CLion（<a href="https://blog.laoplayer.com/a/jishujiaocheng/2020/1209/10.html" target="_blank" rel="noopener">2020版</a>，<a href="https://pan.baidu.com/s/1j9vaKJpoeam6zC76xzoXqw" target="_blank" rel="noopener">2021版（提取码1111）</a>）及<a href="https://www.cnblogs.com/attentle/p/12652512.html" target="_blank" rel="noopener">配置</a></li></ul></blockquote><ul><li>ROS教程<ul><li><a href="https://www.bilibili.com/video/BV1mJ411R7Ni?p=7&spm_id_from=pageDriver" target="_blank" rel="noopener">中科院软件所-机器人操作系统入门（ROS入门教程）</a><ul><li><a href="https://sychaichangkun.gitbooks.io/ros-tutorial-icourse163/content/" target="_blank" rel="noopener">课程讲义</a> </li></ul></li><li><a href="https://www.youtube.com/watch?v=scrkcYN2xSk&list=PL4XGr_39oSTlRckDYw7FbGRyIOfH63Gc5&index=1" target="_blank" rel="noopener">古月 · ROS入门21讲</a></li><li><a href="http://wiki.ros.org/cn" target="_blank" rel="noopener">ROS官网教程</a></li></ul></li></ul><h1 id="基础教程"><a href="#基础教程" class="headerlink" title="基础教程"></a>基础教程</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><ul><li>默认情况下，C++ 使用<em>传值调用</em>来传递参数。一般来说，这意味着<em>函数内的代码不能改变用于调用函数的参数</em>。</li><li>当定义一个函数，可以为参数列表中后边的每一个参数指定默认值。当调用函数时，如果实际参数的值留空，则使用这个默认值。</li></ul><h3 id="指针调用"><a href="#指针调用" class="headerlink" title="指针调用"></a>指针调用</h3><ul><li>向函数传递参数的指针调用方法，把参数的地址复制给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token operator">*</span>x<span class="token punctuation">;</span>    <span class="token operator">*</span>x<span class="token operator">=</span><span class="token operator">*</span>y<span class="token punctuation">;</span>    <span class="token operator">*</span>y<span class="token operator">=</span>tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">change</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引用调用"><a href="#引用调用" class="headerlink" title="引用调用"></a>引用调用</h3><ul><li>该方法把参数的引用赋值给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> tmp<span class="token operator">=</span>x<span class="token punctuation">;</span>    x<span class="token operator">=</span>y<span class="token punctuation">;</span>    y<span class="token operator">=</span>tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Lambda-函数与表达式"><a href="#Lambda-函数与表达式" class="headerlink" title="Lambda 函数与表达式"></a><a href="https://docs.microsoft.com/en-us/cpp/cpp/examples-of-lambda-expressions?view=msvc-160&viewFallbackFrom=vs-2019" target="_blank" rel="noopener">Lambda 函数与表达式</a></h3><p>Lambda函数的语法定义如下：</p><pre><code>[capture](parameters) mutable -&gt;return-type{statement}</code></pre><p><strong>其中：</strong></p><ul><li><strong>[capture]</strong>：捕捉列表。捕捉列表总是出现在 lambda 表达式的开始处。事实上，[] 是 lambda 引出符。编译器根据该引出符判断接下来的代码是否是 lambda 函数。捕捉列表能够捕捉上下文中的变量<strong>供 lambda 函数使用</strong>（若某个参数不写到捕获列表中，则在lambda函数中不能用该参数，当然啦，自己的参数列表除外）。</li><li>(parameters)：参数列表。与普通函数的参数列表一致。如果不需要参数传递，则可以连同括号 () 一起省略。</li><li><strong>mutable</strong>：mutable 修饰符。默认情况下，lambda 函数总是一个 const 函数，mutable 可以取消其常量性。若使用该修饰符时，参数列表不可省略（即使参数为空），表示lambda会<strong>修改捕获的参数</strong>。</li><li><strong>&gt;return_type</strong>：返回类型。用追踪返回类型形式声明函数的返回类型。出于方便，不需要返回值的时候也可以连同符号 -&gt; 一起省略。此外，在返回类型<strong>明确</strong>的情况下，也可以<strong>省略</strong>该部分，让编译器对返回类型进行推导。<strong>不明确</strong>时，必须<strong>指定返回类型</strong></li><li><strong>{statement}</strong>：函数体。内容与普通函数一样，不过除了可以使用参数之外，还可以使用所有捕获的变量。</li></ul><p>在 lambda 函数的定义式中，<strong>参数列表和返回类型都是可选部分</strong>，而捕捉列表和函数体都可能为空，C++ 中最简单的 lambda 函数只需要声明为<code>[]{};</code></p><p><a href="https://www.geeksforgeeks.org/lambda-expression-in-c/" target="_blank" rel="noopener">示例1</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// C++ program to demonstrate lambda expression in C++</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Function to print vector</span><span class="token keyword">void</span> <span class="token function">printVector</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// lambda expression to print vector</span>    <span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">printVector</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// below snippet find first number greater than 4</span>    <span class="token comment" spellcheck="true">// find_if searches for an element for which</span>    <span class="token comment" spellcheck="true">// function(third argument) returns true</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator p <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"First number greater than 4 is : "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// function to sort vector, lambda expression is for sorting in</span>    <span class="token comment" spellcheck="true">// non-decreasing order Compiler can make out return type as</span>    <span class="token comment" spellcheck="true">// bool, but shown here just for explanation</span>    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">></span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printVector</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// function to count numbers greater than or equal to 5</span>    <span class="token keyword">int</span> count_5 <span class="token operator">=</span> <span class="token function">count_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The number of elements greater than or equal to 5 is : "</span>         <span class="token operator">&lt;&lt;</span> count_5 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// function for removing duplicate element (after sorting all</span>    <span class="token comment" spellcheck="true">// duplicate comes together)</span>    p <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// resizing vector to make size equal to total different number</span>    v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printVector</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// accumulate function accumulate the container on the basis of</span>    <span class="token comment" spellcheck="true">// function provided as third argument</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Factorial of 10 is : "</span> <span class="token operator">&lt;&lt;</span> f <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//     We can also access function by storing this into variable</span>    <span class="token keyword">auto</span> square <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Square of 5 is : "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum_of_elems <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vv<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">for_each</span><span class="token punctuation">(</span>vv<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vv<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum_of_elems <span class="token operator">+</span><span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sum_of_elems is: "</span> <span class="token operator">&lt;&lt;</span> sum_of_elems<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="指向数组的指针"><a href="#指向数组的指针" class="headerlink" title="指向数组的指针"></a>指向数组的指针</h3><ul><li>数组名对应的是数组中<strong>第一个元素的地址</strong></li></ul><pre><code>int main() {    int arr[] = {1, 2, 3};    cout &lt;&lt; arr &lt;&lt; endl; // 0x61fe14}</code></pre><ul><li>若把第一个元素的地址存储在 指针p 中，则可以使用 <code>*p、*(p+1)、*(p+2)</code> 等来访问数组元素</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span>arr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    等价于</span><span class="token comment" spellcheck="true">//    int *p;</span><span class="token comment" spellcheck="true">//    p=arr;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 利用指针，依次输出arr中的值</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span><span class="token punctuation">(</span>arr<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//利用指针，依次输出arr中的值</span>        cout<span class="token operator">&lt;&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//利用索引，依次输出arr中的值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>C++ 对 char 型数组做了特殊规定，<strong>直接输出首地址时，会输出数组内容</strong>。如果想得到地址，可采用 &amp;</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"hello world"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 hello world</span>    cout <span class="token operator">&lt;&lt;</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 h</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 0x61fe14</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>C++ 中，将 char * 或 char[] 传递给 cout 进行输出，结果会是整个字符串，如果想要获得字符串的地址（第一个字符的内存地址），可使用以下方法：<ul><li><strong>强制转化为其他指针</strong>（非 char<em>）。可以是 `void </em>，int <em>，float </em>， double <em> `等。</em> 使用 &amp;s[0] 不能输出 s[0]（首字符）的地址。因为 &amp;s[0] 将返回 char<em>，对于 char</em>（char 指针），cout 会将其作为字符串来处理，向下查找字符并输出直到字符结束 *</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span>  var<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span>  <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指针中的数组地址</span>    ptr <span class="token operator">=</span> var<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Address of var["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"] = "</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 强制转化成其他类型的指针</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Value of var["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"] = "</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Address of var[0] = 0x61fe0d</span><span class="token comment" spellcheck="true">//Value of var[0] = a</span><span class="token comment" spellcheck="true">//        Address of var[1] = 0x61fe0d</span><span class="token comment" spellcheck="true">//Value of var[1] = b</span><span class="token comment" spellcheck="true">//        Address of var[2] = 0x61fe0d</span><span class="token comment" spellcheck="true">//Value of var[2] = c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="传递数组给函数"><a href="#传递数组给函数" class="headerlink" title="传递数组给函数"></a>传递数组给函数</h3><ul><li>如果想要在函数中传递一个一维数组作为参数，必须以下面三种方式来声明函数形式参数，这三种声明方式的结果是一样的，因为每种方式都会告诉编译器将要接收一个整型指针。（_实参可以是数组名_）<ul><li>形参是一个指针 <code>void myFunction(int *param)</code></li><li>形参是一个已定义大小的数组 <code>void myFunction(int param[10])</code></li><li>形参是一个未定义大小的数组  <code>void myFunction(int param[])</code></li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这三种形参都可以</span><span class="token comment" spellcheck="true">//double avgFunc(int arr[5],int size)</span><span class="token comment" spellcheck="true">//double avgFunc(int arr[],int size)</span><span class="token keyword">double</span> <span class="token function">avgFunc</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token operator">+</span><span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>arr<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等价于res+=arr[i];</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    这里要强制转化一下res，否则除法返回的类型为舍去小数的整数 如 5/2=2</span>    <span class="token keyword">return</span> <span class="token keyword">double</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">/</span>size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> avg<span class="token operator">=</span><span class="token function">avgFunc</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>avg<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从函数返回数组"><a href="#从函数返回数组" class="headerlink" title="从函数返回数组"></a>从函数返回数组</h3><ul><li>C++ _不允许_返回一个完整的数组作为函数的参数。但是<strong>可以通过指定不带索引的数组名来返回一个指向数组的指针</strong>（也就是说，C++中函数是不能直接返回一个数组的，但是数组其实就是指针，所以<strong>可以让函数返回指针来实现</strong>）。如果想要从函数返回一个一维数组，<strong>必须声明一个返回指针的函数</strong>。另外，C++ 不支持在函数外返回局部变量的地址，除非<strong>定义局部变量为 static 变量</strong></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 要生成和返回随机数的函数</span><span class="token comment" spellcheck="true">// 声明一个返回指针的函数</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 要调用上面定义函数的主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 一个指向整数的指针</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"*(p + "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">") : "</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//output:</span><span class="token comment" spellcheck="true">//1</span><span class="token comment" spellcheck="true">//2</span><span class="token comment" spellcheck="true">//*(p + 0) : 1</span><span class="token comment" spellcheck="true">//*(p + 1) : 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="C风格字符串"><a href="#C风格字符串" class="headerlink" title="C风格字符串"></a>C风格字符串</h3><ul><li>C 风格的字符串起源于 C 语言，并在 C++ 中继续得到支持。字符串实际上是使用 null 字符 \0 终止的一维字符数组。下面的声明和初始化创建了一个 RUNOOB 字符串。由于在数组的末尾存储了空字符，所以字符数组的大小比单词 RUNOOB 的字符数多一个</li><li><code>char site[7] = {&#39;R&#39;, &#39;U&#39;, &#39;N&#39;, &#39;O&#39;, &#39;O&#39;, &#39;B&#39;, &#39;\0&#39;}</code>; 可以写成<code>char site[] = &quot;RUNOOB&quot;;</code> site[7]的结果为0</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> site<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> site1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"RUNOOB"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    输出均为空白</span>    cout<span class="token operator">&lt;&lt;</span>site<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>site1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  长度均为6</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>site<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>site1<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-String类"><a href="#C-String类" class="headerlink" title="C++ String类"></a>C++ String类</h3><ul><li>该类提供了更丰富的功能以及<a href="http://c.biancheng.net/view/400.html" target="_blank" rel="noopener">常用的操作</a></li></ul><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><p>(务必看该部分的<a href="https://www.runoob.com/cplusplus/cpp-array-of-pointers.html" target="_blank" rel="noopener">菜鸟网站笔记</a>)</p><ul><li>数组中存放的是（指向char，int等类型的 ）的指针</li><li>可以用一个<strong>指向字符</strong>的<strong>指针数组</strong>来存储一个字符串列表</li></ul><blockquote><p>由于 C++ 运算符的<strong>优先级</strong>中，<strong>* 小于 []</strong>，所以 ptr 先和 [] 结合成为数组，然后再和 int <em> 结合形成数组的元素类型是 int </em> 类型，得到一个叫一个数组的元素是指针，简称<strong>指针数组</strong>。</p><p>int <em>(ptr[3]);<br>这个和上面的一样，**优先级顺序是 </em> 小于 ()<em>*，() 等于 []。ptr 先和 [] 结合成为数组，然后再和 int </em> 结合形成数组的元素类型是 int * 类型，得到一个叫一个数组的元素是指针。</p><p>int (<em>ptr)[3];<br>这个就不一样了，优先级顺序是 </em> 小于 ()，() 等于 []，() 和 [] 的优先级一样，但是结合顺序是从左到右，所以先是 () 里的 <em> 和 ptr 结合成为一个指针，然后是 (</em>ptr) 和 [] 相结合成为一个数组，最后叫一个指针 ptr 指向一个数组，简称<strong>数组指针</strong>。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>names<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"Zara Ali"</span><span class="token punctuation">,</span>            <span class="token string">"Hina Ali"</span><span class="token punctuation">,</span>            <span class="token string">"Nuha Ali"</span><span class="token punctuation">,</span>            <span class="token string">"Sara Ali"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">" --- names[i]              = "</span> <span class="token operator">&lt;&lt;</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">" --- *names[i]             = "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"----------------"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//--- names[i]              = Zara Ali</span><span class="token comment" spellcheck="true">//--- *names[i]             = Z</span><span class="token comment" spellcheck="true">//----------------</span><span class="token comment" spellcheck="true">//--- names[i]              = Hina Ali</span><span class="token comment" spellcheck="true">//--- *names[i]             = H</span><span class="token comment" spellcheck="true">//----------------</span><span class="token comment" spellcheck="true">//--- names[i]              = Nuha Ali</span><span class="token comment" spellcheck="true">//--- *names[i]             = N</span><span class="token comment" spellcheck="true">//----------------</span><span class="token comment" spellcheck="true">//--- names[i]              = Sara Ali</span><span class="token comment" spellcheck="true">//--- *names[i]             = S</span><span class="token comment" spellcheck="true">//----------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="传递指针给函数"><a href="#传递指针给函数" class="headerlink" title="传递指针给函数"></a>传递指针给函数</h3><ul><li>定义函数时，声明函数<strong>形参为指针类型,实参是一个地址</strong></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义函数时，声明函数形参为指针类型</span><span class="token keyword">void</span> <span class="token function">changeNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">changeNum</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果为2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li>把引用作为返回值：通过使用引用来替代指针，会使 C++ 程序更容易阅读和维护。C++ 函数可以返回一个引用，方式与返回一个指针类似</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变特定位置的数字，函数返回一个引用</span><span class="token keyword">int</span> <span class="token operator">&amp;</span> <span class="token function">changeNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给全局变量中的一个元素起个别名 r，返回r</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> size<span class="token operator">=</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//5</span><span class="token comment" spellcheck="true">//    结果为01234</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  改变第0个位置的值，结果为  11234</span>    <span class="token keyword">int</span>  <span class="token operator">&amp;</span>tmp<span class="token operator">=</span> <span class="token function">changeNum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里要为引用，否则结果仍然为01234</span>    tmp<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul><li>数据结构是 C++ 中另一种用户自定义的可用的数据类型，它允许存储不同类型的数据项</li></ul><blockquote><p>将结构体应用于函数时，通过与普通类型的变量进行类比，可以更好地理解</p><ul><li>e.g., 普通类型中，有  <code>int a （或者 int *a）</code>, 则在结构体中，有  <code>Student stu （或者 Student *stu）</code></li><li>以_类比_的方式来讲，<strong><code>int</code>与<code>Student</code>同等地位，变量名称<code>a</code>与变量名称<code>stu</code>同等地位</strong>   （实际上是<code>int</code>与 <code>sturct Student</code>同等地位，但是struct可以省略）</li></ul></blockquote><h3 id="结构作为函数参数"><a href="#结构作为函数参数" class="headerlink" title="结构作为函数参数"></a>结构作为函数参数</h3><ul><li>主函数中，定义结构体的变量s1，并传到函数中</li><li>在形参中，声明变量的类型 （如<code>void printStudent( Student stu)</code>）</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> Student<span class="token punctuation">{</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//形参中，stu的数据类型为 Student</span><span class="token comment" spellcheck="true">// 写成 void printStudent(struct Student stu) 也可以</span><span class="token keyword">void</span> <span class="token function">printStudent</span><span class="token punctuation">(</span> Student stu<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span>stu<span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>stu<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    定义结构体类型为Student的变量 s1</span>    Student s1<span class="token punctuation">;</span>    s1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"Amy"</span><span class="token punctuation">;</span>    s1<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    把s1变量传到函数中</span>    <span class="token function">printStudent</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Amy</span><span class="token comment" spellcheck="true">//10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指向结构的指针"><a href="#指向结构的指针" class="headerlink" title="指向结构的指针"></a>指向结构的指针</h3><ul><li>主函数中，定义结构体的变量s1，并把<strong>s1的地址</strong>传到函数中</li><li>在形参中，声明变量的类型 （如<code>void printStudent( Student *stu)</code> ，是student类型的stu）</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> Student<span class="token punctuation">{</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的形参为指向结构的指针</span><span class="token keyword">void</span> <span class="token function">printStudent</span><span class="token punctuation">(</span> Student <span class="token operator">*</span>stu<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span>stu<span class="token operator">-</span><span class="token operator">></span>name<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>stu<span class="token operator">-</span><span class="token operator">></span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Student s1<span class="token punctuation">;</span>    s1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"Amy"</span><span class="token punctuation">;</span>    s1<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">printStudent</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把数据结构的s1变量的地址传递给函数</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//output:</span><span class="token comment" spellcheck="true">//Amy</span><span class="token comment" spellcheck="true">//10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="向量中存放结构体"><a href="#向量中存放结构体" class="headerlink" title="向量中存放结构体"></a>向量中存放结构体</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> data_config <span class="token punctuation">{</span>    <span class="token keyword">int</span> m_freq<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> m_dis_near<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> m_dis_far<span class="token punctuation">;</span>    string m_path<span class="token punctuation">;</span><span class="token punctuation">}</span> my_data1<span class="token punctuation">,</span> my_data2<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    my_data1<span class="token punctuation">.</span>m_freq <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    my_data1<span class="token punctuation">.</span>m_dis_near <span class="token operator">=</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    my_data1<span class="token punctuation">.</span>m_dis_far <span class="token operator">=</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    my_data1<span class="token punctuation">.</span>m_path <span class="token operator">=</span> <span class="token string">"this is my 20 path"</span><span class="token punctuation">;</span>    my_data2<span class="token punctuation">.</span>m_freq <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    my_data2<span class="token punctuation">.</span>m_dis_near <span class="token operator">=</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    my_data2<span class="token punctuation">.</span>m_dis_far <span class="token operator">=</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    my_data2<span class="token punctuation">.</span>m_path <span class="token operator">=</span> <span class="token string">"this is my 50 path"</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>data_config<span class="token operator">></span> all_data_config<span class="token operator">=</span><span class="token punctuation">{</span>my_data1<span class="token punctuation">,</span> my_data2<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// int tmp = all_data_config.size();</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i<span class="token operator">:</span> all_data_config<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>m_freq <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>m_path <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"==="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="类-amp-对象"><a href="#类-amp-对象" class="headerlink" title="类&amp;对象"></a>类&amp;对象</h2><h3 id="头文件、源文件、主文件书写"><a href="#头文件、源文件、主文件书写" class="headerlink" title="头文件、源文件、主文件书写"></a>头文件、源文件、主文件书写</h3><ul><li>头文件定义类和函数申明</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> z<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>源文件实现函数</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Box.h"</span></span><span class="token keyword">int</span> Box<span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">*</span>y<span class="token operator">*</span>z<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Box<span class="token operator">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token operator">=</span>a<span class="token punctuation">;</span>    y<span class="token operator">=</span>b<span class="token punctuation">;</span>    z<span class="token operator">=</span>c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>主文件调用函数</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Box.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span>  std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Box b1<span class="token punctuation">;</span>    Box b2<span class="token punctuation">;</span>    b1<span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    b1<span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    b1<span class="token punctuation">.</span>z<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    b2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>b1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>b2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作用域符解析"><a href="#作用域符解析" class="headerlink" title="作用域符解析"></a><a href="https://zhuanlan.zhihu.com/p/137383328" target="_blank" rel="noopener">作用域符解析</a></h3><p>作用域运算符为<code>::</code>，它用于以下目的：</p><ul><li>当存在具有相同名称的局部变量时，要访问全局变量</li><li>在类之外定义函数</li><li>访问一个类的静态变量</li><li><strong>如果有多个继承：</strong>如果两个祖先类中存在相同的变量名，则可以使用作用域运算符进行区分</li><li><strong>对于命名空间：</strong>如果两个命名空间中都存在一个具有相同名称的类，则可以将名称空间名称与作用域解析运算符一起使用，以引用该类而不会发生任何冲突</li><li><strong>在另一个类中引用一个类：</strong>如果另一个类中存在一个类，我们可以使用嵌套类使用作用域运算符来引用嵌套的类</li></ul><h3 id="类访问修饰符"><a href="#类访问修饰符" class="headerlink" title="类访问修饰符"></a><a href="https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html" target="_blank" rel="noopener">类访问修饰符</a></h3><blockquote><p>如果继承时不显示声明是 private，protected，public 继承，则默认是 private 继承，在 struct 中默认 public 继承</p></blockquote><ul><li><p>public 继承：基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：public, protected, private</p></li><li><p>protected 继承：基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：protected, protected, private</p></li><li><p>private 继承：基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：private, private, private</p></li></ul><p>但无论哪种继承方式，都有：</p><ul><li>private 成员只能被<strong>本类成员（类内）和友元</strong>访问，不能被派生类访问</li><li>protected 成员可以被<strong>派生类</strong>访问</li><li>类外都不能访问private（除非友元）和protected成员</li></ul><h3 id="构造函数-amp-析构函数"><a href="#构造函数-amp-析构函数" class="headerlink" title="构造函数 &amp; 析构函数"></a>构造函数 &amp; 析构函数</h3><p><img src="https://s2.loli.net/2022/01/23/4DkjYosrbEmna53.png" alt="20220123155742"></p><ul><li>构造函数是类的一种特殊的成员函数，它会在<strong>每次创建类的新对象时执行</strong></li><li>构造函数的名称<strong>与类的名称是完全相同</strong>的，并且不会返回任何类型，也不会返回 void。构造函数<strong>可用于为某些成员变量设置初始值</strong>（默认的构造函数没有任何参数，但如果需要，构造函数也可以带有参数。这样在创建对象时就会给对象赋初始值）</li><li>构造器中，初始化顺序最好要<strong>与变量在类声明的顺序一致</strong>（否则可能出错）</li></ul><p>该例子中包含无参/有参构造器。通过带参数的构造器对对象进行初始化，然后用setAge和getAge重新设置并访问私有变量age</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把age设为private变量</span><span class="token keyword">public</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过getAge和setAge函数访问私有变量成员：可以在setAge中设一些限制，如年龄范围等</span>    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//带有参数的构造器，可以对Student中的变量进行初始化</span>    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">const</span> string <span class="token operator">&amp;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问私有变量age</span><span class="token keyword">int</span> Student<span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//设置私有变量（并可对该变量加一些限制）</span><span class="token keyword">void</span> Student<span class="token operator">::</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> age <span class="token operator">></span> <span class="token number">200</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"invalid age"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        Student<span class="token operator">::</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//不带参数的构造器</span>Student<span class="token operator">::</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//带有参数的构造器，可以对对象进行初始化</span>Student<span class="token operator">::</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">const</span> string <span class="token operator">&amp;</span>name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">age</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    通过有参构造器初始化对象s1，输出年龄和名字</span>    Student <span class="token function">s1</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"Amy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"S1:  "</span> <span class="token operator">&lt;&lt;</span> s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\t'</span> <span class="token operator">&lt;&lt;</span> s1<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    初始化对象s2， 默认调用无参构造器,然后设置变量值</span>    Student s2<span class="token punctuation">;</span>    s2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Bob"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"S2:  "</span> <span class="token operator">&lt;&lt;</span> s2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\t'</span> <span class="token operator">&lt;&lt;</span> s2<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    初始化对象s3,根据函数重载规则，调用有参构造器</span>    Student <span class="token function">s3</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    重新设置s3的年龄和名字</span>    s3<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Amy's brother"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"S3:  "</span> <span class="token operator">&lt;&lt;</span> s3<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\t'</span> <span class="token operator">&lt;&lt;</span> s3<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//S1:  18 Amy</span><span class="token comment" spellcheck="true">//S2:  19 Bob</span><span class="token comment" spellcheck="true">//S3:  20 Amy's brother</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>析构函数是类的一种特殊的成员函数，它会在每次删除所创建的对象时执行，一个类的析构函数<strong>只能有一个</strong></li><li>析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀，它不会返回任何值，也不能带有任何参数。析构函数有助于在跳出程序（比如关闭文件、释放内存等）前<strong>释放资源</strong></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Construct:Object is being created"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Construct:Object is being deleted"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Student s1<span class="token punctuation">;</span>    s1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Amy"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s1<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Construct:Object is being created</span><span class="token comment" spellcheck="true">//Amy</span><span class="token comment" spellcheck="true">//Construct:Object is being deleted</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a><a href="https://www.w3cschool.cn/cpp/cpp-copy-constructor.html" target="_blank" rel="noopener">拷贝构造函数</a></h3><blockquote><ul><li>Q：<a href="https://www.cnblogs.com/qianqiannian/p/8946769.html" target="_blank" rel="noopener">为什么需要拷贝构造函数？</a></li><li>A：把参数传递给函数有三种方法，一种是传值，一种是传地址，一种是传引用。传值与其他两种方式不同的地方在于： 当使用<strong>传值</strong>方式的时候，会在函数里面生成传递参数的一个<strong>副本</strong>，这个副本的内容是按位从原始参数那里复制过来的，两者的内容是相同的。<strong>当原始参数是一个类的对象时</strong>，它也会产生一个对象的副本，此时需要注意：<strong>一般对象在创建时都会调用构造函数来进行初始化，但是在产生对象的副本时如果再执行对象的构造函数，那么这个对象的属性又再恢复到原始状态，这就不是我们希望的了。所以在产生对象副本的时候，构造函数不会被执行，被执行的是一个默认的拷贝构造函数</strong></li></ul></blockquote><ul><li><p>拷贝构造函数是一种特殊的构造函数，它在创建对象时，是使用同一类中之前创建的对象来初始化新创建的对象。拷贝构造函数通常用于（即：需要生成对象的副本）：</p><ul><li>通过使用另一个同类型的对象来初始化新创建的对象</li><li>复制对象把它作为参数传递给函数</li><li>复制对象，并从函数返回这个对象</li></ul></li><li><p>如果在类中没有定义拷贝构造函数，编译器会自行定义一个。如果类带有指针变量，并有动态内存分配，则它必须有一个拷贝构造函数。</p></li></ul><blockquote><ul><li>Q：<a href="https://www.runoob.com/cplusplus/cpp-copy-constructor.html" target="_blank" rel="noopener">为什么类中带有指针变量，并有动态内存分配，则它必须有一个拷贝构造函数？</a></li><li>A：默认的拷贝构造函数实现的只能是浅拷贝，即直接将原对象的数据成员值依次复制给新对象中对应的数据成员，<strong>并没有为新对象另外分配内存资源</strong>。这样，如果对象的数据成员是指针，两个指针对象实际上指向的是同一块内存空间。<br>在某些情况下，浅拷贝回带来数据安全方面的隐患。<br>当类的数据成员中有<strong>指针类型</strong>时，我们就必须定义一个特定的拷贝构造函数，该拷贝构造函数不仅可以实现原对象和新对象之间数据成员的拷贝，而且可以为<strong>新的对象分配单独的内存资源，这就是深拷贝构造函数</strong>。<ul><li>Q：如何防止默认拷贝发生？</li><li>A：声明一个私有的拷贝构造函数，这样因为拷贝构造函数是私有的，如果用户试图按值传递或函数返回该类的对象，编译器会报告错误，从而可以避免按值传递或返回对象。</li></ul></li></ul><p>总结：</p><ul><li><p>当出现<strong>类的等号赋值</strong>时，会调用拷贝函数，在未定义显式拷贝构造函数的情况下，系统会调用默认的拷贝函数——即浅拷贝，它能够完成成员的一一复制。当数据成员中没有指针时，浅拷贝是可行的。但<strong>当数据成员中有指针时</strong>，如果采用简单的浅拷贝，则两类中的两个指针将指向同一个地址，当对象快结束时，会调用两次析构函数，而导致指针悬挂现象。所以，这时，<strong>必须采用深拷贝</strong>。</p></li><li><p>深拷贝与浅拷贝的区别就在于深拷贝会在堆内存中<strong>另外申请空间</strong>来储存数据，从而也就解决了指针悬挂的问题。简而言之，当数据成员中有指针时，必须要用深拷贝。</p></li></ul></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    带参数的构造函数，用于初始化age</span>    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拷贝构造函数</span>    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    析构函数</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到年龄</span>    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    定义私有的指针 *p，并用它来访问age</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针访问age变量</span>Student<span class="token operator">::</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"调用构造函数"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">;</span>    <span class="token operator">*</span>p <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//   或者 ： int *p=new int(age);</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//拷贝构造函数时，指针内容  为   引用对象obj的指针内容</span>Student<span class="token operator">::</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"调用拷贝构造函数"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">;</span>    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>obj<span class="token punctuation">.</span>p<span class="token punctuation">;</span><span class="token punctuation">}</span>Student<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"调用析构函数"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//返回指针指向的内容</span><span class="token keyword">int</span> Student<span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用还函数时，函数的形参为 一个对象 stu</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>Student stu<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> stu<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Student <span class="token function">s1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"================"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Student s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意这里的对象初始化要调用拷贝构造函数，而非赋值</span>    <span class="token function">display</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用构造函数</span><span class="token comment" spellcheck="true">//调用拷贝构造函数</span><span class="token comment" spellcheck="true">//10</span><span class="token comment" spellcheck="true">//调用析构函数</span><span class="token comment" spellcheck="true">//================</span><span class="token comment" spellcheck="true">//调用拷贝构造函数</span><span class="token comment" spellcheck="true">//调用拷贝构造函数</span><span class="token comment" spellcheck="true">//10</span><span class="token comment" spellcheck="true">//调用析构函数</span><span class="token comment" spellcheck="true">//调用析构函数</span><span class="token comment" spellcheck="true">//调用析构函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h3><ul><li><p>友元函数是定义在类外部，但有权访问类的所有<strong>私有</strong>（private）成员和<strong>保护</strong>（protected）成员。尽管友元函数的原型有在类的定义中出现过，但是<strong>友元函数并不是成员函数</strong></p></li><li><p>友元可以是一个<strong>函数</strong>，该函数被称为友元函数；友元也可以是一个<strong>类</strong>，该类被称为友元类，在这种情况下，整个类及其所有成员都是友元（声明类 ClassTwo 的所有成员函数作为类 ClassOne 的友元，需要在类 ClassOne 的定义中放置声明：<code>friend class ClassTwo;</code>）</p></li><li><p>如果要声明函数为一个类的友元，需要在类定义中该函数原型前使用关键字 friend。</p></li><li><p>因为友元函数没有this指针，则参数要有三种情况： </p><ul><li>要访问非static成员时，需要对象做参数（如下面的例子中：<code>void printAge(Student stu)</code>）；</li><li>要访问static成员或全局变量时，则不需要对象做参数；</li><li>如果做参数的对象是全局对象，则不需要对象做参数.</li></ul></li><li><p>可以直接调用友元函数，不需要通过对象或指针</p></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//私有变量</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">printAge</span><span class="token punctuation">(</span>Student stu<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在类中声明友元函数</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> Student<span class="token operator">::</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Student<span class="token operator">::</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">printAge</span><span class="token punctuation">(</span>Student stu<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span>stu<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 友元函数可以访问类的私有变量</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Student s1<span class="token punctuation">;</span>    s1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printAge</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 10</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><ul><li>内联函数是通常与类一起使用（通过内联函数，编译器试图在调用函数的地方扩展函数体中的代码）。引入内联函数的目的是为了<strong>解决程序中函数调用的效率问题</strong>。程序在编译器编译的时候，编译器将程序中出现的内联函数的调用表达式用内联函数的函数体进行替换，而对于其他的函数，都是在运行时候才被替代。这其实就是个空间代价换时间的节省。所以内联函数一般都是1-5行的小函数。在使用内联函数时要注意：<strong>不允许使用循环语句和开关语句</strong></li><li>如果想把一个函数定义为内联函数，则需要在<strong>函数名前面放置关键字 inline</strong>，在调用函数之前需要对函数进行定义</li><li>在<strong>类定义中的定义的函数都是内联函数</strong>，即使没有使用 inline 说明符</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内联函数</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">></span> y<span class="token punctuation">)</span> <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 程序的主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Max (20,10): "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Max (0,200): "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Max (100,1010): "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1010</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Max (20,10): 20</span><span class="token comment" spellcheck="true">//Max (0,200): 200</span><span class="token comment" spellcheck="true">//Max (100,1010): 1010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="this-指针"><a href="#this-指针" class="headerlink" title="this 指针"></a>this 指针</h3><ul><li>每一个对象都能<strong>通过 this 指针来访问自己的地址</strong>。this 指针是所有成员函数的隐含参数。因此，在成员函数内部，它可以用来指向调用对象</li><li><del>友元函数没有 this 指针，因为友元不是类的成员。</del>只有成员函数才有 this 指针</li></ul><p>下面的例子，对象通过this指针访问自己的体积，并与其他对象的体积比较大小</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> z<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    定义构造函数，对x y z 赋初值</span>    <span class="token function">Box</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> a<span class="token punctuation">;</span>        y <span class="token operator">=</span> b<span class="token punctuation">;</span>        z <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求体积</span>    <span class="token keyword">int</span> <span class="token function">volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y <span class="token operator">*</span> z<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//比较当前体积和形参对应的体积哪个大</span>    <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Box box<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> box<span class="token punctuation">.</span><span class="token function">volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"box1 is larger"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"box2 is larger"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Box <span class="token function">box1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Box <span class="token function">box2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    box1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>box2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//box2 is larger</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指向类的指针"><a href="#指向类的指针" class="headerlink" title="指向类的指针"></a>指向类的指针</h3><p>指向类的指针与指向结构的指针类似，<strong>访问</strong>指向类的指针的<strong>成员</strong>，需要使用<strong>成员访问运算符 -&gt;</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> z<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    定义构造函数，对x y z 赋初值</span>    <span class="token function">Box</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> a<span class="token punctuation">;</span>        y <span class="token operator">=</span> b<span class="token punctuation">;</span>        z <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求体积</span>    <span class="token keyword">int</span> <span class="token function">volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y <span class="token operator">*</span> z<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Box <span class="token function">box</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Box <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>box<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义指向类的指针p，并把对象的地址给了p</span><span class="token comment" spellcheck="true">//    通过  指针p->成员 来访问成员</span>    cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-</span><span class="token operator">></span><span class="token function">volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//6</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h3><ul><li>使用 static 关键字来把类成员定义为静态的。当我们声明类的成员为静态时，这意味着无论创建多少个类的对象，静态成员都<strong>只有一个</strong>副本 （一个银行当天创建了多个账户（对象），但这些账户对应的利率都是一样的，这个利率就可以类比为static变量；可能每天的利率都是变化的，所以static变量可以变化）</li><li>静态成员在类的所有对象中是<strong>共享</strong>的。如果不存在其他的初始化语句，在创建第一个对象时，所有的静态数据都会被<strong>初始化为零</strong></li><li>我们<strong>不能</strong>把静态成员的初始化放置在类的定义中（类的static变量也<strong>不能</strong>在别的函数中对其初始化，但是定义在函数中的static变量可以在该函数或其他函数中初始化），但是可以在<strong>类的外部</strong>通过使用范围解析运算符 :: 来重新声明静态变量从而对它进行<strong>初始化</strong></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> z<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 统计创建对象的个数</span><span class="token comment" spellcheck="true">//    定义构造函数，对x y z 赋初值</span>    <span class="token function">Box</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> a<span class="token punctuation">;</span>        y <span class="token operator">=</span> b<span class="token punctuation">;</span>        z <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        每创建一个对象，计数+1</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> Box<span class="token operator">::</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Box <span class="token function">box1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> Box<span class="token operator">::</span>count<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span><span class="token comment" spellcheck="true">//    这时，static int 类型的 count已经存在了，所以就在之前的基础上+1</span>    Box <span class="token function">box2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> Box<span class="token operator">::</span>count<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>静态成员函数<ul><li>静态成员函数<strong>即使在类对象不存在的情况下也能被调用</strong>，<strong>静态函数</strong>只要使用类名加范围解析运算符 <code>::</code> 就可以访问</li><li>静态成员函数只能访问静态成员数据、其他静态成员函数和类外部的其他函数</li><li>静态成员函数有一个类范围，他们不能访问类的 this 指针。可以使用静态成员函数来判断类的某些对象是否已被创建。</li><li><strong><em>静态成员函数与普通成员函数的区别：</em></strong><ul><li>静态成员函数没有 this 指针，只能访问静态成员（包括静态成员变量和静态成员函数）</li><li>普通成员函数有 this 指针，可以访问类中的任意成员</li></ul></li></ul></li></ul><blockquote><p> <a href="https://www.runoob.com/w3cnote/cpp-static-usage.html" target="_blank" rel="noopener">static关键字解析</a></p></blockquote><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>一个派生类继承了所有的基类方法（我们几乎不使用 protected 或 private 继承，通常使用 public 继承），但下列情况除外：<br>  基类的构造函数、析构函数和拷贝构造函数<br>  基类的重载运算符<br>  基类的友元函数</li><li>多继承 (环状继承),A-&gt;D, B-&gt;D, C-&gt;(A，B)，例如：<br> D<br>/ \<br>B   A<br>\ /<br>C</li></ul><pre><code>        class D{......};        class B: public D{......};        class A: public D{......};        class C: public B, public A{.....};</code></pre><p>这个继承会使D创建两个对象,要解决上面问题就要用虚拟继承格式：class 类名: virtual 继承方式 父类名</p><pre><code>        class D{......};        class B: virtual public D{......};        class A: virtual public D{......};        class C: public B, public A{.....};</code></pre><h2 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h2><ul><li>可以重新定义或重载大部分 C++ 内置的运算符</li><li>重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个<strong>返回类型</strong>和一个<strong>参数列表</strong>，如<pre><code>Box operator+(const Box&amp;);</code></pre></li><li>大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数</li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>形成多态必须具备三个条件：<br>    <em> 必须存在继承关系    </em> 继承关系必须有同名虚函数（其中虚函数是在基类中使用关键字Virtual声明的函数，在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数）<br>    * 存在基类类型的指针或者引用，通过该指针或引用调用虚函数</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">int</span> width<span class="token punctuation">,</span> height<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Shape</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        width <span class="token operator">=</span> a<span class="token punctuation">;</span>        height <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Parent class area :"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token operator">:</span> <span class="token keyword">public</span> Shape <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Shape</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Rectangle class area :"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>width <span class="token operator">*</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token operator">:</span> <span class="token keyword">public</span> Shape <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Triangle</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Shape</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Triangle class area :"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>width <span class="token operator">*</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 程序的主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Shape <span class="token operator">*</span>shape<span class="token punctuation">;</span>    Rectangle <span class="token function">rec</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Triangle <span class="token function">tri</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 存储矩形的地址</span>    shape <span class="token operator">=</span> <span class="token operator">&amp;</span>rec<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用矩形的求面积函数 area</span>    shape<span class="token operator">-</span><span class="token operator">></span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 存储三角形的地址</span>    shape <span class="token operator">=</span> <span class="token operator">&amp;</span>tri<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用三角形的求面积函数 area</span>    shape<span class="token operator">-</span><span class="token operator">></span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Parent class area</span><span class="token comment" spellcheck="true">//Parent class area</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这个例子不能实现不同类型的面积求解。导致错误输出的原因是，调用函数 area() 被编译器设置为基类中的版本，这就是所谓的<strong>静态多态，或静态链接 - 函数调用在程序执行前就准备好了。有时候这也被称为早绑定</strong>，因为 area() 函数在程序编译期间就已经设置好了。</li><li>让我们对程序稍作修改，在 Shape 类中，area() 的声明前放置<strong>关键字 virtual</strong>就可以了。此时，编译器看的是指针的内容，而不是它的类型。因此，由于 tri 和 rec 类的对象的地址存储在 *shape 中，所以会调用各自的 area() 函数。每个子类都有一个函数 area() 的独立实现。这就是多态的一般使用方式。有了多态，可以有多个不同的类，都带有同一个名称但具有不同实现的函数，函数的参数甚至可以是相同的。这就引申出：虚函数<ul><li>虚函数 是在<strong>基类中使用关键字 virtual 声明的函数</strong>。在派生类中重新定义基类中定义的虚函数时，会告诉编译器<strong>不要</strong>静态链接到该函数。我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为<strong>动态链接，或后期绑定</strong><ul><li>虚函数必须实现，如果不实现，编译器将报错</li></ul></li><li>纯虚函数：想要在基类中定义虚函数，以便在派生类中重新定义该函数更好地适用于对象，但是在基类中又不能对虚函数给出有意义的实现，这个时候就会用到纯虚函数<code>virtual int area() = 0;</code>,<code>= 0</code> 告诉编译器，函数没有主体<ul><li>纯虚函数一定没有定义，纯虚函数用来规范派生类的行为，即接口。包含纯虚函数的类是抽象类，抽象类不能定义实例，但可以声明指向实现该抽象类的具体类的指针或引用</li></ul></li></ul></li></ul><h2 id="接口（抽象类）"><a href="#接口（抽象类）" class="headerlink" title="接口（抽象类）"></a>接口（抽象类）</h2><ul><li>接口描述了类的行为和功能，而不需要完成类的特定实现</li><li>C++ 接口是<strong>使用抽象类</strong>来实现的，抽象类与数据抽象互不混淆，数据抽象是一个把实现细节与相关的数据分离开的概念。如果类中<strong>至少有一个函数被声明为纯虚函数，则这个类就是抽象类</strong>。纯虚函数是通过在声明中使用 “= 0” 来指定的，如<code>virtual double getVolume() = 0;</code>。设计抽象类的目的是为了给其他类提供一个可以继承的适当的基类</li></ul><h1 id="高级教程"><a href="#高级教程" class="headerlink" title="高级教程"></a>高级教程</h1><h2 id="动态内存"><a href="#动态内存" class="headerlink" title="动态内存"></a>动态内存</h2><ul><li><p>C++ 程序中的内存分为两个部分：</p><ul><li>栈：在函数内部声明的所有变量都将占用栈内存</li><li>堆：这是程序中未使用的内存，在程序运行时可用于动态分配内存</li></ul></li><li><p>delete 与 delete[] 区别</p><ul><li>如果ptr代表一个用new申请的内存返回的内存空间地址，即所谓的<strong>指针</strong>，那么：<ul><li>delete ptr – 代表用来释放内存，且只用来释放ptr指向的内存</li><li>delete[] rg – 用来释放rg指向的内存，！！还逐一调用数组中每个对象的 destructor<blockquote><p>对于像 int/char/long/int*/struct 等等简单数据类型，由于对象没有 destructor，所以用 delete 和 delete [] 是一样的！但是如果是C++ 对象数组就不同了！</p></blockquote></li></ul></li></ul></li></ul><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>命名空间可作为附加信息来区分不同库中相同名称的函数、类、变量等。使用了命名空间即定义了上下文。本质上，命名空间就是定义了一个范围。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><ul><li>template中，引入 typename 和 class 关键字，它表明后面的符号为一个类型</li><li>如果需要代码分离，即 template class 的声明、定义，以及 main 函数分属不同文件。例如：</li></ul><pre><code>src_dir|____MyStack.h|____MyStack.cpp|____main.cpp</code></pre><p>则 main.cpp 文件中需要同时包含 .h 文件和 .cpp 文件，不然会出现链接错误。</p><pre><code>// main.cpp#include &quot;MyStack.h&quot;#include &quot;MyStack.cpp&quot;// 其他include// main函数主体 </code></pre><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><p>定义形式：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> type<span class="token operator">></span> ret<span class="token operator">-</span>type func<span class="token operator">-</span><span class="token function">name</span><span class="token punctuation">(</span>parameter list<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 函数的主体</span>   ret<span class="token operator">-</span>type ：返回类型   func<span class="token operator">-</span>name：函数名称<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>T <span class="token keyword">const</span> <span class="token operator">&amp;</span><span class="token function">Max</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> T <span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">></span> y <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> c <span class="token operator">=</span> <span class="token number">20.1</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">Max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">Max</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2</span><span class="token comment" spellcheck="true">//20.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><p>定义形式</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">type</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">class</span><span class="token operator">-</span>name <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 类主体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="类模板和函数模板的使用示例"><a href="#类模板和函数模板的使用示例" class="headerlink" title="类模板和函数模板的使用示例"></a>类模板和函数模板的使用示例</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//假设石头密度相同，则宽度_w与高度_h的乘积作为石头的重量</span><span class="token comment" spellcheck="true">//类模板：Stone的_w, _h的类型可变。以int为例，实例化时，Stone&lt;int> r1(2, 3);</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> U<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Stone</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    构造函数</span>    <span class="token function">Stone</span><span class="token punctuation">(</span>U w<span class="token punctuation">,</span> U h<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_w</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_h</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  操作符重载，&lt;比较的是两个石头，即：&lt; 的左右两边是Stone类型的对象。返回bool值</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Stone <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token keyword">const</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>_w<span class="token operator">*</span>_h<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>rhs<span class="token punctuation">.</span>_w<span class="token operator">*</span>rhs<span class="token punctuation">.</span>_h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    用myWeight()函数返回重量以供打印</span>    U <span class="token function">myWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> _w<span class="token operator">*</span>_h<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    U _w<span class="token punctuation">,</span> _h<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数模板，根据推导的结果，T为Stone，返回的类型也是Stone类。于是调用重载操作符 Stone::operator&lt;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">inline</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> b <span class="token operator">&lt;</span> a <span class="token operator">?</span> b <span class="token operator">:</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stone<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">r1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Stone<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">r2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Stone<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> r3<span class="token operator">=</span><span class="token function">compare</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"The weight of smaller stone is: "</span><span class="token operator">&lt;&lt;</span>r3<span class="token punctuation">.</span><span class="token function">myWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h1><ul><li><p>size_t和size_type</p><ul><li>size_t 是cstddef头文件中定义的<strong>无符号整数类型</strong>，它的空间足够大，能够表示任意数组或向量的大小</li><li><a href="https://stackoverflow.com/questions/918567/size-t-vs-containersize-type" target="_blank" rel="noopener">size_t 和 size_type的区别</a><blockquote><p>The standard containers define size_type as a typedef to Allocator::size_type (Allocator is a template parameter), which for std::allocator<t>::size_type is typically defined to be size_t (or a compatible type). So <strong>for the standard case, they are the same</strong>.</t></p><p>However, if you use <strong>a custom allocator</strong> a different underlying type could be used. So container::size_type is preferable for maximum generality.</p></blockquote></li></ul></li><li><p>成员访问运算符</p><ul><li><code>a-&gt;b</code> 等价于<code>(*a).b</code></li><li><strong>解引用运算符的优先级低于点运算符</strong>，因此在执行解引用运算的子表达式两端需要加上括号</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token operator">=</span><span class="token string">"a string"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>s<span class="token punctuation">;</span>    <span class="token keyword">auto</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> n1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> n2<span class="token operator">=</span>p<span class="token operator">-</span><span class="token operator">></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    输出均为 8 </span>    cout<span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span>     cout<span class="token operator">&lt;&lt;</span>n1<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>n2<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://www.youtube.com/watch?v=UOB7-B2MfwA" target="_blank" rel="noopener">智能指针</a><blockquote><p>unique_ptr”独占”所指的对象</p></blockquote></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Entity</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Create Entity"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Destroy Entity"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Print Entity"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    unique_ptr：以下两种方式均可</span>    unique_ptr<span class="token operator">&lt;</span>Entity<span class="token operator">></span> ue<span class="token operator">=</span> make_unique<span class="token operator">&lt;</span>Entity<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    unique_ptr&lt;Entity> ue(new Entity());</span><span class="token comment" spellcheck="true">//    因为是独一份，所以不能这样操作：unique_ptr&lt;Entity> ue1=ue;</span>    ue<span class="token operator">-</span><span class="token operator">></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 结果：</span><span class="token comment" spellcheck="true">// Create Entity</span><span class="token comment" spellcheck="true">// Print Entity</span><span class="token comment" spellcheck="true">// Destroy Entity</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>shared_ptr允许多个指针指向同一个对象（可以用auto se0代替shared_ptr<entity> se0）。每个shared_ptr都有一个关联的计数器，称其为引用计数，若计数器变为0，则自动释放自己管理的对象（通过析构函数完成销毁工作）<br>make_shared<strong>函数</strong>在动态内存中分配一个对象并初始化它，返回指向此对象的shared_ptr</entity></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Entity</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Create Entity"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Destroy Entity"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Print Entity"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    shared_ptr：以下两种方式均可</span>    shared_ptr<span class="token operator">&lt;</span>Entity<span class="token operator">></span> se0<span class="token operator">=</span> make_shared<span class="token operator">&lt;</span>Entity<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// auto se0= make_shared&lt;Entity>();    </span><span class="token comment" spellcheck="true">//    shared_ptr&lt;Entity> se0(new Entity());</span>    shared_ptr<span class="token operator">&lt;</span>Entity<span class="token operator">></span> se1<span class="token operator">=</span>se0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 因为是共享的，所以可以这样操作</span>    se0<span class="token operator">-</span><span class="token operator">></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结果：</span><span class="token comment" spellcheck="true">// Create Entity</span><span class="token comment" spellcheck="true">// Print Entity</span><span class="token comment" spellcheck="true">// Destroy Entity</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>weak_ptr是一种弱引用，指向shared_ptr所管理的对象</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Entity</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Create Entity"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Destroy Entity"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Print Entity"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    weak_ptr:是一种弱引用，指向shared_ptr所管理的对象</span>    shared_ptr<span class="token operator">&lt;</span>Entity<span class="token operator">></span> se3<span class="token operator">=</span> make_shared<span class="token operator">&lt;</span>Entity<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    weak_ptr<span class="token operator">&lt;</span>Entity<span class="token operator">></span> we<span class="token operator">=</span>se3<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 结果：</span><span class="token comment" spellcheck="true">// Create Entity</span><span class="token comment" spellcheck="true">// Destroy Entity</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://www.bogotobogo.com/cplusplus/functors.php" target="_blank" rel="noopener">Functor</a><ul><li><a href="https://www.cplusplus.com/reference/algorithm/for_each/" target="_blank" rel="noopener">for_each经常与functor配合使用</a><br>Functors are <strong>objects</strong> that can be treated as though they are a function or function pointer. It can be used with () in the manner of a function.</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">struct</span> absValue<span class="token punctuation">{</span>    <span class="token keyword">float</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">float</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> f <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> f <span class="token operator">:</span> <span class="token operator">-</span>f<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">123.45</span><span class="token punctuation">;</span>    absValue aObj<span class="token punctuation">;</span>    <span class="token keyword">float</span> abs_f <span class="token operator">=</span> <span class="token function">aObj</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"f = "</span> <span class="token operator">&lt;&lt;</span> f <span class="token operator">&lt;&lt;</span> <span class="token string">" abs_f = "</span> <span class="token operator">&lt;&lt;</span> abs_f <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://en.cppreference.com/w/cpp/utility/initializer_list" target="_blank" rel="noopener">std::initializer_list</a></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;initializer_list></span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">struct</span> S <span class="token punctuation">{</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> v<span class="token punctuation">;</span>    <span class="token function">S</span><span class="token punctuation">(</span>std<span class="token operator">::</span>initializer_list<span class="token operator">&lt;</span>T<span class="token operator">></span> l<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">v</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"constructed with a "</span> <span class="token operator">&lt;&lt;</span> l<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"-element list\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">append</span><span class="token punctuation">(</span>std<span class="token operator">::</span>initializer_list<span class="token operator">&lt;</span>T<span class="token operator">></span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>        v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">const</span> T <span class="token operator">*</span><span class="token punctuation">,</span> std<span class="token operator">::</span>size_t<span class="token operator">></span> <span class="token function">c_arr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// copy list-initialization in return statement</span>        <span class="token comment" spellcheck="true">// this is NOT a use of std::initializer_list</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">templated_fn</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    S<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// copy list-initialization</span>    s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// list-initialization in function call</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The vector size is now "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">c_arr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">" ints:\n"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> s<span class="token punctuation">.</span>v<span class="token punctuation">)</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Range-for over brace-init-list: \n"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// the rule for auto makes this ranged-for work</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> al <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// special rule for auto</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The list bound to auto has size() = "</span> <span class="token operator">&lt;&lt;</span> al<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    templated_fn({1, 2, 3}); // compiler error! "{1, 2, 3}" is not an expression,</span>    <span class="token comment" spellcheck="true">// it has no type, and so T cannot be deduced</span>    templated_fn<span class="token operator">&lt;</span>std<span class="token operator">::</span>initializer_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>    templated_fn<span class="token operator">&lt;</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// also OK</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果：</span><span class="token comment" spellcheck="true">//constructed with a 5-element list</span><span class="token comment" spellcheck="true">//The vector size is now 8 ints:</span><span class="token comment" spellcheck="true">//1 2 3 4 5 6 7 8</span><span class="token comment" spellcheck="true">//Range-for over brace-init-list:</span><span class="token comment" spellcheck="true">//-1 -2 -3</span><span class="token comment" spellcheck="true">//The list bound to auto has size() = 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://www.ibm.com/docs/en/zos/2.2.0?topic=declarators-trailing-return-type-c11" target="_blank" rel="noopener">尾置类型转换 Trailing return type</a><ul><li>When a trailing return type is used, the placeholder return type must be <strong>auto</strong>. </li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// Trailing return type is used to represent </span><span class="token comment" spellcheck="true">// a fully generic return type for a+b.</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> FirstType<span class="token punctuation">,</span> <span class="token keyword">typename</span> SecondType<span class="token operator">></span> <span class="token keyword">auto</span> <span class="token function">add</span><span class="token punctuation">(</span>FirstType a<span class="token punctuation">,</span> SecondType b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// The first template argument is of the integer type, and</span>   <span class="token comment" spellcheck="true">// the second template argument is of the character type.</span>   <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果为66</span>   <span class="token comment" spellcheck="true">// Both the template arguments are of the integer type.</span>   <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果为8</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>左值和右值 <a href="https://www.internalpointers.com/post/understanding-meaning-lvalues-and-rvalues-c" target="_blank" rel="noopener">lvalue and rvalue，clear explanation!!!</a><ul><li>In C++ <strong>an lvalue is something that points to a specific memory location</strong>. On the other hand, <strong>a rvalue is something that doesn’t point anywhere</strong>. In general, rvalues are temporary and short lived, while lvalues live a longer life since they exist as variables. It’s also fun to think of <strong>lvalues as containers</strong> and <strong>rvalues as things contained in the containers</strong>. Without a container, they would expire.</li></ul></li></ul><ul><li>auto类型说明<ul><li><a href="https://blog.csdn.net/wolege__caca/article/details/52588371?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.no_search_link&spm=1001.2101.3001.4242" target="_blank" rel="noopener">auto会忽略顶层const，同时保留底层cosnt</a> （见C++Primer P61） 。auto 用于初始化时的类型推导，总是“值类型”，<strong>也可以加上修饰符产生新类型</strong></li><li>顶层const：<strong>指针本身是一个常量，而指针指向的对象（这个内容可以变）</strong>。比如：我就喜欢坐在第一排中间，我就焊在这个座位上了。不管这个座位是木头椅子还是人体工学椅。对应的代码：<code>int * const pi=&amp;i</code></li><li>底层const：<strong>指针所指的对象是一个常量，而指针可以随意跳</strong>。比如：一开始我指向了一个木头椅子（木头椅子这个对象是不会变的），我想更舒服一些，那我就指向人体工学椅。对应的代码：<code>const int * pi=&amp;ci</code></li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a为int * 类型</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> e <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// e为int类型 ，而不是const int 类型。可以对e重新赋值： e=3;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">auto</span> <span class="token operator">&amp;</span>c <span class="token operator">=</span> x<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// c为int &amp; 类型</span>    <span class="token keyword">const</span> <span class="token keyword">auto</span> f <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// f为const int 类型。不可以对f重新赋值：  f=4;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>sizeof 运算符</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> y<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>    cout<span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Size of char : "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Size of int : "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Size of short int : "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Size of long int : "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Size of float : "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Size of double : "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Size of wchar_t : "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">wchar_t</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Size of int : 4</span><span class="token comment" spellcheck="true">//Size of short int : 2</span><span class="token comment" spellcheck="true">//Size of long int : 8</span><span class="token comment" spellcheck="true">//Size of float : 4</span><span class="token comment" spellcheck="true">//Size of double : 8</span><span class="token comment" spellcheck="true">//Size of wchar_t : 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://stackoverflow.com/questions/75191/what-is-an-unsigned-char" target="_blank" rel="noopener">What is an unsigned char?</a></li></ul><p>signed char and unsigned char both represent 1byte, but they have different ranges.</p><table><thead><tr><th>Type</th><th>range</th></tr></thead><tbody><tr><td>signed char</td><td>-128 to +127</td></tr><tr><td>unsigned char</td><td>0 to 255</td></tr></tbody></table><p>In signed char if we consider char letter = ‘A’, ‘A’ is represent binary of 65 in ASCII/Unicode, <strong>If 65 can be stored, -65 also can be stored</strong>. There are <strong>no negative binary values</strong> in ASCII/Unicode there for no need to worry about negative values.</p><ul><li><a href="https://www.arm.linux.org.uk/docs/faqs/signedchar.php" target="_blank" rel="noopener">char 默认都是有符号的</a><ul><li>char char1 =-1，结果为-1；</li><li>unsigned char char1 = -1，结果为255；</li><li>unsigned char char1 = -2，结果为254</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">signed</span> <span class="token keyword">char</span> char1 <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> char3 <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>    <span class="token keyword">signed</span> <span class="token keyword">char</span> char2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> char4 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Signed char(255) : %d\n"</span><span class="token punctuation">,</span>char1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1  超出-128到127的范围，结果为-1</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Unsigned char(255) : %d\n"</span><span class="token punctuation">,</span>char3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 255  在0-255范围内，结果为255</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nSigned char(-128) : %d\n"</span><span class="token punctuation">,</span>char2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-128  在-128到127的范围，结果为-128</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Unsigned char(-128) : %d\n"</span><span class="token punctuation">,</span>char4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//128  无符号的-128相当于128，结果为128</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://www.youtube.com/watch?v=_8-ht2AKyH4" target="_blank" rel="noopener">内存管理</a></li></ul><p><img src="https://i.loli.net/2021/10/14/vXbMcrC58qhJazO.png" alt></p><p><img src="https://i.loli.net/2021/10/14/AjlXm3OPVdr5Juh.png" alt></p><p><img src="https://i.loli.net/2021/10/14/6kiIBGHUmT3nWbN.png" alt></p><p><img src="https://i.loli.net/2021/10/14/kMiJsxjeDvR976y.png" alt></p><ul><li>memset, memset_s</li></ul><p>1) <code>void *memset( void *dest, int ch, size_t count );</code> ： A copy of <code>dest</code></p><p>2) <code>errno_t memset_s( void *dest, rsize_t destsz, int ch, rsize_t count );</code>：zero on success, non-zero on error. Also on error, if <code>dest</code> is not a null pointer and <code>destsz</code> is valid, writes <code>destsz</code> fill bytes <code>ch</code> to the destination array. （如果成功，则返回0.否则返回非0）</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ghghghghghghghghghghgh"</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 把string的前5个元素赋值为a</span>    <span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">memset_s</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> str<span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把string的前5个元素赋值为a</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str = \"%s\", r = %d\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 成功了，返回0</span>    r <span class="token operator">=</span> <span class="token function">memset_s</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// count is greater than destsz</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str = \"%s\", r = %d\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 只需要5个，但给了10个。返回的r非0。str的前5个元素改变了</span>    r <span class="token operator">=</span> <span class="token function">memset_s</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// count is less than destsz</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str = \"%s\", r = %d\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 需要5个，但只给了2个。那就只改变前2个，r为0。仍然成功返回</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//ghghghghghghghghghghgh</span><span class="token comment" spellcheck="true">//aaaaahghghghghghghghgh</span><span class="token comment" spellcheck="true">//str = "bbbbbhghghghghghghghgh", r = 0</span><span class="token comment" spellcheck="true">//str = "ccccchghghghghghghghgh", r = 84</span><span class="token comment" spellcheck="true">//str = "ddccchghghghghghghghgh", r = 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><a href="https://www.youtube.com/watch?v=T1C9Kj_78ek" target="_blank" rel="noopener">Big Endian and Little Endian</a><br><img src="https://i.loli.net/2021/10/15/ZxDs2mRET3kqzQb.png" alt></p></li><li><p><a href="https://www.youtube.com/watch?v=zbhUFGxF3-I" target="_blank" rel="noopener">What is the difference between Variables, Constants &amp; Literals ?</a></p></li></ul><p><img src="https://i.loli.net/2021/10/15/QmCTxGDvbe6ELN1.png" alt><br><img src="https://i.loli.net/2021/10/15/7du3n4DwEhrf6MQ.png" alt><br><img src="https://i.loli.net/2021/10/15/yHQ7nBI5jk63JcV.png" alt></p><ul><li>指针数组 数组指针 指针函数 函数指针</li></ul><ul><li><code>int   *p[4];</code>     //指针数组。  是个有4个元素的数组， 每个元素是指向整型的指针 。(<strong>数组的每个元素都是指针</strong>)<ul><li><strong><code>[]</code> 的优先级比<code>*</code>高</strong>， 所以int <em>p[4]中，p先与[]结合，表示这是一个存放四个元素的数组，然后再与 int </em> 结合，表示数组里存放的是指针</li></ul></li><li><code>int   (*p)[4];</code>      //数组指针。 它是一个指针，指向有4个整型元素的数组。                 (<strong>一个指针指向有4个整型元素的数组</strong>)</li><li><code>int *func(void);</code>    //指针函数。 无参函数， 返回整型指针。　　　　　　　　　　　   (<strong>函数的返回值为int*</strong>)</li><li><code>int (*func)(void);</code>   //表示函数指针，可以指向无参， 且返回值为整型指针的函数。       (<strong>函数的返回值为int</strong>)</li></ul><ul><li><a href="https://stackoverflow.com/a/19764065" target="_blank" rel="noopener">Difference between char <em>*p,char </em>p[],char p[][]</a><ul><li>在64位系统中，一个指针占8个字节</li></ul></li></ul><p><img src="https://i.loli.net/2021/10/19/cgkpx7eiOlXTZ1Q.png" alt><br><img src="https://i.loli.net/2021/10/19/tXps8yO7JougDNI.png" alt><br><img src="https://i.loli.net/2021/10/19/vVHzD4W6wSOeKsd.png" alt></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">helper</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    a<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"!"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    return a;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">helper1</span><span class="token punctuation">(</span>string  a<span class="token punctuation">)</span><span class="token punctuation">{</span>    a<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"+++"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token string">'g'</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    指向char指针的指针</span>    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8 在64位系统中，一个指针占8个字节</span><span class="token comment" spellcheck="true">//    这是一个数组，数组中存放的是指针</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Monday"</span><span class="token punctuation">,</span> <span class="token string">"Tuesday"</span><span class="token punctuation">,</span> <span class="token string">"Wednesday"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// char *p1[]就是char *p1[3]</span>    cout<span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3*8   数组中有3个元素，每个元素都是一个指针（占8个字节），所以是3*8</span><span class="token comment" spellcheck="true">//    这是一个二维数组</span>    <span class="token keyword">char</span> p2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Monday"</span><span class="token punctuation">,</span> <span class="token string">"Tuesday"</span><span class="token punctuation">,</span> <span class="token string">"Wednesday"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3*10   </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://www.youtube.com/watch?v=NxTyUifYJ74" target="_blank" rel="noopener">虚继承</a></li></ul><p>用虚继承的方式避免菱形继承。先构造父类，再构造子类，（同级）构造函数的调用只与继承的顺序有关</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">public</span> A<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">B</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span>s2<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">A</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>s2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">public</span> A<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span>s2<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">A</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>s2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">D</span><span class="token operator">:</span><span class="token keyword">public</span> C<span class="token punctuation">,</span><span class="token keyword">public</span> B<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">D</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>s2<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>s3<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>s4<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">B</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">C</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">A</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>s4<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    D <span class="token operator">*</span>p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token string">"class A"</span><span class="token punctuation">,</span><span class="token string">"class B"</span><span class="token punctuation">,</span><span class="token string">"class C"</span><span class="token punctuation">,</span><span class="token string">"class D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> p<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class A</span><span class="token comment" spellcheck="true">//class C</span><span class="token comment" spellcheck="true">//class B</span><span class="token comment" spellcheck="true">//class D</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>浅拷贝和深拷贝</li></ul><p>浅拷贝只是拷贝值，并不重新分配内存；深拷贝可以重新分配内存.<br>默认构造函数：不开辟堆空间，仅仅是分配一个栈内存，它可以由编译器自动创建和销毁.<br>自定义构造函数：完全可以替代默认构造函数，并且可以开辟动态内存，申请堆空间，后期必须显示地调用析构函数销毁.</p><p>如果类中有指针，若不写拷贝构造函数，则是浅拷贝，指针会<a href="https://www.youtube.com/watch?v=nCAVr_T4DbM" target="_blank" rel="noopener">指向同一块内存空间</a>：<br><img src="https://i.loli.net/2021/10/25/ajszZTf8GRECdQX.png" alt><br>自己写了拷贝构造函数后，则是深拷贝<br><img src="https://i.loli.net/2021/10/25/gXfQGDB9i3Z2JF1.png" alt></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    带有指针时，因为在copy对象时需要重新分配空间，所以要自己写构造函数</span><span class="token comment" spellcheck="true">//    无参构造函数</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    有参构造函数</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">v</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    因为带有指针，所以需要deep copy 。 如果把这个拷贝构造函数注释掉，则b2的p的改变会影响b1的p</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">const</span> Base <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        v <span class="token operator">=</span> rhs<span class="token punctuation">.</span>v<span class="token punctuation">;</span>        p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>rhs<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        或者</span><span class="token comment" spellcheck="true">//        p = new int;</span><span class="token comment" spellcheck="true">//        *p = *rhs.p;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"调用析构函数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setV</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        v <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setP</span><span class="token punctuation">(</span><span class="token keyword">int</span> ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">*</span>p <span class="token operator">=</span> ptr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Base b1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用无参构造函数</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b1.getV(): "</span> <span class="token operator">&lt;&lt;</span> b1<span class="token punctuation">.</span><span class="token function">getV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b1.getP(): "</span> <span class="token operator">&lt;&lt;</span> b1<span class="token punctuation">.</span><span class="token function">getP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    b1<span class="token punctuation">.</span><span class="token function">setV</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b1<span class="token punctuation">.</span><span class="token function">setP</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b1.getV(): "</span> <span class="token operator">&lt;&lt;</span> b1<span class="token punctuation">.</span><span class="token function">getV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b1.getP(): "</span> <span class="token operator">&lt;&lt;</span> b1<span class="token punctuation">.</span><span class="token function">getP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Base b2 <span class="token operator">=</span> b1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等于号也相当于是拷贝。 也可以 Base b2(b1);  因为写了拷贝构造函数，所以可以实现深拷贝</span>    b2<span class="token punctuation">.</span><span class="token function">setV</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b2<span class="token punctuation">.</span><span class="token function">setP</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b1.getV(): "</span> <span class="token operator">&lt;&lt;</span> b1<span class="token punctuation">.</span><span class="token function">getV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b1.getP(): "</span> <span class="token operator">&lt;&lt;</span> b1<span class="token punctuation">.</span><span class="token function">getP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 因为是深拷贝，所以b2的p的改变没有影响到b1的p</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b2.getV(): "</span> <span class="token operator">&lt;&lt;</span> b2<span class="token punctuation">.</span><span class="token function">getV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b2.getP(): "</span> <span class="token operator">&lt;&lt;</span> b2<span class="token punctuation">.</span><span class="token function">getP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    调用有参构造函数</span>    Base <span class="token function">b3</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b3.getV(): "</span> <span class="token operator">&lt;&lt;</span> b3<span class="token punctuation">.</span><span class="token function">getV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b3.getP(): "</span> <span class="token operator">&lt;&lt;</span> b3<span class="token punctuation">.</span><span class="token function">getP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//b1.getV(): 100</span><span class="token comment" spellcheck="true">//b1.getP(): 100</span><span class="token comment" spellcheck="true">//b1.getV(): 1</span><span class="token comment" spellcheck="true">//b1.getP(): 2</span><span class="token comment" spellcheck="true">//b1.getV(): 1</span><span class="token comment" spellcheck="true">//b1.getP(): 2</span><span class="token comment" spellcheck="true">//b2.getV(): 3</span><span class="token comment" spellcheck="true">//b2.getP(): 4</span><span class="token comment" spellcheck="true">//b3.getV(): 6</span><span class="token comment" spellcheck="true">//b3.getP(): 7</span><span class="token comment" spellcheck="true">//调用析构函数</span><span class="token comment" spellcheck="true">//调用析构函数</span><span class="token comment" spellcheck="true">//调用析构函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://www.youtube.com/watch?v=TPVH_coGAQs" target="_blank" rel="noopener">Threads In C++ An Introduction</a></li></ul><p>如果是单线程，则相当于一个人在工作。找完奇数后找偶数<br>如果是多线程，则相当于多个人在工作（本例中是两个人）。奇数偶数一起找</p><p><img src="https://i.loli.net/2021/10/26/tdkW1yir2LwaEqT.png" alt="20211026203657"><br><img src="https://i.loli.net/2021/10/26/6sj7NKDZto5Fgih.png" alt="20211026203828"></p><ul><li><a href="https://www.youtube.com/watch?v=eZ8yKZo-PGw" target="_blank" rel="noopener">Mutex In C++ Threading</a></li></ul><p>load -&gt; increment -&gt; store</p><p>加载数据 -&gt; 更新数据 （如增加1） -&gt; 存储（已更新的）数据</p><p><img src="https://i.loli.net/2021/10/26/ZjgAulBa6iLwVJD.png" alt="20211026202428"><br><img src="https://i.loli.net/2021/10/26/Z6ykbHtAXnR3K9x.png" alt="20211026203256"></p><p><img src="https://i.loli.net/2021/10/26/6bUTLvcxwZ5GJnF.png" alt="20211026203324"></p><ul><li><p><a href="https://blog.csdn.net/jackystudio/article/details/11523353" target="_blank" rel="noopener">函数中局部变量的返回</a></p><ul><li>函数不能返回<strong>指向栈</strong>内存的指针，因为返回的都是值拷贝</li></ul></li><li><p><a href="https://google-styleguide.readthedocs.io/zh_CN/latest/google-cpp-styleguide/others.html" target="_blank" rel="noopener">列表初始化</a></p></li></ul><p>早在 C++03 里，聚合类型（aggregate types）就已经可以被列表初始化了，比如数组和不自带构造函数的结构体：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    string name<span class="token punctuation">;</span><span class="token punctuation">}</span>Person<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person p<span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"Amy"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++11 中，该特性得到进一步的推广，任何对象类型都可以被列表初始化。示范如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// Vector 接收了一个初始化列表。</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v<span class="token punctuation">{</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不考虑细节上的微妙差别，大致上相同。</span><span class="token comment" spellcheck="true">// 您可以任选其一。</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可以配合 new 一起用。</span><span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token keyword">new</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">{</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// map 接收了一些 pair, 列表初始化大显神威。</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span> m <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始化列表也可以用在返回类型上的隐式转换。</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">test_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 初始化列表可迭代。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在函数调用里用列表初始化。</span><span class="token keyword">void</span> <span class="token function">TestFunction2</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">TestFunction2</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列表初始化也适用于常规数据类型的构造，哪怕没有接收 std::initializer_list<t> 的构造函数：</t></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyOtherType</span> <span class="token punctuation">{</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">explicit</span> <span class="token function">MyOtherType</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">MyOtherType</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>MyOtherType m <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不过如果构造函数是显式的（explict），您就不能用 `= {}` 了。</span>MyOtherType m<span class="token punctuation">{</span><span class="token string">"b"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在类中使用结构体</li></ul><p>类的一个成员变量是结构体，在构造函数中，可以初始化该结构体</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    string name<span class="token punctuation">;</span><span class="token punctuation">}</span>Stu<span class="token punctuation">;</span>Stu stu1<span class="token punctuation">{</span>stu1<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>    stu1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"Amy"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Stu stu_base_<span class="token punctuation">;</span>    <span class="token keyword">int</span> score_<span class="token punctuation">;</span>    <span class="token function">Base</span><span class="token punctuation">(</span>Stu temp<span class="token punctuation">,</span><span class="token keyword">int</span> score<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">stu_base_</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">score_</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"stu_base_.age: "</span><span class="token operator">&lt;&lt;</span>stu_base_<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"stu_base_.name: "</span><span class="token operator">&lt;&lt;</span>stu_base_<span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"score_: "</span><span class="token operator">&lt;&lt;</span>score_<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Base <span class="token function">b</span><span class="token punctuation">(</span>stu1<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// stu_base_.age: 10</span><span class="token comment" spellcheck="true">// stu_base_.name: Amy</span><span class="token comment" spellcheck="true">// score_: 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者也可以用函数来初始化类中的结构体</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    string name<span class="token punctuation">;</span><span class="token punctuation">}</span>Stu<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Stu stu1{stu1.age=10,</span><span class="token comment" spellcheck="true">//    stu1.name="Amy"};</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Stu s1<span class="token punctuation">;</span>    Stu <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Stu s2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        s2=stu1; // 也可以直接用外面的stu1</span>        s2<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"Bob"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">s1</span><span class="token punctuation">(</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Base bb<span class="token operator">=</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>bb<span class="token punctuation">.</span>s1<span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//11</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>C++中<code>string、char *、char[]、const char*</code>的<a href="https://blog.csdn.net/hebbely/article/details/79577880" target="_blank" rel="noopener">转换</a></li></ul><ul><li><a href="https://stackoverflow.com/questions/675039/how-can-i-create-directory-tree-in-c-linux" target="_blank" rel="noopener">如果文件夹不存在，则创建该文件夹</a></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">mkpath</span><span class="token punctuation">(</span> std<span class="token operator">::</span>string path <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">bool</span> bSuccess <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nRC <span class="token operator">=</span> <span class="token operator">::</span><span class="token function">mkdir</span><span class="token punctuation">(</span> path<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0775</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> nRC <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span> errno <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">case</span> ENOENT<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//parent didn't exist, try to create it</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">mkpath</span><span class="token punctuation">(</span> path<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">find_last_of</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//Now, try to create again.</span>                    bSuccess <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token operator">::</span><span class="token function">mkdir</span><span class="token punctuation">(</span> path<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0775</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    bSuccess <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> EEXIST<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//Done!</span>                bSuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                bSuccess <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>        bSuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bSuccess<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://blog.csdn.net/jackystudio/article/details/11523353" target="_blank" rel="noopener">函数中局部变量的返回</a><ul><li>函数不能返回指向栈内存的指针，因为函数返回的都是值拷贝</li></ul></li></ul><ul><li><p><a href="https://www.journaldev.com/38985/extern-keyword-in-c" target="_blank" rel="noopener">Understanding the extern Keyword in C</a></p></li><li><p><a href="https://www.youtube.com/watch?v=aw9wHbFTnAQ" target="_blank" rel="noopener">Using make and writing Makefile ( in C++ or C )</a></p><ul><li><a href="https://www.youtube.com/watch?v=aw9wHbFTnAQ" target="_blank" rel="noopener">C/C++ 开发环境(终端)</a></li><li><a href="https://zhuanlan.zhihu.com/p/111110992" target="_blank" rel="noopener">5分钟理解make/makefile/cmake/nmake</a>, <a href="https://www.bysimon.top/?p=61" target="_blank" rel="noopener">gcc、make、cmake的关系</a></li></ul></li><li><p><a href="https://blog.csdn.net/qq_24172609/article/details/103560336?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-103560336-blog-6798611.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-103560336-blog-6798611.pc_relevant_default&utm_relevant_index=2" target="_blank" rel="noopener">VS同一个解决方案中不同项目相互引用问题</a></p></li><li><p><a href="https://stackoverflow.com/questions/4066405/when-to-use-the-visual-studio-additional-dependencies" target="_blank" rel="noopener">When to use the Visual Studio Additional dependencies?</a><br><img src="https://s2.loli.net/2022/06/26/pzGFoKVE3ZUe5H8.png" alt="20220626000347"></p></li></ul><ul><li><a href="https://stackoverflow.com/questions/6441218/can-a-local-variables-memory-be-accessed-outside-its-scope" target="_blank" rel="noopener">Can a local variable’s memory be accessed outside its scope?</a> <ul><li>（类比的示例很好）C++ is not a safe language. It will cheerfully allow you to break the rules of the system. If you try to do something illegal and foolish like going back into a room you’re not authorized to be in and rummaging through a desk that might not even be there anymore, C++ is not going to stop you. Safer languages than C++ solve this problem by restricting your power – by having much stricter control over keys, for example.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视觉SLAM14讲</title>
      <link href="/2021/06/12/c/shi-jue-slam14-jiang/"/>
      <url>/2021/06/12/c/shi-jue-slam14-jiang/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV16t411g7FR?p=2" target="_blank" rel="noopener">视频讲解</a><br><a href="https://github.com/gaoxiang12/slambook" target="_blank" rel="noopener">第一版配套代码</a><br><a href="https://github.com/gaoxiang12/slambook2" target="_blank" rel="noopener">第二版配套代码（prefer）</a></p><p><a href="https://www.cnblogs.com/gaoxiang12/tag/SLAM/" target="_blank" rel="noopener">高翔：视觉slam是什么？</a><br><a href="https://zhuanlan.zhihu.com/p/80921759" target="_blank" rel="noopener">坐标系，三角测量，PNP</a><br><a href="https://www.guyuehome.com/19581" target="_blank" rel="noopener">EPNP算法原理</a></p><hr><p>库说明：</p><ul><li>Eigen：几何模块</li><li>Sophus：李代数模块 （在Eigen基础上开发）</li><li>优化库<ul><li><strong>Ceres 库面向通用的最小二乘问题的求解</strong>，作为用户，我们需要做的就是定义优化问题，然后设置一些选项，输入进 Ceres 求解即可</li><li><strong>g2o是一个基于图优化的库</strong>（General Graphic Optimization）。为了使用 g2o，首先要做的是将问题抽象成图优化。这个过程中，只要记住<strong>节点为优化变量，边为误差项</strong>即可</li></ul></li></ul><hr><h1 id="第二讲"><a href="#第二讲" class="headerlink" title="第二讲"></a>第二讲</h1><p><img src="https://i.loli.net/2021/06/12/hZgJuHXpct9QoDi.png" alt><br>我们把整个视觉 SLAM 流程分为以下几步：</p><ol><li>传感器信息读取。在视觉 SLAM 中主要为相机图像信息的读取和预处理。如果在机<br>器人中，还可能有码盘、惯性传感器等信息的读取和同步。</li><li><strong>视觉里程计</strong> (Visual Odometry, VO)。视觉里程计任务是估算相邻图像间相机的运动，<br>以及局部地图的样子。<em><em> VO 又称为前端（Front End）</em></em>。<ul><li>视觉里程计关心相邻图像之间的相机运动，最简单的情况当然是两张图像之间的运动<br>关系</li></ul></li><li><strong>后端优化</strong>（Optimization）。后端接受不同时刻视觉里程计测量的相机位姿，以及回<br>环检测的信息，对它们进行优化，得到全局一致的轨迹和地图。由于接在 VO 之后，<br>又称为后端（Back End）。<ul><li>笼统地说，后端优化主要指处理 SLAM 过程中噪声的问题。后端优化要考虑的问题，<br>就是如何从这些带有噪声的数据中，估计整个系统的状态，以及这个状态估计的不确定性<br>有多大——这称为最大后验概率估计（Maximum-a-Posteriori， MAP）。这里的状态既包括<br>机器人自身的轨迹，也包含地图<blockquote><p>在视觉 SLAM 中，前端和计算机视觉研究领域更为相关，比如图像的特征提取与匹配等，后端则主要是滤波与非线性优化算法。</p></blockquote></li></ul></li><li><strong>回环检测</strong>（Loop Closing）。回环检测判断机器人是否曾经到达过先前的位置。如果<br>检测到回环，它会把信息提供给后端进行处理。</li><li><strong>建图</strong>（Mapping）。它根据估计的轨迹，建立与任务要求对应的地图</li></ol><h2 id="使用库"><a href="#使用库" class="headerlink" title="使用库"></a>使用库</h2><ul><li>新建一个项目，名称为P1</li><li>在P1中新建一个类，名称为libSLAM<ul><li>在libSLAM.h 中，声明printSLAM函数</li></ul></li></ul><pre><code>```cpp#ifndef P1_LIBSLAM_H#define P1_LIBSLAM_Hclass libSLAM {public:    void printSLAM();};#endif //P1_LIBSLAM_H```</code></pre><ul><li><p>在libSLAM.cpp 中，实现printSLAM函数</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"libSLAM.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span>  std<span class="token punctuation">;</span><span class="token keyword">void</span> libSLAM<span class="token operator">::</span><span class="token function">printSLAM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Hello SLAM"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在main文件的main函数（可以为任意文件名称中的任意函数，不一定为main）中，调用printSLAM</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"libSLAM.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  libSLAM l<span class="token punctuation">;</span>  l<span class="token punctuation">.</span><span class="token function">printSLAM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>修改cMakeLists文件的内容</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">cmake_minimum_required</span><span class="token punctuation">(</span>VERSION <span class="token number">3.19</span><span class="token punctuation">)</span><span class="token function">project</span><span class="token punctuation">(</span>P1<span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>CMAKE_CXX_STANDARD <span class="token number">14</span><span class="token punctuation">)</span># 通过main<span class="token punctuation">.</span>cpp生成可执行文件main<span class="token function">add_executable</span><span class="token punctuation">(</span>main main<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span># 通过libSLAM<span class="token punctuation">.</span>cpp 生成库文件useLib<span class="token function">add_library</span><span class="token punctuation">(</span>useLib libSLAM<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span># 将可执行文件main链接到useLib静态库文件中<span class="token function">target_link_libraries</span><span class="token punctuation">(</span>main useLib<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>其中，库文件分为静态库（以.a为后缀）和共享库（以.so为后缀）。静态库每次被调用都会生成一个副本，而共享库则只有一个副本，更省空间。cMakeLists中可以分别写为：</p><pre class="line-numbers language-cpp"><code class="language-cpp"># <span class="token punctuation">(</span>静态库<span class="token punctuation">)</span># 通过libSLAM<span class="token punctuation">.</span>cpp 生成库文件useLib<span class="token function">add_library</span><span class="token punctuation">(</span>useLib libSLAM<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span># 将可执行文件main链接到useLib静态库文件中<span class="token function">target_link_libraries</span><span class="token punctuation">(</span>main useLib<span class="token punctuation">)</span># （共享库）# 如果想生成共享库，则使用关键字 SHARED：<span class="token function">add_library</span><span class="token punctuation">(</span>useLib_Shared SHARED libSLAM<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span>    # 将共享库文件useLib_Shared链接到可执行文件main中<span class="token function">target_link_libraries</span><span class="token punctuation">(</span>main useLib_Shared<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果只有头文件（e.g., Eigen库只有头文件），则不需要用<code>target_link_libraries</code>将程序链接到库上，但需要在cMakeLists中添加<code>include_directories(&quot;/usr/include/eigen3/&quot;)</code> </p><ul><li>（也可以写成<code>include_directories(${/usr/include/eigen3/})</code>） </li><li>（可通过<code>locate eigen3</code>查找相应位置）</li><li>可以把头文件写到文件夹下，然后在CMakeLists.txt 中将其添加进去。比如在当前文件夹-&gt;includes-&gt;math文件夹（该文件夹中有一个头文件header_math.h），则CMakeLists.txt中添加<code>include_directories (includes/math)</code>即可</li></ul></li><li><p><code>find_package</code>命令是cmake提供的寻找某个库的<strong>头文件</strong>与<strong>库文件</strong>的指令。如果 cmake能够找到它，就会提供头文件和库文件所在的目录的变量 (<a href="https://blog.csdn.net/zhanghm1995/article/details/105466372" target="_blank" rel="noopener">参考该链接</a>)。在 Sophus 这个例子中，就是Sophus_INCLUDE_DIRS 和 Sophus_LIBRARIES 这两个变量。根据它们，我们就能将Sophus 库引入自己的 cmake 工程了：</p><pre class="line-numbers language-cpp"><code class="language-cpp">  # 为使用 sophus ，需要使用 find_package 命令找到它  <span class="token function">find_package</span><span class="token punctuation">(</span> Sophus REQUIRED <span class="token punctuation">)</span>  # 将头文件包含进去<span class="token punctuation">,</span>  也可以写成 <span class="token function">include_directories</span><span class="token punctuation">(</span> <span class="token string">"Sophus_INCLUDE_DIRS"</span> <span class="token punctuation">)</span>    <span class="token function">include_directories</span><span class="token punctuation">(</span> $<span class="token punctuation">{</span>Sophus_INCLUDE_DIRS<span class="token punctuation">}</span> <span class="token punctuation">)</span>    <span class="token function">add_executable</span><span class="token punctuation">(</span> useSophus useSophus<span class="token punctuation">.</span>cpp <span class="token punctuation">)</span>  # useSophus 为主文件生成的执行文件 （类似于main<span class="token punctuation">.</span>cpp的地位）  <span class="token function">target_link_libraries</span><span class="token punctuation">(</span> useSophus Sophus<span class="token operator">::</span>Sophus<span class="token punctuation">)</span> # 将库文件上链接到执行文件中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Quick-CMake-tutorial及配套代码"><a href="#Quick-CMake-tutorial及配套代码" class="headerlink" title="Quick CMake tutorial及配套代码"></a><a href="https://www.jetbrains.com/help/clion/quick-cmake-tutorial.html" target="_blank" rel="noopener">Quick CMake tutorial</a>及<a href="https://github.com/MarinaKalashina/CMake-Tutorial-sample" target="_blank" rel="noopener">配套代码</a></h2><h3 id="CMakeLists-txt示例1"><a href="#CMakeLists-txt示例1" class="headerlink" title="CMakeLists.txt示例1"></a>CMakeLists.txt示例1</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">cmake_minimum_required</span><span class="token punctuation">(</span>VERSION <span class="token number">2.8</span><span class="token punctuation">)</span><span class="token function">project</span><span class="token punctuation">(</span>vo1<span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>CMAKE_BUILD_TYPE <span class="token string">"Release"</span><span class="token punctuation">)</span><span class="token function">add_definitions</span><span class="token punctuation">(</span><span class="token string">"-DENABLE_SSE"</span><span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>CMAKE_CXX_FLAGS <span class="token string">"-std=c++11 -O2 ${SSE_FLAGS} -msse4"</span><span class="token punctuation">)</span><span class="token function">list</span><span class="token punctuation">(</span>APPEND CMAKE_MODULE_PATH $<span class="token punctuation">{</span>PROJECT_SOURCE_DIR<span class="token punctuation">}</span><span class="token operator">/</span>cmake<span class="token punctuation">)</span><span class="token function">find_package</span><span class="token punctuation">(</span>OpenCV <span class="token number">3</span> REQUIRED<span class="token punctuation">)</span><span class="token function">find_package</span><span class="token punctuation">(</span>G2O REQUIRED<span class="token punctuation">)</span><span class="token function">find_package</span><span class="token punctuation">(</span>Sophus REQUIRED<span class="token punctuation">)</span><span class="token function">include_directories</span><span class="token punctuation">(</span>        $<span class="token punctuation">{</span>OpenCV_INCLUDE_DIRS<span class="token punctuation">}</span>        $<span class="token punctuation">{</span>G2O_INCLUDE_DIRS<span class="token punctuation">}</span>        $<span class="token punctuation">{</span>Sophus_INCLUDE_DIRS<span class="token punctuation">}</span>        <span class="token string">"/usr/include/eigen3/"</span><span class="token punctuation">)</span><span class="token function">add_executable</span><span class="token punctuation">(</span>orb_cv orb_cv<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token function">target_link_libraries</span><span class="token punctuation">(</span>orb_cv $<span class="token punctuation">{</span>OpenCV_LIBS<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">add_executable</span><span class="token punctuation">(</span>orb_self orb_self<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token function">target_link_libraries</span><span class="token punctuation">(</span>orb_self $<span class="token punctuation">{</span>OpenCV_LIBS<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token macro property"># add_executable( pose_estimation_2d2d pose_estimation_2d2d.cpp extra.cpp ) # use this if in OpenCV2</span><span class="token function">add_executable</span><span class="token punctuation">(</span>pose_estimation_2d2d pose_estimation_2d2d<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token function">target_link_libraries</span><span class="token punctuation">(</span>pose_estimation_2d2d $<span class="token punctuation">{</span>OpenCV_LIBS<span class="token punctuation">}</span><span class="token punctuation">)</span># # <span class="token function">add_executable</span><span class="token punctuation">(</span> triangulation triangulation<span class="token punctuation">.</span>cpp extra<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span> # use <span class="token keyword">this</span> <span class="token keyword">if</span> in opencv2<span class="token function">add_executable</span><span class="token punctuation">(</span>triangulation triangulation<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token function">target_link_libraries</span><span class="token punctuation">(</span>triangulation $<span class="token punctuation">{</span>OpenCV_LIBS<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">add_executable</span><span class="token punctuation">(</span>pose_estimation_3d2d pose_estimation_3d2d<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token function">target_link_libraries</span><span class="token punctuation">(</span>pose_estimation_3d2d        g2o_core g2o_stuff        $<span class="token punctuation">{</span>OpenCV_LIBS<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">add_executable</span><span class="token punctuation">(</span>pose_estimation_3d3d pose_estimation_3d3d<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token function">target_link_libraries</span><span class="token punctuation">(</span>pose_estimation_3d3d        g2o_core g2o_stuff        $<span class="token punctuation">{</span>OpenCV_LIBS<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CMakeLists-txt示例2"><a href="#CMakeLists-txt示例2" class="headerlink" title="CMakeLists.txt示例2"></a>CMakeLists.txt示例2</h3><p><img src="https://i.loli.net/2021/08/08/ok3eRjEcbsWV1nu.png" alt="20210808152734"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">cmake_minimum_required</span><span class="token punctuation">(</span>VERSION <span class="token number">3.19</span><span class="token punctuation">)</span><span class="token function">project</span><span class="token punctuation">(</span>P1<span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>CMAKE_CXX_STANDARD <span class="token number">14</span><span class="token punctuation">)</span>#先建立两个可执行文件<span class="token function">add_executable</span><span class="token punctuation">(</span>P1 main<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token function">add_executable</span><span class="token punctuation">(</span>P1_calc main<span class="token punctuation">.</span>cpp calc<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span>#从calc<span class="token punctuation">.</span>cpp中构建并增加静态库 （添加共享库的方式同理，关键词为SHARED）<span class="token function">add_library</span><span class="token punctuation">(</span>stat_lib STATIC calc<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span>#将静态库连接到可执行文件中<span class="token function">find_library</span><span class="token punctuation">(</span>SLIB stat_lib lib<span class="token punctuation">)</span><span class="token function">target_link_libraries</span><span class="token punctuation">(</span>P1 LINK_PUBLIC $<span class="token punctuation">{</span>SLIB<span class="token punctuation">}</span><span class="token punctuation">)</span># 添加自建的头文件库<span class="token function">include_directories</span><span class="token punctuation">(</span>includes<span class="token operator">/</span>general<span class="token punctuation">)</span># 添加第三方的头文件或库文件，如OpenCV，Sophus等# 为使用 sophus ，需要使用 find_package 命令找到它<span class="token function">find_package</span><span class="token punctuation">(</span> Sophus REQUIRED <span class="token punctuation">)</span># 将头文件包含进去<span class="token punctuation">,</span>  也可以写成 <span class="token function">include_directories</span><span class="token punctuation">(</span> <span class="token string">"Sophus_INCLUDE_DIRS"</span> <span class="token punctuation">)</span><span class="token function">include_directories</span><span class="token punctuation">(</span> $<span class="token punctuation">{</span>Sophus_INCLUDE_DIRS<span class="token punctuation">}</span> <span class="token punctuation">)</span># 将库文件包含进去<span class="token function">add_executable</span><span class="token punctuation">(</span>P1 main<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token function">target_link_libraries</span><span class="token punctuation">(</span>P1 Sophus<span class="token operator">::</span>Sophus<span class="token punctuation">)</span> # 将库文件上链接到执行文件中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第三讲"><a href="#第三讲" class="headerlink" title="第三讲"></a>第三讲</h1><h2 id="内积和外积"><a href="#内积和外积" class="headerlink" title="内积和外积"></a>内积和外积</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/348308540" target="_blank" rel="noopener">向量内积外积的计算以及几何意义</a><ul><li>内积的结果为一个<strong>数</strong></li><li>内积（点乘）的几何意义包括：<ul><li>表征或计算两个向量之间的夹角</li><li>b向量在a向量方向上的投影 </li></ul></li><li>外积的结果为一个垂直于a，b向量所在平面的<strong>向量</strong> （法向量方向）。大小为<code>|a||b|sin&lt;a,b&gt;</code>,是两个向量张成的四边形的有向面积</li></ul></li><li>Eigen中几乎所有的数据都当做矩阵来处理。为使效率更高，需要指定矩阵的大小和类型</li></ul><h2 id="SO（n）和SE（n）"><a href="#SO（n）和SE（n）" class="headerlink" title="SO（n）和SE（n）"></a>SO（n）和SE（n）</h2><ul><li>so（n）是特殊正交群，这个集合由n维<strong>旋转</strong>空间矩阵组成</li><li>坐标系之间的运动由欧氏变换描述，它由<strong>平移</strong>和<strong>旋转</strong>组成。旋转可以由旋转矩阵 <code>SO(3)</code>描述，而平移直接由一个 <code>R^3</code> 向量描述。最后，如果将平移和旋转放在一个矩阵中，就形成了<strong>变换矩阵 <code>SE(3)</code></strong>。</li></ul><h2 id="旋转向量-（不紧凑）"><a href="#旋转向量-（不紧凑）" class="headerlink" title="旋转向量 （不紧凑）"></a>旋转向量 （不紧凑）</h2><blockquote><p>由于上述的旋转矩阵和变换矩阵相对冗余，需要用更紧凑的方式表达旋转：旋转向量。而旋转向量和旋转矩阵之间可以相互转换</p></blockquote><ul><li>在对坐标系进行变换时，需要经过旋转和平移<br><img src="https://i.loli.net/2021/06/12/uNb7AYLcUVH8qmE.png" alt></li><li>任意旋转都可以用一个<strong>旋转轴</strong>和一个<strong>旋转角</strong>来刻画。于是，我们可以使用一个向量，<strong>其方向与旋转轴一致，而长度等于旋转角</strong>。这种向量，称为旋转向量（或轴角， AxisAngle）。这种表示法只需一个<strong>三维</strong>向量即可描述旋转。同样，对于变换矩阵，我们使用一个旋转向量和一个平移向量即可表达一次变换。这时的维数正好是<strong>六维</strong>（事实上，<strong>旋转向量就是我们下章准备介绍的李代数</strong>）</li></ul><h2 id="欧拉角-（有奇异性）"><a href="#欧拉角-（有奇异性）" class="headerlink" title="欧拉角 （有奇异性）"></a>欧拉角 （有奇异性）</h2><ul><li>旋转向量和旋转角相对人类而言并不直观。而欧拉角提供了3个分离的转角来描述旋转，相对直观一些，但会陷入万向锁问题，使得系统丢失了一个自由度（由三次旋转变成了两次旋转），所以也很少在SLAM中直接使用欧拉角</li></ul><h2 id="四元数-（既紧凑，又没有奇异性）"><a href="#四元数-（既紧凑，又没有奇异性）" class="headerlink" title="四元数 （既紧凑，又没有奇异性）"></a>四元数 （既紧凑，又没有奇异性）</h2><ul><li>一个四元数有一个实部和三个虚部。用四元数可以表示旋转</li><li>四元数可以与旋转向量、旋转矩阵之间进行转换</li></ul><p><img src="https://i.loli.net/2021/06/26/nuQLpcyh2mZt1xU.png" alt></p><h2 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h2><ul><li>plotTrajectory.cpp<ul><li>添加集合模块头文件<code>#include &lt;Eigen/Geometry&gt;</code></li><li>将文件路径<code>./examples/trajectory.txt</code>改为<code>../../examples/trajectory.txt</code></li></ul></li><li>visualizeGeometry<ul><li>若报错，重新编译一次pangolin即可</li></ul></li></ul><h1 id="第四讲"><a href="#第四讲" class="headerlink" title="第四讲"></a>第四讲</h1><h2 id="李群和李代数"><a href="#李群和李代数" class="headerlink" title="李群和李代数"></a>李群和李代数</h2><ul><li>给定某时刻的旋转矩阵R，我们就能求得一个 ϕ，它描述了 R 在<strong>局部的导数关系</strong>。与 R 对应的 ϕ 有什么含义呢？我们说， ϕ 正是对应到 SO(3) 上的李代数 so(3)，也就是说，<strong>李代数描述了李群的局部性质</strong>；</li><li>其次，给定某个向量ϕ时，矩阵指数 exp(ϕ^) 如何计算？反之，给定R时，能否有相反的运算来计算ϕ？——事实上，这正是李群与李代数间的指数/对数映射</li></ul><blockquote><p><strong>李群  -&gt; 一些矩阵的集合</strong></p><ul><li>三维旋转矩阵构成了特殊正交群 <code>SO(3)</code>，而变换矩阵构成了特殊欧氏群 <code>SE(3)</code>：<br><img src="https://i.loli.net/2021/06/12/Ouhmi6lVYXty1AZ.png" alt></li><li>群（Group）是一种<strong>集合</strong>加上一种<strong>运算</strong>的代数结构。我们把集合记作 <code>A</code>，运算记作 <code>·</code>，那么群可以记作<code>G = (A; ·)</code>。<ul><li><strong>李群是指具有连续（光滑）性质的群</strong>。像整数群 Z 那样离散的群没有连续性质，所以不是李群。而 <code>SO(n)</code> 和<code>SE(n)</code>，它们在实数空间上是连续的。我们能够直观地想象一个刚体能够连续地在空间中运动，所以它们都是李群</li><li><strong>每个李群都有与之对应的李代数。李代数描述了李群的局部性质</strong>,准确地说，是单位元附近的正切空间</li></ul></li></ul></blockquote><blockquote><p><strong>李代数so（3）和李代数 se（3） -&gt; 一些向量组成的集合</strong></p></blockquote><ul><li><p>so（3）实际上就是由所谓的<strong>旋转向量</strong>组成的空间<br><img src="https://i.loli.net/2021/06/26/dV6FYGN4EsvUt1r.png" alt></p></li><li><p>se（3）</p></li></ul><p><img src="https://i.loli.net/2021/06/26/URwx5EOtr9GcCVd.png" alt></p><p><img src="https://i.loli.net/2021/06/26/5V7ZjvYAeiuNt4b.png" alt></p><h2 id="李代数求导和扰动模型"><a href="#李代数求导和扰动模型" class="headerlink" title="李代数求导和扰动模型"></a>李代数求导和扰动模型</h2><ul><li><p>BCH公式<br><img src="https://i.loli.net/2021/06/26/Oavcluz5FwSVZkY.png" alt></p></li><li><p>扰动</p></li></ul><p><img src="https://i.loli.net/2021/06/26/lh1KsubTixEvc3M.png" alt></p><ul><li>李群可通过对数映射获得它的李代数 （Sophus的使用可参考本书代码slambook2/ch4/useSophus.cpp）</li></ul><h2 id="SO3，so3，SE3和se3初始化以及相互转换关系"><a href="#SO3，so3，SE3和se3初始化以及相互转换关系" class="headerlink" title="SO3，so3，SE3和se3初始化以及相互转换关系"></a><a href="https://blog.csdn.net/u011092188/article/details/77833022" target="_blank" rel="noopener">SO3，so3，SE3和se3初始化以及相互转换关系</a></h2><p><img src="https://i.loli.net/2021/07/28/qzkt7Ev9wIyfFlx.png" alt="20210728171656"></p><h2 id="旋转矩阵（R），旋转向量（V）和四元数（Q）在Eigen中转换关系"><a href="#旋转矩阵（R），旋转向量（V）和四元数（Q）在Eigen中转换关系" class="headerlink" title="旋转矩阵（R），旋转向量（V）和四元数（Q）在Eigen中转换关系"></a><a href="https://blog.csdn.net/u011092188/article/details/77430988" target="_blank" rel="noopener">旋转矩阵（R），旋转向量（V）和四元数（Q）在Eigen中转换关系</a></h2><p><img src="https://i.loli.net/2021/07/28/rMAk1x7vaq9ugJ3.png" alt="20210728171757"></p><h1 id="第五讲"><a href="#第五讲" class="headerlink" title="第五讲"></a>第五讲</h1><ul><li><p><a href="https://blog.csdn.net/weixin_45532178/article/details/115418182" target="_blank" rel="noopener">Ubuntu 20.04下安装opencv3</a></p></li><li><p>根据 RGB-D 图像和相机内参，我们可以计算任何一个像素在相机坐标系下的位置。同时，根据相机位姿，又能计算这些像素在世界坐标系下的位置。如果把所有像素的空间坐标都求出来，相当于构建一张类似于地图的东西</p></li><li><p>若有多张RGB-D图像，且知道每个图像的内参（如随相机固定的参数）和外参（如相机位姿信息），则通过求出所有像素的空间信息后，可实现点云拼接</p></li><li><p>相机内参在出厂后即固定。有些厂商会告诉内参，若没告诉，用标定法即可（已非常成熟）</p><ul><li>内参的推导可参考5.1.1小节，内参数矩阵中一般包含f_x,f_y  （像素）、 c_x,c_y   （原点平移）<br><img src="https://i.loli.net/2021/06/27/GKr3647LVmRxhA8.png" alt></li></ul></li><li><p>相机的外参：位姿<code>R,t</code> （旋转矩阵和平移向量）</p></li></ul><h1 id="第六讲"><a href="#第六讲" class="headerlink" title="第六讲"></a>第六讲</h1><ul><li>大多现代视觉 SLAM 算法都不需要那么高成本的传感器，甚至也不需要那么昂贵的处理器来计算这些数据，这全是算法的功劳。由于在 SLAM 问题中，同一个点往往会被一个相机在不同的时间内多次观测，同一个相机在每个时刻观测到的点也不止一个。<strong>这些因素交织在一起，使我们拥有了更多的约束，最终能够较好地从噪声数据中恢复出我们需要的东西</strong></li><li>SLAM中经常会碰到一些<strong>非线性优化</strong>问题：由许多个误差项平方和组成的最小二乘问题。在优化该问题时，有两种主要的梯度下降方式：Gauss-Newton 和 Levenberg-Marquardt<ul><li>在做最优化计算时，需要提供变量的初始值（在视觉SLAM中，可用ICP，PnP等方法提供优化初始值）</li></ul></li><li>优化库<ul><li>有两个常用的优化库：google的Ceres库和基于图优化的g2o（General Graphic Optimization， G2O）库<ul><li><strong>Ceres 库面向通用的最小二乘问题的求解</strong>，作为用户，我们需要做的就是定义优化问题，然后设置一些选项，输入进 Ceres 求解即可</li><li>另一个（主要在 SLAM 领域）广为使用的优化库 <strong>g2o是一个基于图优化的库</strong>。为了使用 g2o，首先要做的是将问题抽象成图优化。这个过程中，只要记住<strong>节点为优化变量，边为误差项</strong>即可</li></ul></li></ul></li></ul><h1 id="第七讲"><a href="#第七讲" class="headerlink" title="第七讲"></a>第七讲</h1><h2 id="特征点"><a href="#特征点" class="headerlink" title="特征点"></a>特征点</h2><p>（基于特征点方式的视觉里程计计算法）</p><ul><li><p>特征点：在视觉里程计中，我们希望特征点<strong>在相机运动之后仍保持稳定</strong>。（如著名的 SIFT, SURF,ORB等） </p><ul><li><p>特征点由<strong>关键点</strong>（Key-point）和<strong>描述子</strong>（Descriptor）两部分组成。（比方说，当我们<br>谈论 SIFT 特征时，是指“提取 SIFT 关键点，并计算 SIFT 描述子”两件事情）。<strong>关键点是指该特征点在图像里的位置</strong>，有些特征点还具有朝向、大小等信息。<strong>描述子通常是一个向量，按照某种人为设计的方式，描述了该关键点周围像素的信息</strong>。描述子是按照“外观<br>相似的特征应该有相似的描述子”的原则设计的</p><ul><li><p>SIFT<strong>特征点</strong>：SIFT（尺度不变特征变换， Scale-Invariant Feature Transform） 当属最为经典的一种。它充分考虑了在图像变换过程中出现的光照，尺度，旋转等变化，但随之而来的是极大的计算量。由于整个 SLAM 过程中，图像特征的提取与匹配仅仅是诸多环节中的一个，所以在 SLAM 中我们_甚少使用_这种“奢侈”的图像特征</p></li><li><p>FAST<strong>关键点</strong>： FAST 关键点属于计算特别快的一种特征点（注意这里“关键点”的用词，说明它_没有描述子_）</p></li><li><p>ORB（Oriented FAST and Rotated BRIEF）<strong>特征点</strong>：ORB特征则是目前看来非常具有代表性的实时图像特征。<strong>它改进了FAST 检测子不具有方向性的问题，并采用速度极快的二进制描述子BRIEF</strong>，使整个图像特征提取的环节大大加速。提取 ORB 特征分为两个步骤：</p><ol><li><p>FAST 角点提取：找出图像中的” 角点”。相较于原版的 FAST, ORB 中计算了特征点的主方向，为后续的 BRIEF 描述子增加了旋转不变特性。</p><ul><li>针对 FAST 角点不具有方向性和尺度的弱点， <strong>ORB 添加了尺度和旋转的描述。尺度不变性由构建图像金字塔，并在金字塔的每一层上检测角点来实现。而特征的旋转是由灰度质心法（Intensity Centroid）实现的</strong><br><img src="https://i.loli.net/2021/06/14/S8rbTA2pw9omNjE.png" alt></li></ul></li><li><p>BRIEF 描述子：对前一步提取出特征点的周围图像区域进行描述</p><ul><li>BRIEF 是一种二进制描述子，它的描述向量由许多个 0 和 1 组成，这里的 0 和 1 编码了关键点附近两个像素（比如说 p 和 q）的大小关系：如果 p 比 q 大，则取 1，反之就取 0 （如果我们取了 128 个这样的 p; q，最后就得到 128 维由 0， 1 组成的向量。那么， p和 q 如何选取呢？在作者原始的论文中给出了若干种挑选方法，大体上都是按照某种概率分布，随机地挑选 p 和 q 的位置。 BRIEF 使用了随机选点的比较，速度非常快，而且由于使用了二进制表达，存储起来也十分方便，适用于实时的图像匹配。）</li><li>原始的 BRIEF 描述子不具有旋转不变性的，因此在图像发生旋转时容易丢失。而 ORB 在 FAST 特征点提取阶段计算了关键点的方向，所以可以利用方向信息，计算了旋转之后的“Steer BRIEF”特征，使 ORB 的描述子具有较好的旋转不变性</li></ul><blockquote><p>由于考虑到了旋转和缩放，使得 ORB 在平移、旋转、缩放的变换下仍有良好的表现。同时， FAST 和 BRIEF 的组合也非常的高效，使得 ORB 特征在实时 SLAM 中非常受欢迎</p></blockquote></li></ol></li></ul></li></ul></li><li><p>在提取特征点后，接下来，我们<strong>希望根据匹配的点对，估计相机的运动</strong>。这里由于相机的原理不同，情况发生了变化：</p><ol><li>当相机为单目时，我们只知道 2D 的像素坐标，因而问题是根据<strong>两组 2D 点</strong>估计运动。该问题用对极几何来解决</li><li>当相机为双目、 RGB-D 时，或者我们通过某种方法得到了距离信息，那问题就是根据<strong>两组 3D 点</strong>估计运动。该问题通常用 ICP 来解决</li><li>如果我们有 3D 点和它们在相机的投影位置，也能估计相机的运动。该问题通过<strong>PnP</strong>求解</li></ol></li></ul><h2 id="2D-2D：对极几何-（7-3节，单目相机）"><a href="#2D-2D：对极几何-（7-3节，单目相机）" class="headerlink" title="2D-2D：对极几何 （7.3节，单目相机）"></a>2D-2D：对极几何 （7.3节，单目相机）</h2><ul><li><p>需要&gt;=8个点对<br><img src="https://i.loli.net/2021/06/27/eyodvJ7TCj3EBNa.png" alt><br><img src="https://i.loli.net/2021/06/27/bWFU8AfRlNdSz72.png" alt></p></li><li><p><strong>基础矩阵F和本质矩阵E</strong></p><ul><li>对极约束简洁地给出了两个匹配点的空间位置关系。于是，相机位姿估计问题变为以下两步：<ol><li>根据配对点的像素位置，求出 E 或者 F</li><li>根据 E 或者 F，求出 R; t   </li></ol><ul><li>由于 E 和 F <strong>只相差了相机内参</strong>，而内参在 SLAM 中通常是已知的，所以实践当中  往往使用形式更简单的 <strong>E</strong>。</li></ul></li></ul></li><li><p><strong>单应矩阵H</strong></p><ul><li>除了基本矩阵和本质矩阵，我们还有一种称为单应矩阵（Homography） H 的东西，它描述了两个平面之间的映射关系。若场景中的特征点都落在<strong>同一平面上</strong>（比如墙，地面等），7.3 2D-2D: 对极几何则可以通过单应性来进行运动估计。这种情况在无人机携带的俯视相机，或扫地机携带的顶视相机中比较常见</li><li>单应性在 SLAM 中具重要意义。当特征点共面，或者相机发生纯旋转的时候，基础矩阵的自由度下降，这就出现了所谓的<strong>退化</strong>（degenerate）。现实中的数据总包含一些噪声，这时候如果我们继续使用八点法求解基础矩阵，基础矩阵多余出来的自由度将会主要由噪声决定。为了能够<strong>避免退化现象造成的影响</strong>，通常我们会同时估计基础矩阵 F 和单应矩阵H，选择<strong>重投影误差比较小</strong>的那个作为最终的运动估计矩阵</li></ul></li><li><p>在经过特征点匹配后，<code>slambook2/ch7/pose_estimation_2d2d.cpp</code> 文件使用匹配好的特征点来计算本质矩阵<strong>E</strong>; F 和 H，进而分解 E 得<strong>相机的位姿R; t</strong>。（<strong>从 E; F 和 H 都可以分解出运动</strong>，不过 H 需要假设特征点位于平面上，（而本实验特征点不在同一平面），所以我们这里主要用E 来分解运动。）</p></li><li><p>在单目SLAM中，仅通过单张图像无法获得像素的深度信息，但有多张图像时，可通过三角测量的方法获得像素深度<code>slambook/ch7/triangulation.cpp</code></p><ul><li>在增大平移，会导致匹配失效；而平移太小，则三角化精度不够——这就是三角化的矛盾</li></ul></li></ul><h2 id="3D-2D：PnP-（7-7节-双目或-RGB-D-相机）"><a href="#3D-2D：PnP-（7-7节-双目或-RGB-D-相机）" class="headerlink" title="3D-2D：PnP （7.7节,双目或 RGB-D 相机）"></a>3D-2D：PnP （7.7节,双目或 RGB-D 相机）</h2><ul><li>需要&gt;=3个点对，以及一个额外点按验证结果<br>PnP（Perspective-n-Point）</li></ul><blockquote><ul><li><p>PnP（Perspective-n-Point）是求解 3D 到 2D 点对运动的方法。它描述了当我们<strong>知道n 个 3D 空间点以及它们的投影位置时，如何估计相机所在的位姿</strong>。前面已经说了， 2D-2D的对极几何方法需要<strong>八个</strong>或八个以上的点对（以八点法为例），且存在着初始化、纯旋转和尺度的问题。然而，如果两张图像中，其中一张特征点的 3D 位置已知，那么最少只需<strong>三个</strong>点对（需要至少一个额外点验证结果）就可以估计相机运动。特征点的 3D 位置可以由三角化，或者由 RGB-D 相机的深度图确定。因此，在双目或 RGB-D 的视觉里程计中，我们可以<strong>直接使用 PnP 估计相机运动</strong>。而在单目视觉里程计中，必须先进行初始化，然后才能使用 PnP。 3D-2D 方法不需要使用对极约束，又可以在很少的匹配点中获得较好的运动估计，是最重要的一种姿态估计方法</p></li><li><p>PnP 问题有很多种求解方法，例如用三对点估计位姿的 P3P，直接线性变换（DLT），EPnP（Efcient PnP）  等等。此外，还能用非线性优化的方式，构建最小二乘问题并迭代求解，也就是万金油式的 Bundle Adjustment。我们先来看 DLT，然后再讲 Bundle Adjustment</p></li></ul></blockquote><p><img src="https://i.loli.net/2021/07/01/be7ytICYl2puAMB.png" alt></p><h3 id="P3P"><a href="#P3P" class="headerlink" title="P3P"></a>P3P</h3><p>P3P 需要利用给定的三个点的几何关系。它的输入数据为<strong>三对 3D-2D 匹配点</strong>。记 3D点为 A; B; C， 2D 点为 a; b; c，其中小写字母代表的点为大写字母在相机成像平面上的投影，如图 7-11 所示。此外， P3P 还需要使用<strong>一对验证点</strong>，以从可能的解出选出正确的那一个（类似于对极几何情形）。记验证点对为 D − d，相机光心为 O。请注意，我们知道的是A; B; C 在<strong>世界坐标系</strong>中的坐标，而不是在相机坐标系中的坐标。一旦 3D 点在相机坐标系下的坐标能够算出，我们就得到了 3D-3D 的对应点，把 PnP 问题转换为了 ICP 问题</p><ul><li>从 P3P 的原理上可以看出，为了求解 PnP，我们利用了三角形相似性质，求解<strong>投影点 a; b; c 在相机坐标系下的 3D 坐标</strong></li><li>最后把问题转换成一个 3D 到 3D 的<strong>位姿估计</strong>问题</li></ul><h3 id="Bundle-Adjustment-（可参考第九讲）"><a href="#Bundle-Adjustment-（可参考第九讲）" class="headerlink" title="Bundle Adjustment （可参考第九讲）"></a>Bundle Adjustment （可参考第九讲）</h3><p>除了使用线性方法之外，我们可以把 PnP 问题构建成一个关于重投影误差的非线性最小二乘问题。前面说的线性方法，往往是<strong>先求相机位姿，再求空间点位置</strong>，而非线性优化则是把它们都看成优化变量，放在一起优化。这是一种非常通用的求解方式，我们可以用它对 PnP 或 ICP 给出的结果进行优化。这一类<strong>把相机和三维点放在一起进行最小化的问题</strong>，统称为Bundle Adjustment。</p><h2 id="3D-3D-ICP-（Iterative-Closest-Point）"><a href="#3D-3D-ICP-（Iterative-Closest-Point）" class="headerlink" title="3D-3D: ICP （Iterative Closest Point）"></a>3D-3D: ICP （Iterative Closest Point）</h2><ul><li>根据配对好的3D点估计相机的运动（已由图像特征给定了匹配的情况下进行位姿估计的问题）<br><img src="https://i.loli.net/2021/07/01/8wrzhnPLMyXNCJD.png" alt></li></ul><blockquote><p>在RGB-D SLAM 中，由于一个像素的深度数据可能测量不到，所以我们可以<strong>混合</strong>着使用 PnP和 ICP 优化：对于深度已知的特征点，建模它们的 3D-3D 误差；对于深度未知的特征点，则建模 3D-2D 的重投影误差。于是，可以将所有的误差放在同一个问题中考虑，使得<br>求解更加方便</p></blockquote><blockquote><p>对极几何-&gt;PnP-&gt;ICP,在这个过程中我们使用了越来越多的信息（没有深度—&gt;有一个图的深度—&gt;有两个图的深<br>度），因此，在深度准确的情况下，得到的估计也将越来越准确</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本节介绍了基于特征点的视觉里程计中的几个重要的问题。包括：</p><ol><li>特征点是如何提取并匹配的；</li><li>如何通过 2D-2D 的特征点估计相机运动；</li><li>如何从 2D-2D 的匹配估计一个点的空间位置；</li><li>3D-2D 的 PnP 问题，它的线性解法和 Bundle Adjustment 解法；</li><li>3D-3D 的 ICP 问题，其线性解法和 Bundle Adjustment 解法</li></ol><h1 id="第八讲"><a href="#第八讲" class="headerlink" title="第八讲"></a>第八讲</h1><h2 id="直接法的引出"><a href="#直接法的引出" class="headerlink" title="直接法的引出"></a>直接法的引出</h2><p>在视觉里程计中，除了可以用特征点法，还可以用直接法</p><p><img src="https://i.loli.net/2021/07/01/WE6A3ulTez8xanY.png" alt></p><p>我们看到使用特征点确实存在一些问题。有没有什么办法能够克服这些缺点呢？我们有以下几种思路：</p><ul><li>保留特征点，但只计算关键点，不计算描述子。同时，使用<strong>光流法</strong>（Optical Flow）来跟踪特征点的运动。这样可以回避计算和匹配描述子带来的时间，但光流本身的计算需要一定时间</li><li>只计算关键点，不计算描述子。同时，使用<strong>直接法</strong>（Direct Method）来计算特征点在下一时刻图像的位置。这同样可以跳过描述子的计算过程，而且直接法的计算更加简单</li></ul><p>第一种方法仍然使用特征点，只是<strong>把匹配描述子替换成了光流跟踪</strong>，估计相机运动时仍使用<strong>对极几何、 PnP 或 ICP 算法</strong>。而在直接法中，我们会根据图像的<strong>像素灰度信息</strong>来计算相机运动。</p><p>使用特征点法估计相机运动时，我们把特征点看作固定在三维空间的不动点。根据它们在相机中的投影位置，通过<strong>最小化重投影误差</strong>（Reprojection error）来优化相机运动。在这个过程中，我们需要精确地知道空间点在两个相机中投影后的像素位置——这也就是我<br>们为何要对特征进行匹配或跟踪的理由。同时，我们也知道，计算、匹配特征需要付出大量的计算量。相对的，在直接法中，我们并不需要知道点与点之间之间的对应关系，而是通过<strong>最小化光度误差</strong>（Photometric error）来求得它们。</p><p><img src="https://i.loli.net/2021/07/01/XGbOKeW93Q4BUjz.png" alt="20210701172116"></p><h2 id="直接法的推导"><a href="#直接法的推导" class="headerlink" title="直接法的推导"></a>直接法的推导</h2><ul><li>我们的目标是求第一个相机到第二个相机的相对位姿变换</li></ul><p><img src="https://i.loli.net/2021/07/01/1kVX3dyScj5hTRJ.png" alt><br><img src="https://i.loli.net/2021/07/01/ItaNseiwXxZkgVF.png" alt><br><img src="https://i.loli.net/2021/07/01/Ib9lEZ57FADyOx8.png" alt></p><blockquote><p>相比于特征点法，直接法完全依靠优化来求解相机位姿。<strong>像素梯度</strong>引导着优化的方向。如果我们想要得到正确的优化结果，就必须<strong>保证大部分像素梯度能够把优化引导到正确的方向。</strong></p></blockquote><ul><li>原理解释（通俗易懂）</li></ul><p><img src="https://i.loli.net/2021/07/01/zTMryHQe4G2hwiF.png" alt><br><img src="https://i.loli.net/2021/07/01/AlsHz5dCI8wPTgB.png" alt><br><img src="https://i.loli.net/2021/07/01/36LgoRsVZ25XvOr.png" alt></p><ul><li>优缺点</li></ul><p><img src="https://i.loli.net/2021/07/01/uAvfnaPbcsFdo2q.png" alt="20210701185914"></p><hr><p>前端视觉里程计能给出一个短时间内的轨迹和地图，但由于不可避免的误<br>差累积，这个地图在长时间内是不准确的。所以，在视觉里程计的基础上，我们还希望构<br>建一个尺度、规模更大的优化问题，以考虑长时间内的最优轨迹和地图。不过，考虑到精<br>度与性能的平衡，实际当中存在着许多不同的做法。</p><hr><h1 id="第九讲：后端1"><a href="#第九讲：后端1" class="headerlink" title="第九讲：后端1"></a>第九讲：后端1</h1><ul><li>Bundle Adjustment （BA）<br>所谓的 BundleAdjustment，是指从视觉重建中提炼出最优的 <strong>3D 模型和相机参数</strong>（内参数和外参数）。<br>从每一个特征点反射出来的几束光线（bundles of light rays），在我们把<strong>相机姿态</strong>和<strong>特征点空间位置</strong>做出最优的调整 (adjustment) 之后，最后收束到相机光心的这个过程，简称为 BA。</li></ul><p><img src="https://i.loli.net/2021/07/01/EmZ8jB7RAxTtonN.png" alt><br><img src="https://i.loli.net/2021/07/01/YTZOVu6lwcznMCH.png" alt></p><h1 id="第十讲"><a href="#第十讲" class="headerlink" title="第十讲"></a>第十讲</h1><blockquote><p>SLAM的主体（前端、后端）主要的目的在于估计相机运动：前端提供特征点的提取和轨迹、地图的初值，而后端负责对所有这些数据进行优化。</p></blockquote><h1 id="第十一讲：回环检测"><a href="#第十一讲：回环检测" class="headerlink" title="第十一讲：回环检测"></a>第十一讲：回环检测</h1><ul><li>回环检测模块，能够给<br>出除了相邻帧之外的，一些时隔更加久远的约束：例如 x1 − x100 之间的位姿变换。为什<br>么它们之间会有约束呢？这是因为我们察觉到相机经过了同一个地方， 采集到了相似的数<br>据。而回环检测的关键，就是如何有效地检测出相机经过同一个地方这件事。如果我们能<br>够成功地检测这件事，就可以为后端的 Pose Graph 提供更多的有效数据，使之得到更好<br>的估计，特别是得到一个全局一致（Global Consistent）的估计</li><li>回环检测对于 SLAM 系统意义重大。它关系到我们估计的轨迹和地图在长时间下的正确性。另一方面，由于回环检测提供了<strong>当前数据与所有历史数据的关联</strong>，在跟踪算法丢失之后，我们还可以利用回环检测进行<strong>重定位</strong>。因此，回环检测对整个 SLAM 系统精度与<br>鲁棒性的提升，是非常明显的。甚至在某些时候，我们把仅有前端和局部后端的系统称为<br>VO，而把带有回环检测和全局后端的称为 SLAM</li></ul><h1 id="第十二讲：建图"><a href="#第十二讲：建图" class="headerlink" title="第十二讲：建图"></a>第十二讲：建图</h1><ul><li>在适用范围内， RGB-D 相机是一种更好的<br>选择。在 RGB-D 相机中可以完全通过传感器中硬<br>件测量得到，无需消耗大量的计算资源来估计它们。并且， RGB-D 的结构光或飞时原理，<br>保证了深度数据对纹理的无关性。即使面对纯色的物体，只要它能够反射光，我们就能测<br>量到它的深度。这亦是 RGB-D 传感器的一大优势。</li><li>利用 RGB-D 进行稠密建图是相对容易的。不过，根据地图形式不同，也存在着若干<br>种不同的主流建图方式。最直观最简单的方法，就是根据估算的相机位姿，将 RGB-D 数<br>据转化为点云（Point Cloud），然后进行拼接，最后得到一个由离散的点组成的点云地图<br>（Point Cloud Map）。在此基础上，如果我们对外观有进一步的要求，希望估计物体的表面，<br>可以使用三角网格（Mesh），面片（Surfel）进行建图。另一方面，如果希望知道地图的障<br>碍物信息并在地图上导航，亦可通过体素（Voxel）建立占据网格地图（Occupancy Map）。</li></ul><h1 id="配置ORB-SLAM2"><a href="#配置ORB-SLAM2" class="headerlink" title="配置ORB-SLAM2"></a><a href="https://www.cnblogs.com/MingruiYu/p/12286752.html" target="_blank" rel="noopener">配置ORB-SLAM2</a></h1><blockquote><p><a href="https://github.com/raulmur/ORB_SLAM2" target="_blank" rel="noopener">官方源码及环境配置</a><br><a href="https://www.cnblogs.com/MingruiYu/tag/ORB-SLAM2/" target="_blank" rel="noopener">ORB-SLAM2 系列博文</a></p></blockquote><ul><li>pangolin<br>根据官网安装required and Recommended dependencies。然后编译文件</li></ul><pre><code>cd Pangolinmkdir buildcd buildcmake ..makesudo make install</code></pre><ul><li><a href="https://blog.csdn.net/li_wen01/article/details/71641408" target="_blank" rel="noopener">opencv3</a><ul><li><a href="https://www.cnblogs.com/rohens-hbg/p/12326084.html" target="_blank" rel="noopener">安装过程遇到的问题解决方案</a></li></ul></li></ul><pre><code>cd opencv-3.4.15mkdir buildcd buildcmake ..makesudo make install</code></pre><ul><li><p>Eigen3</p><ul><li>使用<code>sudo apt-get install libeigen3-dev</code></li></ul></li><li><p>ORB-SLAM2</p><ul><li>报错：error: usleep is not declared this scope。其解决方法: 只需在/include/System.h文件中添加头文件#include &lt;unistd.h&gt;即可</li></ul></li><li><p>在ORB-SLAM2中新建文件夹DataDownload，将数据下载到该文件夹下并解压。用官网的命令行来运行程序</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SLAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>781-森林中的兔子</title>
      <link href="/2021/05/25/leetcode/781-sen-lin-zhong-de-tu-zi/"/>
      <url>/2021/05/25/leetcode/781-sen-lin-zhong-de-tu-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="781-森林中的兔子"><a href="#781-森林中的兔子" class="headerlink" title="781. 森林中的兔子"></a><a href="https://leetcode-cn.com/problems/rabbits-in-forest/" target="_blank" rel="noopener">781. 森林中的兔子</a></h1><ul><li>报相同数字的兔子中 （如n个兔子报的数字都是m，即[m, m,  … m]）<ul><li>如果<code>n+1&lt;=m</code> (如 [6,6]) ,则可以认为这些兔子都是同一种颜色,可以抱成一团,兔子个数为  <code>（m+1）*（n//(m+1)）</code></li><li>如果<code>n+1&gt;m</code><ul><li>如果正好能抱成完整的团（即 <code>6%(2+1)==0</code>） （如[2,2,2,2,2,2]，n=6，m=2,能抱2个团）,则兔子个数为 <code>（2+1）*(6//(2+1))=6</code></li><li>如果抱团后仍然后剩下的（即<code>7%（2+1）！=0</code>）（如[2,2,2,2,2,2,2]，n=7,m=2,需要抱3团），则兔子个数为<code>（2+1）*（6//(2+1)+1）</code></li><li>这两种情况可以归纳为向上取整</li></ul></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numRabbits</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> answers <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">import</span> math        <span class="token keyword">import</span> collections        dic<span class="token operator">=</span>collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 统计各个元素的个数</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">:</span>            dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        res<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> key<span class="token punctuation">,</span>val <span class="token keyword">in</span> dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp<span class="token operator">=</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>val<span class="token operator">/</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token number">1.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            res<span class="token operator">+=</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>tmp        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者(只是向上取整的写法不同)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numRabbits</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> answers<span class="token punctuation">)</span> <span class="token punctuation">:</span>        ans_dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> ans_dic<span class="token punctuation">:</span>                ans_dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ans_dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> ans_dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp <span class="token operator">=</span> val <span class="token operator">//</span> <span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#抱团取整</span>            <span class="token keyword">if</span> val <span class="token operator">%</span> <span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#抱团后仍有剩余，则+1</span>                tmp <span class="token operator">+=</span> <span class="token number">1</span>            res <span class="token operator">+=</span> tmp<span class="token operator">*</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++代码</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1009</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">numRabbits</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> answers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">counts</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> answers<span class="token punctuation">)</span>            counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> counts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> per <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抱团, 地板除</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">*</span> per <span class="token operator">&lt;</span> cnt<span class="token punctuation">)</span> k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抱团后仍有剩余，则k+1</span>            ans <span class="token operator">+</span><span class="token operator">=</span> k <span class="token operator">*</span> per<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前结果为当前抱团数*（报数数字+1）</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者可以把 地板除<code>int k = counts[i]/ (i + 1);</code>和 k的更新<code>if (k * per &lt; cnt) k++;</code> 合并为向上取整<code>int k = ceil(counts[i]/ float(i + 1)); //抱团</code>. 即：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1009</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">numRabbits</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> answers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">counts</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> answers<span class="token punctuation">)</span>            counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> counts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> per <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span>counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span> <span class="token keyword">float</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抱团</span>            <span class="token comment" spellcheck="true">// if (k * per &lt; cnt) k++;//抱团后仍有剩余，则k+1</span>            ans <span class="token operator">+</span><span class="token operator">=</span> k <span class="token operator">*</span> per<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前结果为当前抱团数*（报数数字+1）</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读”心流：最佳体验心理学“</title>
      <link href="/2021/05/17/growth/du-xin-liu-zui-jia-ti-yan-xin-li-xue/"/>
      <url>/2021/05/17/growth/du-xin-liu-zui-jia-ti-yan-xin-li-xue/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.youtube.com/watch?v=C3AJrmCBexA" target="_blank" rel="noopener">怎样能活出成就？幸福与快乐秘诀是什么？带你了解美国心理学博士25年的研究结果 心流体验</a></p><p>幸福是人生目标的副产品。真正的幸福是，是你全身心地投入一桩事物，达到忘我的状态（心流），并因此得到内心秩序和安宁的时刻。</p><ul><li>你喜欢你做的事情，并且对你很有意义</li><li>你能高度集中注意力，你做着这个事情的时候，好像时间都不存在了，你自己好像也不存在了</li><li>你做的这个事情要有一点点的难度，太简单的话就无聊了，太难的话，就不知道怎么做下去了</li></ul><hr><h1 id="书摘"><a href="#书摘" class="headerlink" title="书摘"></a>书摘</h1><ul><li>如果一个人不能在独处时控制注意力，就不可避免地要求助于比较简单的外在手段：诸如药物、娱乐、刺激等任何能麻痹心灵或转移注意力的东西……</li><li>一个人若能从独处中找到乐趣，必须有一套自己的心灵程序，不需要靠文明生活的支持——亦即不需要借助他人、工作、电视、剧场规划他的注意力，就能达到心流状态。</li><li>体育具备造就心流的最佳条件：明确的目标，即时的回馈，易学难精带来的上不封顶的挑战性。</li><li>当代人遇到闲暇无聊，便饥不择食地打开电视，奔向商厦或网上购物。这种应对无聊的策略一旦建立，就很难改变。</li><li>心流就是大脑的生命。当心熵比较高的时候，在一片混乱的情况下，大脑的做功能力很低，很多心理能量都浪费在内耗上了。但一旦进入心流状态，心理能量就围绕着同一个主题组织起来，向同一个方向高效率地输出。这也就是契克森米哈赖反复强调的，人在心流状态下的表现最好。而且，如果一个人经常经历心流，他的心理就会被训练得越来越有秩序，以后进入心流就越来越容易，即使平时不在心流状态下，也不像一般人那样心猿意马。</li><li>“痛下决心追求一个重要的目标，各式各样的活动都能汇集成统一的心流体验时，意识就呈现出一片祥和。知道自己要什么，并朝这个方向努力的人，感觉、思想、行动都能配合无间，内心的和谐自然涌现。生活在和谐之中的人，不论做什么、遭遇什么，都不会把精神能量浪费在怀疑、后悔、罪恶感及恐惧之上，精力永远用在有益的方面。对生命胸有成竹的人，内心的力量与宁静，就是内在一致的最高境界。方向、决心加上和谐，就能把生命转变成天衣无缝的心流体验，并赋予人生意义。达到这种境界的人再也不觉得匮乏。意识井然有序的人不需要害怕出乎意料的事，甚至也不惧怕死亡，活着的每一刻都饶富意义，大多数时候也都乐趣无穷。”</li><li>心流是意识和谐有序的一种状态，当事人心甘情愿、纯粹无私地去做一件事，不掺杂任何其他企求。</li><li>如果我们学会在不断向前推进的体验中找到快乐与意义，社会制约的重担就会从肩上自动滑落。当奖赏不再受外在力量管制时，权力就回到了个人手中。</li><li>外界事物令你痛苦并不是因为它们打扰你，而是肇因于你对它们的判断，而你有能力立刻消弭那种判断。</li><li>一个人可以不管外界发生什么事，只靠改变意识的内涵，使自己快乐或悲伤；意识的力量也可以把无助的境况，转变为反败为胜的挑战。</li><li>注意力再怎么强大，也无法超越前面谈到的限制。它在一定时间内只能处理一定数量的资讯。从记忆库中取出资讯，理解、比较、评估，然后做决定——无一不用到心灵有限的资讯处理能力。</li><li>有些人学会了有效运用注意力这笔无价的资源，也有人弃置不用。控制意识最明显的指标就是能随心所欲地集中注意力，不因任何事情而分心。若能做到这一点，就能在日常生活中找到乐趣。</li><li>由于注意力除了决定某些事物能否进入意识外，还要带动其他心灵活动——回忆、思考、感觉、做决定，所以应该把注意力视为一种“精神能量”。它是完成工作不可或缺的能量，在工作中会耗损。我们通过这种能量的应用，创造自我；也通过应用的方式，塑造记忆、思想和感觉。注意力是一种受我们控制、随我们使用的能量变化而改变，也是改善体验品质的最重要的工具。</li><li>精神熵的反面就是最优体验。当发觉收到的资讯与目标亲和，精神能量就会源源不断，没有担心的必要，也无须猜疑自己的能力。我们不再怀疑自己，只因为我们得到了明确的鼓励：“你做得很好！”积极的反馈强化了自我，使我们能投入更多的注意力，照顾内心与外在环境的平衡。</li><li>最优体验出现时，一个人可以投入全部的注意力，以求实现目标；没有失序现象需要整顿，自我也没有受到任何威胁，因此不需要分心防卫。我们把它称为“心流体验”，因为接受我们访谈的人，大多采用这类字眼描述他们处于最优状态时的感觉：“好像漂浮起来”，“一股洪流带领着我”。它正好是精神熵的反面——实际上，有时我们称它为“精神负熵”。拥有它的人就能培养一个更坚强、更自信的自我，能够用更多的精神能量，专注于自己选择的目标。</li><li>越来越完美的自我控制，产生一种痛快的感觉。你不断逼身体发挥所有的极限，直到全身隐隐作痛；然后你会满怀敬畏地回顾自我，回顾你所做的一切，那种佩服的感觉简直无法形容。它带给你一种狂喜，一种自我满足。只要在这种战役中战胜过自己，人生其他战场的挑战，也就变得容易多了。</li><li>其实战斗中对抗的不是自己，而是使意识失序的精神熵。我们是为保卫自我而战，这同时也是一场控制注意力的斗争，虽然它不一定像攀岩那样牵涉到体能的挑战。体验过心流的人都知道，那份深沉的快乐是严格的自律、集中注意力换来的。</li><li>在心流状态下，意识全神贯注、秩序井然，有助于自我的整合。思想、企图、感觉和所有感官都集中于同一个目标上，自我体验也臻于和谐。当心流结束时，一个人会觉得，内心和人际关系都比以前更“完整”。</li><li>享乐无须耗费精神能量，但乐趣必须运用高度的注意力。换言之，享乐可以不花力气，只要大脑特定中枢受到电击或药物的刺激，就能产生享受的快感；但是打网球、看书、谈话，若不全神贯注，就会觉得索然无味，毫无乐趣可言。 也正因为如此，享乐的片刻转瞬即逝，不能带动自我成长。复杂性却要求把精神能量投入到具有挑战性的新目标。</li><li>乐趣的出现主要有八项元素。一般人回想最积极的体验时，至少都会提及这些元素中的一项，或是全部。首先，这种体验出现在我们面临一份可完成的工作时。其次，我们必须能够全神贯注于这件事情。第三和第四，这项任务有明确的目标和即时的反馈。第五，我们能深入而毫不牵强地投入到行动之中，日常生活的忧虑和沮丧都因此一扫而空。第六，充满乐趣的体验使人觉得能自由控制自己的行动。第七，进入“忘我”状态，但心流体验告一段落后，自我感觉又会变得强烈。第八，时间感会改变——几小时犹如几分钟，几分钟也可能变得像几小时那么漫长。这些元素结合成一种深刻的愉悦感，带来无比的报偿，并扩展成极大的能量，仅是感觉它的存在就已值回“票价”了。</li><li>在健全的文化中，生产性的工作与日常生活必需的例行公事同样能令人满足。</li><li>当情况要求一个人运用相关技巧来应付挑战时，这个人的注意力就会完全投入，不剩一丝精神能量处理任何与挑战无关的资讯，而完全集中于相关的刺激上。 最优体验最普遍、最清晰的特质就会在此时显现：当事人全神贯注，一切动作都不假思索，几乎完全自动自发；他们的知觉甚至泯灭，人与行动完全合一。</li><li>在心流之中，意识运作顺畅，每个动作都衔接得天衣无缝。在日常生活中，我们经常被怀疑或疑问打断：“我为什么这么做？我是否该做这件事？”我们一再追问行动的必要性，并批判它们背后的理由。然而在心流中没有反省的空间，所有行动宛如一股魔力，带着我们勇往直前。</li><li>除非一个人学着去确立目标，辨认与评估回馈，否则无法从任何活动中发掘乐趣。</li><li>真正给人带来乐趣的并不是控制本身，而是在艰难状况下行使控制权的感觉。</li><li>精神熵暂时消失的感觉，是产生心流的活动会令人上瘾的一大原因。</li><li>在心流中，一个人面临做出最佳表现、须不断改善技巧的挑战，在这期间，他没有机会反省这么做对自我有什么意义——如果自我意识能随时恢复，这次体验就不可能太深刻。要等事后，一切活动都告一段落时，自我意识逐渐复苏，而这时的自我已经和经历心流前的自我不一样了：新技巧和新成就使它变得更丰富。</li><li>很多活动的乐趣都不是自然天成的，它需要我们在开始时做一些并非心甘情愿的努力。一旦个人技巧得到回馈，互动开始，自然就会产生值得的感觉。</li><li>过分的自我意识是一种不太严重的心流障碍。一个人若时时都在担心别人对自己的看法，害怕给人留下不好的印象，或做出不妥当的事情，就注定与乐趣绝缘。过于以自我为中心的人也一样，这种人通常并不是自觉，而是对所有资讯的判断只以它是否有助于实现自己的愿望为标准。对于这种人，任何事情本身都毫无价值可言。一朵花除非能够利用，否则就不值得去看第二眼；一个人除非能带来什么好处，否则也不必在意。因而，意识完全围绕着自己的目标打转，与目标不符的一切都不容许存在。</li><li>在各种情况下都能找到乐趣的人，有能力对外来刺激进行筛选，只注意与这一刻有关的事物。虽然一般认为，注意力集中时会增加处理资讯的负担，但对于懂得如何控制意识的人而言，集中注意力反而更轻松，因为他们可以把其他不相关的资讯都抛在一旁。他们的注意力同时极具弹性</li><li>大多数的工作与休闲活动——尤其是消极接受大众传媒的方式，都不是为使人变得更快乐、更强有力而设计的，它们只是某些人赚钱的工具。一方面，如果我们听任它们得逞，它们就会吸干我们的生命精髓，只剩下一副空壳。另一方面，工作与闲暇正如同人生，可以应我们的需求发挥作用。学会从工作中发掘乐趣，不浪费闲暇的人，会觉得人生越发有价值。布莱特比尔写道：“未来不仅属于受过教育的人，更属于那些懂得善用闲暇的人。”</li><li>无所事事的时候，心灵就无法遏制消极念头的来袭。除非学会控制意识，否则成年人也会被类似的情况困扰。有关感情、健康、投资、家人及工作的烦恼，总在注意力周遭徘徊，一有机会就乘虚而入。心灵一准备要放松，虎视眈眈的难题就“咻”的一声扑上前来。</li><li>如果一个人不能在独处时控制注意力，就不可避免地要求助于比较简单的外在手段：诸如药物、娱乐、刺激等任何能麻痹心灵或转移注意力的东西。 这是一种退化的反应，并不能带你前进。在成长的同时享受人生，就是从人生必然会出现的精神熵现象中，创造更高的秩序形式。</li><li>不要把新挑战看成需要压抑或逃避的东西，而是一个学习和改善技巧的机会。</li><li>熬过孤独唯一的方法就是设法整顿注意力，不让精神熵损害心灵。</li><li>借着没有必要却又十分耗力费神的事情排遣寂寞，跟经常喝药或看电视又有什么不同呢？</li><li>家庭要能提供心流，必须先有存在的目标。</li><li>所谓独特化，就是鼓励家庭中每个人发展自己的特质，发挥最高的技巧，并建立个人的目标。整合则正好相反，它确保一个人身上发生的变化也能影响到其他人。如果孩子以自己在学校的表现为自豪，家中其他人也会表示关切，并以他为荣；如果母亲觉得疲倦沮丧，家人会试着鼓舞她。在一个整合良好的家庭里，每个人都把彼此的目标放在心上。</li><li>家庭活动正如其他心流活动一样，也要提供清楚的回馈。在此指的是保持沟通渠道畅通，就这么简单。</li><li>人生的现实就是，早晚孩子会有自己的意见，认为全家一起从事的某些活动“很傻”，这时硬逼着他们一块儿做某事，反而会适得其反。很多父母干脆就放弃，让孩子去追逐他自己的同侪文化。但找一种仍能使全家人共同参与的新活动，虽不容易，收获却更多。</li><li>如果家庭能给青少年接纳感、控制感和自信心，青春期的压力就会稍微缓和些。在具备这些要素的家庭中，成员相互信赖、相互接纳，他们不需要时时担心是否讨人喜欢，人缘好不好，有没有满足别人的期望。</li><li>家庭跟“合资企业”一样，必须不断投注精神能量，才能保障它的生存。</li><li>不集中注意力，复杂的活动就会陷入混沌。家庭又怎么可能幸免？家庭成员之间的完全信赖、无条件接纳，只有在毫不吝惜投入注意力时才有意义，否则它不过是空洞的姿态与做作罢了。</li><li>如果年轻人在家里觉得被接纳、被照顾，对团体的依赖程度就会减轻，青少年也能学习控制与同伴相处的关系。</li><li>不为自己的目标而患得患失。他不在期待中迷失自己，并选择自己能应付的实际挑战。</li><li>我们选择的朋友都是拥有相同终极目标的人，可以一块儿唱歌、跳舞、说笑话、打保龄球。面对这样的朋友，我们可以清楚地体会到自由的感觉，了解真正的自我。现代婚姻的理想是把配偶当作朋友</li><li>重要的是确立一个目标，集中精神能量，注意回馈，确定挑战与自己的技巧水准相称。早晚这样的互动会发生作用，心流体验就随之出现。</li><li>企图改善所有人的生活，却不先学习控制自己生活的人，到头来往往把世界搞得更糟。</li><li>懂得如何把无助的状况转变为新的心流活动，并加以控制的人，会为自己找到乐趣，在考验中锻炼得更坚强。</li><li>第一，不自觉的自我肯定。</li><li>一个人首先要对自我、自己的处境、自己在环境中的地位，都有相当的信心。</li><li>第二，注意力集中于外界。注意力向内集中时，精神能量都被自我的关注与欲望吸收，很难再去观察周遭环境。懂得如何把压力转换成充满乐趣的挑战的人，很少花时间想到自己，他们不会把所有的能量都用在满足自己的需求上，或为受社会制约的欲望烦恼。相反，他们的注意力随时保持警觉，不断处理来自周遭环境的资讯。</li><li>把注意力从自我转移出去，欲望受挫就较不可能干扰意识。精神熵是因为注意力集中于内在的无秩序而产生的，这时若把注意力转而投注在周遭的事物上，压力造成的破坏就会减轻。</li><li>第三，找寻新出路。应付造成精神熵的状况，有两种基本的方法：一种是把注意力集中在阻挠我们实现目标的障碍上，消除它，并重建意识的和谐，这种方法比较直接；另一种是把注意力集中于整个状况，包括自己在内，探讨有没有其他更合适的目标，寻求不同的解决之道。</li><li>集中注意的能力越强，投入就越容易。注意力失序、精神容易涣散的人，总觉得被排除在心流之外。任何转瞬即逝的外来刺激，都有可能使他们分心。如果分心不是出于自愿，就可见对自我缺乏控制。令人意外的是，大多数人都不曾在加强控制注意力上下过什么工夫。如果没法子专心阅读一本书，我们非但不设法提升注意力，反而丢下书，打开电视，让剪接粗糙、不时被广告打断、情节低俗的电视节目进一步割裂我们的注意力。</li><li>仅仅学会控制一时一刻的意识状态，还不足以把所有的存在都化为心流体验——我们还必须有个整体目标，使日常生活中每件事都具有意义。</li><li>目标与努力之间有对应关系。开始时靠目标证明努力的必要，到后来却变成靠努力证明目标的重要性。</li><li>方向不定，决心当然会受到影响；决心不足，选择也就随之贬值了。</li><li>性跟人生的其他层面一样，只要我们愿意下功夫去控制它，增强它的复杂性，它就会变得更有乐趣。</li><li>如果一个人连自己要什么都懒得去研究，注意力都放在外在目标上，连自己的感觉都无暇顾及，那么他就不可能形成对行动有意义的企图。</li><li>如何维持爱情的新鲜感？答案跟其他活动一样。双方关系要乐趣盎然，复杂性一定得提高；而要增加复杂性，双方就得不断在自己和对方身上寻求新的潜能。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Growth </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reading List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读”幸福的婚姻“</title>
      <link href="/2021/05/17/growth/du-xing-fu-de-hun-yin/"/>
      <url>/2021/05/17/growth/du-xing-fu-de-hun-yin/</url>
      
        <content type="html"><![CDATA[<h1 id="樊登解读《幸福的婚姻》完整版"><a href="#樊登解读《幸福的婚姻》完整版" class="headerlink" title="樊登解读《幸福的婚姻》完整版"></a><a href="https://www.youtube.com/watch?v=hRzgj0c8c48" target="_blank" rel="noopener">樊登解读《幸福的婚姻》完整版</a></h1><blockquote><p>第一招是<strong>完善爱情地图</strong>，加强你和配偶之间相互的了解，知道Ta每天在干些什么，知道Ta在哪儿，知道Ta的苦恼和想法，知道Ta想要什么礼物，这都是完善爱情地图。</p><p>第二招叫<strong>培养喜爱和赞美</strong>，多去表扬Ta，写出三个优点以及为什么，然后互相交换着看。</p><p>第三个叫<strong>彼此靠近</strong>，创造一些机会一块干活，一块洗碗，身体有接触，彼此靠近。</p><p>第四个叫作<strong>让配偶来影响你的决定</strong>，多听听配偶的话，让他给你一些建议。</p><p>第五个叫作讨论问题的时候<strong>温和开场，然后妥协结束</strong>。</p><p>第六个叫作<strong>与一些没法解决的问题和睦相处</strong>，然后要想解决这些问题呢。</p><p>第七个方法叫<strong>创造共同的意义</strong>，当你能够在家庭当中去创造共同意义的时候，这个家就会变得更加美好。</p></blockquote><blockquote><p>第三者不是导致婚姻破裂的原因，第三者是婚姻破裂的结果。第三者的出现都是来自于这个婚姻已经摇摇欲坠了，这时候才出现第三者的问题。所以我们所讲的家庭的建设，不管有没有第三者，我觉得核心的关系是你要去改善和你老公的关系，这才是最重要的。因此这本书的方法没有叫你怎么去对付第三者，（这是国内很多婚姻书籍教的东西，我觉得是错误的）你如果能够跟你老公把爱建立起来，你们双方之间的生活是有质量，有意义，有价值的，那么第三者的问题才会杜绝。否则，你管得了他今天，管不了明天。所以一个智慧的配偶是能够懂得通过学习来改进自己的家庭</p></blockquote><hr><h1 id="书摘"><a href="#书摘" class="headerlink" title="书摘"></a>书摘</h1><ul><li>一桩幸福的婚姻直接有益于你的免疫系统——它是身体抵御疾病的先头部队，从而使你更健康。</li><li>冲突消解法不仅被人们当作解决婚姻问题的灵丹妙药，它还是防止幸福婚姻出现危机的补药。</li><li>很多以冲突消解法为基础的婚姻疗法都有很高的复发率。</li><li>从长远来看，现行的婚姻疗法不能让大多数夫妻受益。</li><li>人们对婚姻生活中的性、浪漫与激情是否感到满意，对妻子来说，70%取决于夫妻友谊的质量；对男人来说，同样70%取决于夫妻友谊的质量。因此，男人与女人来自同一个星球。</li><li>当夫妻争辩时，让他们更好地处理分歧或许可以降低他们的压力水平，但是往往不能让他们恢复良好的婚姻生活。</li><li>我的项目核心是一个简单的真理，即幸福婚姻基于深厚的友谊，我的意思是指相互尊重并喜欢对方的朋友。这些夫妻往往对对方有着非常细致的了解，他们熟悉对方的好恶、怪癖、希望与梦想，他们长久地关注对方，不仅在大事上，也在小事上天天表达这种喜好。</li><li>正是通过这些琐碎但很重要的事，奥利维亚与纳撒尼尔保持了夫妻间的友谊，而这友谊是他们相亲相爱的基础。</li><li>积极诠释 夫妻对彼此及婚姻的积极看法成为主导力量，并倾向于压倒其他消极情绪，忽略微小的消极因素。</li><li>在婚姻中，积极性与消极性的运转也与此相似，一旦你的婚姻“设定”在某种程度的积极性上，如果你的“设定值”比较低，就会有更多消极性的东西来损害你们的婚姻；如果消极性在你们婚姻中占了上风，那么它更加难以修复。</li><li>感情修复尝试是聪明的夫妻所使用的秘密武器，虽然很多夫妻并未意识到他们所做的竟然有如此大的威力。当一对夫妻拥有坚定的友谊时，他们自然而然就成了专家，他们不但能向对方传达感情修复尝试信息，还能正确读取对方信息。但是，当夫妻被消极的情绪淹没时，即使是像“嘿，我很抱歉”这样直接的感情修复尝试也很难成功。</li><li>爱情关键词 感情修复尝试 通过一些语言或行动（不管是愚蠢的还是聪明的）来防止消极情绪升级，不让它失去控制。 夫妻间感情修复尝试的成功与否是衡量他们婚姻美满或失败的一个首要因素，需要再次强调的是，决定感情修复尝试成功与否的因素是夫妻之间坚定的友谊。</li><li>在最牢固的婚姻中，丈夫与妻子有着很强的共识，他们不仅相处融洽，而且还相互支持对方的希望和抱负，并将这作为他们共同生活的一个目标，这实际上就是我所说的“相互尊重”和“以对方为荣”的真正含义。</li><li>夫妻间的绝大部分争吵是无法解决的。夫妻双方年复一年地试图改变对方的想法，但没能成功，这是因为他们大部分的分歧源于生活方式、性格或价值观的根本差异。为这些分歧而争吵，结果就是浪费时间，损害他们的婚姻。</li><li>你需要弄懂导致你们之间出现冲突的根本分歧，要学会通过相互尊重、相互赞赏的方式来容忍这种分歧，只有这样，你们才能在婚姻中达成共识并确立共同的目标。</li><li>如果你们的讨论以一种“苛刻的方式”开始，那么不可避免地将以一种否定的口气结束，尽管双方都在努力“示好”。</li><li>仅仅是一个苛刻的开始就注定了整场谈话的失败，因此，如果你以这种方式开始讨论，你也许要停下来，休息片刻，然后再重新开始。</li><li>如果任由这种消极情绪恣肆，将会引发我称之为“末日四骑士” 的致命伤害。通常，这4位骑士会按照下面的顺序依次闯入婚姻的心脏地带：批评、鄙视、辩护和冷战。</li><li>让配偶知道你讨厌对方，实际上并不能解决你们之间的问题，鄙视必然会导致更多的冲突，而不是和解。</li><li>长期积聚的对配偶的负面看法让鄙视一触即发，如果你们的分歧没有得到解决，你更有可能产生类似的想法。</li><li>尽管可以理解辛西娅为自己辩护，但是研究表明，这种方法很少能起到预期的效果，进攻的一方不会退让或道歉，这是因为，辩护实际上是一种责备配偶的方式。你实际上是说：“这不是我的问题，而是你的问题。”辩护只能让冲突升级，这正是它致命的地方。</li><li>批评、鄙视和辩护并不总是以这种严格的次序飞奔进入家庭，如果夫妻双方不能终止它们，它们就会像接力赛那样运行，彼此循环往复。</li><li>你越是感到被配偶的批评或鄙视所淹没，你对配偶即将再次爆发的迹象就越警觉，所有你能想到的就是保护自己免受配偶的猛烈攻击，而要想做到这一点，你就得从情感上疏远你的妻子。</li><li>爱情关键词 情绪淹没 配偶的消极情绪——无论是假借批评、鄙视还是辩护，突然爆发而且势不可当，让你觉得自己不堪一击。 因此，一桩婚姻的破裂是可以预见的：先是以习惯性的苛刻开始，接下来的争论期间出现4位冷酷无情的骑士并带来频繁的情绪淹没感。尽管这几个因素中的每一个都能预测离婚，但它们通常共存于不幸的婚姻中。</li><li>通常，男性要么感到自己无比正当、非常愤怒（“我打算报复”“我没必要遭这个罪”），这往往导致鄙视或好战；要么觉得自己是妻子愤怒或抱怨的无辜受害者（“为什么她总是责备我”），这导致辩护。</li><li>事实上，在稳固的婚姻中你也会发现四骑士甚至是偶尔的情绪淹没。但是，当四骑士永久进驻你的婚姻，当任何一方常常感到被消极情绪淹没时，你们的婚姻关系就有大麻烦了。频繁感到被消极情绪淹没几乎不可避免地导致夫妻双方疏远，然后各自感到孤独。</li><li>感情修复尝试能够挽救婚姻，不仅因为它缓和了夫妻间的紧张感，还因为它降低了压力等级，阻止心跳加速以及不让自己被消极情绪淹没。当四骑士控制着夫妻间的沟通时，他们甚至常常没有注意到要使用感情修复尝试，特别是当你觉得被消极情绪淹没时，你听不到对方示好的声音。</li><li>当四骑士在家中肆意横行、破坏夫妻间的沟通，从而导致消极情绪迅速发展时，夫妻双方就会从负面角度对配偶做的每一件事或曾经做过的事重新加以改写。</li><li>当一对夫妻走到婚姻的尽头时，他们中的一个或双方会有外遇。但是，外遇通常是一段正在死去的婚姻的征兆而不是原因，在夫妻任何一方出轨之前，这段婚姻的终结早就注定了。</li><li>修复婚姻或预测离婚的关键不在于你如何处理分歧，而在于当你们不争吵的时候，你们是怎样相处的。</li><li>我的方法的基础是巩固夫妻之间的友谊，这才是所有婚姻的核心。</li><li>高情商的夫妻能立刻熟知彼此的世界。我把这种充满丰富生活琐事的区域称为“爱情地图”（Love Map），这个术语是指你的大脑中存放所有关于配偶的相关生活信息的地方。这些夫妻为他们的婚姻制造了大量的认知空间。他们记得对方人生中的重要事件，当配偶世界中的事实或感受发生变化时，他们会及时更新这些信息。</li><li>爱情关键词 爱情地图 你的大脑中存放所有关于配偶的相关生活信息的地方。夫妻间为婚姻制造的大量认知空间。</li><li>那些从一开始就拥有详细的爱情地图的夫妻，在第一个孩子出生后，他们的婚姻仍然很幸福。这些爱情地图紧跟在剧烈的动荡之后，保护着他们的婚姻，因为丈夫和妻子已经习惯不断更新对方的生活琐事，且能专心致志地关注彼此的感受和想法，所以他们从未偏离航道。但是，如果你没有深刻了解配偶就踏上婚姻之旅，当你的生活出现突如其来的重大改变时，你们的婚姻就很容易迷失方向。</li><li>对那些没有详细的爱情地图的夫妻来说，孩子的出生只是导致他们迷失方向的生活事件之一。任何大的改变，从工作的变动到生病或退休，都有同样的效果，甚至单单是时间的流逝都能起到这个效果。你越熟悉了解对方，你就越容易与对方保持联系，好像生活就在你周围旋转一样。</li><li>越了解彼此的内心世界，你们的夫妻关系就越深厚，回报也越丰厚。</li><li>爱情关键词 喜爱与赞美系统 夫妻双方各自都保留了一些最基本的感觉，觉得对方值得尊重、敬佩甚至喜爱。</li><li>对维持一桩有价值的、长久的感情生活而言，喜爱和赞美是两个非常重要的因素。尽管幸福的夫妻有时也会因配偶的性格缺点而感到怅然若失，但是，他们仍然能察觉到和自己结婚的那个人有值得敬重的地方。当夫妻双方完全没有这种感觉时，他们的夫妻关系也就走到了尽头。</li><li>在那些能正面看待他们婚姻历史的夫妻中， 有94%的人同样有可能拥有一个幸福的未来。当幸福的记忆被扭曲，这就预示着这桩婚姻需要帮助。</li><li>当你听说后来迈克尔与贾丝廷继续过着幸福生活的时候，你一点也不会觉得奇怪，因为当坏事来袭时，你对配偶和婚姻的固有的正面看法是一个功能强大的缓冲器，它能保护你们的婚姻不受太大的伤害。</li><li>喜爱与赞美系统是很脆弱的，经不起太多打击，除非你始终意识到它们对维持夫妻友谊（任何幸福婚姻的核心）的关键作用。</li><li>喜爱和赞美是鄙视的解毒剂。如果你对配偶持有一种敬佩之情，当你与对方意见不一致的时候，你就不太可能会讨厌对方，因此，喜爱和赞美使夫妻免受末日四骑士的鞭挞。</li><li>如果你的喜爱与赞美系统已经瓦解，让系统重新建立的首要任务就是意识到这一系统的重要性。喜爱与赞美对维持一段长期幸福的夫妻关系来说非常重要，因为它们能避免鄙视（谋杀婚姻的末日四骑士之一）成为夫妻生活的主旋律。鄙视是一种腐蚀剂，随着时间的推移，它会损坏丈夫和妻子之间的纽带。与你们对彼此的固有的积极情感联系得越紧密，当你们有不同意见时，你们之间就越不太可能出现鄙视。</li><li>当你们变得疏远的时候，你能从积极的角度去看待配偶。如果你很愤怒、压力很大或者觉得与配偶感情冷淡，你可能更易于关注对方的消极特质，这会导致持续的苦恼，它反过来让你在婚姻中感受到更多的冷漠和孤立。</li><li>当人们陷入忧郁状态时，他们的想法就会变得混乱，他们会用一种极端否定的眼光去看待任何事情，这恰好加剧了他们的绝望感。但是，如果经过一段时间的训练，他们故意让自己习惯以一种不同的、正面的方式去思考，那么，他们的绝望感就会消失。</li><li>你真正要做的是以一种更积极的方式去看待配偶和你们的关系。像任何练习一样，如果你常常做，你的语言（更重要的是你的想法）将变成你的第二天性。</li><li>赞美对方只会给你的婚姻带来好处。但是，为了确保收益的继续，你需要让你的尊敬与喜爱系统运转起来。</li><li>任何希望同对方进行情感沟通的行为都可称为沟通尝试。可能是一个问题、一个手势或是轻轻的身体接触。</li><li>每桩婚姻之所以会有不同的结局，原因在于夫妻的“感情储蓄”不同。那些互相靠近而不是远离的夫妻就好像是在往“感情银行”存钱，当出现危机，或者他们面临着严重的生活压力或冲突时，这些感情储蓄就能起到缓冲作用。由于他们已经把所有这种友好行为都存进感情银行，当冲突产生时，他们更能体谅对方，维持对对方的正面看法，即使在艰难时刻，他们的婚姻也不会破裂。</li><li>往感情银行存钱，得到的最大回报不是夫妻在遭遇压力时它能起到缓冲作用，正如我所说的，在各种生活小事上靠近配偶也是浪漫持久存在的关键。许多人认为，把他们和配偶重新连接在一起的秘诀是烛光晚餐，或者是在海边度假，但真正的秘诀是在每天的日常琐事中靠近配偶。只有那些因在生活琐事上保持接触而持有爱情火种的夫妻，在外面度过一个浪漫夜晚时才能再次燃起激情的火焰。</li><li>由于常常与配偶共同面对生活中的诸多琐事，你积累了一笔巨额的感情储蓄，它能支撑你渡过婚姻中的任何沟沟坎坎，阻止麻烦靠近。你可能很少想起这些微不足道的时刻——你们一起在超市购物、叠衣服，或是在工作期间互相打电话问候对方，但是，正是这些时刻构成了一桩婚姻的心脏与灵魂。你的感情储蓄越有盈余，你们之间的浪漫就越能得以延续，你就能渡过艰难时刻、抵御坏情绪和重大的生活变故。</li><li>多向对方靠近的第一步是意识到这些平淡时刻的重要性，这不仅关系到你们婚姻的稳定，还关系到浪漫感的持续。对许多夫妻来说，只要认识到不该把日常的相互交流视作理所当然，只要做到这一点，他们的婚姻就会出现天翻地覆的变化。要提醒自己，与去巴哈马群岛度假两周相比，互相帮助会让你们的婚姻更强韧、更有激情。</li><li>即便你觉得配偶很难相处或是有敌意，你也要试着向配偶靠近。</li><li>你感情储蓄的盈利越多，你越有可能看到你婚姻的改善，然而，如果积极的变化没能在一夜之间出现，你也不要惊讶。如果你已经没有向对方靠近这个习惯，你也许应该花点时间来看看这个练习的好处。你面临的一个挑战是注意配偶在什么时候靠近你，这也是你配偶面临的挑战。</li><li>一定要从精神层面来谈论你的请求。与其对配偶过去没有做到的事表示不满，还不如把心思集中在现在你想要做的事情上。要这样说：“在聚会上，如果你能大部分时间都和我待在一起，我会很高兴。”而不是说：“你总是把我晾在一边。”</li><li>那些遭受婚姻生活之外的压力蹂躏的夫妻，他们的婚姻问题往往会旧病复发，而那些能互帮互助对付这种压力的夫妻，则会拥有一桩牢固的婚姻。</li><li>正如彼此靠近带来温暖一样，当配偶反其道而行之时，你会觉得配偶在伤害你、拒绝你。夫妻双方互相疏远常常并非出于恶意，而是由于不在乎。在很多情况下，认识到微不足道的时刻的重要性，多多关注彼此，就足以解决这种问题。但有时，夫妻之间的冷漠有更深层次的原因，例如，夫妻中的一人粗暴拒绝了另一人，可能根本原因是因一些积压的冲突而起的敌意。但是，我发现，若夫妻中的一方时常觉得另一方联系不够紧密，这常常是因为他们各自对亲密感和独立性的需求不一致。</li><li>友谊发挥此作用的方法之一是通过平衡夫妻间的权力。当你尊重对方时，即使你并不同意对方的观点，你通常也能欣赏它。当夫妻间的权力不平衡时，婚姻出现大量的烦恼几乎是不可避免的。</li><li>从长远来看，最幸福稳固的婚姻是那些丈夫尊重妻子，不反对分享权力，与妻子共同做决定的家庭。当夫妻两人意见不一致时，这种家庭中的丈夫会积极寻找他们的共同点，而不是一味地固执己见。</li><li>与那些丈夫不反对妻子对自己施加影响的婚姻相比，丈夫不愿同妻子分享权力的婚姻早晚会终结，不幸福的可能性是前者的4倍。 另一个原因是，这些婚姻如此成功是因为它们有一个可供妥协的坚实基础。毕竟，你越是认真地听取配偶的话，并考虑对方的意见，你就越有可能找到一个让你们俩都满意的解决方法。如果你对配偶的需求、意见或价值观充耳不闻，你就是想妥协也没机会。</li><li>1.确定你的讨论是以一种温和的方式开始，而不是以苛刻的方式； 2.学会有效地使用感情修复尝试； 3.在紧张的讨论中，监测你的生理变化，以便知道你被消极情绪淹没时身体发出的警告信号； 4.学会如何妥协； 5.变得越来越能容忍对方的缺点。 依照以上的方法，你将发现，可以解决的问题已经不再干扰你的幸福婚姻了。</li><li>有效处理每一种问题的基础都是一样的：向你的配偶表示你基本能够接受对方的性格。</li><li>事实上，只有人们感到自己被别人喜欢和接受时，他们才会改变自己的行为。当人们觉得自己被别人批评、厌恶，不被别人赏识时，他们就不可能改变，相反，他们会觉得自己被攻击，从而努力保护自己。</li><li>在所有的争论中，无论争论的问题是可解决的还是永久性的，没有人永远是对的。 在婚姻冲突中，没有绝对的真实，只有主观的真实。</li><li>为了让婚姻幸福地前行，你需要原谅对方，忘记过去的怨恨；尽管这很难做到，但这样做是值得的，当你原谅配偶时，你们俩都会受益。怨恨是一种沉重的负担，正如莎士比亚在《威尼斯商人》中写道，宽恕是“两次祝福，它不但给幸福于受施的人，也同样给幸福于施与的人”。</li><li>如果你直奔最尖锐的问题，你就会引起大出血，其结果不是产生一种有意义的、富有成效的讨论，而是引发一场战争。如果你正生配偶的气，在急着讨论之前，最好做一个深呼吸，想想如何提出这个话题。如果你不断地提醒自己要温和一点，你很容易就能做到以温和的方式开始交谈，冲突则很有可能得到解决。如果你觉得自己太气愤，不能和和气气地讨论问题，你的最佳选择是等到自己平静下来，再和配偶谈论问题。</li><li>只描述事实，不作评价或判断。 不要谴责或责备配偶，只要描述你看到的事实就行。</li><li>明确地表达观点。 不要期望配偶能看透你的心思，不要说“你把餐厅弄得一塌糊涂”，而要说“如果你能把你留在餐桌上的东西清理干净，我会很感激”。不要说“你能不能照看下孩子”，而要说“请你给艾米换个尿不湿，再给她一瓶牛奶”。</li><li>要学会赞赏。 用一种赞赏的口气来表达你的请求，请求配偶做他过去做得很好、现在你怀念的那些事情。</li><li>不要闷声不响。 当你准备指责配偶时，你很难做到和声细语，因此，不要在心里憋好长一段时间才把问题提出来，不然这个问题只会在你的心里不断升级，就像《圣经》上说的：“不可含怒到日落。”</li><li>无论你喜欢还是不喜欢，解决婚姻问题的唯一方法是寻求妥协。在一个亲密的、充满爱意的婚姻关系中，即使你坚信你是对的，你们中的任何一个也都不能完全按自己的方式来处理事情，因为这种做法会导致不公，从而损害婚姻。</li><li>为了达成妥协，你不能对配偶的意见和要求不闻不问，也不能毫无主见地赞同配偶说的每件事。但是，你可以诚恳地考虑接受对方的立场，这就是接受配偶影响的真正意义。当配偶试着和你讨论某个问题的时候，如果你发现自己在袖手旁观，或摇头反对，或只是一味思考不表态，你们的讨论永远不会有任何结果。</li><li>就婚姻而言，最重要的是夫妻双方要像一个团队那样去共同处理财务问题，而且在提出某个计划之前，你要有向对方表达你的担忧、需求和想象的愿望。确保预算的达成最后不是以牺牲任何一方为代价而得到的，否则只会积累怨气，夫妻双方都要坚持在某些问题上彼此是没得商量的。</li><li>化解僵局的目的不是让你去解决这个问题，而是让你摆脱僵局，展开对话。</li><li>婚姻不仅仅是抚养孩子、分担日常事务和做爱，它还包括在精神层面创造一种共同的内在生活—— 一种富含象征与仪式的文化，欣赏你在婚姻生活中的角色与目标，并让你明白成为家庭的一员意味着什么的文化。</li><li>每对夫妇和每个家庭都创造了他们自己的微文化，像其他文化一样，这些小群体也有自己的习俗（比如星期天的室外晚餐）、仪式（比如小孩出生之后开香槟庆贺）和故事，这些故事体现了他们对婚姻的看法和成为团体的一部分的意义。</li><li>作为他们家庭文化的一部分，从他们讲述的关于自己的故事可以看出，他们组成了一个多么伟大的团队，他们何其好强，他们如何蔑视所有的反对者并成功战胜对手。</li><li>夫妻二人共同发展起来的文化包含了两个人的梦想，这种文化是可变通的，它随着夫妻双方的成长和发展而改变。当婚姻双方有这种共同意义感时，冲突就不会那么激烈，永久性的问题也不太可能导致僵局。</li><li>你们找到的共同意义越多，你们的关系将越深沉、越浓厚、越有价值。</li><li>我们大多数人都是在强调某些仪式的家庭里成长起来的。通过使这些仪式成为自己婚姻生活的一部分，它们将慢慢成为你们自己的仪式并且增强你们的家庭认同感。</li><li>表达感恩与赞美，是批评和其致命的伙伴鄙视的解毒剂。</li><li>在未能改变生活之前，也许应该先改变自己，尤其是改变自己对婚姻的那些先入为主的观念，这样才能真正有效地帮助我们领会到婚姻的美好。</li><li>幸福的婚姻也会不可避免地出现争吵，但是与那些不幸的婚姻相比，这些争吵都只是就事论事，不会上升到对对方的人格侮辱。</li></ul><h1 id="樊登读书-你要的是幸福，还是对错"><a href="#樊登读书-你要的是幸福，还是对错" class="headerlink" title="樊登读书 : 你要的是幸福，还是对错"></a><a href="https://www.youtube.com/watch?v=Z7ADVDfQafA" target="_blank" rel="noopener">樊登读书 : 你要的是幸福，还是对错</a></h1><ul><li>人要是看不到别人<strong>行为背后的需求</strong>，只在行为层面不断地沟通，到最后的结果就是吵架。你不仅没有沟通，你会容易被激怒。当你看到背后的原因后，很多温柔就出来了</li><li><strong>我做了决定/选择，我承担所有责任。不要把责任和结果归咎于别人。</strong>我不留线头给你。很多时候我们就像木偶一样，我这里有一个线，可以扯一下，这只手抬起来了，他扯这条线我腿就抬起来了，我就被制约了。<strong>不留线头，别人制约不了你，这才是最强的人</strong></li><li>你不用每天哇哇哇凶成那个样子，你也不用告诉他你多有本事。你就温温柔柔的，安安静静的，但他知道他制约不了你。可以真的小鸟依人，可以真的贤惠，但这种贤惠不是攀附在男人身上。我不在情绪上面恐吓你。一个男人娶了女人，若这个女人天天在情绪上面恐吓你，裹挟你，你会跑很远，特别不想跟他在一块。但如果我不用我的情绪来恐吓你，我愿意跟你待在一起，那你多迷人</li><li>学会情绪管理。比如说你有个3秒钟的中断，问问自己：你在和你的情绪沟通，还是跟他在沟通。气浪一步接着一步来，但只要有中断，那个浪就断了，你就可以更安静地去做选择。</li><li>当你决定了，你理解了你需要改变的时候，其实已经在路上了。</li><li>不要对婚姻有太高的诚意和期待，也不要想说婚姻一定是得怎么样，<del>（相看两不厌，看着对方，每天爱得不行了），</del>那都是骗人的。你只要两个人都决定留在这里，就很棒了，就能琢磨出一种相处方式。</li></ul><hr><p>作者的另一本书：先斟满自己的杯子</p><h1 id="书摘-1"><a href="#书摘-1" class="headerlink" title="书摘"></a>书摘</h1><ul><li>老天虽然给与女人独立自主的能力，可并没有剥夺我们对柔情的渴望。所以，聪明的女人必须懂得何时该卸下武装的盔甲和手上的算盘，让爱情的溪水在温柔的勇敢里流淌。</li><li>合理的分配时间，仍然掌握自己生活的步调，不要留下太多的空白等着他来填满，如此，你不仅不会失去婚前的自我、已获得的成就和生活圈，也不会因为受到冷落而委屈。</li><li>除非必要，否则别为了他轻易地牺牲自己的事业，成功的事业和成功的爱情同样是保持女人美丽的秘诀，成为一个他既怜爱又敬佩的女人，可以让他不敢随意轻忽你的存在，也不敢担负失去你的风险。</li><li>“享受独处”是现代人必修的功课，给个人留出一点单独的空间不仅让自己喘口气，也让爱情在距离中加温。所以，千万别要求他出席你所有的聚会，也别粘得太紧做个「跟得夫人」，在对自己充分的自信中，展现收放自如的魅力。</li><li>成功的男人虽然需要被挑战，但具有攻击性的女人是不敢让人恭维的，更何况在工作上他已经有一堆等着厮杀的敌人环伺在侧。</li><li>当你给予爱人充分的自由时，如果他选择留在你身边，那么他永远就是你的。</li><li>既要时刻对你好、眼里心里永远没有别人，又要大方有钱、懂得宝贝娇纵你，还要英俊潇洒、有品位、带得出门？老天，那你自己得加把劲儿了。如果一线品牌的信价比老是低于二线品牌，结果不是他另觅东家，就是龙困浅滩，糟踏了这原本金贵的二线品牌了。</li><li>我们对所谓“弦外之音”的洞察力常过度敏锐地让自己受苦，往往，事情的本身也许并不如此伤人，但那漫天而来的情绪却是最噬人心骨的痛楚。我们纤细而易感的心灵，常淹没了引起争执的初始本质，却在泪眼迷离中因感受蔓生出来的情绪而痛彻心扉。因此，我常对受伤的女朋友或自己说，我们是不是被自己的情绪打败了？ 请别误会。我无意为男人的粗心、不专心、不用心、甚至花心解套，或编织可以原谅他们的理由。我只是希望通过对男女之间生理差异的理解，为我们自己寻出生路，明白不是自己不够好，也不是不再被爱、被关怀。如果我们能因理解而从自己情绪的牢笼中出来，相信我，那种心灵的自由是你不会愿意用任何东西去交换的。</li><li>婚姻的功能之一就是两人能彼此取暖，在冬天的寒风里彼此取暖、在阴冷的细雨里彼此取暖、在灰心丧志的人生谷底彼此取暖、在世态炎凉的人情淡薄中彼此取暖。如果，华丽高贵的裘皮大衣能带给你身心的安顿和兜心的温暖，那么它就是你的；如果，你只能在阳光下炫耀，而无法在下雨天拿它遮风避雨，那么，就选择能让你心灵自由、依然温暖心窝的贴身棉袄吧！</li><li>温柔不是学着嗲声嗲气的说话；不是刻意穿低胸的性感吊带睡衣；不是练就哀怨动人的魅惑眼神；不是凡事迁就委屈做低声下气的小媳妇。它是一种心情，一种来自骨子里的情愫。”</li><li>如果我们在两人的爱情关系中把“不忍伤害”的温柔心情去掉，那么在激情过后自然就没有什么可留恋的了！</li><li>我知道他和我一样有许多需要改进的缺点，但我会是他最忠实坚持的听众，我希望陪在他身边彼此打气、互相扶持，而不是站在高处指手画脚告诉他哪里需要成长。</li><li>当我们确知已付出绝对的努力之后，就必须学会放手，学会仰望，学会坦然承受结果。因为只有在不患得患失的心情下，我们才能真正勇敢地迈出步伐。</li><li>潜力是空的，是还没有发生的事，是摆放在碗橱里虚幻的杯子，我们得把它清理出去，好留出空间摆放真实的杯子。因此，活在当下，认清自己“现在”能做什么。设定目标是好的，但目标一旦设定之后，就回到现实吧！</li><li>在消费心理学上所说的“炫耀性消费”心理。说得白话一点儿就是面子消费、身份消费，也就是明明知道多花了钱，也宁愿多花了钱，但是买得的是高人一等的尊贵感和虚荣感。</li><li>在阔气地追求自我时，我们也必须厘清是否本末倒置追求的是享受“阔气”的过程而不是它本身的价值，如果是的，那么这些“阔气”就变成了浮夸的表象，成了美其名为女性主义但实则为掩饰虚空的图腾罢了！</li><li>我一直相信必须有一个调节机制的核心，它能清楚地分辨商业行为的尺度，也能平衡梦想和现实之间的落差。而能够组成这个核心元素的成分，只有来自于一个人丰盈的内在素养以及真正的喜欢悦纳自己了！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Growth </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reading List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kindle使用笔记</title>
      <link href="/2021/05/16/growth/kindle-shi-yong-bi-ji/"/>
      <url>/2021/05/16/growth/kindle-shi-yong-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Kindle-电子书资源"><a href="#Kindle-电子书资源" class="headerlink" title="Kindle 电子书资源"></a>Kindle 电子书资源</h1><ul><li>电子书搜索<ul><li>英文书 <ul><li>中英文皆有（一天5本）：<a href="https://z-lib.org/" target="_blank" rel="noopener">zlib</a>， <a href="https://1lib.net/" target="_blank" rel="noopener">zlib</a> </li><li><a href="http://libgen.rs/" target="_blank" rel="noopener">Library Genesis</a>     </li><li><a href="https://www.gutenberg.org/" target="_blank" rel="noopener">Gutenberg</a></li></ul></li><li>中文书<ul><li><a href="https://chenjin5.com/books/" target="_blank" rel="noopener">沉金书屋</a></li><li><a href="https://www.jiumodiary.com/" target="_blank" rel="noopener">鸠摩搜书</a></li><li><a href="http://www.dushudaren.com/" target="_blank" rel="noopener">奥丁读书小站</a></li><li><a href="https://www.xiaolipan.com/index.html" target="_blank" rel="noopener">小力盘搜索</a></li><li><a href="https://www.tianlangbooks.com/" target="_blank" rel="noopener">天浪书屋</a></li><li><a href="https://www.shudan.vip/" target="_blank" rel="noopener">书单网</a></li><li><a href="https://www.kindle8.cc/" target="_blank" rel="noopener">kindle8</a></li><li><a href="https://www.qqszz.com/" target="_blank" rel="noopener">千秋书庄</a> </li></ul></li></ul></li></ul><pre><code>- 文件格式转换  - [convertio在线转换](https://convertio.co/zh/)    - [calibre软件](https://sspai.com/post/43843)  - 其他（仅作补充参考）  - [Kindle电子书的资源网站](https://zhuanlan.zhihu.com/p/81036992)  - [电子书资源汇总](https://zhuanlan.zhihu.com/p/73399765)    - [免费ppt](https://www.goldppt.com/)</code></pre><h1 id="导入电子书到Kindle"><a href="#导入电子书到Kindle" class="headerlink" title="导入电子书到Kindle"></a><a href="https://zhuanlan.zhihu.com/p/83882901" target="_blank" rel="noopener">导入电子书到Kindle</a></h1><ul><li>用绑定的邮箱传送</li><li>usb线</li></ul><h1 id="导出笔记"><a href="#导出笔记" class="headerlink" title="导出笔记"></a><a href="https://www.zhihu.com/question/22356174/answers/updated" target="_blank" rel="noopener">导出笔记</a></h1><ul><li><a href="https://wilsonsliu-4ecec0-1252395194.ap-shanghai.app.tcloudbase.com/dist/#/home" target="_blank" rel="noopener">Kmark | kindle标记伴侣</a></li><li><a href="http://jdkindle.com/skill/5027/" target="_blank" rel="noopener">Kindle Mate，适用于windows</a></li></ul><h1 id="根据网页制作电子书"><a href="#根据网页制作电子书" class="headerlink" title="根据网页制作电子书"></a>根据网页制作电子书</h1><ul><li>用<a href="https://chrome.google.com/webstore/detail/open-selected-links/cbmiafnaglmnkhnohfdkdgaohdhndkjp" target="_blank" rel="noopener">Open Selected Links</a>插件批量打开网页链接<ul><li>如果需要打开多个大网页的小网页，倒序执行大网页即可。比如<a href="https://transcripts.foreverdreaming.org/viewforum.php?f=177&start=200" target="_blank" rel="noopener">How I Met Your Mother网站</a>,先执行第9页，再执行第8页…</li></ul></li><li>用<a href="https://chrome.google.com/webstore/detail/epubpress-read-the-web-of/pnhdnpnnffpijjbnhnipkehhibchdeok" target="_blank" rel="noopener">EpubPress - Read the web offline</a>插件生成mobi或epub格式</li><li></li></ul><blockquote><ul><li>其实阅读信息或者读书都需要『主动』学习才能有效转化外部信息为自己的知识</li><li>你需要提取核心概念和内容，多次回顾复习并建立思维模型，建立联系（理论联系实际，新知识联系旧知识），然后整合到你已有的知识体系中</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Growth </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Growth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux使用记录</title>
      <link href="/2021/05/15/study/linux-shi-yong-ji-lu/"/>
      <url>/2021/05/15/study/linux-shi-yong-ji-lu/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li><a href="https://www.linuxprobe.com/basic-learning-02.html" target="_blank" rel="noopener">Linux就该这么学</a> （大而全）<ul><li><a href="https://www.linuxcool.com/" target="_blank" rel="noopener">对应命令手册</a></li></ul></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">Linux工具快速教程</a> （小而精）</li><li><a href="https://www.imooc.com/learn/175" target="_blank" rel="noopener">Linux达人养成计划1</a> （视频讲解）<ul><li><a href="https://www.imooc.com/u/279399/courses?sort=publish&skill_id=0" target="_blank" rel="noopener">作者的其他Linux课程</a>  </li></ul></li><li><a href="https://labuladong.gitbook.io/algo/mu-lu-ye-5/linux-wen-jian-xi-tong" target="_blank" rel="noopener">labuladong的Linux</a>  （简述）</li></ul></blockquote><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li><a href="https://mofanpy.com/tutorials/others/linux-basic/install/" target="_blank" rel="noopener">系统安装</a></li><li>用gnome-tweak-tool配置<ul><li><a href="https://blog.csdn.net/baidu_41560343/article/details/87796946" target="_blank" rel="noopener">字体大小调整</a></li><li>让笔记本合上后仍不休眠：调整power相关设置</li></ul></li><li><a href="https://www.mlzhilu.com/archives/ubuntu2004%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95" target="_blank" rel="noopener">安装搜狗输入法</a></li><li><a href="https://blog.csdn.net/weixin_43436925/article/details/104558680" target="_blank" rel="noopener">阿里云服务器ECS安装Ubuntu18.04桌面图形环境</a> （<del>最便宜的套餐速度很慢，还不如用实验室的服务器</del>）  <!-- - 实例：root Xm6725485  - VNC密码：Xm1234， VNC server密码（用于连接远程桌面）：12345678 --></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li><a href="https://blog.csdn.net/qq_15766181/article/details/80755786" target="_blank" rel="noopener">Linux软件安装到哪里合适，目录详解</a><ul><li>/usr：系统级的目录，可以理解为C:/Windows/，/usr/lib理解为C:/Windows/System32</li><li>/usr/local：用户级的程序目录，可以理解为C:/Progrem Files/。用户自己编译的软件默认会安装到这个目录下（这里主要存放那些手动安装的软件，即不是通过“新立得”或apt-get安装的软件。它和/usr目录具有相类似的目录结构。）</li><li>/opt：用户级的程序目录，可以理解为D:/Software，opt有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接rm -rf掉即可。在硬盘容量不够时，也可将/opt单独挂载到其他磁盘上使用</li></ul></li></ul><blockquote><ul><li><a href="https://www.runoob.com/linux/linux-system-contents.html" target="_blank" rel="noopener">系统目录结构</a>：</li></ul><p>/boot：存放的启动Linux 时使用的内核文件，包括连接文件以及镜像文件。<br>/etc：存放所有的系统需要的配置文件和子目录列表，更改目录下的文件可能会导致系统不能启动。<br>/lib：存放基本代码库（比如c++库），其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。<br>/sys： 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中</p><p>指令集合：<br>/bin：存放着最常用的程序和指令<br>/sbin：只有系统管理员能使用的程序和指令</p><p>外部文件管理：<br>/dev ：Device(设备)的缩写, 存放的是Linux的外部设备。注意：在Linux中访问设备和访问文件的方式是相同的。<br>/media：类windows的其他设备，例如U盘、光驱等等，识别后linux会把设备放到这个目录下。<br>/mnt：临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</p><p>临时文件：<br>/run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。<br>/lost+found：一般情况下为空的，系统非法关机后，这里就存放一些文件。<br>/tmp：这个目录是用来存放一些临时文件的。</p><p>账户：<br>/root：系统管理员的用户主目录。<br>/home：用户的主目录，以用户的账号命名的。<br>/usr：用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。<br>/usr/bin：系统用户使用的应用程序与指令。<br>/usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序。<br>/usr/src：内核源代码默认的放置目录。</p><p>运行过程中要用：<br>/var：存放经常修改的数据，比如程序运行的日志文件（/var/log 目录下）。<br>/proc：管理内存空间！虚拟的目录，是系统内存的映射，我们可以直接访问这个目录来，获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件来做修改。</p><p>扩展用的：<br>/opt：默认是空的，我们安装额外软件可以放在这个里面。<br>/srv：存放服务启动后需要提取的数据（不用服务器就是空）</p></blockquote><ul><li>Clion安装及配置<a href="https://blog.csdn.net/qq_18352419/article/details/85228159" target="_blank" rel="noopener">（Linux环境下）</a>,<a href="https://www.cnblogs.com/attentle/p/12652512.html" target="_blank" rel="noopener">（Windows环境下）</a></li><li>创建桌面快捷方式（以clion为例）<ul><li>方法1：<a href="https://blog.csdn.net/qq_34039018/article/details/110881035" target="_blank" rel="noopener">直接在Tools菜单里操作</a></li><li>方法2：自己创建<ul><li>首先在终端下输入<code>cd /usr/share/applications/</code></li><li>进入applications目录下，建立一个clion.desktop文件<code>sudo touch clion.desktop</code></li><li>然后在vim命令下编辑该文件<code>sudo vi clion.desktop</code>，进入vim后，按i插入开始编辑该文件，输入以下代码</li></ul></li></ul></li></ul><pre><code>[Desktop Entry]Encoding=UTF-8Name=CLionComment=clion-2021.1.3Exec=/home/m/mSoftware/clion-2021.1.3/bin/clion.shIcon=/home/m/mSoftware/clion-2021.1.3/bin/clion.svgCategories=Application;Development;Java;IDEVersion=2021.1.3Type=Application#Terminal=1</code></pre><ul><li><p>VSCode 配置smms图床</p><ul><li>安装xclip <code>sudo apt-get install xclip</code></li><li>在<a href="https://sm.ms/" target="_blank" rel="noopener">smms</a>网站注册账号,home-&gt; API Token,复制Secret Token</li><li>在visual studio code中找到picgo插件,然后点齿轮图标配置插件(extension settings),找到Smms:Token,将Secret Token复制到里边</li><li>正文中,ctrl+alt+u上传即可</li></ul></li><li><p>卸载</p><ul><li>dpkg –list  查看软件</li><li>删除软件包命令：sudo apt remove <package_name></package_name></li><li>清理不再使用的依赖和库文件: sudo apt autoremove</li><li>移除软件包及配置文件: sudo apt purge <package_name></package_name></li></ul><blockquote><ul><li>查找软件包命令： sudo apt search <keyword> </keyword></li><li>列出所有已安装的包：apt list –installed </li><li>列出所有已安装的包的版本信息：apt list –all-versions</li></ul></blockquote></li><li><p><a href="https://www.boost.org/doc/libs/1_76_0/more/getting_started/unix-variants.html" target="_blank" rel="noopener">下载</a>并<a href="https://blog.csdn.net/XIONGXING_xx/article/details/108436312" target="_blank" rel="noopener">安装</a>boost （要加sudo）</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/60880207" target="_blank" rel="noopener">自带的Terminal设置（轻量级）</a><br>-MacOS10.15以后，终端换用zsh的方法如下：</p></li></ul><pre><code>vim .zshrcexport CLICOLOR=1export LSCOLORS=ExGxFxdaCxDaDahbadecheautoload -U colors &amp;&amp; colorsPROMPT=&quot;%{$fg_bold[cyan]%}%n%{$reset_color%}@%{$fg_bold[cyan]%}%m %{$fg_bold[green]%}%1~ %{$reset_color%}%#&quot;:x</code></pre><ul><li><a href="https://zhuanlan.zhihu.com/p/111014448" target="_blank" rel="noopener">homebrew安装和卸载</a></li></ul><ul><li><a href="https://juejin.cn/post/6844904178075058189" target="_blank" rel="noopener">iTerm2 + Oh My Zsh</a></li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li><a href="https://yulizi123.github.io/tutorials/others/linux-basic/3-01-file-permissions/" target="_blank" rel="noopener">文件权限</a><ul><li><code>chmod [谁][怎么修改] [哪个文件]</code><ul><li>[谁]<br>  u: 对于 User 修改<br>  g: 对于 Group 修改<br>  o: 对于 Others 修改<br>  a: (all) 对于所有人修改</li><li>[怎么修改]<br>  +, -, =: 作用的形式, 加上, 减掉, 等于某些权限<br>  r, w, x 或者多个权限一起, 比如 rx</li><li>[哪个文件]<br>  施加操作的文件, 可以为多个</li></ul></li><li>也可以用数字 rwx分别对应421, 如<code>chmod 777 file.txt</code>,全部都可读可写可执行</li><li>使用脚本#!/usr/bin/python3 ,告诉电脑执行该程序时用python3<br><img src="https://i.loli.net/2021/07/26/ejphoV7Ww13RuHB.png" alt="20210726120038"></li></ul></li></ul><h2 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h2><ul><li>Python<ul><li><a href="https://blog.csdn.net/Aerry_ale/article/details/81566832" target="_blank" rel="noopener">Pycharm 2018连接服务器远程调试</a> </li></ul></li><li>C++<ul><li><a href="https://cloud.tencent.com/developer/article/1406250" target="_blank" rel="noopener">Clion远程自动同步和远程调试</a></li></ul></li></ul><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><ul><li><a href="https://blog.51cto.com/u_15127662/4391765" target="_blank" rel="noopener">Linux查看GPU / CPU、内存和磁盘使用情况</a><ul><li>top -s 10 : 每隔10秒刷新一次</li></ul></li></ul><hr><h1 id="使用服务器时遇到的issue"><a href="#使用服务器时遇到的issue" class="headerlink" title="使用服务器时遇到的issue"></a>使用服务器时遇到的issue</h1><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/41859976" target="_blank" rel="noopener">搜索工具fzf</a> <a href="https://www.bilibili.com/video/BV1bJ411s74r?from=search&seid=1644575496918761635" target="_blank" rel="noopener">查找</a></li><li><a href="https://zhuanlan.zhihu.com/p/68111471" target="_blank" rel="noopener">VIM编辑器</a><ul><li><a href="http://www.tastones.com/tutorial/vim/" target="_blank" rel="noopener">常用命令</a></li><li>Vim中如何全选复制粘贴<br>全部删除：按esc键后，先按gg（到达顶部），然后dG.<br>全部复制：按esc键后，先按gg，然后ggyG.<br>全选高亮显示：按esc键后，先按gg，然后ggvG或者ggVG.<br>单行复制：按esc键后，然后yy.<br>单行删除：按esc键后，然后dd.<br>粘贴：按esc键后，然后p.</li></ul></li></ul><blockquote><p>gg是光标定位到文件首行，V是进入可视模式，G是跳转到文件最后一行，这个时候就将文本全选了</p></blockquote><h2 id="依赖项"><a href="#依赖项" class="headerlink" title="依赖项"></a>依赖项</h2><ul><li><p>Windows和Ubuntu服务器之间复制粘贴解决方案</p><ul><li><p>ctrl+alt+del 打开任务管理器，ctrl+F 查看进程中是否有rdp进程，若有，则结束该进程</p></li><li><p>windows+r， 输入<code>rdpclip.exe</code>, 回车重新启动该进程</p></li><li><p>（备选）  </p><ul><li>安装软件</li></ul><pre><code>sudo apt-get autoremove open-vm-toolssudo apt-get install open-vm-toolssudo apt-get install open-vm-tools-desktop</code></pre><ul><li>重启Ubuntu</li></ul></li></ul></li><li><p>在Linux中clone仓库时，出现<code>GnuTLS recv error (-110): The TLS connection was non-properly terminated</code></p><ul><li><a href="https://stackoverflow.com/questions/52529639/gnutls-recv-error-110-the-tls-connection-was-non-properly-terminated" target="_blank" rel="noopener">安装必要的git依赖库</a><pre><code>sudo apt-get install build-essential fakeroot dpkg-dev -ysudo apt-get build-dep git -ysudo apt-get install libcurl4-openssl-dev -ycd ~mkdir source-gitcd source-git/apt-get source gitcd git-2.*.*/sed -i -- &#39;s/libcurl4-gnutls-dev/libcurl4-openssl-dev/&#39; ./debian/controlsed -i -- &#39;/TEST\s*=\s*test/d&#39; ./debian/rulesdpkg-buildpackage -rfakeroot -b -uc -ussudo dpkg -i ../git_*ubuntu*.deb</code></pre></li></ul></li><li><p><a href="https://blog.csdn.net/stickmangod/article/details/85316142" target="_blank" rel="noopener">Sub-process /usr/bin/dpkg returned an error code (1)解决办法</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1029-两地调度</title>
      <link href="/2021/04/15/leetcode/1029-liang-di-diao-du/"/>
      <url>/2021/04/15/leetcode/1029-liang-di-diao-du/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/two-city-scheduling/" target="_blank" rel="noopener">1029. 两地调度</a></p><ul><li>按照每个人去A、B两地的路费差进行排序，排好序后，前半部分人去A地，后半部分人去B地</li><li>以 [[10,20],[30,200],[400,50],[30,20]] 为例，两地的差分别为[-10,-170,350,10]<ul><li>相对于B地，第1个人花费的代价最大，所以去A地；然后第0个人去A地也相对划算一些。因此这两人花费：30+10</li><li>相对于B地，第3个人去B地相对划算一些；第2个人去B地最划算。因此这两人花费：20+50</li><li>总花费：30+10+20+50=110</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoCitySchedCost</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> costs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 按照这个人AB两地的路费差值排序</span>        costs<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        total <span class="token operator">=</span> <span class="token number">0</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>costs<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token comment" spellcheck="true"># cost分成两部分，前半部分去A地，后半部分去B地</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            total <span class="token operator">+=</span> costs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> costs<span class="token punctuation">[</span>i <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> total<span class="token comment" spellcheck="true"># s=Solution()</span><span class="token comment" spellcheck="true"># costs=[[10,20],[30,200],[400,50],[30,20]]</span><span class="token comment" spellcheck="true"># print(s.twoCitySchedCost(costs))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：手把手带你刷二叉树-第二期</title>
      <link href="/2021/03/18/labuladong/di-yi-zhang-shou-ba-shou-dai-ni-shua-er-cha-shu-di-er-qi/"/>
      <url>/2021/03/18/labuladong/di-yi-zhang-shou-ba-shou-dai-ni-shua-er-cha-shu-di-er-qi/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://labuladong.gitbook.io/algo/shu-ju-jie-gou-xi-lie/shou-ba-shou-shua-er-cha-shu-xun-lian-di-gui-si-wei/er-cha-shu-xi-lie-2" target="_blank" rel="noopener">手把手带你刷二叉树（第二期）</a></p><h1 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654. 最大二叉树"></a><a href="https://leetcode-cn.com/problems/maximum-binary-tree/" target="_blank" rel="noopener">654. 最大二叉树</a></h1><p>递归结束条件：nums中没有元素<br>明确函数的定义（但不跳进递归去）：找到最大值及最大值的索引，并根据索引将其分成左右两个子nums集合<br>左右子树递归调用该函数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">constructMaximumBinaryTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: TreeNode        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span> <span class="token keyword">return</span> None        max_val<span class="token operator">=</span>max<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        max_index<span class="token operator">=</span>nums<span class="token punctuation">.</span>index<span class="token punctuation">(</span>max_val<span class="token punctuation">)</span>        root<span class="token operator">=</span>TreeNode<span class="token punctuation">(</span>max_val<span class="token punctuation">)</span>        root<span class="token punctuation">.</span>left<span class="token operator">=</span>self<span class="token punctuation">.</span>constructMaximumBinaryTree<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span>max_index<span class="token punctuation">]</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>right<span class="token operator">=</span>self<span class="token punctuation">.</span>constructMaximumBinaryTree<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>max_index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//#include &lt;bits/stdc++.h></span><span class="token comment" spellcheck="true">//using namespace std;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">////Definition for a binary tree node.</span><span class="token comment" spellcheck="true">//struct TreeNode {</span><span class="token comment" spellcheck="true">//    int val;</span><span class="token comment" spellcheck="true">//    TreeNode *left;</span><span class="token comment" spellcheck="true">//    TreeNode *right;</span><span class="token comment" spellcheck="true">//    TreeNode() : val(0), left(nullptr), right(nullptr) {}</span><span class="token comment" spellcheck="true">//    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}</span><span class="token comment" spellcheck="true">//    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}</span><span class="token comment" spellcheck="true">//};</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">constructMaximumBinaryTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        最大值及其对应的索引</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator idx<span class="token operator">=</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 或者：auto idx=max_element(nums);</span>        <span class="token keyword">int</span> maxVal<span class="token operator">=</span><span class="token operator">*</span>idx<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        构建新的节点</span>        TreeNode<span class="token operator">*</span> root<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">TreeNode</span> <span class="token punctuation">(</span>maxVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        递归调用最大值两边的左右两个子数组</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">l</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">r</span><span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">=</span> <span class="token function">constructMaximumBinaryTree</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">=</span> <span class="token function">constructMaximumBinaryTree</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="105-从前序与中序遍历序列构造二叉树"><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105. 从前序与中序遍历序列构造二叉树"></a><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/dong-hua-yan-shi-105-cong-qian-xu-yu-zhong-xu-bian/" target="_blank" rel="noopener">105. 从前序与中序遍历序列构造二叉树</a></h1><p><a href="https://ismxue.github.io/2020/07/23/labuladong/di-ling-zhang-xue-xi-suan-fa-he-shua-ti-de-kuang-jia-si-wei/#toc-heading-3">题解见：第零章：学习算法和刷题的框架思维</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为2021笔试记录</title>
      <link href="/2021/03/05/leetcode/others/hua-wei-2021-bi-shi-ji-lu/"/>
      <url>/2021/03/05/leetcode/others/hua-wei-2021-bi-shi-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="重复一次的最长子串"><a href="#重复一次的最长子串" class="headerlink" title="重复一次的最长子串"></a>重复一次的最长子串</h1><p>在一个字符串中找到最多重复一次的最长子串，并返回子串长度（AC100%）</p><blockquote><p>输入：abcabcbb<br>输出：6<br>说明：abcabc是最多重复一次的最长子串</p></blockquote><ul><li>该题是<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3. 无重复字符的最长子串</a>的变体，利用滑动窗口思想，不断更新左右指针，<ul><li>右指针向右跳，并更新窗口的内容</li><li>若满足<code>while window[c]&gt;2</code>,说明该字符开始重复第3次，不满足条件了，因此左指针开始向右跳，并更新窗口内容</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python">s<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdictwindow<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>l<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>res_max<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> r<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token operator">=</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span>    r<span class="token operator">+=</span><span class="token number">1</span>    window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">while</span> window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">:</span>        d<span class="token operator">=</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span>        l<span class="token operator">+=</span><span class="token number">1</span>        window<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">-=</span><span class="token number">1</span>    res_max<span class="token operator">=</span>max<span class="token punctuation">(</span>res_max<span class="token punctuation">,</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res_max<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="先按照年月日排序，年月日相同时按照姓名排序，输出姓名"><a href="#先按照年月日排序，年月日相同时按照姓名排序，输出姓名" class="headerlink" title="先按照年月日排序，年月日相同时按照姓名排序，输出姓名"></a>先按照年月日排序，年月日相同时按照姓名排序，输出姓名</h1><blockquote><p>输入：2<br>      zhang san, 1990,1,1<br>      lisi,1991,2,2</p><p>输出：zhang san, li si</p></blockquote><p>AC 50%</p><pre class="line-numbers language-python"><code class="language-python">n<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> n<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># res.append(input())</span>    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(res)</span>ans<span class="token operator">=</span>sorted<span class="token punctuation">(</span>res<span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(ans)</span>name<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">]</span>name<span class="token operator">=</span><span class="token string">", "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2</span><span class="token comment" spellcheck="true"># zhang san, 1985, 12, 31</span><span class="token comment" spellcheck="true"># li si, 1977, 9, 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 要加这一行，以“吸收”n后面的回车</span>    string line<span class="token punctuation">;</span>    string item<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构建二维数组</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> vec<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> tmp<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token string">', '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// lambda函数进行排序，并保存结果</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> vec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 打印结果</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">!=</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">", "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符串除法"><a href="#字符串除法" class="headerlink" title="字符串除法"></a>字符串除法</h1><p>计算第一个字符串中有几个第二个字符串。无需考虑字符串顺序（不知道AC多少）</p><blockquote><p>输入：abcdabcdab bcae<br>输出：0 （e不在第一个字符串中）<br>输入：abcdabcdab bca<br>输出：2 （第一个字符串中有3个b，2个c，3个a。因此第一个字符串中能找到2个第二个字符串）</p></blockquote><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">,</span>b<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdictda<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>db<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>    da<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> b<span class="token punctuation">:</span>    db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token comment" spellcheck="true"># print(da)</span><span class="token comment" spellcheck="true"># print(db)</span>res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>flag<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token comment" spellcheck="true"># flag若始终为-1说明b中的key都能在a中找到</span><span class="token keyword">for</span> i <span class="token keyword">in</span> db<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token keyword">in</span> da<span class="token punctuation">:</span>        tmp<span class="token operator">=</span>da<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">//</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># a中各元素中 有几倍的 b中各元素</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        flag<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true"># 若b中的key在a中找不到，则改变flag的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>min<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token keyword">if</span> flag<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="输出相同或连续子串的个数"><a href="#输出相同或连续子串的个数" class="headerlink" title="输出相同或连续子串的个数"></a>输出相同或连续子串的个数</h1><blockquote><p>如子串 “11121”中，”111” 1个， “11” 2个，”1” 4个, “2” 1个，总共8个</p></blockquote><p>AC 100%</p><ul><li>i从第0个位置遍历到倒数第二个位置，j从i+1处开始遍历<ul><li>若i和j对应的元素相同，则计数+1。否则跳出j的循环，开始下一次i的循环</li></ul></li><li>遍历结束后加上最后一个元素</li></ul><pre class="line-numbers language-python"><code class="language-python">s<span class="token operator">=</span>str<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>nums<span class="token operator">=</span><span class="token number">0</span>l<span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># i遍历到倒数第二个位置，j从i+1处开始遍历</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    nums<span class="token operator">+=</span><span class="token number">1</span> <span class="token comment" spellcheck="true">#每经过一个元素，+1 </span>    x<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 后面每连续一次，+1</span>            nums<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 若不连续，则跳出</span>            <span class="token keyword">break</span>nums<span class="token operator">+=</span><span class="token number">1</span> <span class="token comment" spellcheck="true"># 加上最后一个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="天平平衡"><a href="#天平平衡" class="headerlink" title="天平平衡"></a>天平平衡</h1><p>有一堆砝码，天平平衡时，砝码一侧的最大值是多少？</p><blockquote><p>有数组[1,2,3,6]。平衡时，一侧放[1,2,3],另一侧放[6]。结果输出6</p></blockquote><p>背包问题的变体，有点像 LeetCode 416. 分割等和子集。</p><p>目前只AC 80% （如[1,2,3,7]这种数组，结果就不对），应该是状态转移方程这里有问题。</p><pre class="line-numbers language-python"><code class="language-python">nums<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">import</span> mathtotal<span class="token operator">=</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>total<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>total<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 物品太大，超过容量了，装不下</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 装或不装的最大值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="小测试"><a href="#小测试" class="headerlink" title="小测试"></a>小测试</h1><p>n的阶乘末尾含0的个数</p><ul><li>能生成0，肯定是2*5的组合，其中，2（以及2的倍数）比5的多，所以只要看有几个5</li><li>25（<code>5*5</code>），125（<code>5*5*5</code>）这种组合，有多个5。所以要不断更新n</li></ul><p><a href="https://leetcode-cn.com/problems/factorial-trailing-zeroes/solution/chan-sheng-ling-de-tiao-jian-by-icemelon/" target="_blank" rel="noopener">产生零的条件</a></p><blockquote><p>要在末尾产生0，则必然是5×2，即使是原数中包含的0也可以分解，因此将题目简化为寻找阶乘中5的个数，即n//5，但是要考虑到这只找到了n中是5倍数的所有数，例如25，即在25!中找到了5个是5的倍数的数分别为5,10,15,20,25，要注意这之中的25依然可以分解为5的倍数，因此n//5其实是少计入了一部分情况的。</p><p>要对接下来的这部分情况进行统计，我们可以对n取25的商，即n//25，这样就找到了包含有2个5的数（且因为是对5×5取商，没有重复计入），依此类推，可以循环对n取5, 25, 125…的商，将所有的情况都包括，最终将所有的商汇总即0的个数。</p><p>n // 25 == n // 5 // 5，因此可以对n循环取5的商，其效果是一样的。</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            num <span class="token operator">+=</span> n <span class="token operator">//</span> <span class="token number">5</span> <span class="token comment" spellcheck="true"># 找到5的倍数</span>            n <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">5</span> <span class="token comment" spellcheck="true"># 重新更新n，继续找，直到没有5的倍数</span>        <span class="token keyword">return</span> num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>不要算出阶乘的结果后才统计（以下方法不推荐）</del></p><pre class="line-numbers language-python"><code class="language-python">n<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span>ires<span class="token operator">=</span>dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>res<span class="token operator">=</span>str<span class="token punctuation">(</span>res<span class="token punctuation">)</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">:</span>        count<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第零章：手把手带你刷二叉树(第一期)</title>
      <link href="/2021/02/28/labuladong/di-ling-zhang-shou-ba-shou-dai-ni-shua-er-cha-shu-di-yi-qi/"/>
      <url>/2021/02/28/labuladong/di-ling-zhang-shou-ba-shou-dai-ni-shua-er-cha-shu-di-yi-qi/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://labuladong.gitbook.io/algo/bi-du-wen-zhang/er-cha-shu-xi-lie-1" target="_blank" rel="noopener">手把手带你刷二叉树（第一期）</a></p><blockquote><p>递归算法的关键要明确函数的定义，相信这个定义，而不要跳进递归细节<br>递归结束的条件一定要写，否则递归跳不出来<br>写二叉树的算法题，都是基于递归框架的（只要涉及递归，都可以抽象成二叉树的问题），我们先要搞清楚<em><em> root 节点它自己要做什么</em></em>，然后根据题目要求选择使用前序，中序，后续的递归框架</p></blockquote><h1 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a><a href="https://leetcode-cn.com/problems/invert-binary-tree/" target="_blank" rel="noopener">226. 翻转二叉树</a></h1><ul><li>相当于前序遍历，把当前的左右节点进行翻转，再将左右子树进行递归</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: TreeNode        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span>        root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token operator">=</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root<span class="token punctuation">.</span>left        self<span class="token punctuation">.</span>invertTree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>invertTree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> tmp<span class="token operator">=</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="116-填充每个节点的下一个右侧节点指针"><a href="#116-填充每个节点的下一个右侧节点指针" class="headerlink" title="116. 填充每个节点的下一个右侧节点指针"></a><a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/" target="_blank" rel="noopener">116. 填充每个节点的下一个右侧节点指针</a></h1><ul><li>若只对一个节点进行操作，则不能把不同子树的左右节点连接。因此在递归函数中，把函数的参数增加到2个，并对这两个节点进行操作</li><li>用一个帮助函数<code>connectTwoNode()</code>对两个“子根”节点进行操作，以便相邻树的左右节点也能连接</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""# Definition for a Node.class Node(object):    def __init__(self, val=0, left=None, right=None, next=None):        self.val = val        self.left = left        self.right = right        self.next = next"""</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">connect</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: Node        :rtype: Node        """</span>        <span class="token keyword">def</span> <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>node1<span class="token punctuation">,</span>node2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># if node1==None or node2==None:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>node1 <span class="token operator">and</span> node2<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>             node1<span class="token punctuation">.</span>next<span class="token operator">=</span>node2            connectTwoNode<span class="token punctuation">(</span>node1<span class="token punctuation">.</span>left<span class="token punctuation">,</span>node1<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            connectTwoNode<span class="token punctuation">(</span>node2<span class="token punctuation">.</span>left<span class="token punctuation">,</span>node2<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            connectTwoNode<span class="token punctuation">(</span>node1<span class="token punctuation">.</span>right<span class="token punctuation">,</span>node2<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#相邻树的左右节点相连</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> None        connectTwoNode<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 当前的两个“子根”节点相连</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node {public:    int val;    Node* left;    Node* right;    Node* next;    Node() : val(0), left(NULL), right(NULL), next(NULL) {}    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}    Node(int _val, Node* _left, Node* _right, Node* _next)        : val(_val), left(_left), right(_right), next(_next) {}};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    辅助函数不返回内容，只对节点进行操作</span>    <span class="token keyword">void</span> <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>node1<span class="token punctuation">,</span> Node <span class="token operator">*</span>node2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node1 <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> node2 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        node1<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> node2<span class="token punctuation">;</span>        <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>node1<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> node1<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>node2<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> node2<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>node1<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> node2<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Node <span class="token operator">*</span><span class="token function">connect</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对节点进行操作后，返回root根节点</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="114-二叉树展开为链表"><a href="#114-二叉树展开为链表" class="headerlink" title="114. 二叉树展开为链表"></a><a href="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/" target="_blank" rel="noopener">114. 二叉树展开为链表</a></h1><ul><li>相当于后续遍历，先把左右子树拉平，再对根节点进行操作</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">flatten</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: None Do not return anything, modify root in-place instead.        """</span>        <span class="token comment" spellcheck="true"># 递归结束的条件</span>        <span class="token keyword">if</span> root <span class="token operator">==</span>None<span class="token punctuation">:</span><span class="token keyword">return</span>        <span class="token comment" spellcheck="true"># 后续遍历，把左右子树拉平</span>        l<span class="token operator">=</span>self<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        r<span class="token operator">=</span>self<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将root原来的左子树置空，并将拉平的左子树接到右子树上</span>        root<span class="token punctuation">.</span>left<span class="token operator">=</span>None        root<span class="token punctuation">.</span>right<span class="token operator">=</span>l        <span class="token comment" spellcheck="true"># 将拉平的右子树接到当前右子树的末端</span>        p<span class="token operator">=</span>root        <span class="token keyword">while</span> p<span class="token punctuation">.</span>right<span class="token operator">!=</span>None<span class="token punctuation">:</span>             p<span class="token operator">=</span>p<span class="token punctuation">.</span>right <span class="token comment" spellcheck="true"># 将p置到root头上，并一直跳到末端</span>        p<span class="token punctuation">.</span>right<span class="token operator">=</span>r <span class="token comment" spellcheck="true"># 末端接拉平的右子树</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">flatten</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 后序遍历：左，右</span>        <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用两个节点记录递归后的结果</span>        TreeNode<span class="token operator">*</span> l<span class="token operator">=</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> r<span class="token operator">=</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 左变置空，把左边的结果放到右边</span>        root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">=</span>l<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 找到末尾，并把右边的结果拼接到末尾</span>        TreeNode<span class="token operator">*</span>p <span class="token operator">=</span>root<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">=</span>r<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第零章：一个方法解决三道区间问题</title>
      <link href="/2021/02/27/labuladong/di-ling-zhang-yi-ge-fang-fa-jie-jue-san-dao-qu-jian-wen-ti/"/>
      <url>/2021/02/27/labuladong/di-ling-zhang-yi-ge-fang-fa-jie-jue-san-dao-qu-jian-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://www.cnblogs.com/labuladong/p/13975851.html" target="_blank" rel="noopener">一个方法解决三道区间问题</a><br>删除被覆盖区间、区间合并、区间交集</p><ol><li><p>排序。按照区间起点升序排序，或者先按照起点升序排序，若起点相同，则按照终点降序排序</p></li><li><p>观察规律并画图。<strong>找到区间相对位置的不同情况，并进行分析</strong></p></li></ol><h1 id="1288-删除被覆盖区间"><a href="#1288-删除被覆盖区间" class="headerlink" title="1288. 删除被覆盖区间"></a><a href="https://leetcode-cn.com/problems/remove-covered-intervals/" target="_blank" rel="noopener">1288. 删除被覆盖区间</a></h1><ul><li>先按照起点升序排序。若起点相同，则按照终点降序排序，这样能保证下面的区间被上面的区间覆盖掉。<code>intervals=sorted(intervals,key=lambda x: (x[0], -x[1]))</code></li><li>分2种情况讨论<ul><li>完全覆盖，则计数-1 ，区间不变</li><li>不能覆盖，则计数不变，把区间更新到当前线段中</li></ul></li><li>也可以分3种情况讨论<ul><li>完全覆盖，则计数-1 ，区间不变</li><li>部分区间相交，则扩大右区间</li><li>完全不相交，则把区间更新到当前线段中</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 两种情况的代码</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeCoveredIntervals</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> intervals<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type intervals: List[List[int]]        :rtype: int        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>intervals<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> len<span class="token punctuation">(</span>intervals<span class="token punctuation">)</span>        intervals<span class="token operator">=</span>sorted<span class="token punctuation">(</span>intervals<span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        record<span class="token operator">=</span><span class="token punctuation">[</span>intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        res<span class="token operator">=</span>len<span class="token punctuation">(</span>intervals<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>intervals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>record<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 能完全覆盖，record继续保持</span>                res<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                  record <span class="token operator">=</span> <span class="token punctuation">[</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 不能覆盖，把record更新到当前的线段中</span>        <span class="token keyword">return</span> res<span class="token comment" spellcheck="true"># 三种情况的代码</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeCoveredIntervals</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> intervals<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 按起点升序、终点降序的方式排列。排列后，必然是前面的区间覆盖后面的区间</span>        intervals<span class="token operator">=</span>sorted<span class="token punctuation">(</span>intervals<span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> len<span class="token punctuation">(</span>intervals<span class="token punctuation">)</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 以第0个线段为基准，初始化合并区间的起点和终点</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>intervals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> left <span class="token operator">&lt;=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> right <span class="token operator">>=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 情况1：完全覆盖</span>                res <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> right <span class="token operator">>=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> right <span class="token operator">&lt;=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 情况2：区间相交，需要合并</span>                right <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 扩大右区间</span>            <span class="token keyword">if</span> right <span class="token operator">&lt;</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 情况3：完全不相交，把区间跳转到当前线段中</span>                left <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                right <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="56-合并区间"><a href="#56-合并区间" class="headerlink" title="56. 合并区间"></a><a href="https://leetcode-cn.com/problems/merge-intervals/" target="_blank" rel="noopener">56. 合并区间</a></h1><ul><li><p>按照区间的start，排序 <code>intervals = sorted(intervals, key=lambda x: x[0])</code></p></li><li><p>如果当前的头没超过之前的尾，则取当前/ 之间尾的最大值。否则若超过了，res把当前区间添加进去。然后开始新一轮更新</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 输入: [[1,3],[2,6],[8,10],[15,18]]</span><span class="token comment" spellcheck="true"># 输出: [[1,6],[8,10],[15,18]]</span><span class="token comment" spellcheck="true"># 解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> intervals<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type intervals: List[List[int]]        :rtype: int        """</span>        <span class="token comment" spellcheck="true"># if len(intervals)&lt;=1: return len(intervals)</span>        intervals<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        record<span class="token operator">=</span><span class="token punctuation">[</span>intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>intervals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>record<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">elif</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>record<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>record<span class="token punctuation">)</span>                record <span class="token operator">=</span> <span class="token punctuation">[</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token keyword">elif</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>record<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>record<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                record <span class="token operator">=</span> <span class="token punctuation">[</span>record<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>record<span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token comment" spellcheck="true"># so=Solution()</span><span class="token comment" spellcheck="true"># intervals=[[1,3],[2,6],[8,10],[15,18]]</span><span class="token comment" spellcheck="true"># print(so.merge(intervals))</span><span class="token comment" spellcheck="true"># 或者可以合并写为：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> intervals<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""      :type intervals: List[List[int]]      :rtype: List[List[int]]      """</span>      <span class="token keyword">if</span> <span class="token operator">not</span> intervals<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      intervals <span class="token operator">=</span> sorted<span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      res <span class="token operator">=</span> <span class="token punctuation">[</span>intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>intervals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> res<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>              <span class="token comment" spellcheck="true">#更新并维护当前最大区间</span>              res<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              <span class="token comment" spellcheck="true"># 添加到结果，并重新更新</span>              res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="986-区间列表的交集"><a href="#986-区间列表的交集" class="headerlink" title="986. 区间列表的交集"></a><a href="https://leetcode-cn.com/problems/interval-list-intersections/" target="_blank" rel="noopener">986. 区间列表的交集</a></h1><ul><li>找到有交集的条件，然后取公共部分</li><li>可能存在多个区间，注意更新指针的条件</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">intervalIntersection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type A: List[List[int]]        :type B: List[List[int]]        :rtype: List[List[int]]        """</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        i<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">and</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span>            a1<span class="token punctuation">,</span>a2<span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            b1<span class="token punctuation">,</span>b2<span class="token operator">=</span>B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> b2<span class="token operator">>=</span>a1 <span class="token operator">and</span> a2<span class="token operator">>=</span>b1<span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 有交集的情况</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>max<span class="token punctuation">(</span>a1<span class="token punctuation">,</span>b1<span class="token punctuation">)</span><span class="token punctuation">,</span>min<span class="token punctuation">(</span>a2<span class="token punctuation">,</span>b2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 取公共部分</span>            <span class="token comment" spellcheck="true"># 跳指针</span>            <span class="token keyword">if</span> b2<span class="token operator">&lt;</span>a2<span class="token punctuation">:</span> j<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> i<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读“被讨厌的勇气”</title>
      <link href="/2021/02/26/growth/du-bei-tao-yan-de-yong-qi/"/>
      <url>/2021/02/26/growth/du-bei-tao-yan-de-yong-qi/</url>
      
        <content type="html"><![CDATA[<p>世界很简单，人生也一样</p><p><a href="https://www.youtube.com/watch?v=grmM-Rn5nyg" target="_blank" rel="noopener">为什么说爱抱怨、喜欢找借口的人往往一事无成？解读《被讨厌的勇气》学习阿德勒的人生哲学！</a></p><p><a href="https://www.youtube.com/watch?v=5cZxZCbcOQw" target="_blank" rel="noopener">过去可以被改变的真正原因，被讨厌的勇气 | 老高与小茉 Mr &amp; Mrs Gao</a></p><hr><blockquote><ul><li>建立获得幸福的勇气</li><li>不要抱怨过去，也不要抱怨当下，现在的状况都是从过去的每一次次选择中得到的。现在的结果决定了你过往经历的态度。不要放大过去的痛苦</li><li>人应该是向前看，往前走的。不要去惯着自己，别那么脆弱。聪明的人一眼就能看穿你的任何理由和借口。承认自己的不足是需要勇气的，但这才是进步的开始。</li></ul></blockquote><blockquote><p>反常识的方面：</p><ul><li>否定原因论，否定精神创伤，<strong>采取目的论</strong></li><li>认为人的烦恼<strong>全都是关于人际关系的烦恼</strong></li><li>不寻求认可或者<strong>课题分离</strong></li></ul></blockquote><blockquote><p>首先应该课题分离，然后应该在接收双方差异的同时建立平等的横向关系。“鼓励”则是这种基础之上的一种方法。</p></blockquote><blockquote><p><strong>不再从属于纵向关系</strong>，<strong>不畏惧惹人讨厌地自由前行</strong>就可以。</p></blockquote><blockquote><p><strong>人生是连续的刹那，根本不存在过去和未来。你是想要通过关注过去或未来为自己寻找免罪符。过去发生了什么与你的“此时此刻”没有任何关系，未来会如何也不是“此时此刻”要考虑的问题。假如认真地活在“此时此刻”，既看不见后面也看不到前面，才是很自然的事情。</strong></p><p><strong>人生最大的谎言就是不活在“此时此刻”。纠结过去，关注未来，把微弱而模糊的光打向人生整体，自认为看到些什么。你之前就一直忽略“此时此刻”，只关注根本就不存在的过去和未来。对自己的人生和无可替代的刹那撒了一个大大的谎言。</strong></p></blockquote><hr><h1 id="自卑感"><a href="#自卑感" class="headerlink" title="自卑感"></a>自卑感</h1><p>我们应该摒弃自卑感，进一步向前；不满足于现状，不断进步；要更加幸福。如果是这样的自卑感，那就没有任何问题。</p><p>但是，有些人无法认清<strong>“情况可以通过现实的努力而改变”</strong>这一事实，根本就没有向前迈进的勇气。他们什么都不做就断定自己不行或是现实无法改变。</p><p>自卑情结是指把自己的自卑感当做某种借口使用的状态。</p><h1 id="虚假廉价的优越感"><a href="#虚假廉价的优越感" class="headerlink" title="虚假廉价的优越感"></a>虚假廉价的优越感</h1><p>没有勇气通过努力或成长之类的健全手段去进行改变，所以想用更简便的方式进行补偿：虚假优越感。</p><p>“我”原本并不优秀或者并不特别，而通过把”我“和权势相结合，似乎显得“我”很优秀，这也就是虚假优越感。其根源在于怀有强烈的自卑感。不过，借助权势的力量来抬高自己的人终究活在他人的价值观和人生中。</p><p>在我们的文化中，弱势其实非常强大而且具有特权。</p><h1 id="目的论"><a href="#目的论" class="headerlink" title="目的论"></a>目的论</h1><p>既然时光不会倒流，那么，赋予过去的事情什么样的价值，这是“现在的你”所面临的课题。</p><p>从目的论的角度来说，你下定了“不改变”的决心，并从过去的经历或未来的想象中寻找免罪符。然而，过去和现在并不存在，存在的只是“此时此刻”。</p><blockquote><p>认为”因为有那样的上司，所以无法好好工作“，这完全是原因论。请不要这样想，而是要反过来这样看：”因为不想工作，所以才制造出一个讨厌的上司。“或者认为：”因为不愿意接受无能的自己，所以才制造出一个无能的上司“这就成了目的论式的想法</p></blockquote><h1 id="人际关系的距离和深度"><a href="#人际关系的距离和深度" class="headerlink" title="人际关系的距离和深度"></a>人际关系的距离和深度</h1><p>交友课题，工作课题，爱的课题</p><p><strong>只要你变了，周围也会改变。</strong>不能等着别人发生变化，也不要等着状况有所改变，而是<strong>由你自己勇敢迈出第一步。</strong></p><p>爱的课题：</p><ul><li><strong>当人能够感觉到“与这个人在一起可以无拘无束”的时候，才能够体会到爱。既没有自卑感也不必炫耀优越性，能够保持一种平静而自然的状态。真正的爱应该是这样的。</strong></li><li>另一方面，束缚是想要支配对方的表现，也是一种基于不信任感的想法。与一个不信任自己的人处在同一个空间里，那就根本不可能保持一种自然状态。</li><li>如果想要和谐地生活在一起，那就必须把对方当成平等的人。</li></ul><h1 id="“人生谎言”导致逃避"><a href="#“人生谎言”导致逃避" class="headerlink" title="“人生谎言”导致逃避"></a>“人生谎言”导致逃避</h1><p>企图设立种种借口来回避人生课题的情况叫做“人生谎言”。对于自己目前所处的状态，把责任转嫁给别人，通过归咎于他人或者环境来回避人生课题。</p><p><strong>决定你的生活方式（人生状态）的不是其他人，而是你自己这一事实。我们是自己选择自己的生活方式，责任就在自己。</strong></p><h1 id="勇气的心理学，使用的心理学"><a href="#勇气的心理学，使用的心理学" class="headerlink" title="勇气的心理学，使用的心理学"></a>勇气的心理学，使用的心理学</h1><p>不在于被给予了什么东西，而在于如何去使用被给予的定西。起决定作用的是你自己。</p><h1 id="为自己而活"><a href="#为自己而活" class="headerlink" title="为自己而活"></a>为自己而活</h1><p>你就活在自己的人生中。如果一味寻求别人的认可，在意别人的评价，那最终就会活在别人的人生中，而舍弃真正的自我。而且，假如说<strong>你“不是为了满足他人的期待而活”，那他人也不是为了满足你的期待而活。当别人的行为不符合自己的想法的时候也不可以发怒。</strong></p><h1 id="把自己和别人的人生课题分开来"><a href="#把自己和别人的人生课题分开来" class="headerlink" title="把自己和别人的人生课题分开来"></a>把自己和别人的人生课题分开来</h1><p>从“这是谁的课题”这一观点出发，不干涉他人的课题。</p><p>辨别究竟是谁的课题很简单，只需考虑一下“某种选择所带来的的结果最终要谁承担？”</p><p>比如，接收心理咨询辅导后，被辅导者下什么样的决心，是否改变生活方式，这都是被辅导者本人的课题，辅导顾问不能干涉。</p><p><strong>能够改变自己的只有自己。</strong></p><p>自己通过某件东西学到了什么，明白了什么，有没有从中改变，和这个东西没关系，而是自己的事，自己的课题。</p><p>信任这一行为也需要进行课题分离。信任别人，这是你的课题。但是，如何对待你的信任，那就是对方的课题了。如果不分清界限而是把自己的希望强加给别人的话，那就变成粗暴的干涉了。</p><p><strong>关于自己的人生你能够做的就只有“选择自己认为最好的道路”。另一方面，别人如何评价你的选择，那是别人的课题，你根本无法左右。</strong></p><p>人为什么会在意别人的想法呢？答案非常简单，那就是因为你还不会进行课题分离，把原本应该是别人的课题也看成自己的课题。</p><p><strong>首先要思考”这是谁的课题“。然后进行课题分离-哪些是自己的课题，哪些是别人的课题，要冷静地划清界限。而且，不去干涉别人的课题也不让别人干涉自己的课题。</strong>这就是阿德勒心理学给出的具体而且有可能彻底改变人际关系烦恼的具有划时代的观点。</p><h1 id="砍断“格尔迪奥斯绳结”"><a href="#砍断“格尔迪奥斯绳结”" class="headerlink" title="砍断“格尔迪奥斯绳结”"></a>砍断“格尔迪奥斯绳结”</h1><blockquote><p>传说谁能解开绳结谁就当王。亚历山大大帝一看绳结非常牢固，于是便立即取出短剑将其一刀两断，说：”命运不是靠传说决定而是靠自己的剑开拓出来。我不需要传说的力量而是靠自己的剑去开创命运。“</p></blockquote><p>人际关系需要保持适当的距离，即便是亲子关系（不远不近）。<strong>伸伸手即可触及，但又不踏入对方领域，保持这种适度距离非常重要。</strong></p><p><strong>不要用“回报思想”束缚自己。如果有回报思想存在，就会产生“因为我为你做了什么，你就应该给予回报。”这是与课题分离相悖的想法思想。我们既不可以寻求回报，也不可以受其束缚。</strong></p><p>不要干涉孩子的课题。没有学会直面困难的孩子最终会想要逃避一切困难。</p><h1 id="要有自由的勇气，有被讨厌的勇气"><a href="#要有自由的勇气，有被讨厌的勇气" class="headerlink" title="要有自由的勇气，有被讨厌的勇气"></a>要有自由的勇气，有被讨厌的勇气</h1><p>要想有良好的人际关系，需要保持一定距离：太过亲密就无法正面对话。但是，距离也不可以太远。<strong>“课题分离”不是为了疏远他人，而是为了解开错综复杂的人际关系之线。</strong></p><p>人际关系并不止于课题分离，相反，<strong>分离课题是人际关系的出发点。</strong></p><p><strong>不能进行“课题分离”、一味拘泥于认可欲求的人也是极其以自我为中心的人。</strong>你正因为不想被他人认为自己不好，所以才在意他人的视线。这不是对他人关心，而是对向己的执著。</p><h1 id="直面人生课题"><a href="#直面人生课题" class="headerlink" title="直面人生课题"></a>直面人生课题</h1><p><strong>不回避人际关系课题，要积极主动地面对</strong>。如果你认为自己就是世界中心，那丝毫不会主动融入共同体中，因为一切他人都是“为我服务的人”，根本没必要由自己采取行动。</p><p>当我们在人际关系中遇到困难或者看不到出口的时候，首先应该考虑的是“倾听更大共同体的声音”这一原则。</p><h1 id="否定纵向关系，提倡横向关系"><a href="#否定纵向关系，提倡横向关系" class="headerlink" title="否定纵向关系，提倡横向关系"></a>否定纵向关系，提倡横向关系</h1><p>阿德勒心理学之所以强烈否定赏罚教育，就因为它是为了操纵孩子，是一种纵向关系。</p><p>希望被表扬或者表扬别人，这是一种把人际关系都理解为“纵向关系”的证明。阿德勒心理学<strong>反对一切纵向关系，提倡把所有的人际关系都看做“横向关系”。</strong></p><p>自卑感原本就是纵向关系中产生的一种意识。<strong>只有能够对所有人都建立起“虽不同但平等”的横向关系，那就根本不会产生自卑情结。</strong></p><h1 id="有鼓励才有勇气"><a href="#有鼓励才有勇气" class="headerlink" title="有鼓励才有勇气"></a>有鼓励才有勇气</h1><p>干涉别人实际是种纵向关系，希望通过干涉行为把对方导向自己希望的方向。这是坚信自己正确而对方错误。</p><h1 id="做一些不是“干涉”的“援助”。"><a href="#做一些不是“干涉”的“援助”。" class="headerlink" title="做一些不是“干涉”的“援助”。"></a><strong>做一些不是“干涉”的“援助”。</strong></h1><p>援助的大前提是<strong>课题分离和横向关系</strong>。以学习为例，不去居高临下地命令其学习，而是努力<strong>帮助</strong>他本人<strong>建立“自己能够学习”</strong>的自信以及提高其<strong>独立应对课题</strong>的能力。</p><p>在课题分离的前提下帮助他用<strong>他自己</strong>的力量去解决，也就是“把马带到水边，但不能强迫其喝水。”<strong>直面课题的是其本人，下定决心的也是其本人。</strong></p><p><strong>既不表扬也不批评，阿德勒心理学把这种基于横向关系的援助称为“鼓励”</strong></p><p>人害怕面对课题并不是因为没有能力。阿德勒心理学认为这不是能力问题，纯粹是“缺乏直面课题的勇气”。如果是这样的话，首先应该找回受挫的勇气。</p><p>人只有在能够感觉自己有价值的时候才可以获得勇气。</p><hr><h1 id="自我接纳"><a href="#自我接纳" class="headerlink" title="自我接纳"></a>自我接纳</h1><p>自我肯定是明明做不到但还是暗示自己说“我能行”或者“我很强”，也可以说是一种容易导致优越情结的想法，是对自己撒谎的生活方式。<strong>而另一方面，自我接纳是指加入做不到就诚实接受这个“做不到的自己”，然后尽量朝着能够做大的方向去努力。</strong></p><blockquote><p>对得了60分的自己说“这次只是运气不好，真正的自己能得100分”，这就是自我肯定；与此相对，在诚实地接收60分的自己的基础上努力思考“如何才能接近100分”，这就是自我接纳</p></blockquote><p>要分清能够改变的和不能改变的。我们无法改变“被给予了什么”，但是关于“如何去利用被给予的东西”，我们却可以用自己的力量去改变。这就是不去关注“无法改变的”，而是去关注“可以改变的”，这就是自我接纳。</p><h1 id="不构建信用关系，构建他者信赖关系"><a href="#不构建信用关系，构建他者信赖关系" class="headerlink" title="不构建信用关系，构建他者信赖关系"></a>不构建信用关系，构建他者信赖关系</h1><p>信用关系基于抵押或条件。</p><p>只有我们毫不怀疑人际关系基础，选择了无条件的他者信赖，才可以构筑更加深厚的关系。</p><p><strong>你现在一味担心“被背叛”，也只关注因此受到的伤痛。但是，如果不敢去信赖别人，那最终就会与任何人都建立不了深厚的关系。</strong></p><p>如果关系浅，破裂时的痛苦就会小，但这种关系在生活中产生的喜悦也小。只有拿出通过“他者信赖”进一步加深关系的勇气之后，人际关系的喜悦才会增加，人生的喜悦也会随之增加。</p><p>要在共同体中找到归属感，就必须把他人看做伙伴，而要做到视他人为伙伴就<strong>需要自我接纳和他者信赖。</strong></p><h1 id="他者贡献"><a href="#他者贡献" class="headerlink" title="他者贡献"></a>他者贡献</h1><p>正因为对他人给予无条件的信赖并能够视他人为自己的伙伴，才能给做到“他者贡献”；同时，正因为对他人有所贡献，才能够体会到“我对他人有用”进而接受真实的自己，做到“自我接纳”。</p><h1 id="人生和谐"><a href="#人生和谐" class="headerlink" title="人生和谐"></a>人生和谐</h1><blockquote><p>10个人中，1个人批判你，2个人能后成为与你互相接纳一切的好朋友，剩下的7个则两者都不是。缺乏人生和谐的人就会只关注讨厌自己的那个人来判断”世界“。</p></blockquote><p>人际关系不顺利既不是因为口吃也不是因为脸红恐惧症，真正的问题在于无法做到自我接纳、他者信赖和他者贡献，却将焦点聚集到微不足道的一个方面并企图以此来评价整个世界。这就是缺乏人生和谐的错误生活方式。</p><p>“工作狂”也缺乏人生和谐。口吃者是只看事物的一部分便来判断其整体。与此相对，工作狂则是只关注人生特定的侧面。也许他们会辩解：”工作忙，无暇顾及家庭。“但是，这其实是人生的谎言。只不过以工作为借口来逃避其他责任。本来家务、育儿、交友或兴趣应该全部都给予关系，阿德勒不认可任何一方面突出的生活方式。某种意义上说，这是一种不敢正视人生课题的生活方式。</p><hr><h1 id="人生是“现在”这一刹那的连续。我们只能活在“此时此刻”"><a href="#人生是“现在”这一刹那的连续。我们只能活在“此时此刻”" class="headerlink" title="人生是“现在”这一刹那的连续。我们只能活在“此时此刻”"></a>人生是“现在”这一刹那的连续。我们只能活在“此时此刻”</h1><p>如果人生是一条线，那么人生规划就有可能。但是，<strong>我们的人生不是线，只是点的连续。</strong>计划式的人生不是有没有必要，而是根本不可能。</p><p>设定目标并为此努力的人，这些人在人生的<strong>每个瞬间都活在“此时此刻”</strong>。也就是说，不是活在“在路上”的人生之中，而是时常活在“此时此刻”。</p><p>最重要的是此时此刻。否定原因论的时候也否定了关注过去，过去并不存在，过去没有意义。</p><p>自己站在人生剧场舞台上，如果感觉能够看得到过去也能预测到未来，那就证明你没有认真地活在“此时此刻”，而是生活在模糊而微弱的光中。</p><p><strong>人生是连续的刹那，根本不存在过去和未来。你是想要通过关注过去或未来为自己寻找免罪符。过去发生了什么与你的“此时此刻”没有任何关系，未来会如何也不是“此时此刻”要考虑的问题。假如认真地活在“此时此刻”，既看不见后面也看不到前面，才是很自然的事情。</strong></p><p>人生不是因果律的长故事。的确，把人生当做故事是很有趣的事情。但是，在故事的前面部分就能看到“模糊的将来”；并且，人们还会想要按照这个故事去生活。我的人生就是这样，所以我只能照此生活，错不在我而在于过去和环境。这里搬出来的过去无非是一种免罪符，是人生的谎言。</p><p>但是，人生是点的连续、是连续的刹那。如果能够理解这一点，那就不再需要故事。</p><p><strong>生活方式说的是“此时此刻”，是可以按照自己的意志改变的事情。</strong>像直线一样的过去的生活只不过是在你反复下定决心“不做改变”的基础上才貌似成了直线而已。并且，<strong>将来的人生也完全是一张白纸，并未铺好行进的轨道。这里没有故事。聚焦“此时此刻”是认真而谨慎地做好现在能做的事情。</strong></p><h1 id="对决“人生最大的谎言”"><a href="#对决“人生最大的谎言”" class="headerlink" title="对决“人生最大的谎言”"></a>对决“人生最大的谎言”</h1><blockquote><p><strong>虽然想上大学但却不想学习，这就是没有认真过好”此时此刻“的态度。</strong>当然，考试也许是很久以后的事情，也不知道该学到什么程度，所以也许会感到麻烦。但是，<strong>每天进步一点点也可以，</strong>解开一个算式或者记住一个单词都可以。<strong>也就是要不停地跳舞。如此一来，势必会有”今天能够做到的事情。“今天这一天就为此存在，而不是为遥远的将来的考试而存在。</strong></p></blockquote><p>为遥远的将来设定一个目标，并认为现在是其准备阶段。一直想着“真正想做的是这样的事情，等时机到了就去做”，是一种拖延人生的生活方式。只要在拖延人生，我们就会无所进展，只能每天过着枯燥乏味的单调生活。因为在这种情况下，人们就会认为“此时此刻”只是准备阶段和忍耐阶段。但是，<strong>为了遥远将来的考试而努力学习的“此时此刻”却是真实的存在。</strong></p><p>过好此时此刻，不去设定根本不存在的线。</p><p>站在现实性角度的时候，人生总是处于完结状态。</p><p><strong>人生最大的谎言就是不活在“此时此刻”。纠结过去，关注未来，把微弱而模糊的光打向人生整体，自认为看到些什么。你之前就一直忽略“此时此刻”，只关注根本就不存在的过去和未来。对自己的人生和无可替代的刹那撒了一个大大的谎言。</strong></p><p>甩开人生的谎言，毫不畏惧地把强烈的聚光灯打向“此时此刻”。<strong>因为过去和未来根本不存在，所以才要谈现在。起决定作用的</strong>既不是昨天也不是明天，而<strong>是“此时此刻”。</strong></p><h1 id="人生的意义，由你自己决定"><a href="#人生的意义，由你自己决定" class="headerlink" title="人生的意义，由你自己决定"></a>人生的意义，由你自己决定</h1><blockquote><p>把你已经带到了水边，是否喝水就看你的决心了。</p></blockquote><p>放弃”不做改变“的决心，选择新的生活方式。</p><p>并不存在可以作为常识来讲的普遍性的人生意义，人生意义是自己赋予自己的。</p><p><strong>如果“我”改变，“世界”就会改变。</strong>世界不是靠他人改变而只能靠“我”来改变，我之外的任何人都不会为我改变世界。</p><p>必须有人开始。即使别人不合作，那也与你无关。我的意见就是这样。<strong>应该由你开始，不去考虑别人是否合作。</strong></p><p><strong>“此时此刻”</strong>正散发着耀眼的光芒，那种光强烈到根本看不到明天之类的事情。</p><hr><h1 id="书摘"><a href="#书摘" class="headerlink" title="书摘"></a>书摘</h1><ul><li><p>人并不是住在客观的世界，而是住在自己营造的主观世界里。</p></li><li><p>任何经历本身并不是成功或者失败的原因。我们并非因为自身经历中的刺激——所谓的心理创伤——而痛苦，事实上我们会从经历中发现符合自己目的的因素。决定我们自身的不是过去的经历，而是我们自己赋予经历的意义。</p></li><li><p>我们给过去的经历“赋予了什么样的意义”，这直接决定了我们的生活。人生不是由别人赋予的，而是由自己选择的，是自己选择自己如何生活。</p></li><li><p>如果你成了原因论的信徒，那就会在过去的束缚之下永远无法获得幸福。</p></li><li><p>问题不在于“发生了什么”，而在于“如何诠释”</p></li><li><p>人并不受过去的原因所左右，而是朝着自己定下的目标前进，这就是哲人的主张。</p></li><li><p>但是，这并不是说你要一直这样下去。如果不能感到幸福的话，就不可以“一直这样”，不可以止步不前，必须不断向前迈进。</p></li><li><p>重要的不是被给予了什么，而是如何去利用被给子的东西。</p></li><li><p>问题不在于过去而在于现在。现在你了解了生活方式。如果是这样的话，接下来的行为就是你自己的责任了。无论是继续选择与之前一样的生活方式还是重新选择新的生活方式，那都在于你自己。</p></li><li><p>人无论在何时也无论处于何种环境中都可以改变。你之所以无法改变，是因为自己下了“不改变”的决心。</p></li><li><p>阿德勒心理学就是勇气心理学。你之所以不幸并不是因为过去或者环境，更不是因为能力不足，你只不过是缺乏“勇气”，可以说是缺乏“获得幸福的勇气”。</p></li><li><p>应该去做——这一简单的课题摆在面前，但却不断地扯出各种“不能做的理由”，你难道不认为这是一种很痛苦的生活方式吗？梦想着做小说家的他，正是“自己”把人生变得复杂继而难以获得幸福。</p></li><li><p>阿德勒的目的论是说：“无论之前的人生发生过什么，都对今后的人生如何度过没有影响。”决定自己人生的是活在“此时此刻”的你自己。</p></li><li><p>你由于太惧怕人际关系所以才会变得讨厌自己，你是在通过自我厌弃来逃避人际关系。</p></li><li><p>我们无法改变客观事实，但可以任意改变主观解释。并且，我们都活在主观世界中。</p></li><li><p>我们应该摈弃自卑感，进一步向前；不满足于现状，不断进步；要更加幸福。如果是这样的自卑感，那就没有任何问题。　但是，有些人无法认清“情况可以通过现实的努力而改变”这一事实，根本没有向前迈进的勇气。他们什么都不做就断定自己不行或是现实无法改变。</p></li><li><p>哲人：虽然苦于强烈的自卑感，但却没有勇气通过努力或成长之类的健全手段去进行改变。即便如此，又没法忍受“因为有A所以才做不到B”之类的自卑情结，无法接受“无能的自己”。如此一来，人就会想要用更加简便的方法来进行补偿。　青年：怎么做呢？　哲人：表现得好像自己很优秀，继而沉浸在一种虚假的优越感之中。　青年：虚假的优越感？　哲人：一个很常见的例子就是“权势张扬”。　青年：那是什么呢？　哲人：例如大力宣扬自己是权力者——可以是班组领导，也可以是知名人士，其实就是在通过此种方式来显示自己是一种特别的存在。虚报履历或者过度追逐名牌服饰等也属于一种权势张扬、具有优越情结的特点。这些情况都属于“我”原本并不优秀或者并不特别。而通过把“我”和权势相结合，似乎显得“我”很优秀。这也就是“虚假优越感”。　青年：其根源在于怀有强烈的自卑感吧？</p></li><li><p>刚开始提到的那些闭门不出者就常常沉浸在以不幸为武器的优越感中。阿德勒甚至指出：“在我们的文化中，弱势其实非常强大而且具有特权。”</p></li><li><p>如果从距离和深度这一观点来考虑的话，工作上的人际关系可以说门槛最低。工作上的人际关系因为有着成果这一简单易懂的共通目标，即使有些不投缘也可以合作或者说必须合作；而且，因”工作“这一点结成的关系，在下班或者转行后就又可以变回他人关系。</p></li><li><p>很多人认为朋友越多越好，但果真如此吗？朋友或熟人的数量没有任何价值。这是与爱之主题有关的话题，我们应该考虑的是关系的距离和深度。</p></li><li><p>只要你变了，周围也会改变。必须要有所改变。阿德勒心理学不是改变他人的心理学，而是追求自我改变的心理学。不能等着别人发生变化，也不要等着状况有所改变，而是由你自己勇敢迈出第一步。</p></li><li><p>当人能够感觉到”与这个人在一起可以无拘无束“的时候，才能够体会到爱。既没有自卑感也不必炫耀优越性，能够保持一种平静而自然的状态。真正的爱应该是这样的。</p></li><li><p>当人能够感觉到”与这个人在一起可以无拘无束“的时候，才能够体会到爱。既没有自卑感也不必炫耀优越性，能够保持一种平静而自然的状态。真正的爱应该是这样的。　另一方面，束缚是想要支配对方的表现，也是一种基于不信任感的想法。与一个不信任自己的人处在同一个空间里，那就根本不可能保持一种自然状态。</p></li><li><p>阿德勒把这种企图设立种种借口来回避人生课题的情况叫作”人生谎言‘。　青年：……　哲人：这词很犀利吧。对于自己目前所处的状态，把责任转嫁给别人，通过归咎于他人或者环境来回避人生课题。</p></li><li><p>决定你的生活方式（人生状态）的不是其他任何人，而是你自己这一事实。</p></li><li><p>我们人类并不是会受原因论所说的精神创伤所摆弄的脆弱存在。从目的论的角度来讲，我们是用自己的手来选择自己的人生和生活方式。我们有这种力量。</p></li><li><p>根本没必要被别人认可，也不要去寻求认可。这一点必须事先强调一下。</p></li><li><p>如果做了恰当的事情就能够得到表扬，而如果做了不恰当的事情就会受到惩罚。阿德勒严厉批判这种赏罚式的教育。在赏罚式教育之下会产生这样一种错误的生活方式，那就是“如果没人表扬，我就不去做好事”或者是“如果没人惩罚，我也做坏事”。是先有了希望获得表扬这个目的，所以才去捡垃圾。并且，如果不能够得到任何人的表扬，那就会很愤慨或者是下决心再也不做这样的事情。很明显，这是一种不正常的想法。</p></li><li><p>如果一味寻求别人的认可、在意别人的评价，那最终就会活在别人的人生中。</p></li><li><p>“倘若自己都不为自己活出自己的人生，那还有谁会为自己而活呢？”你就活在自己的人生中。要说为谁活着，那当然是为你自己。假如你不为自己而活的话，那谁会为你而活呢？我们最终还是为自己活着。没理由不可以这样想。</p></li><li><p>过于希望得到别人的认可，就会按照别人的期待去生活。也就是舍弃真正的自我，活在别人的人生之中。而且，请你记住，假如说你“不是为了满足他人的期待而活”，那他人也“不是为了满足你的期待而活”。当别人的行为不符合自己的想法的时候也不可以发怒。这也是理所当然的事情。</p></li><li><p>事实上，来接受心理咨询辅导的人几乎没有任性者。反而很多人是苦恼于要满足别人的期待、满足父母或老师的期待，无法按照自己的想法去生活。</p></li><li><p>在了解孩子干什各的基础上对其加以守护。如果就学习而言，告诉孩子这是他自己的课题，在他想学习的时候父母要随时准备给予帮助，但绝不对孩子的课题妄加干涉。在孩子没有向你求助的时候不可以指手画脚。</p></li><li><p>辅导顾问要竭尽全力地加以援助，但不可以妄加干涉。某个国家有这么一句谚语：可以把马带到水边，但不能强迫其喝水。阿德勒心理学中的心理咨询辅导以及对别人的一切援助都遵循这个要求。倘若无视本人的意愿而强迫其“改变”，那结果只会是日后产生更加强烈的反作用。</p></li><li><p>干涉甚至担负起别人的课题这会让自己的人生沉重而痛苦。如果你正在为自己的人生而苦恼——这种苦恼源于人际关系——那首先请弄清楚“这不是自己的课题”这一界限；然后，请丢开别人的课题。这是减轻人生负担，使其变得简单的第一步。</p></li><li><p>信任这一行为也需要进行课题分离。信任别人，这是你的课题。但是，如何对待你的信任，那就是对方的课题了。如果不分清界限而是把自己的希望强加给别人的话，那就变成粗暴的“干涉”了。</p></li><li><p>关于自己的人生你能够做的就只有“选择自己认为最好的道路”。另一方面，别人如何评价你的选择，那是别人的课题，你根本无法左右。</p></li><li><p>人为什么会如此在意别人的视线呢？阿德勒心理学给出的答案非常简单，那就是因为你还不会进行课题分离。把原本应该是别人的课题也看成是自己的课题。</p></li><li><p>如果生气的话，就根本无法冷静思考。认为“因为有那样一个上司，所以无法好好工作”，这完全是原因论。请不要这样想，而是要反过来这样看：“因为不想工作，所以才制造出一个讨厌的上司。”或者认为：“因为不愿意接受无能的自己，所以才制造出一个无能的上司。”这就成了目的论式的想法。</p></li><li><p>那么，假如你会进行课题分离又会如何呢？也就是说，无论上司怎么蛮不讲理地乱发脾气，那都不是“我”的课题。毫不讲理这件事情是上司自己应该处理的课题，既没必要去讨好，也没必要委曲求全，我应该做的就是诚实面对自己的人生、正确处理自己的课题。如果你能够这样去理解，事情就会截然不同了。</p></li><li><p>首先要思考一下“这是谁的课题”。然后进行课题分离——哪些是自己的课题，哪些是别人的课题，要冷静地划清界限。而且，不去干涉别人的课题也不让别人干涉自己的课题这就是阿德勒心理学给出的具体而且有可能彻底改变人际关系烦恼的具有划时代意义的观点。</p></li><li><p>如果距离太近，贴在一起，那就无法与对方正面对话。虽说如此，但距离也不可以太远。父母如果一味训斥孩子，心就会疏远。如果这样的话，孩子甚至都不愿与父母商量，父母也不能提供适当的援助。伸伸手即可触及，但又不踏入对方领域，保持这种适度距离非常重要。</p></li><li><p>如果人际关系中有“回报思想”存在，那就会产生“因为我为你做了这些，所以你就应该给予相应回报”这样的想法。当然，这是一种与课题分离相悖的思想。我们既不可以寻求回报，也不可以受其束缚。</p></li><li><p>而且，反复干涉的结果会是孩子什么也学不到，最终还会失去面对人生课题的勇气。阿德勒说：“没有学会直面困难的孩子最终会想要逃避一切困难。”</p></li><li><p>阿德勒心理学中有反常识的方面：否定原因论、否定精神创伤、采取目的论；认为人的烦恼全都是关于人际关系的烦恼；此外，不寻求认可或者课题分离也全都是反常识的理论。</p></li><li><p>为了满足别人的期望而活以及把自己的人生托付给别人，这是一种对自己撒谎也不断对周围人撒谎的生活方式。</p></li><li><p>选择了不自由生活方式的大人看着自由活在当下的年轻人就会批判其“享乐主义”。当然，这其实是为了让自己接受不自由生活而捏造出的一种人生谎言。选择了真正自由的大人就不会说这样的话，相反还会鼓励年轻人要勇于争取自由。</p></li><li><p>真正的自由是一种把滚落下来的自己从下面向上推的态度。</p></li><li><p>石块无力。一旦开始从斜坡上滚落，就一直会按照重力或惯性等自然法则不停滚动。但是，我们并不是石块，是能够抵抗倾向性的存在，可以让滚落的自己停下来并重新爬上斜坡。也许认可欲求是自然性的欲望。那么，难道为了获得别人的认可就要一直从斜坡上滚落下去吗？难道要像滚落的石头一样不断磨损自己，直至失去形状变成浑圆吗？这样产生的球体能叫“真正的自我”吗？根本不可能！</p></li><li><p>“自由就是被别人讨厌”</p></li><li><p>是你被某人讨厌。这是你行使自由以及活得自由的证据，也是你按照自我方针生活的表现。</p></li><li><p>哲人：也就是说“自由就是被别人讨厌”。　青年：什、什么？！　哲人：是你被某人讨厌。这是你行使自由以及活得自由的证据，也是你按照自我方针生活的表现。　青年：哎、哎呀，但是　哲人：的确，招人讨厌是件痛苦的事情。如果可能的话，我们都想毫不讨人嫌地活着，想要尽力满足自己的认可欲求。但是，八面玲珑地讨好所有人的生活方式是一种极其不自由的生活方式，同时也是不可能实现的事情。　如果想要行使自由，那就需要付出代价。而在人际关系中，自由的代价就是被别人讨厌。</p></li><li><p>毫不在意别人的评价、不害怕被别人讨厌、不追求被他人认可，如果不付出以上这些代价，那就无法贯彻自己的生活方式，也就是不能获得自由。</p></li><li><p>哲人：我是说不要害怕被人讨厌。　青年：但是，那……　哲人：并不是说要去故意惹人讨厌或者是去作恶。这一点请不要误解。</p></li><li><p>不畏惧被人讨厌而是勇往直前，不随波逐流而是激流勇进，这才是对人而言的自由。如果在我面前有“被所有人喜欢的人生”和“有人讨厌自己的人生”这两个选择让我选的话，我一定会毫不犹豫地选择后者。比起别人如何看自己，我更关心自己过得如何。也就是想要自由地生活。</p></li><li><p>获得幸福的勇气也包括“被讨厌的勇气”。一旦拥有了这种勇气，你的人际关系也会一下子变得轻松起来。</p></li><li><p>我改变了，发生变化的只是“我”。作为结果，对方会怎样我不知道，也无法左右，这也是课题分离。当然，随着我的变化——不是通过我的变化——对方也会发生改变。也许很多情况下对方不得不改变，但那不是目的，而且也可能不会发生。总之，把改变自己当成操纵他人的手段是一种极其错误的想法。</p></li><li><p>只做“把马带到水边”的努力，是否喝水是那个人的课题。</p></li><li><p>要想缔结良好的人际关系，需要保持一定距离：太过亲密就无法正面对话。但是，距离也不可以太远。“课题分离不是为了疏远他人，而是为了解开错综复杂的人际关系之线。</p></li><li><p>人际关系并不止于课题分离。相反，分离课题是人际关系的出发点。</p></li><li><p>不能进行“课题分离”、一味拘泥于认可欲求的人也是极其以自我为中心的人。</p></li><li><p>请你考虑一下认可欲求的实质——他人如何关注自己、如何评价自己？又在多大程度上满足自己的欲求？受这种认可欲求束缚的人看似在看着他人，但实际上眼里却只有自己。失去了对他人的关心而只关心“我”，也就是以自我为中心。</p></li><li><p>就是直面”人生课题“。也就是不回避工作、交友、爱之类的人际关系课题，要积极主动地去面对。如果你认为自己就是世界的中心，那就丝毫不会主动融入共同体中，因为一切他人都是”为我服务的人“，根本没必要由自己采取行动。</p></li><li><p>当我们在人际关系中遇到困难或者看不到出口的时候，首先应该考虑的是”倾听更大共同体的声音“这一原则。</p></li><li><p>不可以批评也不可以表扬，这就是阿德勒心理学的立场。</p></li><li><p>阿德勒心理学之所以强烈否定赏罚教育，就因为它是为了操纵孩子。</p></li><li><p>自卑感原本就是从纵向关系中产生的一种意识。　只要能够对所有人都建立起”虽不同但平等“的横向关系，那就根本不会产生自卑情结。</p></li><li><p>人为什么会去干涉别人呢？其背后实际上也是一种纵向关系。正因为把人际关系看成纵向关系、把对方看得比自己低，所以才会　去干涉。希望通过干涉行为把对方导向自己希望的方向。这是坚信自己正确而对方错误。</p></li><li><p>如果眼前有一个非常苦恼的人，那总不能置之不理吧？这种情况也可以说一句”我若插手那就是干涉“而什么也不做吗？　哲人：不可以置之不问。需要做一些不是干涉的”援助“。</p></li><li><p>援助的大前提是课题分离和横向关系。在理解了学习是孩子的课题这个基础上再去考虑能做的事情，具体就是不去居高临下地命令其学习，而是努力地帮助他本人建立”自己能够学习“的自信以及提高其独立应对课题的能力。</p></li><li><p>而是在课题分离的前提下帮助他用自己的力量去解决，也就是”可以把马带到水边，但不能强迫其喝水“。直面课题的是其本人，下定决心的也是其本人。</p></li><li><p>既不表扬也不批评。阿德勒心理学把这种基于横向关系的援助称为”鼓励“。</p></li><li><p>人害怕面对课题并不是因为没有能力。阿德勒心理学认为这不是能力问题，纯粹是”缺乏直面课题的‘勇气’“。如果是这样的话，那就首先应该找回受挫的勇气。</p></li><li><p>首先应该进行课题分离，然后应该在接受双方差异的同时建立平等的横向关系。”鼓励“则是这种基础之上的一种方法。</p></li><li><p>最重要的是不”评价“他人，评价性的语言是基于纵向关系的语言。如果能够建立起横向关系，那自然就会说出一些更加真诚地表示感谢、尊敬或者喜悦的话。</p></li><li><p>人只有在能够感觉自己有价值的时候才可以获得勇气。</p></li><li><p>通过为共同体也就是他人服务能够体会到”我对别人有用“，不是被别人评价说”很好“，而是主观上就能够认为”我能够对他人做出贡献“，只有这样我们才能够真正体会到自己的价值。</p></li><li><p>不能够表扬，也不可以批评。评价别人的话全都出于”纵向关系“，而我们必须建立起”横向关系“。还有，我们只有能够感觉自己对别人有用的时候才能体会到自己的价值……</p></li><li><p>自我肯定是明明做不到但还是暗示自己说”我能行“或者”我很强“，也可以说是一种容易导致优越情结的想法，是对自己撒谎的生活方式。　而另一方面，自我接纳是指假如做不到就诚实地接受这个”做不到的自己“，然后尽量朝着能够做到的方向去努力，不对自己撒谎。</p></li><li><p>我们无法改变”被给予了什么“。但是，关于”如何去利用被给予的东西“，我们却可以用自己的力量去改变。这就是不去关注”无法改变的“，而是去关注”可以改变的‘这就是我所说的自我接纳。</p></li><li><p>只有我们选择了无条件的信赖，才可以构筑更加深厚的关系。</p></li><li><p>现在认为“无条件地信赖别人只会遭到背叛”。但是，决定背不背叛的不是你，那是他人的课题。你只需要考虑“我该怎么做”。“如果对方讲信用我也给予信任”，这只不过是一种基于抵押或条件的信用关系。</p></li><li><p>如果你并不想与那个人搞好关系的话，也可以用手中的剪刀彻底剪断关系，因为剪断关系是你自己的课题。</p></li><li><p>青年：那么，假设我为了和朋友搞好关系，给予了对方无条件的信赖。为朋友四处奔走，不计回报地慷慨解囊，总之就是费时又费力。即使如此依然会遭到背叛。怎么样呢？如果遭到如此信赖的朋友的背叛，那一定会导致“他者即敌人”的生活方式。不是这样吗？　哲人：你好像还没能理解信赖的目的。例如，假设你在恋爱关系中怀疑“她可能不专一”。并且还积极寻找对方不专一的证据。你认为结果会怎样呢？　青年：哎呀，这种事要看情况而定。　哲人：不，任何情况都会发现像山一样的不专一证据。　青年：啊？为什么？　哲人：对方无意的言行、与别人通电话时的语气、联系不上的时间……如果用怀疑的眼光去看，所有的事情看上去都会成为“不专一的证据”，哪怕事实并非如此。　青年：嗯。　哲人：你现在一味地担心“被背叛”，也只关注因此受到的伤痛。但是，如果不敢去信赖别人，那最终就会与任何人都建立不了深厚的关系。　青年：哎呀，我明白您的意思。建立深厚关系是信赖的重大目标。但是，害怕被别人背叛也是一种无法克服的事实吧？　哲人：如果关系浅，破裂时的痛苦就会小，但这种关系在生活中产生的喜悦也小。只有拿出通过“他者信赖”进一步加深关系的勇气之后，人际关系的喜悦才会增加，人生的喜悦也会随之增加。</p></li><li><p>只要能够接受真实的自己并看清“自己能做到的”和“自己做不到的”，也就可以理解背叛是他人的课题，继而也就不难迈出迈向他者信赖的步伐了。</p></li><li><p>青年：您是说是否背叛是他人的课题，不是自己所能左右的事情？要做到肯定性的达观？先生的主张总是忽视感情！遭到背叛时的怒气和悲伤又该怎么办呢？　哲人：悲伤的时候尽管悲伤就可以。因为，正是想要逃避痛苦或悲伤才不敢付渚行动，以至于与任何人都无法建立起深厚的关系。　请你这样想。我们可以相信也可以怀疑；并且，我们的目标是把别人当作朋友。如此一来，是该选择信任还是怀疑，答案就非常明显了。</p></li><li><p>首先，真诚地接受不能交换的“这个我”，这就是自我接纳。同时，对他人寄予无条件的信赖即他者信赖。</p></li><li><p>要想获得归属感就必须把他人看作伙伴，而要做到视他人为伙伴就需要自我接纳和他者信赖。</p></li><li><p>为了方便起见，前面我一直按照自我接纳、他者信赖、他者贡献这种顺序来进行说明。但是，这三者是缺一不可的整体。　正因为接受了真实的自我——也就是“自我接纳”——才能够不惧背叛地做到“他者信赖”；而且，正因为对他人给予无条件的信赖并能够视他人为自己的伙伴，才能够做到“他者贡献”；同时，正因为对他人有所贡献，才能够体会到“我对他人有用”进而接受真实的自己，做到“自我接纳”</p></li><li><p>可以迷路也可以走偏，只要不再从属于纵向关系，不畏惧惹人讨厌地自由前行就可以。</p></li><li><p>任何情况下都只是攻击我的“那个人”有问题，而绝不是“大家”的错。</p></li><li><p>人际关系不顺利既不是因为口吃也不是因为脸红恐惧症，真正的问题在于无法做到自我接纳、他者信赖和他者贡献，却将焦点聚集到微不足道的一个方面并企图以此来评价整个世界。这就是缺乏人生和谐的错误生活方式。</p></li><li><p>判断你的贡献是否起作用的不是你，那是他人的课题，是你无法干涉的问题。是否真正作出了贡献，从原理上根本无从了解。也就是说，进行他者贡献时候的我们即使作出看不见的贡献，只要能够产生“我对他人有用”的主观感觉即“贡献感”也可以。</p></li><li><p>如果能够真正拥有贡献感，那就不再需要他人的认可。因为即使不特意去寻求他人的认可，也可以体会到“我对他人有用”。也就是说，受认可欲求束缚的人不具有共同体感觉，还不能做到自我接纳、他者信赖和他者贡献。</p></li><li><p>不了解这一点的大人们总是想要强迫年轻人过“线”一样的人生。在他们看来，上好大学、进好企业、拥有稳定的家庭，这样的轨道才是幸福的人生。但是，人生不可能是一条线。</p></li><li><p>如果人生是一条线，那么人生规划就有可能。但是，我们的人生只是点的连续。计划式的人生不是有没有必要，而是根本不可能。</p></li><li><p>哲人：请你想象一下自己站在剧场舞台上的样子。此时，如果整个会场都开着灯，那就可以看到观众席的最里边。但是，如果强烈的聚光灯打向自己，那就连最前排也看不见。　我们的人生也完全一样。正因为把模糊而微弱的光打向人生整体，所以才能够看到过去和未来；不，是感觉能够看得到。但是，如果把强烈的聚光灯对准“此时此刻”，那就会既看不到过去也看不到未来。　青年：强烈的聚光灯？　哲人：是的。我们应该更加认真地过好“此时此刻”。如果感觉能够看得到过去也能预测到未来，那就证明你没有认真地活在“此时此刻”，而是生活在模糊而微弱的光中。　人生是连续的刹那，根本不存在过去和未来。你是想要通过关注过去或未来为自己寻找免罪符。过去发生了什么与你的“此时此刻”没有任何关系，未来会如何也不是“此时此刻”要考虑的问题。假如认真地活在“此时此刻”，那就根木不会说出那样的话。</p></li><li><p>哲人：如果站在弗洛伊德式原因论的立场上，那就会把人生理解为基于因果律的一个长故事。何时何地出生、度过了什么样的童年时代、从什么样的学校毕业、进了什么样的公司，正是这些因素决定了现在的我和将来的我。　的确，把人生当作故事是很有趣的事情。但是，在故事的前面部分就能看到“模糊的将来”；并且，人们还会想要按照这个故事去生活。我的人生就是这样，所以我只能照此生活，错不在我而在于过去和环境。这里搬出来的过去无非是一种免罪符，是人生的谎言。　但是，人生是点的连续、是连续的刹那。如果能够理解这一点，那就不再需要故事。</p></li><li><p>生活方式说的是“此时此刻”，是可以按照自己意志改变的事情。像直线一样的过去的生活只不过是在你反复下定决心“不做改变”的基础上才貌似成了直线而己。并且，将来的人生也完全是一张白纸，并未铺好行进的轨道。这里没有故事。</p></li><li><p>聚焦“此时此刻”是认真而谨慎地做好现在能做的事情。</p></li><li><p>青年：认真而谨慎地生活？　哲人：例如，虽然想上大学但却不想学习，这就是没有认真过好“此时此刻”的态度。当然，考试也许是很久之后的事情，也不知道该学到什么程度，所以也许会感到麻烦。但是，每天进步一点点也可以，解开一个算式或者记住一个单词都可以。也就是要不停地跳舞。如此一来，势必会有“今天能够做到的事情”。今天这一天就为此存在，而不是为遥远的将来的考试而存在。</p></li><li><p>为遥远的将来设定一个目标，并认为现在是其准备阶段。一直想着“真正想做的是这样的事情，等时机到了就去做”，是一种拖延人生的生活方式。只要在拖延人生，我们就会无所进展，只能每天过着枯燥乏味的单调生活。因为在这种情况下，人就会认为“此时此刻”只是准备阶段和忍耐阶段。</p></li><li><p>为遥远的将来设定一个目标，并认为现在是其准备阶段。一直想着“真正想做的是这样的事情，等时机到了就去做”，是一种拖延人生的生活方式。只要在拖延人生，我们就会无所进展，只能每天过着枯燥乏味的单调生活。因为在这种情况下，人就会认为“此时此刻”只是准备阶段和忍耐阶段。　但是，为了遥远将来的考试而努力学习的“此时此刻”却是真实的存在。</p></li><li><p>人生很简单，并不是什么深刻的事情。如果认真过好了每一个刹那，就没有什么必要令其过于深刻。</p></li><li><p>站在现实性角度的时候，人生总是处于完结状态。</p></li><li><p>人生中最大的谎言就是不活在“此时此刻”。纠结过去、关注未来，把微弱而模糊的光打向人生整体，自认为看到了些什么。你之前就一直忽略“此时此刻”，只关注根本不存在的过去和未来。对自己的人生和无可替代的刹那撒了一个大大的谎言。</p></li><li><p>甩开人生的谎言，毫不畏惧地把强烈的聚光灯打向“此时此刻”。</p></li><li><p>因为过去和未来根本不存在，所以才要谈现在。起决定作用的既不是昨天也不是明天，而是“此时此刻”。</p></li><li><p>放弃“不做改变”的决心，选择新的生活方式</p></li><li><p>哲人：所以阿德勒在说了“并不存在普遍性的人生意义”之后还说：“人生意义是自己赋予自己的。”</p></li><li><p>我们要像跳舞一样认真过好作为刹那的“此时此刻”，既不看过去也不看未来，只需要过好每一个完结的刹那。没必要与谁竞争，也不需要目的地，只要跳着，就一定会到达某一个地方。</p></li><li><p>如果“我”改变，“世界”就会改变。世界不是靠他人改变而只能靠“我”来改变。</p></li><li><p>“必须有人开始。即使别人不合作，那也与你无关。我的意见就是这样。应该由你开始，不用去考虑别人是否合作。”</p></li><li><p>耀眼的光芒！”是的，那种光强烈到根本看不到明天之类的事情。</p></li><li><p>“世界很简单，人生也是一样！”</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Growth </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reading List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch学习资料及笔记</title>
      <link href="/2021/01/08/python/ml/pytorch-xue-xi-zi-liao-ji-bi-ji/"/>
      <url>/2021/01/08/python/ml/pytorch-xue-xi-zi-liao-ji-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><hr><p><a href="https://www.youtube.com/watch?v=Wo5dMEP_BbI&list=PLQVvvaa0QuDcjD5BAw2DxE6OF2tius3V3" target="_blank" rel="noopener">Neural Networks from Scratch</a></p><blockquote><p>“What I cannot create, I do not understand” - Richard Feynman</p></blockquote><hr><p><a href="https://www.youtube.com/watch?v=EMXfZB8FVUA&list=PLqnslRFeH2UrcDBWF5mfPGpqQDSta6VK4" target="_blank" rel="noopener">PyTorch Tutorial by Python Engineer</a></p><hr><p><a href="https://space.bilibili.com/88461692/channel/detail?cid=26587" target="_blank" rel="noopener">3Blue1Brown深度学习专题</a></p><blockquote><p>☆☆☆☆☆<br>讲解深度学习内在过程 </p></blockquote><hr><p><a href="https://www.youtube.com/playlist?list=PLZbbT5o_s2xrfNyHZsM6ufI0iZENK9xgG" target="_blank" rel="noopener">Neural Network Programming - Deep Learning with PyTorch</a></p><blockquote><p>☆☆☆☆☆<br>超棒的教学视频，把底层原理到实现的具体过程讲得通俗易懂</p></blockquote><hr><p><a href="https://github.com/yunjey/pytorch-tutorial" target="_blank" rel="noopener">Pytorch-tutorial</a></p><blockquote><p>一个韩国小哥哥写的<strong>非常精炼</strong>的Pytorch教程，大部分模型用30行代码完成</p></blockquote><hr><p>PyTorch Zero To All</p><ul><li><a href="https://www.youtube.com/watch?v=SKq-pmkekTk" target="_blank" rel="noopener">Youtube视频教程</a></li><li><a href="https://github.com/hunkim/PyTorchZeroToAll" target="_blank" rel="noopener">github配套代码</a></li></ul><blockquote><p>一个韩国小哥哥的教程，教学视频讲得很形象</p></blockquote><hr><p><a href="https://github.com/zergtant/pytorch-handbook" target="_blank" rel="noopener">pytorch-handbook</a></p><blockquote><p> 比较详细的Pytorch中文教程，从官方的60分钟入门简介到神经网络再到应用均进行了介绍</p></blockquote><hr><p><a href="https://atcold.github.io/pytorch-Deep-Learning/zh/" target="_blank" rel="noopener">深度学习课程 by Yann LeCun 和 Alfredo Canziani</a></p><hr><p><a href="https://www.youtube.com/watch?v=CqOfi41LfDw&list=PLblh5JKOoLUIxGDQs4LFFD--41Vzf-ME1" target="_blank" rel="noopener">StatQuest with Josh Starmer</a></p><blockquote><p>神经网络内部推导</p></blockquote><hr><ul><li><p><a href="https://www.youtube.com/watch?v=MswxJw-8PvE&list=PLaiC38QTRBdzy23k5xtZXDrw0rO5GY-vT&index=8" target="_blank" rel="noopener">PyTorch Autograd Explained - In-depth Tutorial</a></p></li><li><p><a href="https://www.youtube.com/watch?v=syLFCVYua6Q&list=PLaiC38QTRBdzy23k5xtZXDrw0rO5GY-vT&index=4" target="_blank" rel="noopener">PyTorch Hooks Explained - In-depth Tutorial</a></p><ul><li><a href="https://likewind.top/2019/07/26/pytorch-hook/" target="_blank" rel="noopener">PyTorch Hook 简单教程</a></li></ul></li></ul><p><img src="https://s2.loli.net/2022/03/17/KV41WFhpBAGgnUH.png" alt="20220317143959"></p><hr><p>其他资料：<br><a href="https://handbook.pytorch.wiki/" target="_blank" rel="noopener">PyTorch 中文手册</a><br><a href="https://www.zhihu.com/question/55720139/answer/147148105" target="_blank" rel="noopener">新手如何入门pytorch？</a></p><hr><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="conda管理环境"><a href="#conda管理环境" class="headerlink" title="conda管理环境"></a>conda管理环境</h2><p>conda可以创建不同python版本的<a href="https://zhuanlan.zhihu.com/p/60647332" target="_blank" rel="noopener">虚拟环境</a></p><ul><li><p>创建虚拟环境：如环境名为dl，则 <code>conda create -n dl python=3.6</code></p></li><li><p>激活虚拟环境：<code>conda activate dl</code> </p></li><li><p>退出虚拟环境：<code>conda deactivate dl</code> </p></li><li><p>其他：</p><ul><li>删除一个已有环境：<code>conda remove --name dl --all</code></li><li>列出已有的环境：<code>conda info -e</code></li><li>安装package: <code>conda install -n dl numpy</code>, 如果不用-n指定环境名称，则默认安装在当前激活环境中</li></ul></li><li><p>pytorch中安装tensorboard及tensorboard<a href="https://pytorch.org/docs/stable/tensorboard.html" target="_blank" rel="noopener">使用示例</a></p><ul><li><a href="https://pytorch.org/tutorials/recipes/recipes/tensorboard_with_pytorch.html" target="_blank" rel="noopener">HOW TO USE TENSORBOARD WITH PYTORCH</a><ul><li>进入创建的环境，如 <code>conda activate dl</code>。在该环境中安装：<ul><li><code>conda install -c conda-forge tensorboard</code></li><li><code>conda install -c conda-forge protobuf</code></li></ul></li><li>在自己的.py文件中加入<code>from torch.utils.tensorboard import SummaryWriter</code>，则项目中会建立一个<code>runs</code>文件夹，该文件夹中保存该项目中tensorboard相关信息</li><li>cd到当前项目路径，运行<code>tensorboard --logdir=runs</code>，将localhost粘贴到浏览器中</li></ul></li></ul></li></ul><h2 id="pytorch维度解释"><a href="#pytorch维度解释" class="headerlink" title="pytorch维度解释"></a><a href="https://zhuanlan.zhihu.com/p/354201988" target="_blank" rel="noopener">pytorch维度解释</a></h2><blockquote><p>The way to understand the “axis” of numpy sum is that it collapses the specified axis.</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torchT1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>                   <span class="token punctuation">]</span><span class="token punctuation">)</span>T2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>T1<span class="token punctuation">,</span>T2<span class="token punctuation">)</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>T1<span class="token punctuation">,</span>T2<span class="token punctuation">)</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># torch.Size([2, 3, 3])</span><span class="token comment" spellcheck="true"># tensor([[[ 1,  2,  3],</span><span class="token comment" spellcheck="true">#          [ 4,  5,  6],</span><span class="token comment" spellcheck="true">#          [ 7,  8,  9]],</span><span class="token comment" spellcheck="true">#         [[10, 20, 30],</span><span class="token comment" spellcheck="true">#          [40, 50, 60],</span><span class="token comment" spellcheck="true">#          [70, 80, 90]]])</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>T1<span class="token punctuation">,</span>T2<span class="token punctuation">)</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>T1<span class="token punctuation">,</span>T2<span class="token punctuation">)</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># torch.Size([3, 2, 3])</span><span class="token comment" spellcheck="true"># tensor([[[ 1,  2,  3],</span><span class="token comment" spellcheck="true">#          [10, 20, 30]],</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#         [[ 4,  5,  6],</span><span class="token comment" spellcheck="true">#          [40, 50, 60]],</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#         [[ 7,  8,  9],</span><span class="token comment" spellcheck="true">#          [70, 80, 90]]])</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>T1<span class="token punctuation">,</span>T2<span class="token punctuation">)</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>T1<span class="token punctuation">,</span>T2<span class="token punctuation">)</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># torch.Size([3, 3, 2])</span><span class="token comment" spellcheck="true"># tensor([[[ 1, 10],</span><span class="token comment" spellcheck="true">#          [ 2, 20],</span><span class="token comment" spellcheck="true">#          [ 3, 30]],</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#         [[ 4, 40],</span><span class="token comment" spellcheck="true">#          [ 5, 50],</span><span class="token comment" spellcheck="true">#          [ 6, 60]],</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#         [[ 7, 70],</span><span class="token comment" spellcheck="true">#          [ 8, 80],</span><span class="token comment" spellcheck="true">#          [ 9, 90]]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h2><ul><li><a href="http://liangjie.xyz/blogs/Segmentation/" target="_blank" rel="noopener">应用于语义分割问题的深度学习技术综述</a><ul><li>包含多种经典网络的总结</li><li>包含常用数据集（rgb及深度数据集）的概述</li></ul></li></ul><h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><ul><li><a href="https://www.youtube.com/watch?v=syLFCVYua6Q&list=PLaiC38QTRBdzy23k5xtZXDrw0rO5GY-vT&index=4" target="_blank" rel="noopener">PyTorch Hooks Explained - In-depth Tutorial</a></li><li><a href="https://likewind.top/2019/07/26/pytorch-hook/" target="_blank" rel="noopener">PyTorch Hook 简单教程</a></li><li><a href="https://github.com/cosmic-cortex/pytorch-hooks-tutorial/blob/master/hooks.ipynb" target="_blank" rel="noopener">model中的hook例子</a></li></ul><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><ul><li><a href="https://cxybb.com/article/ChaoFeiLi/108950522" target="_blank" rel="noopener">以书为类比，解释Batch Normalization (BN)</a></li><li><a href="https://towardsdatascience.com/what-and-why-behind-fit-transform-vs-transform-in-scikit-learn-78f915cf96fe" target="_blank" rel="noopener">scikit-learn 中 fit_transform() 和 transform() 的原因</a><ul><li>训练数据用fit_transform</li><li>测试数据用transform，Using the transform method we can use the same mean and variance as it is calculated from our training data to transform our test data. Thus, the parameters learned by our model using the training data will help us to transform our test data.</li></ul></li><li><a href="https://zhuanlan.zhihu.com/p/87786297" target="_blank" rel="noopener"><code>__init__()</code>与<code>__getitem__()</code>及<code>__len__()</code></a><ul><li>Dataset类中的<strong>getitem</strong>和 <strong>len</strong>方法<ul><li>torch.utils.data.Dataset是PyTorch中用来表示数据集的抽象类，Dataset是一个包装类，用来将数据包装为Dataset类，然后传入DataLoader中从而使DataLoader类更加快捷的对数据进行操作。当处理自定义的数据集的时候<strong>必须继承Dataset,然后重写 <strong>len</strong>（）和<strong>getitem</strong>（）函数</strong></li></ul></li></ul></li></ul><p><img src="https://s2.loli.net/2022/03/13/XrPE4fNYJWR2mk8.png" alt="20220313235028"><br><img src="https://s2.loli.net/2022/03/13/tbWeJLgdlESyAKT.png" alt="20220313235204"><br><img src="https://s2.loli.net/2022/03/13/r85Hi3lnaGqLTBC.png" alt="20220313235602"></p><ul><li><p><a href="https://www.zhihu.com/question/56024942/answer/1850649283" target="_blank" rel="noopener">卷积神经网络中用1*1  卷积有什么作用或者好处呢？</a> </p><ul><li>如果卷积的输出输入都只是一个平面，那么1x1卷积核并没有什么意义，它是完全不考虑像素与周边其他像素关系。 但卷积的输出输入是长方体，所以1x1卷积实际上是对每个像素点，<strong>在不同的channels上进行线性组合</strong>（信息整合），且保留了图片的原有平面结构，调控depth，从而完成<strong>升维或降维</strong>的功能</li></ul></li><li><p>数据维度计算公式：<a href="https://stanford.edu/~shervine/teaching/cs-230/cheatsheet-convolutional-neural-networks" target="_blank" rel="noopener">Convolutional Neural Networks cheatsheet</a></p><p><img src="https://s2.loli.net/2022/03/15/AoLzlnaWZRreD8M.png" alt="20220315232040"></p></li><li><p>Why 2D batch normalisation is used in features and 1D in classifiers?</p><ul><li>There is no mathematical difference between them, except the dimension of input data.</li></ul></li></ul><p><strong>nn.BatchNorm2d only accepts 4D inputs while nn.BatchNorm1d accepts 2D or 3D inputs.</strong> And because of that, in features which has been constructed of nn.Conv2d layers, inputs are [batch, ch, h, w] (4D) we need BatchNorm2d and in classifier we have Linear layers which accept [batch, length] or [batch, channel, length] (2D/3D) so we need BatchNorm1d.</p><ul><li>多GPU<ul><li><a href="https://github.com/zergtant/pytorch-handbook/blob/master/chapter1/5_data_parallel_tutorial.ipynb" target="_blank" rel="noopener">多GPU运行pytorch</a></li><li><a href="https://github.com/zergtant/pytorch-handbook/blob/master/chapter4/4.5-multiply-gpu-parallel-training.ipynb" target="_blank" rel="noopener">多GPU并行训练</a></li><li><a href="https://github.com/zergtant/pytorch-handbook/tree/master/chapter4/distributeddataparallel" target="_blank" rel="noopener">多GPU分布式模型训练</a></li><li><a href="http://tangshusen.me/Dive-into-DL-PyTorch/#/chapter08_computational-performance/8.4_multiple-gpus" target="_blank" rel="noopener">多GPU计算</a></li></ul></li></ul><ul><li>torchsummary用于描述网络； thop用于统计模型的floating point operations per second （FLOPS）和参数量</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torchsummary<span class="token keyword">import</span> thop<span class="token keyword">class</span> <span class="token class-name">BaseNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_ch<span class="token punctuation">,</span> out_ch<span class="token punctuation">,</span> group<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span>in_ch<span class="token punctuation">,</span> out_channels<span class="token operator">=</span>out_ch<span class="token punctuation">,</span>                               groups<span class="token operator">=</span>group<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                               padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> xmodel <span class="token operator">=</span> BaseNet<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>input_tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span>input_size <span class="token operator">=</span> tuple<span class="token punctuation">(</span>input_tensor<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>torchsummary<span class="token punctuation">.</span>summary<span class="token punctuation">(</span>model<span class="token punctuation">,</span> input_size<span class="token operator">=</span>input_size<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"thop:"</span><span class="token punctuation">)</span>flops<span class="token punctuation">,</span> params <span class="token operator">=</span> thop<span class="token punctuation">.</span>profile<span class="token punctuation">(</span>model<span class="token operator">=</span>model<span class="token punctuation">,</span> inputs<span class="token operator">=</span><span class="token punctuation">(</span>input_tensor<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flops<span class="token punctuation">,</span> params<span class="token punctuation">)</span>输出：<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>        Layer <span class="token punctuation">(</span>type<span class="token punctuation">)</span>               Output Shape         Param <span class="token comment" spellcheck="true">#</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>            Conv2d<span class="token number">-1</span>             <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">]</span>             <span class="token number">162</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Total params<span class="token punctuation">:</span> <span class="token number">162</span>Trainable params<span class="token punctuation">:</span> <span class="token number">162</span>Non<span class="token operator">-</span>trainable params<span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Input size <span class="token punctuation">(</span>MB<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">0.09</span>Forward<span class="token operator">/</span>backward <span class="token keyword">pass</span> size <span class="token punctuation">(</span>MB<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">0.09</span>Params size <span class="token punctuation">(</span>MB<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">0.00</span>Estimated Total Size <span class="token punctuation">(</span>MB<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">0.19</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>thop<span class="token punctuation">:</span><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Register count_convNd<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'torch.nn.modules.conv.Conv2d'</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">[</span>WARN<span class="token punctuation">]</span> Cannot find rule <span class="token keyword">for</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.BaseNet'</span><span class="token operator">></span><span class="token punctuation">.</span> Treat it <span class="token keyword">as</span> zero Macs <span class="token operator">and</span> zero Params<span class="token punctuation">.</span><span class="token number">663552.0</span> <span class="token number">162.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>迁移学习<ul><li><a href="https://www.guru99.com/transfer-learning.html" target="_blank" rel="noopener">PyTorch Transfer Learning Tutorial with Examples</a><ul><li>预训练模型汇总：<a href="https://github.com/Cadene/pretrained-models.pytorch" target="_blank" rel="noopener">pretrained-models.pytorch</a></li></ul></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token punctuation">,</span> division<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets<span class="token punctuation">,</span> models<span class="token punctuation">,</span> transforms<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltdata_dir <span class="token operator">=</span> <span class="token string">"data/archive/data"</span>input_shape <span class="token operator">=</span> <span class="token number">224</span>mean <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span>std <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#data transformation</span>data_transforms <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'train'</span><span class="token punctuation">:</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>       transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span>input_shape<span class="token punctuation">)</span><span class="token punctuation">,</span>       transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token punctuation">,</span> std<span class="token punctuation">)</span>   <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">'validation'</span><span class="token punctuation">:</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>       transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span>input_shape<span class="token punctuation">)</span><span class="token punctuation">,</span>       transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token punctuation">,</span> std<span class="token punctuation">)</span>   <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span>image_datasets <span class="token operator">=</span> <span class="token punctuation">{</span>   x<span class="token punctuation">:</span> datasets<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>       os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>       transform<span class="token operator">=</span>data_transforms<span class="token punctuation">[</span>x<span class="token punctuation">]</span>   <span class="token punctuation">)</span>   <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'validation'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>dataloaders <span class="token operator">=</span> <span class="token punctuation">{</span>   x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>       image_datasets<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>       shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span>   <span class="token punctuation">)</span>   <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'validation'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>dataset_sizes <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> len<span class="token punctuation">(</span>image_datasets<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'validation'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>class_names <span class="token operator">=</span> image_datasets<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>classesdevice <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda:0"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>images<span class="token punctuation">,</span> labels <span class="token operator">=</span> next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span>dataloaders<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rows <span class="token operator">=</span> <span class="token number">4</span>columns <span class="token operator">=</span> <span class="token number">4</span>fig<span class="token operator">=</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span>rows<span class="token punctuation">,</span> columns<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>   plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>class_names<span class="token punctuation">[</span>labels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   img <span class="token operator">=</span> images<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   img <span class="token operator">=</span> std <span class="token operator">*</span> img <span class="token operator">+</span> mean   plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">## Load the model based on VGG19</span>vgg_based <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>vgg19<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">## freeze the layers</span><span class="token keyword">for</span> param <span class="token keyword">in</span> vgg_based<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   param<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># Modify the last layer</span>number_features <span class="token operator">=</span> vgg_based<span class="token punctuation">.</span>classifier<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>in_featuresfeatures <span class="token operator">=</span> list<span class="token punctuation">(</span>vgg_based<span class="token punctuation">.</span>classifier<span class="token punctuation">.</span>children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># Remove last layer</span>features<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>number_features<span class="token punctuation">,</span> len<span class="token punctuation">(</span>class_names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>vgg_based<span class="token punctuation">.</span>classifier <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>features<span class="token punctuation">)</span>vgg_based <span class="token operator">=</span> vgg_based<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>vgg_based<span class="token punctuation">)</span>criterion <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer_ft <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>vgg_based<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train_model</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> criterion<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> num_epochs<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    since <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch {}/{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> num_epochs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># set model to trainable</span>        <span class="token comment" spellcheck="true"># model.train()</span>        train_loss <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># Iterate over data.</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>dataloaders<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            inputs<span class="token punctuation">,</span> labels <span class="token operator">=</span> data            inputs <span class="token operator">=</span> inputs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            labels <span class="token operator">=</span> labels<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">with</span> torch<span class="token punctuation">.</span>set_grad_enabled<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>                loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>            train_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> inputs<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} Loss: {:.4f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                <span class="token string">'train'</span><span class="token punctuation">,</span> train_loss <span class="token operator">/</span> dataset_sizes<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time_elapsed <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> since    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Training complete in {:.0f}m {:.0f}s'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>        time_elapsed <span class="token operator">//</span> <span class="token number">60</span><span class="token punctuation">,</span> time_elapsed <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token keyword">def</span> <span class="token function">visualize_model</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> num_images<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    was_training <span class="token operator">=</span> model<span class="token punctuation">.</span>training    model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>    images_so_far <span class="token operator">=</span> <span class="token number">0</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> labels<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>dataloaders<span class="token punctuation">[</span><span class="token string">'validation'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            inputs <span class="token operator">=</span> inputs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            labels <span class="token operator">=</span> labels<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>            _<span class="token punctuation">,</span> preds <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                images_so_far <span class="token operator">+=</span> <span class="token number">1</span>                ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>num_images <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> images_so_far<span class="token punctuation">)</span>                ax<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>                ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'predicted: {} truth: {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>class_names<span class="token punctuation">[</span>preds<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> class_names<span class="token punctuation">[</span>labels<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                img <span class="token operator">=</span> inputs<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                img <span class="token operator">=</span> std <span class="token operator">*</span> img <span class="token operator">+</span> mean                ax<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>                <span class="token keyword">if</span> images_so_far <span class="token operator">==</span> num_images<span class="token punctuation">:</span>                    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span>mode<span class="token operator">=</span>was_training<span class="token punctuation">)</span>                    <span class="token keyword">return</span>        model<span class="token punctuation">.</span>train<span class="token punctuation">(</span>mode<span class="token operator">=</span>was_training<span class="token punctuation">)</span>vgg_based <span class="token operator">=</span> train_model<span class="token punctuation">(</span>vgg_based<span class="token punctuation">,</span> criterion<span class="token punctuation">,</span> optimizer_ft<span class="token punctuation">,</span> num_epochs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>visualize_model<span class="token punctuation">(</span>vgg_based<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://zhuanlan.zhihu.com/p/251068800" target="_blank" rel="noopener">CNN卷积核与通道讲解</a><ul><li>多通道卷积过程，应该是输入一张三通道的图片，这时有多个卷积核进行卷积，并且每个卷积核都有三通道，分别对这张输入图片的三通道进行卷积操作。每个卷积核，分别输出三个通道，这三个通道进行求和，得到一个featuremap，有多少个卷积核，就有多少个featuremap</li></ul></li><li>卷积神经网络中用<code>1*1</code> <a href="https://www.zhihu.com/question/56024942" target="_blank" rel="noopener">卷积有什么作用或者好处呢？</a></li><li><a href="https://blog.csdn.net/jinping_shi/article/details/52433975" target="_blank" rel="noopener">机器学习中正则化项L1和L2的直观理解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读“非暴力沟通”</title>
      <link href="/2020/11/26/growth/du-fei-bao-li-gou-tong/"/>
      <url>/2020/11/26/growth/du-fei-bao-li-gou-tong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.youtube.com/watch?v=8OkBpX1Tfgo&t=80s" target="_blank" rel="noopener">视频解读1：读《非暴力沟通》</a></p><p><a href="https://www.youtube.com/watch?v=IZ_ibVcClUw" target="_blank" rel="noopener">视频解读2：为什么我们开始拒绝与父母交流？</a></p><p><img src="https://i.loli.net/2021/02/26/inLpFAJSUdX4vxP.png" alt></p><ul><li>描述<strong>事实</strong><ul><li>不带主观评价；不要言过其实；一次只说一件事；不要推测对方意图</li></ul></li><li>表达<strong>感受</strong>和<strong>需要</strong><ul><li>情绪源于自身；第一人称描述（<strong>我感到…,因为我…</strong>）；示弱来解决冲突</li></ul></li><li>提出<strong>请求</strong><ul><li>从正面说；请求要具体</li><li><strong>请求不是命令，若无法满足请求，应了解原因和对方的感受，并给予尊重和理解</strong></li><li>愤怒背后其实是需求，应该根据需求提出我们的请求 愤怒-&gt;需求-&gt;请求 （观察，感受，需要，请求）</li></ul></li><li><strong>爱自己</strong><ul><li><strong>如果我们指责的那个人恰好是我们自己，那么，言下之意是：“我的行为不符合我的需要。”</strong> 如果我们专注于<strong>需要是否得到满足以及得到怎样的满足</strong>，我们就更有可能从自我评价中获益。</li></ul></li><li>充分表达愤怒<ul><li><strong>注意力放在自己的感受和需要上；直接说出我们的需要</strong></li><li>表达愤怒的四个步骤是：（1）停下来，除了呼吸，什么都别做；（2）想一想是什么想法使我们生气了；（3）体会自己的需要；（4）表达感受和尚未满足的需要。有时，<strong>在第3步和第4步之间，我们需要先倾听他人。在得到倾听和理解之后，他们也就可以静下心来体会我们的感受和需要</strong></li><li>给自己充分的时间来学习和运用非暴力沟通</li></ul></li></ul><h1 id="描述事实"><a href="#描述事实" class="headerlink" title="描述事实"></a>描述事实</h1><p>非暴力沟通的第一个要素是<strong>观察</strong>。将观察和评论混为一谈，别人就会倾向于听到批评，并反驳我们。非暴力沟通是动态的语言，不主张绝对化的结论。它提倡在特定的时间和情境中进行观察，并清楚地描述观察结果。</p><p>也可以进行<strong>反向思维</strong>。在与别人沟通时，不管是对方让你说了舒服还是不舒服的话，了解他的<strong>观察、感受、需要和请求</strong>后，我问自己是否愿意满足他的请求。</p><h1 id="表达感受"><a href="#表达感受" class="headerlink" title="表达感受"></a>表达感受</h1><p>为了更好地沟通情感，非暴力沟通主张使用<strong>具体的语言。</strong></p><pre><code>注意区分感受和想法。</code></pre><p>非暴力沟通的第二个要素是<strong>感受</strong>。通过建立表达感受的词汇表，我们可以更清楚地表达感受，从而使沟通更为顺畅。在表达感受时，<strong>示弱有助于解决冲突。</strong></p><h1 id="感受的根源"><a href="#感受的根源" class="headerlink" title="感受的根源"></a>感受的根源</h1><p>听到不中听的话时，我们有四种选择</p><p><del>第一种是认为自己犯了错。例如，有人气愤地说：“我从没见过像你这么自私的人！”这时，我们可能会自责：“哦，我没有考虑别人的感受，真是太自私了！”这会导致我们内疚、惭愧，甚至厌恶自己。</del></p><p><del>第二种是指责对方。这时，我们也许会驳斥对方：“你没有权利这么说！我一直都很在乎你的感受。你才自私！”在争吵时，我们一般会感到恼怒。</del></p><p>第三种是<strong>了解我们的感受和需要</strong>。这时，我们可能会发现我们有些伤心，因为我们看重信任和接纳。</p><p>第四种是<strong>用心体会他人的感受和需要</strong>。这时，我们也许就会想“他伤心可能是因为他需要体贴和支持”。</p><p>通过了解我们的需要、愿望、期待以及想法，我们<strong>不再指责他人，而承认我们的感受源于自身。</strong></p><p>如果我们想利用他人的内疚，我们通常采取的办法是，把自己不愉快的感受归咎于对方。家长也许会和孩子说：“你成绩不好让爸爸妈妈伤透了心！”言下之意是，他们快乐或不快乐是孩子的行为造成的。看到父母的痛苦，孩子可能会感到内疚，并因此调整行为来迎合他们。遗憾的是，<strong>这种调整只是为了避免内疚，而非出自对学习的热爱。</strong></p><p>使用以下表达方式时，我们可能就已经忽视了感受与自身的关系。1）只提及相关的事情。2）只提及他人的行为。3）指责他人。</p><p>我们可以通过     “<strong>我（感到）……因为我……</strong>”     这种表达方式来<strong>认识感受与自身的关系</strong>。</p><p>例如1）“看到公司海报出现拼写错误（事实），我很不高兴（感受）。因为我重视公司的形象（需要）。”2）“你没把饭吃完，妈妈感到失望。因为妈妈希望你能健康成长。”3）“老板说话不算数，我很生气。因为我想有个长假去看弟弟。”</p><blockquote><p>非暴力沟通需要：生命健康成长的要素</p></blockquote><p><strong>批评往往暗含着期待</strong>。对他人的批评实际上间接表达了我们尚未满足的需要。如果我们通过批评来提出主张，人们的反应常常是申辩或反击。反之，如果我们<strong>直接说出需要</strong>，其他人就较有可能作出积极的回应。</p><blockquote><p>从“情感的奴隶”到“生活的主人”</p></blockquote><p>第一阶段：“情感的奴隶”——我们认为自己有义务使他人快乐</p><p>在这个阶段，我们相信自己需要为他人负责——让他人快乐是我们的义务。如果别人不高兴，我们就会感到不安，觉得自己有责任做</p><p>点什么。此时，我们特别容易把亲人看作是负担。</p><p>第二阶段：“面目可憎”——此时，我们拒绝考虑他人的感受和需要</p><p>在这个阶段，我们发现，为他人的情绪负责，牺牲自己迎合他人，代价实在很大。想到日子过得这么憋屈，我们可能会很恼怒。此时，如果遭遇他人的痛苦，我们可能就会无动于衷：“这是你自己的问题！和我有什么关系？！”虽然不再愿意为他人负责，但我们还心存疑虑。因此，我们的态度也就显得生硬。</p><p><strong>第三阶段：“生活的主人”——我们意识到，虽然我们对自己的意愿、感受和行动负有完全的责任，但无法为他人负责。与此同时，我们还认识到，我们无法牺牲他人来满足自己的需要。</strong></p><p>在这个阶段，我们乐于互助。我们帮助他人，是出于爱，而不是出于恐惧、内疚或惭愧。那是自由而快乐的行为。此时，我们意识到，虽然我们对自己的意愿、感受和行动负有完全的责任，但无法为他人负责。我们还发现，人与人相互依存，损人无法真正利己。非暴力沟通正是想帮助我们<strong>既表达自己，又关心他人</strong>。</p><h1 id="请求帮助"><a href="#请求帮助" class="headerlink" title="请求帮助"></a>请求帮助</h1><blockquote><p>提出具体的请求</p></blockquote><p>首先，<strong>清楚地告诉对方，我们希望他们做什么</strong>。如果我们请求他人不做什么，对方也许会感到困惑，不知道我们到底想要什么。而且，这样的请求还容易引起别人的反感。</p><p>我们提出的<strong>请求越具体越好</strong>。如果我们的意思含糊不清，别人就难以了解我们到底想要什么。</p><blockquote><p>明确谈话的目的</p></blockquote><p>如果一个人<strong>提出了明确的请求，却没有提及感受和需要，也有可能导致交流的困难</strong>。例如，如果父母问“为什么还不去理发呢”，孩子一般会把它看作是命令或指责。如果父母想避免误解，那么，他们可以先说出感受和需要：“你的头发这么长，我们担心这会影响你的视线，特别是在骑自行车的时候。去理发好吗？”</p><blockquote><p>请求与命令</p></blockquote><p><strong>如果别人没有满足我们的请求，我们应该了解他们无法做到的原因，理解并尊重他们的感受、需要和立场。（这才是请求，而非命令）</strong></p><p>听到命令时，一个人只能看到两种选择：服从或反抗。不论如何，只要人们认为我们是在强迫他们，他们就不会乐于满足我们的需要。如果我们在过去常常指责他人，那么，我们的请求很可能就会被看作是命令。而一个经常受到指责的人也会倾向于将请求解读为命令。</p><p>如何区分命令和请求：<strong>请求没有得到满足时，提出请求的人如果批评和指责，那就是命令；如果想利用对方的内疚来达到目的，也是命令</strong>。在生活中，如果我们不想勉强人，那么，清楚地表明这一点是重要的——这有助于人们相信我们提出的是请求而非命令。<strong>在人们无法满足我们的愿望时，我们是否尊重他们的感受和需要最能体现我们提出的是请求还是命令</strong>。如果我们愿意去体会是什么使他们无法“是”，那么，根据我的定义，我们提出的就是请求而非命令。</p><p>如果我们有这样的想法，一旦别人没有满足我们的要求，我们难免就会指责他们。有一段时间，当我的小儿子布拉特没有倒垃圾时，我就有类似的想法。我们对家务活进行了分工，他负责倒垃圾。可是，他很不主动。为了让他去倒垃圾，每天我都会提醒他“这是你的任务”或“我们每个人都有自己的任务”。</p><p>后来，有一天晚上，我终于静下心来听他讲为什么他不愿倒垃圾。谈话后，我以《布拉特的心》为题写下了一段话：</p><p>“在印象中，如果我没照你说的去做，你就不会尊重我。如果我知道你并不想使唤我，在你叫我时，我会乐于回应你。如果你高高在上，像个盛气凌人的老板，你将会发现，你一头撞在了墙上。当你反复提醒我，你为我做的各种事情，你最好准备再次碰壁！你可以大声抱怨、责骂，但我仍不会去倒垃圾。即使你现在改变方式，我也需要时间忘记不快。”</p><p>通过这次谈话，布拉特认为我<strong>已经理解并尊重他的立场</strong>。在以后的日子里，他每天都主动倒垃圾。</p><blockquote><p>小结</p></blockquote><p>非暴力沟通的第四个要素是请求。我们告诉人们，为了改善生活，我们希望他们做什么。我们<strong>避免使用抽象的语言，而借助具体的描述</strong>，来提出请求。</p><p>在发言时，我们<strong>将自己想要的回应讲得越清楚，就越有可能得到理想的回应。</strong>由于我们所要表达的意思与别人的理解有可能不一致，有时，我们需要请求他人的反馈。特别是在集体讨论中发言时，我们需要<strong>清楚地表明自己的期待</strong>。否则，讨论可能只是在浪费大家的时间。</p><p>一旦人们认为不答应我们就会受到责罚，他们就会把我们的请求看作是命令。如果我们清楚地表达我们无意强人所难，人们一般会相信，我们提出的是请求而非命令。非暴力沟通的目的不是为了改变他人来迎合我们。相反，非暴力沟通<strong>重视每个人的需要</strong>，它的目的是帮助我们在诚实和倾听的基础上与人联系。</p><ul><li><p>非暴力沟通实例示例—劝好朋友戒烟</p><p>  艾伦和卡特是有30多年交情的老朋友。卡特每天要抽两包烟。多年来，艾伦想尽一切办法来让卡特戒烟，但都没有成功。在过去的几年，卡特咳嗽得越来越厉害。有一天，艾伦终于忍不住和卡特再一次谈到了戒烟。</p><p>  艾伦：“卡特，这个问题我们已经说过无数次了。不过，我还是想告诉你，我很害怕，你这样抽下去，很快就会完蛋！你是我最好的朋友，我不想失去你。请不要认为，我又在指责你。我真的没有。我只是很担心。”（在过去，艾伦在劝卡特戒烟时，常常会指责他。）</p><p>  卡特：“我知道你是在关心我。我们已经是老朋友了……”</p><p>  艾伦：（提出请求）“你愿意戒烟吗？”</p><p>  卡特：“我希望我能做到。”</p><p>  艾伦：（<strong>了解卡特无法做到的原因</strong>）“你不想戒烟，是因为你担心自己做不到吗？”</p><p>  卡特：“是的。你知道我已经戒过很多次了，但都没有成功。我想，别人会觉得我很没用。”</p><p>  艾伦：（猜测卡特会有什么请求）“我没有看轻你。即使你再次戒烟失败，我也不会看不起你。我只是希望你再试一试。”</p><p>  卡特：“谢谢。但又不是只有你一个人……从他们的眼中，我可以看出，他们认为我是个没用的人。”</p><p>  艾伦：（<strong>体会卡特的感受和需要</strong>）“如果不是担心别人的看法，你就会愿意再次戒烟，是吗？”</p><p>  卡特：“我不喜欢自己有烟瘾。我不希望自己听任烟瘾的摆布……”</p><p>  艾伦：（艾伦看着卡特的眼睛，点了点头。艾伦的眼神流露出他对卡特的关心。）</p><p>  卡特：“我的意思是说，我已经不喜欢抽烟了。特别是在公共场合抽烟，我会觉得很不好意思。”</p><p>  艾伦：（<strong>继续体会卡特的感受和需要</strong>）“听起来，你很想戒烟，可又担心会失败——你害怕这会影响到你的形象和信心。”</p><p>  卡特：“是的。我想这就是我的意思……你知道，我以前并没有提到这一点。当人们劝我戒烟时，我就会叫他们走开。我是想戒烟，</p><p>  但我不想任何人给我压力。”</p><p>  卡特：“我真的很感激你的关心。但是，如果我现在还做不到，你会介意吗？”</p><p>  艾伦：“当然不会！我只是希望你的健康状况能变好。”（因为艾伦提出的是真诚的请求，而非要求，不论卡特有怎样的反应，他们</p><p>  的关系都不会受影响。）</p><p>  卡特：“谢谢！也许我会再试一次。但请你先不要告诉别人，好吗？”</p><p>  艾伦：“好的。你放心。我不会和任何人说的。”</p></li></ul><h1 id="爱自己"><a href="#爱自己" class="headerlink" title="爱自己"></a>爱自己</h1><p>经常责备自己、强迫自己将使我们“更像椅子而不像人”。非暴力沟通认为，对他人的指责反映了我们遇到了挫折——他人的行为不符合我们的需要。<strong>如果我们指责的那个人恰好是我们自己，那么，言下之意是：“我的行为不符合我的需要。”</strong>我相信，如果我们专注于<strong>需要是否得到满足以及得到怎样的满足</strong>，我们就更有可能从自我评价中获益。</p><p>一旦发现自己正在做无益的事情，我们的挑战是如何对需要和价值观保持清醒的认识，以使我们的转变：</p><ol><li>符合我们的心愿；</li><li>出于对自己的尊重和爱护，而不是出于自我憎恨、内疚或羞愧。</li></ol><p>非暴力沟通鼓励我们直面人生的苦难：在遇到挫折时，充分体会人生的悲哀和内心的渴望。是的，感到遗憾是难免的。但它能帮助我们从经历中学习，而无须责备自己。我们意识到过去的行为违背了自己的需要及价值观，并允许这种觉察引发的情感充分流淌。<strong>一旦专注于尚未满足的需要，我们就会考虑如何满足它。</strong>反之，如果用苛刻的语言指责自己，我们不仅难以找到解决办法，而且容易陷于自我惩罚的痛苦中。</p><blockquote><p>深入理解我们行为的动机</p></blockquote><p>你在思考“<strong>我选择做<strong><strong>是因为我想</strong></strong></strong>”这个问题时，也许会像我考虑开车送小孩上学时那样，发现自己行为背后的价值取向——你在生活中看重什么。我确信，一旦意识到<strong>我们的行为所服务的需要</strong>，即使工作很艰苦、富有挑战性乃至举步维艰，我们也会从中得到乐趣。</p><p>我们越是投入服务<strong>生命的乐趣中</strong>——服务生命是唯一的目的，我们也就越爱自己。</p><blockquote><p>小结</p></blockquote><p>非暴力沟通最重要的应用也许在于<strong>培育对自己的爱</strong>。当我们的表现不完美时，我们可以通过体会忧伤和自我宽恕，来看清个人成长的方向，以及避免自我惩罚。评价自己的行为时，我们<strong>专注于尚未满足的需要</strong>；这样，我们就不再依赖羞愧、内疚、恼怒或沮丧的心理来寻求改变，而<strong>让爱主导我们的学习和成长</strong>。</p><p>同时，在日常生活中，我们主动根据需要和价值观来选择生活。我们的行为不再是为了履行职责、获得回报、逃避惩罚或避免感到内疚和羞愧。通过<strong>深入理解我们行为的动机，并用“选择做”来取代“不得不”，</strong>我们的生活将变得和谐并充满欢乐。</p><h1 id="充分表达愤怒"><a href="#充分表达愤怒" class="headerlink" title="充分表达愤怒"></a>充分表达愤怒</h1><p>如果真的很生气，我们就需要找到强有力的方式充分表达自己。</p><p>非暴力沟通并<strong>不主张忽视或压抑愤怒</strong>，它认为，通过深入地了解愤怒，我们可以充分表达内心的渴望。</p><blockquote><p>为什么我们会生气？</p></blockquote><p>充分表达愤怒的第一步是我们<strong>不再归咎于他人</strong>。如果我们认为“他让我很生气”，那么，我们难免就会指责他人。然而，实际情况是，<strong>我们心情并不取决于他人的行为。</strong></p><p>假定我们约了个人，时间到了，她却没来。如果彼此的关系处于比较微妙的时期，我们可能会忧心忡忡。如果我们看重的是诚实守信，我们也许会觉得不耐烦。反之，如果我们想休息一会儿，我们可能就不会介意她来晚了。因此，<strong>同一件事情，不同的需要导致不同的感受。</strong>一旦意识到自己的需要——不论是友谊、诚信还是休息，我们<strong>就可以更加体贴自己</strong>。我们可能会有强烈的情绪，但不再生气。可是，如果意识不到自己尚未满足的需要，一心考虑别人的过错，我们难免就会生气。</p><p>除了专注于自身的感受和需要，我们还可以选择去体会对方的感受和需要。此时，我们也不会感到生气。我们无须压抑愤怒，只要我们专注于他人的感受和需要，愤怒也就不再存在。</p><p>愤怒的核心是<strong>尚未满足的需要</strong>。如果我们能够借助它来提醒自己——我们有需要没有得到满足，而我们的思维方式正使它难以得到满足，那愤怒就是有价值的。为了充分表达愤怒，我们有必要明了自己的需要并采取行动。然而，做到这一点并不容易。因为愤怒驱使我们去惩罚他人，而不是去满足需要。为此，我建议，与其沉浸于“合理的愤怒”，不如倾听自己和他人的需要。这也许需要一个过程，但通过不断的实践，我们将会有意识地用“我生气是因为我需要……”来取代“我生气是因为他们……”。</p><p>如果你希望自己在生气的时候也能运用非暴力沟通，我建议你做以下的练习。在前面，我们已经提到，我们生气是因为我们的想法——我们认为人们“应该”或“不应该”做什么，我们还给人贴上各种 标 签 ， 并 说 长 论 短 。 请 留 意 我 们 头 脑 中 “ 我 不 喜 欢 抽 烟 的人……”之类的想法。然后，问自己：“我不喜欢他们……，是因为我什么样的需要没有得到满足？”通过这样的方式，我们就把<strong>注意力放在了尚未得到满足的需要，而不是考虑他人有什么过错。</strong></p><blockquote><p>小结</p></blockquote><p>在生气时，批评和指责他人都无法真正传达我们的心声。如果想充分表达愤怒，我们就不能归咎于他人，而把<strong>注意力放在自己的感受和需要上。</strong>与批评和指责他人相比，<strong>直接说出我们的需要更有可能使我们的愿望得到满足。</strong><br>表达愤怒的四个步骤是：（1）停下来，除了呼吸，什么都别做；（2）想一想是什么想法使我们生气了；（3）体会自己的需要；（4）表达感受和尚未满足的需要。有时，<strong>在第3步和第4步之间，我们需要先倾听他人。在得到倾听和理解之后，他们也就可以静下心来体会我们的感受和需要。</strong><br>我们需要给自己充分的时间来学习和运用非暴力沟通。</p><h1 id="运用强制力避免伤害"><a href="#运用强制力避免伤害" class="headerlink" title="运用强制力避免伤害"></a>运用强制力避免伤害</h1><p>在有些情形中，我们没有机会和他人交流，这时，我们也许需要使用强制力来保护自己和他人。我们这样做，是为了<strong>避免伤害，而不是为了惩罚他人</strong>。如果我们威胁他人或实施惩罚，人们常常会产生敌意和抵触心理。这样，彼此的关系将会疏远。同时，惩罚还可能使人忽视事情本身的意义，而把注意力放在不服从的后果上。如果我们试图通过惩罚来使人们认识自己的需要，那么，我们很可能适得其反。</p><h1 id="重获生活的热情"><a href="#重获生活的热情" class="headerlink" title="重获生活的热情"></a>重获生活的热情</h1><p>如果以苛刻的态度对人对己，我们的心情也好不到哪里去。通过运用非暴力沟通，我们不再试图分析自己或他人有什么毛病，而是用</p><p>心去<strong>了解我们的需要</strong>，这样，我们的内心就会逐渐变得平和。一旦我们发现自己心底深处的<strong>愿望</strong>，并采取<strong>积极的行动</strong>，我们将会重获生活的热情。</p><h1 id="表达感激"><a href="#表达感激" class="headerlink" title="表达感激"></a>表达感激</h1><blockquote><p>非暴力沟通表达感激的方式</p></blockquote><p>非暴力沟通表达感激的方式包含三个部分：</p><ol><li>对方做了什么事情使我们的生活得到了改善；</li><li>我们有哪些需要得到了满足；</li><li>我们的心情怎么样？</li></ol>]]></content>
      
      
      <categories>
          
          <category> Growth </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reading List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Latex和Word写论文</title>
      <link href="/2020/11/21/study/yong-latex-he-word-xie-lun-wen/"/>
      <url>/2020/11/21/study/yong-latex-he-word-xie-lun-wen/</url>
      
        <content type="html"><![CDATA[<h1 id="Latex转Word"><a href="#Latex转Word" class="headerlink" title="Latex转Word"></a><a href="https://medium.com/@zhelinchen91/how-to-convert-from-latex-to-ms-word-with-pandoc-f2045a762293" target="_blank" rel="noopener">Latex转Word</a></h1><ul><li>打开cmd</li><li>cd 到LaTeX文件所在的路径</li><li><code>pandoc Manuscript.tex -o Manuscript.docx</code><ul><li><a href="https://www.jianshu.com/p/dc62b915920e" target="_blank" rel="noopener">若要把bib参考文献也转换：</a><code>pandoc Manuscript.tex --bibliography=indoor_location.bib -o mydoc.docx</code></li><li>或者，<code>pandoc Manuscript.tex --filter pandoc-crossref --bibliography=indoor_location.bib --reference-docx=IEEE_template.doc -o mydoc.docx</code></li></ul></li></ul><p>即可生成docx的文件，只是图片和格式就没有了。但大部分公式能被转换成Word的内嵌公式，图表也能转换成功，标题等级也能保留。</p><h1 id="LaTex"><a href="#LaTex" class="headerlink" title="LaTex"></a>LaTex</h1><h2 id="LaTex下载及安装"><a href="#LaTex下载及安装" class="headerlink" title="LaTex下载及安装"></a>LaTex下载及安装</h2><ul><li><a href="https://liam.page/2014/09/08/latex-introduction/" target="_blank" rel="noopener">LaTex快速入门</a><ul><li>（几乎是）最简洁的 (La)TeX 编辑器——TeXworks——的基本使用方法；</li><li>如何使用 (Xe)LaTeX 进行简单的<strong>中英混排</strong>；</li><li>简单的文章组织结构；</li><li>如何用 (Xe)LaTeX 进行数学公式的排版；</li><li>如何在 (Xe)LaTeX 的文档中插入图片/表格；</li><li>如何进行简单的版面设置；</li><li>几个最常见的带有 TeX 的单词的含义；</li><li>出现问题应当如何处理/怎样聪明地提出你的问题——怎样从这里毕业。</li></ul></li><li><a href="https://liam.page/texlive/" target="_blank" rel="noopener">TeX Live 下载及安装</a><br><del>- <a href="https://blog.csdn.net/RobertChenGuangzhi/article/details/51249112?utm_source=blogxgwz6" target="_blank" rel="noopener">为TexWorks添加拼写检查功能</a></del></li></ul><h2 id="TeXstudio编译器下载"><a href="#TeXstudio编译器下载" class="headerlink" title="TeXstudio编译器下载"></a><a href="https://www.texstudio.org/" target="_blank" rel="noopener">TeXstudio编译器下载</a></h2><ul><li><a href="https://www.youtube.com/watch?v=RNmAkGRwEbA" target="_blank" rel="noopener">添加languagetool拼写检查(需安装java)</a></li></ul><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><h3 id="Word公式和Latex公式互转"><a href="#Word公式和Latex公式互转" class="headerlink" title="Word公式和Latex公式互转"></a>Word公式和Latex公式互转</h3><p>打开mathtype-选项-剪切和复制选项-转换其他文字-Latex2.09 and later-确定 然后复制粘贴公式到Latex中即可</p><h3 id="公式展示"><a href="#公式展示" class="headerlink" title="公式展示"></a>公式展示</h3><ul><li>使用 <code>$ ... $</code> 可以插入行内公式</li><li>使用 <code>\[ ... \]</code> 可以插入行间公式</li><li>如果需要对行间公式进行编号，则可以使用 equation 环境：<pre><code>\begin{equation}...\end{equation}</code></pre></li></ul><h3 id="多行公式，公式组，对齐"><a href="#多行公式，公式组，对齐" class="headerlink" title="多行公式，公式组，对齐"></a><a href="https://liam0205.me/2014/09/08/latex-introduction/" target="_blank" rel="noopener">多行公式，公式组，对齐</a></h3><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><p>在文档头部加入</p><pre><code>\usepackage{bm}</code></pre><p>然后在需要加粗的地方写</p><pre><code>\bm{${...}$}</code></pre><h3 id="花体"><a href="#花体" class="headerlink" title="花体"></a>花体</h3><p>在\begindocument之前使用<code>\usepackage{mathrsfs}</code>宏包，然后使用<code>\mathscr{A}</code>命令</p><h3 id="空心体"><a href="#空心体" class="headerlink" title="空心体"></a>空心体</h3><p>使用到的包为</p><pre><code>\usepackage{amsfonts,amssymb}</code></pre><p>代码为</p><pre><code>$\mathbb{S}$$\mathbb{R}$</code></pre><h3 id="公式中一部分斜体变为直体"><a href="#公式中一部分斜体变为直体" class="headerlink" title="公式中一部分斜体变为直体"></a><a href="https://blog.csdn.net/xiaotao_1/article/details/78270672" target="_blank" rel="noopener">公式中一部分斜体变为直体</a></h3><ul><li>全局使用，使公式全部变为直体： <pre><code>\rm sigmod(x) = \frac{1} {1 + e^{-x}} </code></pre></li></ul><ul><li><p>局部使用，使公式一部分变为直体，该部分用{}括起来： </p><pre><code>{\rm sigmod}(x) = \frac{1} {1 + e^{-x}} </code></pre></li></ul><h3 id="公式太长，需要换行（换行，等号对齐）"><a href="#公式太长，需要换行（换行，等号对齐）" class="headerlink" title="公式太长，需要换行（换行，等号对齐）"></a><a href="https://blog.csdn.net/leichaoaizhaojie/article/details/53463598" target="_blank" rel="noopener">公式太长，需要换行（换行，等号对齐）</a></h3><h3 id="添加空格"><a href="#添加空格" class="headerlink" title="添加空格"></a>添加空格</h3><p>  具体的间隔大小为：</p><pre><code>\quad           1em,em代表一个字符宽度\qquad          2em\,              3/18em\:              4/18em\;              5/18em\!             -3/18em（不仅不会增加空格，还会把间距给减小1/6个字符，这个有时可以用到，比如输入模的时候||x||，可以用这个把两个|的间距缩小点，这样更加美观）</code></pre><h3 id="高亮公式区域"><a href="#高亮公式区域" class="headerlink" title="高亮公式区域"></a>高亮公式区域</h3><ul><li><p>方法1</p><pre><code>\begin{mdframed}[hidealllines=true,backgroundcolor=yellow,innerleftmargin=1pt,innerrightmargin=1pt,leftmargin=-1pt,rightmargin=-1pt]公式...\end{mdframed}</code></pre></li><li><p>方法2：<a href="http://www.latexstudio.net/archives/1373" target="_blank" rel="noopener">用tcolorbox高亮显示</a></p></li></ul><h3 id="用mathpix可将截图的公式转化成LaTex公式"><a href="#用mathpix可将截图的公式转化成LaTex公式" class="headerlink" title="用mathpix可将截图的公式转化成LaTex公式"></a><a href="https://mathpix.com/" target="_blank" rel="noopener">用mathpix可将截图的公式转化成LaTex公式</a></h3><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="并排插入图片"><a href="#并排插入图片" class="headerlink" title="并排插入图片"></a><a href="https://blog.csdn.net/programchangesworld/article/details/51553683" target="_blank" rel="noopener">并排插入图片</a></h3><ul><li><a href="https://www.draw.io/" target="_blank" rel="noopener">附：快速在线作图</a></li><li><a href="http://www.latexstudio.net/archives/8652" target="_blank" rel="noopener">格式化图表标题和子标题</a></li></ul><h3 id="插入图片路径设置"><a href="#插入图片路径设置" class="headerlink" title="插入图片路径设置"></a><a href="https://blog.csdn.net/missingu1314/article/details/30027889" target="_blank" rel="noopener">插入图片路径设置</a></h3><p>在latex里面插入很多图片时，有时候相关的图片会放在同一个文件夹下，这时需要指定图片的路径，如果图片在tex文件所在文件夹下的子文件夹下，只需要把子文件夹的名字写上就行，比如子文件夹名字为fig则图片的路径可表示为</p><pre><code>\begin{figure}[htbp]\begin{center}\includegraphics[angle=0,width=1\textwidth]{fig//1.eps}\caption{示意图}\label{fig:1}\end{center}\end{figure}</code></pre><p>图片的名称中间不要有空格，否则最后一个单词会自动显示在文档中。</p><h3 id="图片标题的字体大小设置"><a href="#图片标题的字体大小设置" class="headerlink" title="图片标题的字体大小设置"></a>图片标题的字体大小设置</h3><pre><code>\begin{figure} \includegraphics{Arac.eps} \caption{\scriptsize{The Architecture}} \label{Arac} \end{figure}</code></pre><p>显示的结果是“FIg.1”的字体大小和后面的“The Architecture”不一样大。</p><p>解决方案：</p><pre><code>\usepackage{caption}\captionsetup{font={scriptsize}}   %% 这一句放在 caption前面这里还可以设置字体大小为：large  small  footnotesize scriptsize等更多信息</code></pre><h3 id="去掉图表标题冒号"><a href="#去掉图表标题冒号" class="headerlink" title="去掉图表标题冒号"></a><a href="http://blog.sina.com.cn/s/blog_5e16f1770100ng8z.html" target="_blank" rel="noopener">去掉图表标题冒号</a></h3><h3 id="双栏文字中插入单栏图片，使图片出现在当前页"><a href="#双栏文字中插入单栏图片，使图片出现在当前页" class="headerlink" title="双栏文字中插入单栏图片，使图片出现在当前页"></a><a href="https://blog.csdn.net/zhuang19951231/article/details/79176298" target="_blank" rel="noopener">双栏文字中插入单栏图片，使图片出现在当前页</a></h3><h3 id="图，表，公式的引用"><a href="#图，表，公式的引用" class="headerlink" title="图，表，公式的引用"></a><a href="https://blog.csdn.net/zhazhazl/article/details/52783172" target="_blank" rel="noopener">图，表，公式的引用</a></h3><ul><li><code>\label</code> 要紧跟在<code>\caption</code> 后面，否则编译后正文出现？。</li></ul><h3 id="jpg等格式转成eps"><a href="#jpg等格式转成eps" class="headerlink" title="jpg等格式转成eps"></a>jpg等格式转成eps</h3><ul><li><a href="https://pan.baidu.com/s/1-eDbjpR81k7mfNZJOGvA1A" target="_blank" rel="noopener">下载该bat文件（提取码1111）</a>，并把该文件放到需要图片转换的文件夹中</li><li>双击该bat，可把图片转成eps格式</li><li>在文件开头加入宏包：<code>\usepackage{graphicx}</code>, <code>\usepackage{epstopdf}</code></li><li>把LaTex中的.jpg等格式改成.eps</li><li>运行文件，同时会生成pdf格式的图片</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><ul><li><p><a href="https://www.jianshu.com/p/1b7daca5f100" target="_blank" rel="noopener">在线插表格</a></p><ul><li>在<a href="https://www.tablesgenerator.com/latex_tables" target="_blank" rel="noopener">表格在线工具</a>中，若绘制三线表，则表格类型选择   Booktabs table style。并可以同时结合 <a href="http://www.tablesgenerator.com/help/latex-tables/borders-editing" target="_blank" rel="noopener">Activate/Deactivate (手形状按钮)</a> 绘制更复杂的表格线</li><li>若表格内要换行，则直接在网页表格中需要换行的地方打回车即可。 <a href="https://blog.csdn.net/yihaizhiyan/article/details/48293069" target="_blank" rel="noopener"><del>单元格内强制换行</del></a></li></ul></li><li><p>改变行高</p><p>在<code>\begin{tabular}</code> 前面加上<code>\renewcommand\arraystretch{1.2}</code>，行的高度变为原来的1.2倍。</p><pre><code>  \renewcommand\arraystretch{1.2}  \begin{tabular}{@{}ll@{}}</code></pre></li><li><p><a href="https://blog.csdn.net/loveaborn/article/details/9151505" target="_blank" rel="noopener">控制表格线的粗细</a></p><pre><code>\usepackage{booktabs}  首行(\toprule[2pt])，中间行(\midrule[1pt]), 及未尾行(\bottomrule[2pt])加粗</code></pre></li><li><p>表格编号与标题不在同一行</p><pre><code>captionsetup[table]{format=plain, singlelinecheck=off, justification=centering, labelsep=newline, font=small}</code></pre></li></ul><h2 id="bib参考文献管理和引用"><a href="#bib参考文献管理和引用" class="headerlink" title=".bib参考文献管理和引用"></a><a href="https://www.cnblogs.com/zhaoyang10/p/4468581.html" target="_blank" rel="noopener">.bib参考文献管理和引用</a></h2><ul><li><p><a href="https://blog.csdn.net/qq_21391921/article/details/78138139" target="_blank" rel="noopener">使用JabRef</a>生成.bib文件，<a href="https://www.zhihu.com/question/23565739/answer/24977097" target="_blank" rel="noopener">并引用</a></p></li><li><p><a href="https://blog.csdn.net/gokeyhps/article/details/46984497" target="_blank" rel="noopener">文献字体大小调整</a></p><pre><code>\tiny\scriptsize\footnotesize\small\normalsize\large\Large\LARGE\huge\Huge</code></pre></li><li><p>单元格内强制换行</p><ul><li>加入宏包 <code>\usepackage{makecell}</code></li><li>在表格中需要换行的内容处加 <code>\makecell</code>,再用<code>\\</code> 分隔即可。比如<code>\makecell{从这里\\换行}</code>.</li></ul></li></ul><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a><a href="https://blog.csdn.net/golden1314521/article/details/40923377" target="_blank" rel="noopener">伪代码</a></h2><h2 id="添加下一页和空多行"><a href="#添加下一页和空多行" class="headerlink" title="添加下一页和空多行"></a>添加下一页和空多行</h2><ul><li><p><a href="https://blog.csdn.net/zd0303/article/details/7572992" target="_blank" rel="noopener">Latex添加新一页</a><br>用<code>\clearpage</code></p></li><li><p>空多行（以下三种都可以）</p><ul><li>\vskip 4\baselineskip</li><li>\vspace{1\baselineskip}</li><li>\setlength{\parskip}{1.2ex}</li></ul></li></ul><h2 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h2><ul><li>简历模板<ul><li><a href="http://www.latextemplates.com/cat/curricula-vitae" target="_blank" rel="noopener">通用模板</a></li><li><a href="https://www.sharelatex.com/templates/cv-or-resume" target="_blank" rel="noopener">overleaf模板</a></li><li><a href="https://github.com/huajh/awesome-latex-cv/tree/zh-cn" target="_blank" rel="noopener">github模板（支持中英文）</a></li></ul></li><li><a href="https://pan.baidu.com/s/1pZblSJwD6EDgELwEujZ2FA" target="_blank" rel="noopener">入门讲义（提取码1111）</a></li></ul><h1 id="Word"><a href="#Word" class="headerlink" title="Word"></a>Word</h1><h2 id="插入图表"><a href="#插入图表" class="headerlink" title="插入图表"></a>插入图表</h2><ul><li><a href="https://www.jianshu.com/p/acc80f4295f7" target="_blank" rel="noopener">Word中实现图片自动编号与文中引用编号对应</a></li><li><a href="https://v.qq.com/x/page/w0389rwwct8.html" target="_blank" rel="noopener">论文中的图表跟随章节插入题注+定义标题样式</a></li><li>如果在公式或图片(1)前新加入一个公式/图片，会发现编号错误，需要通过更新域来更新编号。Ctrl+A全选全文，F9更新域。（Alt+F9更新域代码）</li></ul><h2 id="插入公式"><a href="#插入公式" class="headerlink" title="插入公式"></a>插入公式</h2><ul><li><p><a href="https://zhuanlan.zhihu.com/p/109929891" target="_blank" rel="noopener">win10 Word中添加mathtype选项卡</a></p></li><li><p><a href="https://www.zhihu.com/question/34766002/answer/709505443" target="_blank" rel="noopener">mathtype中公式行间距变大解决方法</a></p><ul><li><p>选择有公式存在的那几行或者直接按Ctrl+a全选文档，接下来</p><ol><li>字体&gt;字符间距&gt;位置，选为标准</li><li>段落&gt;中文版式&gt;对齐方式，选为居中</li><li>布局&gt;页面设置&gt;文档网络，网格栏中选为无网格</li></ol></li><li><p>以上三步必须全部完成，缺一不可</p></li></ul></li><li><p><a href="http://blog.sina.com.cn/s/blog_a201dc3f0102yfnf.html" target="_blank" rel="noopener">在正文中引用公式编号</a></p><ul><li>mathtype选项卡-&gt;插入引用</li><li>双击需要引用的公式编号</li></ul></li><li><p>mathtype编号不从1开始</p><ul><li>在每一章的开始，mathtype选项卡-&gt;公式编号-&gt;插入分隔符-&gt;修改分隔符</li><li>修改章节分隔符的数字，可从特定的数字开始对公式编号</li><li><a href="https://blog.csdn.net/grllery/article/details/105448744" target="_blank" rel="noopener">隐藏mathtype分隔符</a> </li></ul><p><img src="https://i.loli.net/2020/11/23/y1baLJdO8PeCqHf.png" alt></p></li></ul><h2 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h2><ul><li><a href="https://zhidao.baidu.com/question/584901844530550645.html?qbl=relate_question_2" target="_blank" rel="noopener">中文设宋体，英文设Times New Roma</a><ul><li>Ctrl+A 全选，Ctrl+D分别设置字体格式</li></ul></li></ul><h2 id="在Word中用Endnote插入参考文献"><a href="#在Word中用Endnote插入参考文献" class="headerlink" title="在Word中用Endnote插入参考文献"></a>在Word中用Endnote插入参考文献</h2><ul><li><a href="https://www.howsci.com/endnote-word-optimize.html" target="_blank" rel="noopener">EndNote在Word中插入文献时电脑变卡的解决方法(使用第二种：Endnote 优化)</a></li></ul><h2 id="批量删除word中的OLE-LINK书签"><a href="#批量删除word中的OLE-LINK书签" class="headerlink" title="批量删除word中的OLE_LINK书签"></a>批量删除word中的<code>OLE_LINK</code>书签</h2><ul><li>在“视图”宏菜单中新建宏，输入以下命令:</li></ul><pre><code>Sub 删除OLE书签()    Dim MyBk As Bookmark    For Each MyBk In ActiveDocument.Bookmarks        If UCase(Left(MyBk.Name, 8)) = &quot;OLE_LINK&quot; Then            MyBk.Delete        End If    NextEnd Sub</code></pre><ul><li>运行该宏</li></ul><h2 id="修改生成的目录格式"><a href="#修改生成的目录格式" class="headerlink" title="修改生成的目录格式"></a>修改生成的目录格式</h2><ul><li>依次选择引用—&gt;目录—&gt;自定义目录，打开目录选项卡，点击修改</li><li>点击修改出现样式选项卡，出现的目录1,2,3….就是前面设置的大纲级别，可以分别选中进行修改</li></ul><h2 id="分节符"><a href="#分节符" class="headerlink" title="分节符"></a>分节符</h2><ul><li>每一章以分节符开始 （而非分页符）</li><li>插入分节符页码后，页码变了，可通过“<a href="https://zhidao.baidu.com/question/278630054.html" target="_blank" rel="noopener">续前节</a>”将页码修改正确</li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning with PyTorch-note</title>
      <link href="/2020/11/01/python/ml/deep-learning-with-pytorch-note/"/>
      <url>/2020/11/01/python/ml/deep-learning-with-pytorch-note/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.youtube.com/watch?v=v5cngxo4mIg&list=PLZbbT5o_s2xrfNyHZsM6ufI0iZENK9xgG&index=1" target="_blank" rel="noopener">Youtube Video</a></p><p><a href="https://deeplizard.com/learn/video/v5cngxo4mIg" target="_blank" rel="noopener">Blog Post</a><br><a href="https://github.com/wanyueli/DeepLizard-pytorch-" target="_blank" rel="noopener">DeepLizard 中文笔记</a></p></blockquote><h1 id="8-PyTorch-Tensors-Explained-Neural-Network-Programming"><a href="#8-PyTorch-Tensors-Explained-Neural-Network-Programming" class="headerlink" title="8. PyTorch Tensors Explained - Neural Network Programming"></a>8. PyTorch Tensors Explained - Neural Network Programming</h1><p><img src="https://i.loli.net/2020/10/29/iDBuEPZH49t5fU8.png" alt></p><h1 id="9-Creating-PyTorch-Tensors-for-Deep-Learning-Best-Options"><a href="#9-Creating-PyTorch-Tensors-for-Deep-Learning-Best-Options" class="headerlink" title="9. Creating PyTorch Tensors for Deep Learning - Best Options"></a>9. Creating PyTorch Tensors for Deep Learning - Best Options</h1><p><img src="https://i.loli.net/2020/10/29/4wRlmHfgWB2aGIC.png" alt><br><img src="https://i.loli.net/2020/10/29/IZ9c25SXDewjVva.png" alt></p><h1 id="10-Flatten-Reshape-and-Squeeze-Explained"><a href="#10-Flatten-Reshape-and-Squeeze-Explained" class="headerlink" title="10. Flatten, Reshape, and Squeeze Explained"></a>10. Flatten, Reshape, and Squeeze Explained</h1><p><img src="https://i.loli.net/2020/10/29/dRGPOCAngyQp46U.png" alt></p><h1 id="11-CNN-Flatten-Operation-Visualized-Tensor-Batch-Processing-for-Deep-Learning"><a href="#11-CNN-Flatten-Operation-Visualized-Tensor-Batch-Processing-for-Deep-Learning" class="headerlink" title="11. CNN Flatten Operation Visualized - Tensor Batch Processing for Deep Learning"></a>11. CNN Flatten Operation Visualized - Tensor Batch Processing for Deep Learning</h1><ul><li>Flattening Specific Axes Of A Tensor</li></ul><p>In the post on CNN input tensor shape, we learned how tensor inputs to a convolutional neural network typically have 4 axes, one for batch size, one for color channels, and one each for height and width.</p><p>Notice in the call how we specified the <code>start_dim</code> parameter. This tells the <code>flatten()</code> method which axis it should start the flatten operation. The one here is an index, so it’s the second axis which is the color channel axis. We skip over the batch axis so to speak, leaving it intact.</p><h1 id="19-CNN-Weights-Learnable-Parameters-in-PyTorch-Neural-Networks"><a href="#19-CNN-Weights-Learnable-Parameters-in-PyTorch-Neural-Networks" class="headerlink" title="19. CNN Weights - Learnable Parameters in PyTorch Neural Networks"></a>19. CNN Weights - Learnable Parameters in PyTorch Neural Networks</h1><p><img src="https://i.loli.net/2020/11/09/L9DIuYM1ckrdUqp.png" alt></p><ul><li>input is 4-dimension, output is 3-dimension, the shape of weight is 3*4.</li></ul><p><img src="https://i.loli.net/2020/11/09/pmF53SiU7v9TDMt.png" alt><br><img src="https://i.loli.net/2020/11/09/QL1K9GgezrqByin.png" alt></p><h1 id="25-CNN-Output-Size-Formula-Bonus-Neural-Network-Debugging-Session"><a href="#25-CNN-Output-Size-Formula-Bonus-Neural-Network-Debugging-Session" class="headerlink" title="25. CNN Output Size Formula - Bonus Neural Network Debugging Session"></a>25. CNN Output Size Formula - Bonus Neural Network Debugging Session</h1><p><img src="https://i.loli.net/2020/11/10/LN8oVtwf6vga1YA.png" alt></p><h1 id="26-CNN-Training-with-Code-Example-Neural-Network-Programming-Course"><a href="#26-CNN-Training-with-Code-Example-Neural-Network-Programming-Course" class="headerlink" title="26. CNN Training with Code Example - Neural Network Programming Course"></a>26. CNN Training with Code Example - Neural Network Programming Course</h1><ul><li>Training Using a Single Batch<ul><li>Calculate Loss</li><li>Calculate Gradients</li><li>Update Weight</li></ul></li></ul><p><img src="https://i.loli.net/2020/11/10/z6RDKBotrWMHhkP.png" alt></p><h1 id="27-CNN-Training-Loop-Explained-Neural-Network-Code-Project"><a href="#27-CNN-Training-Loop-Explained-Neural-Network-Code-Project" class="headerlink" title="27. CNN Training Loop Explained - Neural Network Code Project"></a><a href="https://deeplizard.com/learn/video/XfYmia3q2Ow" target="_blank" rel="noopener">27. CNN Training Loop Explained - Neural Network Code Project</a></h1><blockquote><p>well explained what happened with each loop.</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transformstorch<span class="token punctuation">.</span>set_printoptions<span class="token punctuation">(</span>linewidth<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>set_grad_enabled<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_num_correct</span><span class="token punctuation">(</span>preds<span class="token punctuation">,</span>labels<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> preds<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>eq<span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Network</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Network<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 维度计算公式：output=(n-filter+2padding)/stride+1。因此：</span>        <span class="token comment" spellcheck="true"># 原始图片大小：28*28</span>        <span class="token comment" spellcheck="true"># conv1后，28-5+1=24。当前图片大小：24*24</span>        <span class="token comment" spellcheck="true"># max_pool2d后，（24-2）/2+1=12。当前图片大小：12*12</span>        <span class="token comment" spellcheck="true"># conv2后，12-5+1=8。当前图片大小：8*8</span>        <span class="token comment" spellcheck="true"># max_pool2后，（8-2）/2+1=4。当前图片大小：4*4。当前这张图片有12g个channels</span>        <span class="token comment" spellcheck="true"># 此时，这张图片的维度为1*12*4*4（batch*channel*heigtht*width）。在进fc1时，把这张图片转为（1行，12*4*4列）维度</span>        self<span class="token punctuation">.</span>conv1<span class="token operator">=</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2<span class="token operator">=</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1<span class="token operator">=</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span>out_features<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2<span class="token operator">=</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>out_features<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>out<span class="token operator">=</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span>out_features<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 有10种输出类型</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>        t<span class="token operator">=</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token operator">=</span>F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>t<span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>t<span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>t<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>self<span class="token punctuation">.</span>out<span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token keyword">return</span> ttrain_set<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>    root<span class="token operator">=</span><span class="token string">'./data'</span><span class="token punctuation">,</span>    train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>        transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>network<span class="token operator">=</span>Network<span class="token punctuation">(</span><span class="token punctuation">)</span>train_loader<span class="token operator">=</span>torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>optimizer<span class="token operator">=</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>network<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># epoch表示完整的一批数据</span>    total_loss <span class="token operator">=</span> <span class="token number">0</span>    total_correct <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> batch <span class="token keyword">in</span> train_loader<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># batch表示某epoch中的一部分数据</span>        images<span class="token punctuation">,</span>labels<span class="token operator">=</span>batch        preds<span class="token operator">=</span>network<span class="token punctuation">(</span>images<span class="token punctuation">)</span>        loss<span class="token operator">=</span>F<span class="token punctuation">.</span>cross_entropy<span class="token punctuation">(</span>preds<span class="token punctuation">,</span>labels<span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        total_loss<span class="token operator">+=</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        total_correct<span class="token operator">+=</span>get_num_correct<span class="token punctuation">(</span>preds<span class="token punctuation">,</span>labels<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"epoch: "</span><span class="token punctuation">,</span>epoch<span class="token punctuation">,</span>          <span class="token string">"total_loss: "</span><span class="token punctuation">,</span>total_loss<span class="token punctuation">,</span>          <span class="token string">"total_correct: "</span><span class="token punctuation">,</span>total_correct<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>total_correct<span class="token operator">/</span>len<span class="token punctuation">(</span>train_set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># epoch:  0 total_loss:  358.2741909921169 total_correct:  46523</span><span class="token comment" spellcheck="true"># epoch:  1 total_loss:  237.37768299877644 total_correct:  51164</span><span class="token comment" spellcheck="true"># epoch:  2 total_loss:  216.7216858714819 total_correct:  51954</span><span class="token comment" spellcheck="true"># epoch:  3 total_loss:  206.57599268853664 total_correct:  52318</span><span class="token comment" spellcheck="true"># epoch:  4 total_loss:  200.8457220196724 total_correct:  52480</span><span class="token comment" spellcheck="true"># 0.8746666666666667</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="29-Stack-vs-Concat-in-PyTorch-TensorFlow-amp-NumPy-Deep-Learning-Tensor-Ops"><a href="#29-Stack-vs-Concat-in-PyTorch-TensorFlow-amp-NumPy-Deep-Learning-Tensor-Ops" class="headerlink" title="29. Stack vs Concat in PyTorch, TensorFlow &amp; NumPy - Deep Learning Tensor Ops"></a>29. Stack vs Concat in PyTorch, TensorFlow &amp; NumPy - Deep Learning Tensor Ops</h1><p><img src="https://i.loli.net/2020/11/11/N8KyWxQEvSdz9oj.png" alt></p><p><img src="https://i.loli.net/2020/11/11/yhHBitcz6aX7uJ8.png" alt></p><p><img src="https://i.loli.net/2020/11/11/vOwo3nzR798VqjL.png" alt></p><p><img src="https://s2.loli.net/2022/02/12/Xvx53i9dVcypeWP.png" alt></p><p><img src="https://s2.loli.net/2022/02/12/31nl5cDMV6bLidy.png" alt></p><p><img src="https://s2.loli.net/2022/02/12/qIujrwK7BhitsbS.png" alt="20220212220317"><br><img src="https://s2.loli.net/2022/02/12/KqNzjrLJDagbWhC.png" alt="20220212220400"></p><h1 id="30-TensorBoard-with-PyTorch-Visualize-Deep-Learning-Metrics"><a href="#30-TensorBoard-with-PyTorch-Visualize-Deep-Learning-Metrics" class="headerlink" title="30. TensorBoard with PyTorch - Visualize Deep Learning Metrics"></a>30. TensorBoard with PyTorch - Visualize Deep Learning Metrics</h1><p>完整代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transformstorch<span class="token punctuation">.</span>set_printoptions<span class="token punctuation">(</span>linewidth<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>set_grad_enabled<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_num_correct</span><span class="token punctuation">(</span>preds<span class="token punctuation">,</span>labels<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> preds<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>eq<span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Network</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Network<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 维度计算公式：output=(n-filter+2padding)/stride+1。因此：</span>        <span class="token comment" spellcheck="true"># 原始图片大小：28*28</span>        <span class="token comment" spellcheck="true"># conv1后，28-5+1=24。当前图片大小：24*24</span>        <span class="token comment" spellcheck="true"># max_pool2d后，（24-2）/2+1=12。当前图片大小：12*12</span>        <span class="token comment" spellcheck="true"># conv2后，12-5+1=8。当前图片大小：8*8</span>        <span class="token comment" spellcheck="true"># max_pool2后，（8-2）/2+1=4。当前图片大小：4*4。当前这张图片有12g个channels</span>        <span class="token comment" spellcheck="true"># 此时，这张图片的维度为1*12*4*4（batch*channel*heigtht*width）。在进fc1时，把这张图片转为（1行，12*4*4列）维度</span>        self<span class="token punctuation">.</span>conv1<span class="token operator">=</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2<span class="token operator">=</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1<span class="token operator">=</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span>out_features<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2<span class="token operator">=</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>out_features<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>out<span class="token operator">=</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span>out_features<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 有10种输出类型</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>        t<span class="token operator">=</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token operator">=</span>F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>t<span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>t<span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>t<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>self<span class="token punctuation">.</span>out<span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token keyword">return</span> ttrain_set<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>    root<span class="token operator">=</span><span class="token string">'./data'</span><span class="token punctuation">,</span>    train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>        transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>network<span class="token operator">=</span>Network<span class="token punctuation">(</span><span class="token punctuation">)</span>train_loader<span class="token operator">=</span>torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>optimizer<span class="token operator">=</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>network<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>images<span class="token punctuation">,</span>labels<span class="token operator">=</span>next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">)</span>grid<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>make_grid<span class="token punctuation">(</span>images<span class="token punctuation">)</span>tb <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token punctuation">)</span>tb<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">'images'</span><span class="token punctuation">,</span>grid<span class="token punctuation">)</span>tb<span class="token punctuation">.</span>add_graph<span class="token punctuation">(</span>network<span class="token punctuation">,</span>images<span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># epoch表示完整的一批数据</span>    total_loss <span class="token operator">=</span> <span class="token number">0</span>    total_correct <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> batch <span class="token keyword">in</span> train_loader<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># batch表示某epoch中的一部分数据</span>        images<span class="token punctuation">,</span>labels<span class="token operator">=</span>batch        preds<span class="token operator">=</span>network<span class="token punctuation">(</span>images<span class="token punctuation">)</span>        loss<span class="token operator">=</span>F<span class="token punctuation">.</span>cross_entropy<span class="token punctuation">(</span>preds<span class="token punctuation">,</span>labels<span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># calculate gradients</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># update weights</span>        total_loss<span class="token operator">+=</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        total_correct<span class="token operator">+=</span>get_num_correct<span class="token punctuation">(</span>preds<span class="token punctuation">,</span>labels<span class="token punctuation">)</span>    tb<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">'Loss'</span><span class="token punctuation">,</span>total_loss<span class="token punctuation">,</span>epoch<span class="token punctuation">)</span>    tb<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">'Number Correct'</span><span class="token punctuation">,</span>total_correct<span class="token punctuation">,</span>epoch<span class="token punctuation">)</span>    tb<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">'Accuracy'</span><span class="token punctuation">,</span>total_correct<span class="token operator">/</span>len<span class="token punctuation">(</span>train_set<span class="token punctuation">)</span><span class="token punctuation">,</span>epoch<span class="token punctuation">)</span>    tb<span class="token punctuation">.</span>add_histogram<span class="token punctuation">(</span><span class="token string">'conv1.bias'</span><span class="token punctuation">,</span>network<span class="token punctuation">.</span>conv1<span class="token punctuation">.</span>bias<span class="token punctuation">,</span>epoch<span class="token punctuation">)</span>    tb<span class="token punctuation">.</span>add_histogram<span class="token punctuation">(</span><span class="token string">'conv1.weight'</span><span class="token punctuation">,</span>network<span class="token punctuation">.</span>conv1<span class="token punctuation">.</span>weight<span class="token punctuation">,</span>epoch<span class="token punctuation">)</span>    tb<span class="token punctuation">.</span>add_histogram<span class="token punctuation">(</span><span class="token string">'conv1.weight.grad'</span><span class="token punctuation">,</span>network<span class="token punctuation">.</span>conv1<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>grad<span class="token punctuation">,</span>epoch<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(network.conv1.weight.size())</span>    <span class="token comment" spellcheck="true"># print(network.conv1.weight.grad.size())</span>    <span class="token comment" spellcheck="true"># print(network.fc1.weight.grad.size())</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"epoch: "</span><span class="token punctuation">,</span>epoch<span class="token punctuation">,</span>          <span class="token string">"total_loss: "</span><span class="token punctuation">,</span>total_loss<span class="token punctuation">,</span>          <span class="token string">"total_correct: "</span><span class="token punctuation">,</span>total_correct<span class="token punctuation">)</span>tb<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>权重说明：<br>network.conv1.weight.size()为<code>（6*1*5*5）</code>，输入为1channel，输出为6channels， 所以为<code>6*1</code>，kernel大小为5，所以为<code>5*5</code>. 相应地，network.conv1.weight.grad.size()也为<code>（6*1*5*5）</code></p><p><img src="https://s2.loli.net/2022/02/13/SfraZoOHsTWjLkp.png" alt="20220213152135"></p><h1 id="31-Hyperparameter-Tuning-and-Experimenting-Training-Deep-Neural-Networks"><a href="#31-Hyperparameter-Tuning-and-Experimenting-Training-Deep-Neural-Networks" class="headerlink" title="31. Hyperparameter Tuning and Experimenting - Training Deep Neural Networks"></a>31. Hyperparameter Tuning and Experimenting - Training Deep Neural Networks</h1><p><img src="https://i.loli.net/2020/11/11/4MAjzTZo2pwq6mB.png" alt></p><h1 id="32-Training-Loop-Run-Builder-Neural-Network-Experimentation-Code"><a href="#32-Training-Loop-Run-Builder-Neural-Network-Experimentation-Code" class="headerlink" title="32. Training Loop Run Builder - Neural Network Experimentation Code"></a>32. Training Loop Run Builder - Neural Network Experimentation Code</h1><p><a href="https://deeplizard.com/learn/video/NSKghk0pcco" target="_blank" rel="noopener">Using The RunBuilder Class</a></p><ul><li>build sets of parameters that define our runs.</li></ul><p>All we have to do to add additional values is to <strong>add them to the original parameter list</strong>, and if we want to add an additional type of parameter, all we have to do is add it. The new parameter and its values will <strong>automatically become available to be consumed inside the run</strong>. The string output for the run also updates as well.</p><p>This functionality will allow us to have greater control as we experiment with different values during training.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict<span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple<span class="token keyword">from</span> itertools <span class="token keyword">import</span> product<span class="token keyword">class</span> <span class="token class-name">RunBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">get_runs</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>        Run <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'Run'</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        runs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> v <span class="token keyword">in</span> product<span class="token punctuation">(</span><span class="token operator">*</span>params<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            runs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Run<span class="token punctuation">(</span><span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> runs<span class="token comment" spellcheck="true"># Two parameters:</span>params <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span>    lr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token number">01</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">001</span><span class="token punctuation">]</span>    <span class="token punctuation">,</span>batch_size <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Three parameters:</span>params <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span>    lr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token number">01</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">001</span><span class="token punctuation">]</span>    <span class="token punctuation">,</span>batch_size <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">]</span>    <span class="token punctuation">,</span>device <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cuda"</span><span class="token punctuation">,</span> <span class="token string">"cpu"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>runs <span class="token operator">=</span> RunBuilder<span class="token punctuation">.</span>get_runs<span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>runs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output of two parameters</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># [</span><span class="token comment" spellcheck="true">#     Run(lr=0.01, batch_size=1000),</span><span class="token comment" spellcheck="true">#     Run(lr=0.01, batch_size=10000),</span><span class="token comment" spellcheck="true">#     Run(lr=0.001, batch_size=1000),</span><span class="token comment" spellcheck="true">#     Run(lr=0.001, batch_size=10000)</span><span class="token comment" spellcheck="true"># ]</span><span class="token comment" spellcheck="true"># output of three parameters</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># [</span><span class="token comment" spellcheck="true">#     Run(lr=0.01, batch_size=1000, device='cuda'),</span><span class="token comment" spellcheck="true">#     Run(lr=0.01, batch_size=1000, device='cpu'),</span><span class="token comment" spellcheck="true">#     Run(lr=0.01, batch_size=10000, device='cuda'),</span><span class="token comment" spellcheck="true">#     Run(lr=0.01, batch_size=10000, device='cpu'),</span><span class="token comment" spellcheck="true">#     Run(lr=0.001, batch_size=1000, device='cuda'),</span><span class="token comment" spellcheck="true">#     Run(lr=0.001, batch_size=1000, device='cpu'),</span><span class="token comment" spellcheck="true">#     Run(lr=0.001, batch_size=10000, device='cuda'),</span><span class="token comment" spellcheck="true">#     Run(lr=0.001, batch_size=10000, device='cpu')</span><span class="token comment" spellcheck="true"># ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/02/13/pLjHo1rOilPMaek.png" alt="20220213161157"></p><h1 id="33-CNN-Training-Loop-Refactoring-Simultaneous-Hyperparameter-Testing"><a href="#33-CNN-Training-Loop-Refactoring-Simultaneous-Hyperparameter-Testing" class="headerlink" title="33. CNN Training Loop Refactoring - Simultaneous Hyperparameter Testing"></a>33. <a href="https://www.youtube.com/watch?v=ozpv_peZ894&list=PLZbbT5o_s2xrfNyHZsM6ufI0iZENK9xgG&index=33" target="_blank" rel="noopener">CNN Training Loop Refactoring - Simultaneous Hyperparameter Testing</a></h1><p><img src="https://s2.loli.net/2022/02/13/QekzRKdsb7qvY4F.png" alt="20220213193129"></p><h1 id="34-PyTorch-DataLoader-num-workers-Deep-Learning-Speed-Limit-Increase"><a href="#34-PyTorch-DataLoader-num-workers-Deep-Learning-Speed-Limit-Increase" class="headerlink" title="34. PyTorch DataLoader num_workers - Deep Learning Speed Limit Increase"></a>34. PyTorch DataLoader num_workers - Deep Learning Speed Limit Increase</h1><p>num_workers 并非越大越好。随着num_workers增加，时间先减小后增大。可以在parameters中尝试，从而确定num_workers的具体值</p><h1 id="35-PyTorch-on-the-GPU-Training-Neural-Networks-with-CUDA"><a href="#35-PyTorch-on-the-GPU-Training-Neural-Networks-with-CUDA" class="headerlink" title="35. PyTorch on the GPU - Training Neural Networks with CUDA"></a>35. <a href="https://www.youtube.com/watch?v=Bs1mdHZiAS8&list=PLZbbT5o_s2xrfNyHZsM6ufI0iZENK9xgG&index=35" target="_blank" rel="noopener">PyTorch on the GPU - Training Neural Networks with CUDA</a></h1><blockquote><p><a href="https://stackoverflow.com/questions/62907815/pytorch-what-is-the-difference-between-tensor-cuda-and-tensor-totorch-device" target="_blank" rel="noopener">PyTorch: What is the difference between tensor.cuda() and tensor.to(torch.device(“cuda:0”))?</a><br>.cuda()/.cpu() is the old, pre-0.4 way. As of 0.4, it is recommended to use .to(device) because it is more flexible<br><img src="https://s2.loli.net/2022/02/13/5m1lfFPUwY8ovXq.png" alt="20220213234656"></p></blockquote><p><img src="https://s2.loli.net/2022/02/13/lsmkr1nhFWd8LJH.png" alt="20220213232452"><br><img src="https://s2.loli.net/2022/02/13/4dkTqzvyUM7jt1E.png" alt="20220213232551"><br><img src="https://s2.loli.net/2022/02/13/Ua8TxEXNF5V6nbk.png" alt="20220213232603"></p><h1 id="38-PyTorch-Sequential-Models-Neural-Networks-Made-Easy"><a href="#38-PyTorch-Sequential-Models-Neural-Networks-Made-Easy" class="headerlink" title="38. PyTorch Sequential Models - Neural Networks Made Easy"></a>38. PyTorch Sequential Models - Neural Networks Made Easy</h1><p>用nn.Sequential 构建网络的三种方式</p><p><img src="https://s2.loli.net/2022/02/16/sJSdAqQK5xPc1yv.png" alt="20220216232511"></p><p><img src="https://s2.loli.net/2022/02/16/lYbj29duEZowKxB.png" alt="20220216232847"></p><p>build the same network using the Sequential Class</p><p><img src="https://s2.loli.net/2022/02/16/eli7WxyCHU1zIGc.png" alt="20220216232935"><br><img src="https://s2.loli.net/2022/02/16/oG5xEFzTjAMW1Pg.png" alt="20220216233235"><br><img src="https://s2.loli.net/2022/02/16/OiGK5qEo16Fsgpk.png" alt="20220216233347"></p><hr><h1 id="Supplement-RNN"><a href="#Supplement-RNN" class="headerlink" title="Supplement: RNN"></a>Supplement: RNN</h1><p>PyTorch Zero To All Lecture:</p><p><a href="https://www.youtube.com/playlist?list=PLlMkM4tgfjnJ3I-dbhO9JTw7gNty6o_2m" target="_blank" rel="noopener">Youtube Video</a><br><a href="https://github.com/hunkim/PyTorchZeroToAll" target="_blank" rel="noopener">Code</a><br><a href="https://drive.google.com/drive/folders/0B41Zbb4c8HVyUndGdGdJSXd5d3M" target="_blank" rel="noopener">Slides</a></p><ul><li>PyTorch Lecture 12: RNN1 - Basics</li></ul><p><img src="https://i.loli.net/2020/11/21/g2FetKVEsCM4fWG.png" alt><br><img src="https://i.loli.net/2020/11/21/aLB82ZmWMJ36xPe.png" alt><br><img src="https://i.loli.net/2020/11/21/Ph83JOY4cHwrlCj.png" alt><br><img src="https://i.loli.net/2020/11/21/GJsmoMIzye3lnQW.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>狂神说MySQL</title>
      <link href="/2020/09/26/ji-suan-ji-ji-chu/kuang-shen-shuo-mysql/"/>
      <url>/2020/09/26/ji-suan-ji-ji-chu/kuang-shen-shuo-mysql/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://www.mihuxiong.com/article/15" target="_blank" rel="noopener">Navicat 15.x for MySQL安装</a></li></ul><hr><ul><li><a href="https://www.bilibili.com/video/BV1NJ411J79W?p=1" target="_blank" rel="noopener">MySQL （B站视频）</a></li><li>MySQL （文档）<ul><li><a href="https://blog.csdn.net/qq_33369905/article/details/105828923" target="_blank" rel="noopener">MySQL01：初识MySQL</a></li><li><a href="https://blog.csdn.net/qq_33369905/article/details/105828926" target="_blank" rel="noopener">MySQL02：数据库操作</a></li><li><a href="https://blog.csdn.net/qq_33369905/article/details/105852675" target="_blank" rel="noopener">MySQL03：DML语言</a></li><li><a href="https://blog.csdn.net/qq_33369905/article/details/105872921" target="_blank" rel="noopener">MySQL04：使用DQL查询数据</a></li><li><a href="https://blog.csdn.net/qq_33369905/article/details/105898247" target="_blank" rel="noopener">MySQL05：MySQL函数</a></li><li><a href="https://blog.csdn.net/qq_33369905/article/details/105911814" target="_blank" rel="noopener">MySQL06：事务和索引</a></li><li><a href="https://blog.csdn.net/qq_33369905/article/details/105926576" target="_blank" rel="noopener">MySQL07：权限及如何设计数据库</a></li></ul></li></ul><hr><h1 id="13-insert语句详解"><a href="#13-insert语句详解" class="headerlink" title="13.insert语句详解"></a><a href="https://www.bilibili.com/video/BV1NJ411J79W?p=13" target="_blank" rel="noopener">13.insert语句详解</a></h1><ul><li>创建一个school数据库</li><li>创建学生表</li><li>给学生表中insert 数据</li></ul><blockquote><p>Mysql字段设置中文默认值时：<br>1.检查字段编码是否UTF-8<br>2.如果用Navicat视图化工具进行设置，需要在<strong>中文外层加上单引号</strong>，例:默认值:’张三’;</p></blockquote><pre><code>CREATE DATABASEIF    NOT EXISTS `school`;-- 创建一个school数据库USE `school`;-- 创建学生表DROP TABLEIF    EXISTS `student`;CREATE TABLE `student` (    `studentno` INT ( 4 ) NOT NULL auto_increment COMMENT &#39;学号&#39;,    `loginpwd` VARCHAR ( 20 ) DEFAULT NULL,    `studentname` VARCHAR ( 20 ) DEFAULT NULL COMMENT &#39;学生姓名&#39;,    `sex` TINYINT ( 1 ) DEFAULT NULL COMMENT &#39;性别，0或1&#39;,    `gradeid` INT ( 11 ) DEFAULT NULL COMMENT &#39;年级编号&#39;,    `phone` VARCHAR ( 50 ) NOT NULL COMMENT &#39;联系电话，允许为空&#39;,    `address` VARCHAR ( 255 ) NOT NULL DEFAULT &#39;未知地址&#39; COMMENT &#39;地址，允许为空&#39;,    `borndate` datetime DEFAULT NULL COMMENT &#39;出生时间&#39;,    `email` VARCHAR ( 50 ) NOT NULL DEFAULT &#39;未知邮箱&#39; COMMENT &#39;邮箱账号允许为空&#39;,    `identitycard` VARCHAR ( 18 ) DEFAULT NULL COMMENT &#39;身份证号&#39;,    PRIMARY KEY ( `studentno` ),    UNIQUE KEY `identitycard` ( `identitycard` ),    KEY `email` ( `email` ) ) ENGINE = myisam DEFAULT charset = utf8;-- 查看数据库的定义SHOW CREATE DATABASE `school`;-- 查看数据表的定义SHOW CREATE TABLE `student`;-- 显示表结构DESC `student`;  -- 设置严格检查模式(不能容错了)SET sql_mode=&#39;STRICT_TRANS_TABLES&#39;;-- 插入学生数据 其余自行添加 这里只添加了2行INSERT INTO `student` ( `studentno`, `loginpwd`, `studentname`, `sex`, `gradeid`, `phone`, `address`, `borndate`, `email`, `identitycard` )VALUES    ( 1000, &#39;123456&#39;, &#39;张伟&#39;, 0, 2, &#39;13800001234&#39;, &#39;北京朝阳&#39;, &#39;1980-1-1&#39;, &#39;text123@qq.com&#39;, &#39;123456198001011234&#39; ),    ( 1001, &#39;123456&#39;, &#39;赵强&#39;, 1, 3, &#39;13800002222&#39;, &#39;广东深圳&#39;, &#39;1990-1-1&#39;, &#39;text111@qq.com&#39;, &#39;123456199001011233&#39; );-- 插入可选字段对应的数据INSERT INTO `student` ( `studentname`, `phone` )VALUES    ( &#39;张三&#39;, &#39;123&#39; ),    ( &#39;李四&#39;, &#39;456&#39; );</code></pre><p>结果为：<br><img src="https://i.loli.net/2020/09/26/x2RNpinm1FUYecf.png" alt></p><h1 id="16-基本的select语句和别名"><a href="#16-基本的select语句和别名" class="headerlink" title="16. 基本的select语句和别名"></a><a href="https://www.bilibili.com/video/BV1NJ411J79W?p=16" target="_blank" rel="noopener">16. 基本的select语句和别名</a></h1><p>构建表的sql代码：</p><pre><code>create database if not exists `school`;-- 创建一个school数据库use `school`;-- 创建学生表drop table if exists `student`;create table `student`(    `studentno` int(4) not null comment &#39;学号&#39;,    `loginpwd` varchar(20) default null,    `studentname` varchar(20) default null comment &#39;学生姓名&#39;,    `sex` tinyint(1) default null comment &#39;性别，0或1&#39;,    `gradeid` int(11) default null comment &#39;年级编号&#39;,    `phone` varchar(50) not null comment &#39;联系电话，允许为空&#39;,    `address` varchar(255) not null comment &#39;地址，允许为空&#39;,    `borndate` datetime default null comment &#39;出生时间&#39;,    `email` varchar (50) not null comment &#39;邮箱账号允许为空&#39;,    `identitycard` varchar(18) default null comment &#39;身份证号&#39;,    primary key (`studentno`),    unique key `identitycard`(`identitycard`),    key `email` (`email`))engine=myisam default charset=utf8;-- 创建年级表drop table if exists `grade`;create table `grade`(    `gradeid` int(11) not null auto_increment comment &#39;年级编号&#39;,  `gradename` varchar(50) not null comment &#39;年级名称&#39;,    primary key (`gradeid`)) engine=innodb auto_increment = 6 default charset = utf8;-- 创建科目表drop table if exists `subject`;create table `subject`(    `subjectno`int(11) not null auto_increment comment &#39;课程编号&#39;,    `subjectname` varchar(50) default null comment &#39;课程名称&#39;,    `classhour` int(4) default null comment &#39;学时&#39;,    `gradeid` int(4) default null comment &#39;年级编号&#39;,    primary key (`subjectno`))engine = innodb auto_increment = 19 default charset = utf8;-- 创建成绩表drop table if exists `result`;create table `result`(    `studentno` int(4) not null comment &#39;学号&#39;,    `subjectno` int(4) not null comment &#39;课程编号&#39;,    `examdate` datetime not null comment &#39;考试日期&#39;,    `studentresult` int (4) not null comment &#39;考试成绩&#39;,    key `subjectno` (`subjectno`))engine = innodb default charset = utf8;-- 插入学生数据 其余自行添加 这里只添加了2行insert into `student` (`studentno`,`loginpwd`,`studentname`,`sex`,`gradeid`,`phone`,`address`,`borndate`,`email`,`identitycard`)values(1000,&#39;123456&#39;,&#39;张伟&#39;,0,2,&#39;13800001234&#39;,&#39;北京朝阳&#39;,&#39;1980-1-1&#39;,&#39;text123@qq.com&#39;,&#39;123456198001011234&#39;),(1001,&#39;123456&#39;,&#39;赵强&#39;,1,3,&#39;13800002222&#39;,&#39;广东深圳&#39;,&#39;1990-1-1&#39;,&#39;text111@qq.com&#39;,&#39;123456199001011233&#39;);-- 插入成绩数据  这里仅插入了一组，其余自行添加insert into `result`(`studentno`,`subjectno`,`examdate`,`studentresult`)values(1000,1,&#39;2013-11-11 16:00:00&#39;,85),(1000,2,&#39;2013-11-12 16:00:00&#39;,70),(1000,3,&#39;2013-11-11 09:00:00&#39;,68),(1000,4,&#39;2013-11-13 16:00:00&#39;,98),(1000,5,&#39;2013-11-14 16:00:00&#39;,58);-- 插入年级数据insert into `grade` (`gradeid`,`gradename`) values(1,&#39;大一&#39;),(2,&#39;大二&#39;),(3,&#39;大三&#39;),(4,&#39;大四&#39;),(5,&#39;预科班&#39;);-- 插入科目数据insert into `subject`(`subjectno`,`subjectname`,`classhour`,`gradeid`)values(1,&#39;高等数学-1&#39;,110,1),(2,&#39;高等数学-2&#39;,110,2),(3,&#39;高等数学-3&#39;,100,3),(4,&#39;高等数学-4&#39;,130,4),(5,&#39;C语言-1&#39;,110,1),(6,&#39;C语言-2&#39;,110,2),(7,&#39;C语言-3&#39;,100,3),(8,&#39;C语言-4&#39;,130,4),(9,&#39;Java程序设计-1&#39;,110,1),(10,&#39;Java程序设计-2&#39;,110,2),(11,&#39;Java程序设计-3&#39;,100,3),(12,&#39;Java程序设计-4&#39;,130,4),(13,&#39;数据库结构-1&#39;,110,1),(14,&#39;数据库结构-2&#39;,110,2),(15,&#39;数据库结构-3&#39;,100,3),(16,&#39;数据库结构-4&#39;,130,4),(17,&#39;C#基础&#39;,130,1);</code></pre>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用说明</title>
      <link href="/2020/09/26/ji-suan-ji-ji-chu/git-shi-yong-shuo-ming/"/>
      <url>/2020/09/26/ji-suan-ji-ji-chu/git-shi-yong-shuo-ming/</url>
      
        <content type="html"><![CDATA[<p>Github提供基于Git的版本托管服务。Git是一款开源的分布式版本控制系统，是Github上用来管理项目的工具。</p><hr><p>简洁版</p><ul><li><a href="https://www.youtube.com/watch?v=USjZcfj8yxE&t=0s" target="_blank" rel="noopener">Learn Git in 15 Minutes（Video）</a><ul><li><a href="https://www.notion.so/zarkom/Introduction-to-Git-ac396a0697704709a12b6a0e545db049" target="_blank" rel="noopener">配套Notes</a></li></ul></li><li><a href="https://www.youtube.com/watch?v=nhNq2kIvi9s" target="_blank" rel="noopener">Learn Github in 20 Minutes （Video）</a><ul><li><a href="https://www.notion.so/zarkom/Introduction-to-GitHub-202af6f64bbd4299b15f238dcd09d2a7" target="_blank" rel="noopener">配套Notes</a></li></ul></li><li><a href="https://mofanpy.com/tutorials/others/git" target="_blank" rel="noopener">莫烦git</a></li><li><a href="https://www.bootcss.com/p/git-guide/" target="_blank" rel="noopener">Git - 简易指南</a></li><li><a href="https://labuladong.gitbook.io/algo/di-wu-zhang-ji-shu-wen-zhang-xi-lie/git-chang-yong-ming-ling" target="_blank" rel="noopener">(快速上手)我用四个命令概括了 Git 的所有套路</a></li><li><a href="https://www.youtube.com/watch?v=SWYqp7iY_Tc" target="_blank" rel="noopener">Git &amp; GitHub Crash Course For Beginners</a></li></ul><blockquote><p>对于工具的学习，我认为应该多做减法，只捡最有用的学，那些奇技淫巧不学也罢，应该把时间投入更有价值的事情中。 -labuladong</p></blockquote><hr><p>详细版</p><ul><li><a href="https://awesome-programming-books.github.io/git/ProGit%E4%B8%AD%E6%96%87%E7%89%88.pdf" target="_blank" rel="noopener">ProGit中文版</a></li><li><a href="https://backlog.com/git-tutorial/cn/contents/" target="_blank" rel="noopener">猴子都能懂的Git入门</a></li></ul><hr><p>Github系列</p><ul><li><a href="https://segmentfault.com/a/1190000005611460" target="_blank" rel="noopener">从0开始学习 GitHub 系列之「加入 GitHub」</a></li><li><a href="https://segmentfault.com/a/1190000005713232" target="_blank" rel="noopener">从0开始学习 GitHub 系列之「Git 速成」</a></li><li><a href="https://segmentfault.com/a/1190000005869506" target="_blank" rel="noopener">从0开始学习 GitHub 系列之「Git 进阶」</a></li><li><a href="https://segmentfault.com/a/1190000005713288" target="_blank" rel="noopener">从0开始学习 GitHub 系列之「向GitHub 提交代码」</a></li><li><a href="https://segmentfault.com/a/1190000009997044" target="_blank" rel="noopener">从0开始学习 GitHub 系列之「团队合作利器 Branch」</a></li></ul><hr><p>使用</p><ul><li><a href="https://www.cnblogs.com/feixuelove1009/p/5955332.html" target="_blank" rel="noopener">在Pycharm中使用GitHub</a></li></ul><blockquote><p>labuladong <a href="https://segmentfault.com/a/1190000038470944" target="_blank" rel="noopener">我用四个命令概括了 Git 的所有套路</a></p></blockquote><h1 id="本地git使用"><a href="#本地git使用" class="headerlink" title="本地git使用"></a>本地git使用</h1><h2 id="需求一，如何把-work-dir-中的修改加入-stage"><a href="#需求一，如何把-work-dir-中的修改加入-stage" class="headerlink" title="需求一，如何把 work dir 中的修改加入 stage"></a>需求一，如何把 work dir 中的修改加入 stage</h2><p><code>git add</code></p><p><img src="https://i.loli.net/2021/10/20/txbUOIwzHodqgXf.png" alt="20211020110333"></p><h2 id="需求二，如何把-stage-中的修改还原到-work-dir-中"><a href="#需求二，如何把-stage-中的修改还原到-work-dir-中" class="headerlink" title="需求二，如何把 stage 中的修改还原到 work dir 中"></a>需求二，如何把 stage 中的修改还原到 work dir 中</h2><p><code>git checkout</code></p><p>把本地文件已经添加到stage中了，然后修改了本地文件，但是后悔了。希望stage中的文件能够<strong>覆盖</strong>本地文件 （本地新增加的文件仍会被保留）</p><p>把 a.txt 添加到stage区，然后在 a.txt 中添加了一行 hello world。现在需要将 stage 中的空文件去覆盖work dir中的文件，用 git checkout  a.txt<br><img src="https://i.loli.net/2021/10/20/7Zuc4OrzKvVoSIe.png" alt="20211020120037"></p><h2 id="需求三，将-stage-区的文件添加到-history-区"><a href="#需求三，将-stage-区的文件添加到-history-区" class="headerlink" title="需求三，将 stage 区的文件添加到 history 区"></a>需求三，将 stage 区的文件添加到 history 区</h2><p><code>git commit -m &#39;一些描述&#39;</code></p><p>当一些描述中有错别字时，可以用<code>git commit --amend</code>。就是把错别字的修改和之前的那个 commit 中的修改<strong>合并</strong>，作为一个 commit 提交到 history 区</p><p><img src="https://i.loli.net/2021/10/20/2Kvg3ImQznZFHfw.png" alt="20211020112743"></p><h2 id="需求四，不改变-work-dir-中的任何数据，把stage中的-a-txt-变为-unstage-的状态。"><a href="#需求四，不改变-work-dir-中的任何数据，把stage中的-a-txt-变为-unstage-的状态。" class="headerlink" title="需求四，不改变 work dir 中的任何数据，把stage中的 a.txt 变为 unstage 的状态。"></a>需求四，不改变 work dir 中的任何数据，把stage中的 a.txt 变为 unstage 的状态。</h2><p><code>git reset a.txt</code></p><p>不会改变 work dir 中的数据，会改变 stage 区的数据，所以应确保 stage 中被改动数据是可以抛弃的。<br><img src="https://i.loli.net/2021/10/20/Pv96KuMekm4grLx.png" alt="20211020113347"></p><p>需求2中的git checkout是把stage中的文件<strong>覆盖</strong>到work dir中，因此会<strong>改变</strong>work dir中的内容。</p><ul><li>改了本地的代码，发现还没有之前放在stage中的代码好，于是用checkout覆盖</li></ul><p>需求四中的<code>git reset a.txt</code>相当于把a.txt文件<strong>从索引状态变为非索引状态</strong>，这<strong>不会改变</strong>work dir中的内容</p><ul><li>已经把这个文件放到stage中了，但是还需要修改。于是把文件从stage变为unstage状态。除这个文件的其他文件都可以进行后续的commit</li></ul><h2 id="需求五，将-work-dir-的修改提交到-history-区"><a href="#需求五，将-work-dir-的修改提交到-history-区" class="headerlink" title="需求五，将 work dir 的修改提交到 history 区"></a>需求五，将 work dir 的修改提交到 history 区</h2><p><code>git add</code> 然后 <code>git commit</code> 就行了，或者一个快捷方法是使用命令 <code>git commit - -m &quot;一些描述&quot;</code></p><p><img src="https://i.loli.net/2021/10/20/rTNbYVC3HWfP2Dz.png" alt="20211020120311"></p><h2 id="需求六，将-history-区的历史提交还原到-work-dir-中"><a href="#需求六，将-history-区的历史提交还原到-work-dir-中" class="headerlink" title="需求六，将 history 区的历史提交还原到 work dir 中"></a>需求六，将 history 区的历史提交还原到 work dir 中</h2><p><code>git checkout HEAD .</code><br>比如从 GitHub 上 clone 了一个项目，然后乱改了一通代码，结果发现我写的代码根本跑不通，于是后悔了，干脆不改了，我想恢复成最初的模样。用<code>git checkout HEAD .</code>后，work dir 和 stage 中所有的「修改」都会被撤销，恢复成 HEAD 指向的那个 history commit。（注意：新增的文件不会被撤销）</p><p>当然，只要找到任意一个 commit 的 HASH 值，checkout 命令可就以将文件恢复成任一个 history commit 中的样子：<code>git checkout 2bdf04a</code> （HASH值可以用git log –oneline来查看 （或者git reflog））</p><blockquote><ul><li><p>从stage到work dir的checkout <code>git checkout a.txt</code>：不想要work dir中的a.txt内容了，让stage中的内容把work dir中的内容覆盖</p></li><li><p>从stage到work dir的reset <code>git reset a.txt</code>：把stage 中的a.txt移动到work dir，然后再<code>git commit . m &quot;my commit&quot;</code>时，提交到history中的是除了a.txt外的所有文件</p></li><li><p>从 history到workdir的checkout   <code>git checkout HEAD .</code>   :比如我从 GitHub 上 clone 了一个项目，然后乱改了一通代码，结果发现我写的代码根本跑不通，于是后悔了，干脆不改了，我想恢复成最初的模样</p></li></ul></blockquote><h2 id="需求七，合并多个-commit"><a href="#需求七，合并多个-commit" class="headerlink" title="需求七，合并多个 commit"></a>需求七，合并多个 commit</h2><p><code>git reset 17bd20c</code> 到最开始的记录（而且不会改变work dir中的数据），然后<code>git add</code> 和<code>git commit</code><br><img src="https://i.loli.net/2021/10/20/ruGKe5qFcNWVm2t.png" alt="20211020121757"></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动手学深度学学习_pytorch版</title>
      <link href="/2020/09/12/python/ml/dong-shou-xue-shen-du-xue-xue-xi-pytorch-ban/"/>
      <url>/2020/09/12/python/ml/dong-shou-xue-shen-du-xue-xue-xi-pytorch-ban/</url>
      
        <content type="html"><![CDATA[<p><a href="https://tangshusen.me/Dive-into-DL-PyTorch/#/" target="_blank" rel="noopener">《动手学深度学习》(Pytorch版)</a></p><ul><li><a href="https://github.com/ShusenTang/Dive-into-DL-PyTorch" target="_blank" rel="noopener">github</a> 中有每章节的<code>code</code>源文件，clone到本地运行，可观察各模型效果。</li></ul><hr><h3 id="3-4-5-交叉熵损失函数"><a href="#3-4-5-交叉熵损失函数" class="headerlink" title="3.4.5 交叉熵损失函数"></a>3.4.5 交叉熵损失函数</h3><p>交叉熵只关心对正确类别的预测概率，因为只要其值足够大，就可以确保分类结果正确</p><blockquote><p><a href="https://blog.csdn.net/guolindonggld/article/details/79250642" target="_blank" rel="noopener">交叉熵损失（Cross Entropy Loss）计算过程</a></p></blockquote><h3 id="3-5-1-获取数据集"><a href="#3-5-1-获取数据集" class="headerlink" title="3.5.1 获取数据集"></a>3.5.1 获取数据集</h3><p><code>transform = transforms.ToTensor()</code>使所有数据转换为Tensor，如果不进行转换则返回的是PIL图片。<code>transforms.ToTensor()</code>将尺寸为<code>(H x W x C)</code>且数据位于[0, 255]的PIL图片或者数据类型为np.uint8的NumPy数组转换为尺寸为<code>(C x H x W)</code>且数据类型为torch.float32且位于[0.0, 1.0]的Tensor。</p><h2 id="3-8-多层感知机"><a href="#3-8-多层感知机" class="headerlink" title="3.8 多层感知机"></a>3.8 多层感知机</h2><p><img src="https://i.loli.net/2020/09/15/K1XFt4rIkQAsElT.png" alt="20200915224537"></p><p>上述问题的根源在于全连接层只是对数据做仿射变换<code>（affine transformation）</code>，而<strong>多个仿射变换的叠加仍然是一个仿射变换</strong>。解决问题的一个方法是<strong>引入非线性变换</strong>，例如对隐藏变量使用按元素运算的非线性函数进行变换，然后再作为下一个全连接层的输入。这个非线性函数被称为激活函数<code>（activation function）</code>。</p><h2 id="3-12-权重衰减"><a href="#3-12-权重衰减" class="headerlink" title="3.12 权重衰减"></a>3.12 权重衰减</h2><ul><li>正则化通过为模型损失函数添加惩罚项使学出的<strong>模型参数值较小</strong>，是<strong>应对过拟合</strong>的常用手段。</li><li>权重衰减等价于L2范数正则化，通常会使学到的<strong>权重参数的元素较接近0</strong>。</li><li>权重衰减可以通过优化器中的weight_decay超参数来指定。</li><li>可以定义多个优化器实例对不同的模型参数使用不同的迭代方法。</li></ul><p><a href="https://zhuanlan.zhihu.com/p/47391705" target="_blank" rel="noopener">经典CNN结构简析：AlexNet、VGG、NIN、GoogLeNet、ResNet etc</a></p><h3 id="5-5-1-LeNet模型"><a href="#5-5-1-LeNet模型" class="headerlink" title="5.5.1 LeNet模型"></a>5.5.1 LeNet模型</h3><p>以单通道的28*28图片为例，各层网络输入输出说明如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token punctuation">,</span> optim<span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span> <span class="token keyword">import</span> d2lzh_pytorch <span class="token keyword">as</span> d2ldevice <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">LeNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>LeNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># in_channels, out_channels, kernel_size.  1@28*28  ->  6@*(28-5+1)*(28-5+1)</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># kernel_size, stride. 6@24*24->6@12*12</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 6@12*12  ->  16@(12-5+1)*(12-5+1)</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 16*8*8  ->   16@4*4</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 把16张4*4的图片拉平（该向量长度为通道*高*宽），全连接层输入为16*4*4，输出为120</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 同上</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 同上</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">:</span>        feature <span class="token operator">=</span> self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>feature<span class="token punctuation">.</span>view<span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 通过view，把特征变成 batch_size 行，通道数*高*宽  列</span>        <span class="token keyword">return</span> output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.cs.ryerson.ca/~aharley/vis/" target="_blank" rel="noopener">CNN卷积神经网络特征可视化</a>: <a href="https://www.cs.ryerson.ca/~aharley/vis/conv/flat.html" target="_blank" rel="noopener">二维</a>， <a href="https://www.cs.ryerson.ca/~aharley/vis/conv/" target="_blank" rel="noopener">三维</a></p><h2 id="5-7-使用重复元素的网络（VGG）"><a href="#5-7-使用重复元素的网络（VGG）" class="headerlink" title="5.7 使用重复元素的网络（VGG）"></a>5.7 使用重复元素的网络（VGG）</h2><ul><li>VGG块的组成规律是：使用的卷积全部为3x3，Pad=1，步长为1，也就是说，卷积不会改变输出大小（假设28<em>28的图片，），而改变输出大小这件事就交给了2x2，步长为2 的max pool，也就是说每通过一个 max pool，卷积的尺寸都会折半。<em>*卷积层保持输入的高和宽不变，而池化层则对其减半</em></em>。</li><li>VGG这种高和宽减半以及通道翻倍的设计使得多数卷积层都有相同的模型参数尺寸和计算复杂度。</li></ul><blockquote><p>对于给定的感受野（与输出有关的输入图片的局部大小），<strong>采用堆积的小卷积核优于采用大的卷积核</strong>，因为可以增加网络深度来保证学习更复杂的模式，而且代价还比较小（参数更少）。例如，在VGG中，使用了3个3x3卷积核来代替7x7卷积核，使用了2个3x3卷积核来代替5*5卷积核，这样做的主要目的是在保证具有相同感知野的条件下，提升了网络的深度，在一定程度上提升了神经网络的效果。</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/60235326" target="_blank" rel="noopener">图片来源：VGG网络结构详解</a><br><img src="https://i.loli.net/2020/09/20/926CF7hJN4BkcjD.png" alt="20200920231951"></p><p><img src="https://i.loli.net/2020/09/20/pgEoNj8a42fIXDQ.png" alt="20200920232012"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>199. 二叉树的右视图</title>
      <link href="/2020/08/31/leetcode/199-er-cha-shu-de-you-shi-tu/"/>
      <url>/2020/08/31/leetcode/199-er-cha-shu-de-you-shi-tu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/binary-tree-right-side-view/solution/dfs-bfs-by-powcai-7/" target="_blank" rel="noopener">199. 二叉树的右视图</a></p><ul><li><code>if len(res)&lt;=depth</code> 时, 说明遍历到了该层第一个元素，这时加个0用来占位置（第depth层的元素）</li><li>先深度遍历左子树，再深度遍历右子树，这样，这一层的值会被每一层的最后一个节点最终覆盖掉。用这种方式来实现右视图</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rightSideView</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[int]        """</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span> res            <span class="token keyword">if</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&lt;=</span>depth<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            res<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token operator">=</span>root<span class="token punctuation">.</span>val            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础知识汇总</title>
      <link href="/2020/08/30/python/python-ji-chu-zhi-shi-hui-zong/"/>
      <url>/2020/08/30/python/python-ji-chu-zhi-shi-hui-zong/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="封装、继承和多态"><a href="#封装、继承和多态" class="headerlink" title="封装、继承和多态"></a><a href="https://www.liujiangblog.com/course/python/44" target="_blank" rel="noopener">封装、继承和多态</a></h2><h2 id="进程与线程的一个简单解释"><a href="#进程与线程的一个简单解释" class="headerlink" title="进程与线程的一个简单解释"></a><a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="noopener">进程与线程的一个简单解释</a></h2><h2 id="进程之间有哪些通信方式？"><a href="#进程之间有哪些通信方式？" class="headerlink" title="进程之间有哪些通信方式？"></a><a href="https://zhuanlan.zhihu.com/p/104713463" target="_blank" rel="noopener">进程之间有哪些通信方式？</a></h2><p><a href="https://zhuanlan.zhihu.com/p/165224175" target="_blank" rel="noopener">小林coding进程间通信</a></p><ul><li>管道</li><li>消息队列</li><li>共享内存</li><li>信号量</li><li>Socket</li></ul><h2 id="Python并发编程之谈谈线程中的“锁机制”"><a href="#Python并发编程之谈谈线程中的“锁机制”" class="headerlink" title="Python并发编程之谈谈线程中的“锁机制”"></a><a href="https://juejin.im/post/6844903617535672328#heading-1" target="_blank" rel="noopener">Python并发编程之谈谈线程中的“锁机制”</a></h2><h2 id="COOKIE和SESSION有什么区别"><a href="#COOKIE和SESSION有什么区别" class="headerlink" title="COOKIE和SESSION有什么区别?"></a><a href="https://www.zhihu.com/question/19786827/answer/28752144" target="_blank" rel="noopener">COOKIE和SESSION有什么区别?</a></h2><ul><li>Session是在<strong>服务端</strong>保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；</li><li>Cookie是<strong>客户端</strong>保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。</li></ul><h2 id="分页和分段有什么区别？"><a href="#分页和分段有什么区别？" class="headerlink" title="分页和分段有什么区别？"></a><a href>分页和分段有什么区别？</a></h2><ul><li><p>页是信息的物理单位，分页是为实现离散分配方式，以消减内存的外零头，提高内存的利用率,是为了管理主存的方便而划分的，对用户是透明的。段则是信息的逻辑单位，它含有一组其意义相对完整的信息。分段的目的是为了能更好地满足用户的需要,因此段对用户是可见的。</p></li><li><p>页的大小固定且由系统决定；而段的长度却不固定，决定于用户所编写的程序。</p></li><li><p>分页的地址空间是一维的，程序员只需利用一个记忆符，即可表示一个地址；而分段的作业地址空间是二维的，程序员在标识一个地址时，既需给出段名，又需给出段内地址。</p></li></ul><h2 id="成员保护和访问限制"><a href="#成员保护和访问限制" class="headerlink" title="成员保护和访问限制"></a><a href="https://www.liujiangblog.com/course/python/45" target="_blank" rel="noopener">成员保护和访问限制</a></h2><ul><li>在Python中，如果要让内部成员不被外部访问，可以在成员的名字前加上两个下划线<code>__</code>，这个成员就变成了一个私有成员（private）。私有成员只能在类的内部访问，外部无法访问。</li><li>类的成员与下划线总结：<ul><li><code>_name、_name_、_name__</code>:建议性的私有成员，不要在外部访问。</li><li><code>__name、 __name_</code>:强制的私有成员，但是你依然可以蛮横地在外部危险访问。</li><li><code>__name__</code>:特殊成员，与私有性质无关，例如<code>__doc__</code>。</li><li><code>name_、name__</code>:没有任何特殊性，普通的标识符，但最好不要这么起名。</li></ul></li></ul><p><a href="https://zhuanlan.zhihu.com/p/36173202" target="_blank" rel="noopener">表格总结：</a><br><img src="https://s2.loli.net/2022/03/17/LQ5VlUhIiJgt8mz.png" alt="20220317140909"></p><h2 id="Python的垃圾回收机制"><a href="#Python的垃圾回收机制" class="headerlink" title="Python的垃圾回收机制"></a><a href="https://zhuanlan.zhihu.com/p/83251959" target="_blank" rel="noopener">Python的垃圾回收机制</a></h2><p>Python中的垃圾回收是以<strong>引用计数</strong>为主，<strong>标记-清除</strong>和<strong>分代收集</strong>为辅</p><ul><li>引用计数：Python在内存中存储每个对象的引用计数，如果计数变成0，该对象就会消失，分配给该对象的内存就会释放出来。</li><li>标记-清除：一些容器对象，比如list、dict、tuple，instance等可能会出现引用循环，对于这些循环，垃圾回收器会定时回收这些循环（对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边）。<ul><li>注意，只有容器对象才会产生循环引用的情况，比如列表、字典、用户自定义类的对象、元组等。而像数字，字符串这类简单类型不会出现循环引用。作为一种优化策略，对于只包含简单类型的元组也不在标记清除算法的考虑之列</li></ul></li><li>分代收集：对于程序，存在一定比例的内存块的生存周期比较短；而剩下的内存块，生存周期会比较长，甚至会从程序开始一直持续到程序结束。生存期较短对象的比例通常在 80%～90% 之间，这种思想简单点说就是：对象存在时间越长，越可能不是垃圾，应该越少去收集。这样在执行标记-清除算法时可以有效减小遍历的对象数，从而提高垃圾回收的速度。</li></ul><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="实现Python单例模式-Singleton"><a href="#实现Python单例模式-Singleton" class="headerlink" title="实现Python单例模式(Singleton)"></a><a href="https://zhuanlan.zhihu.com/p/37534850" target="_blank" rel="noopener">实现Python单例模式(Singleton)</a></h2><ul><li>单例是一种设计模式，应用该模式的类只会生成一个实例。单例模式保证了在程序的不同位置都可以且仅可以取到同一个对象实例：如果实例不存在，会创建一个实例；如果已存在就会返回这个实例。</li></ul><p>通过类实现：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_cls<span class="token operator">=</span>cls        self<span class="token punctuation">.</span>_instance<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>_instance<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_instance<span class="token punctuation">[</span>cls<span class="token punctuation">]</span><span class="token operator">=</span>cls<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_instance<span class="token punctuation">[</span>cls<span class="token punctuation">]</span>@Singleton<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>solution1<span class="token operator">=</span>Solutionsolution2<span class="token operator">=</span>Solution<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>solution1<span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">(</span>solution2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过函数实现：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">singleton</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    _instance<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls <span class="token operator">not</span> <span class="token keyword">in</span> _instance<span class="token punctuation">:</span>            _instance<span class="token punctuation">[</span>cls<span class="token punctuation">]</span><span class="token operator">=</span>cls<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> _instance<span class="token punctuation">[</span>cls<span class="token punctuation">]</span>    <span class="token keyword">return</span> wrapper@singleton<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>Solution1<span class="token operator">=</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>Solution2<span class="token operator">=</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>Solution1<span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">(</span>Solution2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h2><p>Python中对象之间的赋值是按引用传递的，如果要拷贝对象需要使用标准模板中的copy</p><ul><li>直接赋值：其实就是对象的引用（别名）。</li><li>copy.copy：浅拷贝，只拷贝父对象，不拷贝父对象的子对象。</li><li>copy.deepcopy：深拷贝，拷贝父对象和子对象。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> copya <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#原始对象</span>b <span class="token operator">=</span> a                       <span class="token comment" spellcheck="true">#赋值，传对象的引用</span>c <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#对象拷贝，浅拷贝</span>d <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#对象拷贝，深拷贝</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">#修改对象a</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#修改对象a中的['a', 'b']数组对象</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">'a = '</span><span class="token punctuation">,</span> a <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">'b = '</span><span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">'c = '</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> <span class="token string">'d = '</span><span class="token punctuation">,</span> d <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre><code>(&#39;a = &#39;, [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 5])(&#39;b = &#39;, [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 5])(&#39;c = &#39;, [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]])(&#39;d = &#39;, [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;]])</code></pre><h2 id="new-和-init-的区别，-call-方法"><a href="#new-和-init-的区别，-call-方法" class="headerlink" title="__new__和__init__的区别， __call__() 方法"></a><a href="https://zhuanlan.zhihu.com/p/23526961" target="_blank" rel="noopener"><code>__new__</code>和<code>__init__</code>的区别， <code>__call__()</code> 方法</a></h2><ul><li><p><code>__init__</code>是当实例对象创建完成后被调用的，然后设置对象属性的一些初始值。</p></li><li><p><code>__new__</code>是在<strong>实例创建之前被调用的</strong>，因为它的任务就是<strong>创建实例然后返回该实例</strong>，是个静态方法。</p></li></ul><p>也就是：<code>__new__</code>在<code>__init__</code>之前被调用，<code>__new__</code>的返回值（实例）将传递给<code>__init__</code>方法的第一个参数，然后<code>__init__</code>给这个实例设置一些参数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is new'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">## super() equals to object</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is init'</span><span class="token punctuation">)</span>obj<span class="token operator">=</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># This is new     This is init</span><span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># &lt;__main__.c01 object at 0x00000000024E7910></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果为一个类编写了<code>__call__()</code> 方法，那么在该类的实例后面加括号，就会调用这个方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"__init__"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'__call__'</span><span class="token punctuation">)</span>obj <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 输出 __init__</span>obj<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 输出 __call__</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Other-Notes"><a href="#Other-Notes" class="headerlink" title="Other Notes"></a>Other Notes</h1><ul><li>@property 属性</li></ul><p><img src="https://s2.loli.net/2022/02/19/Obz5hKokEePv7li.png" alt="20220219231441"><br><img src="https://s2.loli.net/2022/02/19/8GQNa1c42XKzr6f.png" alt="20220219231827"></p><ul><li><p><a href="https://blog.csdn.net/zha6476003/article/details/82912403" target="_blank" rel="noopener">Python继承、方法重写</a></p></li><li><p><a href="https://google.github.io/styleguide/pyguide.html" target="_blank" rel="noopener">Google Python Style Guide</a></p></li><li><p><a href="https://www.youtube.com/playlist?list=PL-osiE80TeTsqhIuOqKhwlXsIBIdSeYtc" target="_blank" rel="noopener">Python OOP Tutorial</a></p></li></ul><p><img src="https://s2.loli.net/2022/02/20/M3oYNPndvXp892t.png" alt="20220220150121"></p><p><img src="https://s2.loli.net/2022/02/20/dXgPhbpVnQWRoSt.png" alt="20220220204217"></p><ul><li><a href="https://www.youtube.com/watch?v=xvpNA7bC8cs" target="_blank" rel="noopener">How do I select multiple rows and columns from a pandas DataFrame?</a></li></ul><p><img src="https://s2.loli.net/2022/02/20/bfr7mOUstAKq1Se.png" alt="20220220204851"><br><img src="https://s2.loli.net/2022/02/20/jkTFC6zhY3IADdi.png" alt="20220220205123"></p><ul><li><p><a href="https://www.youtube.com/watch?v=FsAPt_9Bf3U" target="_blank" rel="noopener">装饰器</a></p><p><img src="https://s2.loli.net/2022/02/20/6RskpxBTKbIXltP.png" alt="20220220223437"><br><img src="https://s2.loli.net/2022/02/20/v6padW9BmLU4Crf.png" alt="20220220223523"></p></li></ul><p><img src="https://s2.loli.net/2022/02/20/ZhRHiTdntXIeDay.png" alt="20220220223801"></p><ul><li>python深度图转点云<ul><li><a href="https://blog.csdn.net/tycoer/article/details/106761886" target="_blank" rel="noopener"><del>只用相机模型和深度图</del></a></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> cv2<span class="token keyword">def</span> <span class="token function">depth2xyz</span><span class="token punctuation">(</span>depth_map<span class="token punctuation">,</span>depth_cam_matrix<span class="token punctuation">,</span>flatten<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>depth_scale<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fx<span class="token punctuation">,</span>fy <span class="token operator">=</span> depth_cam_matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>depth_cam_matrix<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>    cx<span class="token punctuation">,</span>cy <span class="token operator">=</span> depth_cam_matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>depth_cam_matrix<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>    h<span class="token punctuation">,</span>w<span class="token operator">=</span>np<span class="token punctuation">.</span>mgrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>depth_map<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span>depth_map<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    z<span class="token operator">=</span>depth_map<span class="token operator">/</span>depth_scale    x<span class="token operator">=</span><span class="token punctuation">(</span>w<span class="token operator">-</span>cx<span class="token punctuation">)</span><span class="token operator">*</span>z<span class="token operator">/</span>fx    y<span class="token operator">=</span><span class="token punctuation">(</span>h<span class="token operator">-</span>cy<span class="token punctuation">)</span><span class="token operator">*</span>z<span class="token operator">/</span>fy    xyz<span class="token operator">=</span>np<span class="token punctuation">.</span>dstack<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> flatten<span class="token operator">==</span><span class="token boolean">False</span> <span class="token keyword">else</span> np<span class="token punctuation">.</span>dstack<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>dpi<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">)</span>    ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span> projection<span class="token operator">=</span><span class="token string">'3d'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'point cloud'</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'spectral'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># xyz=cv2.rgbd.depthTo3d(depth_map,depth_cam_matrix)</span>    <span class="token keyword">return</span> xyz<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 随便生成一个 分辨率为(1280, 720)的深度图, 注意深度图shape为(1280, 720)即深度图为单通道, 维度为2</span>    <span class="token comment" spellcheck="true">#而不是类似于shape为(1280, 720, 3)维度为3的这种</span>    depth_map <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1280</span><span class="token punctuation">,</span> <span class="token number">720</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>matshow<span class="token punctuation">(</span>depth_map<span class="token punctuation">,</span>cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>Blues<span class="token punctuation">)</span>    depth_cam_matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">320</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">220</span><span class="token punctuation">,</span><span class="token number">320</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    depth2xyz<span class="token punctuation">(</span>depth_map<span class="token punctuation">,</span> depth_cam_matrix<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://github.com/niconielsen32/ComputerVision/tree/master/pointClouds" target="_blank" rel="noopener">rgb+深度图转点云，用到open3d</a> ，<a href="https://www.youtube.com/watch?v=vGr8Bg2Fda8" target="_blank" rel="noopener">配套YT视频</a></li><li><a href="https://github.com/xinliy/python_depth_to_point_cloud/blob/master/python_depth_to_point_cloud.py" target="_blank" rel="noopener">rgb+深度图转点云，用focal_length和scaling factor生成并保存点云</a></li><li><a href="https://github.com/vitalemonate/depth2Cloud/blob/main/depth2Cloud.py" target="_blank" rel="noopener">rgb+深度图转点云，用scaling factor和视角（可设置）</a></li></ul><ul><li><p><a href="https://www.digitalocean.com/community/tutorials/how-to-use-argparse-to-write-command-line-programs-in-python" target="_blank" rel="noopener">How To Use argparse to Write Command-Line Programs in Python</a></p></li><li><p>pandas中[data[[0]]](<a href="https://stackoverflow.com/questions/45379597/python-0-meaning" target="_blank" rel="noopener">https://stackoverflow.com/questions/45379597/python-0-meaning</a>) 里面的括号产生一个列表，外面的括号用列表中的元素提取内容</p></li><li><p>numpy中，data[:,0]与data[:,[0]]的区别：维度不同。示例</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=="</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=="</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output:</span><span class="token comment" spellcheck="true"># [[1 2 3]</span><span class="token comment" spellcheck="true">#  [3 4 6]]</span><span class="token comment" spellcheck="true"># ==</span><span class="token comment" spellcheck="true"># [1 3]</span><span class="token comment" spellcheck="true"># (2,)</span><span class="token comment" spellcheck="true"># ==</span><span class="token comment" spellcheck="true"># [[1]</span><span class="token comment" spellcheck="true">#  [3]]</span><span class="token comment" spellcheck="true"># (2, 1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://muzing.top/posts/a29e4743/" target="_blank" rel="noopener">Black —— Python代码格式化工具</a></p></li><li><p><a href="https://medium.com/python-features/magic-methods-demystified-3c9e93144bf7" target="_blank" rel="noopener">Python Magic Methods Explained 魔法方法</a></p></li><li><p>导入package和module</p><ul><li>更详细的:<a href="https://realpython.com/python-modules-packages/#importing-from-a-package" target="_blank" rel="noopener">参考链接1</a>，<a href="https://realpython.com/python-import/#modules" target="_blank" rel="noopener">参考链接2</a></li></ul></li></ul><blockquote><p><a href="https://stackoverflow.com/questions/710551/use-import-module-or-from-module-import" target="_blank" rel="noopener">I personally always use</a><br><code>from package.subpackage.subsubpackage import module</code> (注：这时package中的<strong>init</strong>.py 函数可以为空))<br>and then access everything as<br><code>module.function</code><br><code>module.modulevar</code><br>etc. The reason is that at the same time you have short invocation, and you clearly define the module namespace of each routine, something that is very useful if you have to search for usage of a given module in your source.</p></blockquote><blockquote><p><img src="https://s2.loli.net/2022/03/18/vHV7XMBxnstSYQ1.png" alt="20220318000045"></p></blockquote><p><img src="https://s2.loli.net/2022/03/17/QDAB9HZmvheWUp6.png" alt="20220317233347"></p><p><img src="https://s2.loli.net/2022/03/17/CboeE4IsNzKmfpT.png" alt="20220317233443"><br><img src="https://s2.loli.net/2022/03/17/lI2R7QPdWG5OFkg.png" alt="20220317233503"><br><img src="https://s2.loli.net/2022/03/17/eWE2AFRKMTvBHnQ.png" alt="20220317233529"></p><p>对应的main.py :</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方式1：因为有resource中的__init__.py，所以可以直接导入package resource</span><span class="token keyword">import</span> resourceone<span class="token operator">=</span>resource<span class="token punctuation">.</span>module1<span class="token punctuation">.</span>One<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方式2：从package中导入module</span><span class="token keyword">from</span> resource <span class="token keyword">import</span> module2two<span class="token operator">=</span>module2<span class="token punctuation">.</span>Two<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 或者直接导入类，但是google标准不建议这样写</span><span class="token comment" spellcheck="true"># from resource.module2 import Two</span><span class="token comment" spellcheck="true"># two=Two()</span><span class="token comment" spellcheck="true"># 输出：</span><span class="token comment" spellcheck="true"># Initialize...</span><span class="token comment" spellcheck="true"># module one</span><span class="token comment" spellcheck="true"># module two</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://www.freesion.com/article/149484742/" target="_blank" rel="noopener">在pycharm和命令行中导入的路径是不同的</a><ul><li>pycharm自动将整个工程的绝对路径加入sys.path，而命令行中需要手动导入。搞清楚搜索路径才能避免很多import问题。不清楚时可以用<code>print(sys.path)</code>检查一下</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> osCUR_DIR<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 当前可执行文件所在的directory</span>BASE_DIR<span class="token operator">=</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>CUR_DIR<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 对应的父文件夹</span><span class="token comment" spellcheck="true"># 可以用 os.path.dirname 一直往上写，写到项目的根目录,并添加该目录。如：</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#可以添加当前文件夹的父文件夹</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://blog.51cto.com/u_15080021/4201546" target="_blank" rel="noopener">用pycharm同步本地与服务器的代码</a></li></ul><ul><li><p>相机标定（PnP计算出的平移向量的z可表示为相机到世界坐标系的距离）</p><ul><li><a href="https://github.com/1368069096/Calibration_ZhangZhengyou_Method" target="_blank" rel="noopener">Calibration_ZhangZhengyou_Method</a>，<a href="https://github.com/niconielsen32/ComputerVision/blob/master/cameraCalibration.py" target="_blank" rel="noopener">类似代码：cameraCalibration</a></li><li><a href="https://github.com/Abhijit-2592/camera_calibration_API/blob/master/examples/example_notebooks/chessboard_calibration.ipynb" target="_blank" rel="noopener">chessboard_calibration，也包含grid_calibration</a></li><li>其他<ul><li><a href="https://blog.csdn.net/light169/article/details/105629710" target="_blank" rel="noopener">二维码四个角点到相机的距离计算</a>，也可以<a href="https://blog.csdn.net/m0_37811342/article/details/80394935" target="_blank" rel="noopener">用相似三角形计算物体或者目标到相机的距离</a></li><li><a href="https://zhuanlan.zhihu.com/p/30813733" target="_blank" rel="noopener">相机标定究竟在标定什么？</a>  </li></ul></li></ul></li><li><p><a href="https://www.datatechnotes.com/2021/11/b-spline-fitting-example-in-python.html" target="_blank" rel="noopener">B-spline Curve Fitting Example in Python</a></p></li><li><p><a href="https://www.cxybb.com/article/weixin_41010198/115975315" target="_blank" rel="noopener">cv2.Rodrigues进行旋转矩阵和旋转向量之间的相互转化</a></p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npextrinsic <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.05812254</span><span class="token punctuation">,</span> <span class="token number">0.9969995</span><span class="token punctuation">,</span> <span class="token number">0.05112498</span><span class="token punctuation">,</span> <span class="token number">0.043909</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.02821786</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.04955038</span><span class="token punctuation">,</span> <span class="token number">0.99837293</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.026862</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">0.99791058</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.05947061</span><span class="token punctuation">,</span> <span class="token number">0.02525319</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.006717</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>rot_mat <span class="token operator">=</span> extrinsic<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"rot_mat:\n {rot_mat}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把旋转矩阵转化为旋转向量</span>rvec<span class="token punctuation">,</span> _ <span class="token operator">=</span> cv2<span class="token punctuation">.</span>Rodrigues<span class="token punctuation">(</span>rot_mat<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"rvec:\n {rvec}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把旋转向量转换为旋转矩阵</span>rot_mat<span class="token punctuation">,</span> _ <span class="token operator">=</span> cv2<span class="token punctuation">.</span>Rodrigues<span class="token punctuation">(</span>rvec<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"rot_mat:\n {rot_mat}"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/03/28/jqmSAuQeFlGwWbR.png" alt="https://docs.opencv.org/2.4/modules/calib3d/doc/camera_calibration_and_3d_reconstruction.html"></p><ul><li>批量修改文件或文件夹</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> osCUR_DIR<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span>BASE_DIR<span class="token operator">=</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>CUR_DIR<span class="token punctuation">)</span>CUR_DIR<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>CUR_DIR<span class="token punctuation">,</span><span class="token string">"subfolder"</span><span class="token punctuation">)</span>files<span class="token operator">=</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>CUR_DIR<span class="token punctuation">)</span>num<span class="token operator">=</span><span class="token string">"100"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> files<span class="token punctuation">:</span>    old_name<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>CUR_DIR<span class="token punctuation">,</span>i<span class="token punctuation">)</span>    new_name<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>CUR_DIR<span class="token punctuation">,</span><span class="token string">"%06d"</span><span class="token operator">%</span>int<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"suffix.txt"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 补齐6位，不足6位前面加0</span>    os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>old_name<span class="token punctuation">,</span>new_name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 可以修改文件名称或者文件夹名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>把数据转成多(单)通道的图片<ul><li>彩色图：jpg中，超过255的数据会被置为255.彩色图每个通道最大为255，所以用jpg/png都可以。</li><li>深度图：png中，可以保存大于255的数，深度图可能有比较大的值，所以用png</li></ul><ul><li>单通道示例  <ul><li>read_img=cv2.imread(‘depth1.png’,-1) ：-1 表示按照原来格式，若不写-1，则会自动将单通道转化为3通道</li></ul></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token comment" spellcheck="true"># import sys</span><span class="token comment" spellcheck="true"># print(sys.path)</span>img<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'uint16'</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'depth1.png'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>read_img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'depth1.png'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>read_img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (3, 3)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>read_img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><p>彩色图</p><ul><li>如果是3通道的彩色图(每个通道的范围是0-255)，则保存为jpg或png格式</li><li>jpg: 若通道中的值超过255，则截断到255</li><li>png：若通道中的值超过255，则报错：<code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></li></ul></li><li><p>单通道深度图</p><ul><li>把数据保存成png的格式。即便超过255的范围也OK</li><li>若保存为jpg，则超过255的数据会被置为255</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token comment" spellcheck="true"># import sys</span><span class="token comment" spellcheck="true"># print(sys.path)</span><span class="token comment" spellcheck="true"># 如果是3通道的，则保存为 jpg/png 格式</span>img<span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint16<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#(100, 300, 3)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'depth1.png'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>read_img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'depth1.png'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>read_img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#(100, 300, 3)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>read_img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 254</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>read_img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果是单通道的，则保存为png格式</span>img<span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint16<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (100, 300)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'depth1.png'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>read_img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'depth1.png'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>read_img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (100, 300)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>read_img<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 999</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>read_img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><p>远程连接服务器，<a href="https://juejin.cn/post/7035805507151462413" target="_blank" rel="noopener">并将图像显示在本地</a></p><ul><li><a href="https://blog.csdn.net/Rong_Toa/article/details/80365932" target="_blank" rel="noopener">解决远程链接的 cannot open display</a></li></ul></li><li><p><a href="https://www.youtube.com/watch?v=bD05uGo_sVI" target="_blank" rel="noopener">yield使用</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机操作系统</title>
      <link href="/2020/08/29/ji-suan-ji-ji-chu/ji-suan-ji-cao-zuo-xi-tong/"/>
      <url>/2020/08/29/ji-suan-ji-ji-chu/ji-suan-ji-cao-zuo-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="进程死锁"><a href="#进程死锁" class="headerlink" title="进程死锁"></a>进程死锁</h1><blockquote><p>张三拿着语文课本。他学完语文课本后需要数学课本（有人归还数学课本后他才能学数学）；<br>李四拿着数学课本。他学完数学课本后需要语文课本（有人归还语文课本后他才能学语文）。<br>张三等待李四归还数学课本，李四等待张三归还语文课本。他们等啊等，一直都等不到自己想要的书。因而两个人都永远卡在那里无法前进</p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>有两个进程 A 和 B ，各自在加锁的状态下运行。A 持有一部分资源，并且等待 B 线程中的资源以完成自己的工作，而此时 B 也在等待 A 中的资源以完成自己的工作。由于他们都是锁定状态，所以他们必须完成了自己的工作后，自己持有的资源才能释放。于是进程无休止地等待，导致死锁。<br>（死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。）</p><h2 id="产生死锁的的四个条件"><a href="#产生死锁的的四个条件" class="headerlink" title="产生死锁的的四个条件"></a>产生死锁的的四个条件</h2><ol><li><p>互斥条件：一个资源每次只能被一个进程使用；（语文数学课本只各有一本）</p></li><li><p>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放；（张三没有拿到数学课本前，不会归还语文课本，李四同理）</p></li><li><p>不剥夺条件：进程已获得的资源，在没使用完之前，不能强行剥夺，只能在使用完时由自己释放；（两个人不能互相抢）</p></li><li><p>循环等待条件：多个进程之间形成一种互相循环等待资源的关系。（张三等李四，李四等张三）</p><ul><li>指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。</li></ul></li></ol><h2 id="如何破坏死锁？"><a href="#如何破坏死锁？" class="headerlink" title="如何破坏死锁？"></a>如何破坏死锁？</h2><p>破坏上述中任一条件即可</p><ol><li>破坏互斥条件：改造独占性资源为虚拟资源<del>，但大部分资源已无法改造</del></li><li>破坏请求与保持条件：当一进程占有一独占性资源后又申请一独占性资源而无法满足，则退出原占有的资源</li><li>破坏不剥夺条件：采用资源预先分配策略，即进程运行前申请全部资源，满足则运行，不然就等待，这样就不会占有且申请</li><li>破坏循环等待条件：实现资源有序分配策略，对所有设备实现分类编号，所有进程只能采用按序号递增的形式申请资源</li></ol><h2 id="死锁检测与死锁恢复"><a href="#死锁检测与死锁恢复" class="headerlink" title="死锁检测与死锁恢复"></a>死锁检测与死锁恢复</h2><ul><li>每种类型一个资源的死锁检测算法是通过检测有向图是否存在环来实现，从一个节点出发进行深度优先搜索，对访问过的节点进行标记，如果访问了已经标记的节点，就表示有向图存在环，也就是检测到死锁的发生。</li><li>死锁恢复：利用抢占恢复；利用回滚恢复；通过杀死进程恢复。</li></ul><h1 id="线程和进程的区别是什么？"><a href="#线程和进程的区别是什么？" class="headerlink" title="线程和进程的区别是什么？"></a>线程和进程的区别是什么？</h1><blockquote><ul><li><a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="noopener">进程与线程的一个简单解释，以工厂为例（阮一峰）</a>, </li><li><a href="https://www.zhihu.com/question/25532384/answer/411179772" target="_blank" rel="noopener">以火车为例，比喻。</a>进程=火车，线程=车厢</li></ul></blockquote><ul><li>进程是资源（CPU、内存等）分配的最小单位（如一个工厂），进程是资源分配的最小单位，线程是CPU调度的最小单位（如工厂的工人） </li><li>进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多</li><li>线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点</li><li>但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间</li></ul>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六章：计算机网络</title>
      <link href="/2020/08/28/labuladong/di-liu-zhang-ji-suan-ji-wang-luo/"/>
      <url>/2020/08/28/labuladong/di-liu-zhang-ji-suan-ji-wang-luo/</url>
      
        <content type="html"><![CDATA[<p><a href="https://labuladong.gitbook.io/algo/labuladong-he-ta-de-peng-you-men" target="_blank" rel="noopener">labuladong 计算机网络</a></p><h1 id="25-张图解：键入网址后，到网页显示，其间发生了什么"><a href="#25-张图解：键入网址后，到网页显示，其间发生了什么" class="headerlink" title="25 张图解：键入网址后，到网页显示，其间发生了什么"></a><a href="https://labuladong.gitbook.io/algo/labuladong-he-ta-de-peng-you-men/25-zhang-tu-jie-jian-ru-wang-zhi-hou-dao-wang-ye-xian-shi-qi-jian-fa-sheng-le-shi-mo#01-gu-dan-xiao-di-http" target="_blank" rel="noopener">25 张图解：键入网址后，到网页显示，其间发生了什么</a></h1><h2 id="解答："><a href="#解答：" class="headerlink" title="解答："></a><a href="https://blog.csdn.net/kongmin_123/article/details/82555936" target="_blank" rel="noopener">解答：</a></h2><ul><li>DNS域名解析<ul><li><strong>查询服务器域名对应的 IP 地址</strong>。因为委托操作系统发送消息时，必须提供通信对象的 IP 地址</li><li>DNS 中的域名都是用句点来分隔的，比如 <code>www.server.com</code>，这里的句点代表了不同层次之间的界限。在域名中，越靠右的位置表示其层级越高</li></ul></li><li>浏览器得到了IP以后，向服务器发送TCP连接<ul><li>TCP 连接的过程，通常称为三次握手，目的是<strong>保证双方都有发送和接收的能力</strong>。</li></ul></li><li>浏览器发送HTTP请求<ul><li>浏览器和服务器建立连接以后，浏览器接着按这个IP地址给服务器发送一个http请求，方式为get，例如访问<code>www.baidu.com</code>。其本质是在建立起的TCP连接中，按照HTTP协议标准<strong>发送一个索要网页的请求</strong></li></ul></li><li>服务器处理请求<ul><li>服务器（经过物理层→数据链路层→网络层→传输层→应用层）收到浏览器的请求以后，会解析这个请求（读请求头），然后生成一个响应头和具体响应内容。接着服务器会传回来一个响应头和一个响应，响应头告诉了浏览器一些必要的信息 </li></ul></li><li>浏览器解析渲染页面</li><li>关闭TCP连接，即TCP的四次挥手<br><img src="https://img-blog.csdnimg.cn/20200828163409378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></li></ul><h1 id="30张图解：HTTP常见面试题"><a href="#30张图解：HTTP常见面试题" class="headerlink" title="30张图解：HTTP常见面试题"></a><a href="https://labuladong.gitbook.io/algo/labuladong-he-ta-de-peng-you-men/30-zhang-tu-jie-http-chang-jian-mian-shi-ti" target="_blank" rel="noopener">30张图解：HTTP常见面试题</a></h1><h2 id="HTTP基本概念"><a href="#HTTP基本概念" class="headerlink" title="HTTP基本概念"></a>HTTP基本概念</h2><ul><li>HTTP 是超文本传输协议，也就是HyperText Transfer Protocol。HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」，是一个<strong>双向协议</strong>。</li></ul><h2 id="GET-与-POST"><a href="#GET-与-POST" class="headerlink" title="GET 与 POST"></a>GET 与 POST</h2><ul><li>GET 方法的含义是请求从服务器获取资源，这个资源可以是静态的文本、页面、图片视频等</li><li>POST 方法则是相反操作，它向 URI <strong>指定的资源提交数据</strong>，数据就放在报文的 body 里</li><li>GET 方法就是<strong>安全且幂等</strong>的，因为它是「只读」操作，无论操作多少次，服务器上的数据都是安全的，且每次的结果都是相同的。POST 因为是「新增或提交数据」的操作，会修改服务器上的资源，所以是不安全的，且多次提交数据就会创建多个资源，所以<strong>不是幂等的</strong></li></ul><h2 id="HTTP-与-HTTPS-有哪些区别？"><a href="#HTTP-与-HTTPS-有哪些区别？" class="headerlink" title="HTTP 与 HTTPS 有哪些区别？"></a>HTTP 与 HTTPS 有哪些区别？</h2><ul><li>HTTP 是超文本传输协议，信息是明文传输，<strong>存在安全风险</strong>的问题。HTTPS 则解决 HTTP 不安全的缺陷，在 <strong>TCP 和 HTTP 网络层之间加入了 SSL/TLS 安全协议</strong>，使得报文能够加密传输<ul><li>HTTPS 实现了<strong>信息加密，校验机制，身份证书</strong>等功能，使传输更安全</li></ul></li><li>HTTP 连接建立相对简单， <strong>TCP 三次握手之后便可进行 HTTP 的报文传输</strong>。而 HTTPS 在 TCP 三次握手之后，<strong>还需进行 SSL/TLS 的握手过程</strong>，才可进入加密报文传输</li><li>HTTP 的端口号是 80，HTTPS 的端口号是 443</li><li>HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的</li></ul><p><img src="https://img-blog.csdnimg.cn/20200828162303211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><h2 id="HTTPS-是如何解决HTTP的窃听，冒充，篡改等风险的？"><a href="#HTTPS-是如何解决HTTP的窃听，冒充，篡改等风险的？" class="headerlink" title="HTTPS 是如何解决HTTP的窃听，冒充，篡改等风险的？"></a>HTTPS 是如何解决HTTP的窃听，冒充，篡改等风险的？</h2><ul><li><strong>混合加密</strong>的方式实现信息的机密性，解决了窃听的风险</li><li>将<strong>服务器公钥放入到数字证书</strong>中，解决了冒充的风险</li><li><strong>摘要算法的方式</strong>来实现完整性，它能够为数据生成独一无二的「指纹」，指纹用于校验数据的完整性，解决了篡改的风险</li></ul><h1 id="30张图解：TCP重传、滑动窗口、流量控制、拥塞控制"><a href="#30张图解：TCP重传、滑动窗口、流量控制、拥塞控制" class="headerlink" title="30张图解：TCP重传、滑动窗口、流量控制、拥塞控制"></a><a href="https://labuladong.gitbook.io/algo/labuladong-he-ta-de-peng-you-men/30-zhang-tu-jie-tcp-zhong-chuan-hua-dong-chuang-kou-liu-liang-kong-zhi-yong-sai-kong-zhi-fa-chou" target="_blank" rel="noopener">30张图解：TCP重传、滑动窗口、流量控制、拥塞控制</a></h1><h2 id="重传机制"><a href="#重传机制" class="headerlink" title="重传机制"></a>重传机制</h2><p>在 TCP 中，当发送端的数据到达接收主机时，接收端主机会返回一个确认应答消息，表示已收到消息<br><img src="https://img-blog.csdnimg.cn/20200828170035866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt><br>但在错综复杂的网络，并不一定能如上图那么顺利能正常的数据传输，万一数据在传输过程中丢失了呢？<br>所以 TCP 针对数据包丢失的情况，会用重传机制解决：<br>    1.    超时重传 ：当超过指定的时间后，没有收到对方的 ACK 确认应答报文，就会重发该数据<br>    2.    快速重传：不以时间为驱动，而是以<strong>数据</strong>驱动重传。但是这样的话，发送方不知道哪些数据收到了，哪些没收到<br>    3.    SACK（ Selective Acknowledgment 选择性确认）: 可以将缓存的地图发送给发送方，这样发送方就可以知道哪些数据收到了，哪些数据没收到，知道了这些信息，就可以只重传丢失的数据<br>    4.    Duplicate-SACK：使用了 SACK 来告诉「发送方」有哪些数据被重复接收了</p><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><ul><li><p>TCP 是每发送一个数据，都要进行一次确认应答。当上一个数据包收到了应答了， 再发送下一个。但这样的话，<strong>数据包的往返时间越长，通信的效率就越低</strong>。所以用滑动窗口解决该问题。窗口大小就是指<strong>无需等待确认应答，而可以继续发送数据的最大值</strong>（TCP窗口的最大值为2的16次方，即65535字节）</p></li><li><p>TCP 头里有一个字段叫 Window，也就是窗口大小。这个字段是<strong>接收端告诉发送端自己还有多少缓冲区可以接收数据</strong>。于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来。</p></li><li><p>流量控制</p><ul><li>发送方不能无脑的发数据给接收方，要考虑接收方处理能力。如果对方处理不过来，那么就会导致触发重发机制，浪费资源</li><li>TCP 提供一种机制可以让「发送方」根据「接收方」的<strong>实际接收能力控制发送的数据量</strong>，这就是所谓的<strong>流量控制</strong></li></ul></li><li><p>拥塞控制</p><ul><li>在网络出现拥堵时，如果继续发送大量数据包，可能会导致数据包时延、丢失等，这时 TCP 就会重传数据，但是一重传就会导致网络的负担更重，于是会导致更大的延迟以及更多的丢包，这个情况就会进入恶性循环被不断地放大….</li><li>于是，就有了拥塞控制，控制的目的就是<strong>避免「发送方」的数据填满整个网络</strong>。 拥塞窗口 cwnd是发送方维护的一个的状态变量，它会根据网络的拥塞程度动态变化的</li></ul></li></ul><h1 id="40张图解：TCP三次握手和四次挥手面试题"><a href="#40张图解：TCP三次握手和四次挥手面试题" class="headerlink" title="40张图解：TCP三次握手和四次挥手面试题"></a><a href="https://labuladong.gitbook.io/algo/labuladong-he-ta-de-peng-you-men/40-zhang-tu-jie-tcp-san-ci-wo-shou-he-si-ci-hui-shou-mian-shi-ti" target="_blank" rel="noopener">40张图解：TCP三次握手和四次挥手面试题</a></h1><h2 id="TCP-和-UDP-区别"><a href="#TCP-和-UDP-区别" class="headerlink" title="TCP 和 UDP 区别"></a>TCP 和 UDP 区别</h2><ul><li>传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）</li><li>用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信</li></ul><ol><li>连接<br>TCP 是面向连接的传输层协议，传输数据前先要建立连接。<br>UDP 是不需要连接，即刻传输数据。</li><li>服务对象<br>TCP 是一对一的两点服务，即一条连接只有两个端点。<br>UDP 支持一对一、一对多、多对多的交互通信</li><li>可靠性<br>TCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按需到达。<br>UDP 是尽最大努力交付，不保证可靠交付数据。</li><li>拥塞控制、流量控制<br>TCP 有拥塞控制和流量控制机制，保证数据传输的安全性。<br>UDP 则没有，即使网络非常拥堵了，也不会影响 UDP 的发送速率。</li><li>首部开销<br>TCP 首部长度较长，会有一定的开销，首部在没有使用「选项」字段时是 20 个字节，如果使用了「选项」字段则会变长的。<br>UDP 首部只有 8 个字节，并且是固定不变的，开销较小。</li><li>传输方式<br>TCP 是流式传输，没有边界，但保证顺序和可靠。<br>UDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。</li><li>分片不同<br>TCP 的数据大小如果大于 MSS 大小，则会在传输层进行分片，目标主机收到后，也同样在传输层组装 TCP 数据包，如果中途丢失了一个分片，只需要传输丢失的这个分片。<br>UDP 的数据大小如果大于 MTU 大小，则会在 IP 层进行分片，目标主机收到后，在 IP 层组装完数据，接着再传给传输层，但是如果中途丢了一个分片，则就需要重传所有的数据包，这样传输效率非常差，所以通常 UDP 的报文应该小于 MTU。</li></ol><h2 id="TCP-和-UDP-应用场景"><a href="#TCP-和-UDP-应用场景" class="headerlink" title="TCP 和 UDP 应用场景"></a>TCP 和 UDP 应用场景</h2><ul><li>由于 TCP 是面向连接，能保证数据的可靠性交付，因此经常用于：</li></ul><ol><li>FTP 文件传输</li><li>HTTP / HTTPS</li></ol><ul><li>由于 UDP 面向无连接，它可以随时发送数据，再加上UDP本身的处理既简单又高效，因此经常用于：</li></ul><ol><li>包总量较少的通信，如 DNS 、SNMP 等</li><li>视频、音频等多媒体通信</li><li>广播通信</li></ol><h2 id="TCP的三次握手"><a href="#TCP的三次握手" class="headerlink" title="TCP的三次握手"></a>TCP的三次握手</h2><p><strong>第三次握手是可以携带数据的</strong>，前两次握手是不可以携带数据的<br><img src="https://img-blog.csdnimg.cn/20200828193854391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><p>假设 A 为客户端，B 为服务器端。</p><ul><li>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。</li><li>A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。</li><li>B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。</li><li>A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。</li><li>B 收到 A 的确认后，连接建立。</li></ul><h2 id="TCP为什么是三次握手？"><a href="#TCP为什么是三次握手？" class="headerlink" title="TCP为什么是三次握手？"></a>TCP为什么是三次握手？</h2><ul><li>（因为三次握手才能保证双方具有接收和发送的能力）</li><li><strong>三次握手才可以阻止重复历史连接的初始化（主要原因）</strong><ul><li>客户端连续发送多次 SYN 建立连接的报文，在网络拥堵情况下：<ul><li>一个「旧 SYN 报文」比「最新的 SYN 」 报文早到达了服务端；那么此时服务端就会回一个 SYN + ACK 报文给客户端；客户端收到后可以根据自身的上下文，判断这是一个历史连接（序列号过期或超时），那么客户端就会发送 RST 报文给服务端，表示中止这一次连接。</li></ul></li><li>如果是两次握手连接，就不能判断当前连接是否是历史连接，三次握手则可以在客户端（发送方）准备发送第三次报文时，客户端因有足够的上下文来判断当前连接是否是历史连接：<ul><li>如果是历史连接（序列号过期或超时），则第三次握手发送的报文是 RST 报文，以此中止历史连接；<br>如果不是历史连接，则第三次发送的报文是 ACK 报文，通信双方就会成功建立连接</li></ul></li></ul></li><li>三次握手才可以同步双方的初始序列号</li><li>三次握手才可以避免资源浪费</li></ul><h2 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h2><p><img src="https://img-blog.csdnimg.cn/20200828203712197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><ul><li>A 发送连接释放报文，FIN=1。</li><li>B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。</li><li>当 B 不再需要连接时，发送连接释放报文，FIN=1。</li><li>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。</li><li>B 收到 A 的确认后释放连接。</li></ul><h2 id="TCP-为什么是四次挥手？"><a href="#TCP-为什么是四次挥手？" class="headerlink" title="TCP 为什么是四次挥手？"></a>TCP 为什么是四次挥手？</h2><ul><li>关闭连接时，客户端向服务端发送 FIN 时，仅仅表示客户端不再发送数据了<strong>但是还能接收数据</strong></li><li>服务器收到客户端的 FIN 报文时，先回一个 ACK 应答报文，<strong>而服务端可能还有数据需要处理和发送</strong>，等服务端不再发送数据时，才发送 FIN 报文给客户端来表示同意现在关闭连接</li></ul><h1 id="45张图解：IP基础知识全家桶"><a href="#45张图解：IP基础知识全家桶" class="headerlink" title="45张图解：IP基础知识全家桶"></a><a href="https://labuladong.gitbook.io/algo/labuladong-he-ta-de-peng-you-men/45-zhang-tu-jie-ip-ji-chu-zhi-shi-quan-jia-tong" target="_blank" rel="noopener">45张图解：IP基础知识全家桶</a></h1><h2 id="IP的基本认识"><a href="#IP的基本认识" class="headerlink" title="IP的基本认识"></a>IP的基本认识</h2><ul><li><p>IP 在 TCP/IP 参考模型中处于第三层，也就是<strong>网络层</strong>。网络层的主要作用是：实现主机与主机之间的通信，也叫点对点（end to end）通信。</p></li><li><p>MAC 的作用则是实现「直连」的两个设备之间通信，而 IP 则负责在「没有直连」的两个网络之间进行通信传输。</p></li></ul><p><strong>IP</strong>：整个旅游行程表就<strong>相当于网络层</strong>，充当远程定位的功能，<strong>行程的开始好比源 IP，行程的终点好比目的 IP 地址</strong>。<br><strong>MAC</strong>：在区间内移动相当于<strong>数据链路层</strong>，充当<strong>区间内两个节点传输</strong>的功能，区间内的出发点好比源 MAC 地址，目标地点好比目的 MAC 地址<br><img src="https://img-blog.csdnimg.cn/20200828205359161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><h2 id="IP-地址的分类"><a href="#IP-地址的分类" class="headerlink" title="IP 地址的分类"></a>IP 地址的分类</h2><p>对于 A、B、C 类主要分为两个部分，分别是网络号和主机号<br><img src="https://img-blog.csdnimg.cn/20200828230539759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt><br><img src="https://img-blog.csdnimg.cn/20200828232212201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt><br>主机号全为 1 指定某个网络下的所有主机，用于广播<br>主机号全为 0 指定某个网络</p><h2 id="无分类地址-CIDR及子网掩码"><a href="#无分类地址-CIDR及子网掩码" class="headerlink" title="无分类地址 CIDR及子网掩码"></a>无分类地址 CIDR及子网掩码</h2><p><img src="https://img-blog.csdnimg.cn/20200828232734141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt><br><img src="https://img-blog.csdnimg.cn/20200828232841700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt><br><img src="https://img-blog.csdnimg.cn/20200828233219102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt><br>由于子网网络地址被划分成 2 位，那么子网地址就有 4 个，分别是 00、01、10、11。<img src="https://img-blog.csdnimg.cn/20200828233357342.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt><br><img src="https://img-blog.csdnimg.cn/20200828233433874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><h2 id="公有-IP-地址与私有-IP-地址"><a href="#公有-IP-地址与私有-IP-地址" class="headerlink" title="公有 IP 地址与私有 IP 地址"></a>公有 IP 地址与私有 IP 地址</h2><p><img src="https://img-blog.csdnimg.cn/20200828233532502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><h2 id="IPV4-和IPV6"><a href="#IPV4-和IPV6" class="headerlink" title="IPV4 和IPV6"></a>IPV4 和IPV6</h2><ul><li>IPv4 的地址是 <strong>32 位</strong>的，大约可以提供 42 亿个地址。但是 IPv6 的地址是 <strong>128 位</strong>的，这可分配的地址数量是大的惊人，说个段子 IPv6 可以保证地球上的每粒沙子都能被分配到一个 IP 地址</li><li>IPv6 除了有更多的地址之外，还有更好的安全性和扩展性，说简单点就是 IPv6 相比于 IPv4 能带来更好的网络体验。<ul><li>IPv6 可自动配置，即使没有 DHCP 服务器也可以<strong>实现自动分配IP地址</strong></li><li>IPv6 包头包首部长度采用固定的值 40 字节，去掉了包头校验和，简化了首部结构，<strong>减轻了路由器负荷，大大提高了传输的性能</strong>。</li><li>IPv6 有应对伪造 IP 地址的网络安全功能以及防止线路窃听的功能，<strong>大大提升了安全性</strong><br><img src="https://img-blog.csdnimg.cn/20200829125751727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></li></ul></li></ul><h2 id="ARP-（Address-Resolution-Protocol，地址解析协议）"><a href="#ARP-（Address-Resolution-Protocol，地址解析协议）" class="headerlink" title="ARP （Address Resolution Protocol，地址解析协议）"></a>ARP （Address Resolution Protocol，地址解析协议）</h2><p><img src="https://i.loli.net/2020/08/29/GWgYKVaB5NJCu6I.png" alt="20200829232021"></p><p>网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP 数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。</p><p>ARP 实现由 IP 地址得到 MAC 地址。</p><ul><li>在传输一个 IP 数据报的时候，确定了源 IP 地址和目标 IP 地址后，就会通过主机「路由表」确定 IP 数据包下一跳。然而，网络层的下一层是数据链路层，而链路层实现具体每段链路之间的通信。<strong>所以我们还要知道「下一跳」的 MAC 地址</strong>。</li><li>由于主机的路由表中可以找到下一跳的 IP 地址，所以可以通过 ARP 协议，求得下一跳的 MAC 地址。</li></ul><p>ARP 是借助 ARP 请求与 ARP 响应两种类型的包确定 MAC 地址的：</p><ul><li>主机会<strong>通过广播发送 ARP 请求</strong>，这个包中包含了想要知道的 MAC 地址的主机 IP 地址。</li><li>当同个链路中的所有设备收到 ARP 请求时，会去拆开 ARP 请求包里的内容，如果 ARP 请求包中的目标 IP 地址与自己的 IP 地址一致，那么这个设备就<strong>将自己的 MAC 地址塞入 ARP 响应包</strong>返回给主机。<br><img src="https://img-blog.csdnimg.cn/20200829131607551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯2020笔试记录</title>
      <link href="/2020/08/24/leetcode/others/teng-xun-2020-bi-shi-ji-lu/"/>
      <url>/2020/08/24/leetcode/others/teng-xun-2020-bi-shi-ji-lu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/discuss/486638" target="_blank" rel="noopener">技术研究 数据分析笔试题&amp;题解</a></p><p>（P.S. <a href="https://wandbox.org/" target="_blank" rel="noopener">一个支持多语言在线编译的页面</a>）</p><p><a href="https://blog.csdn.net/qq_22522375/article/details/108189181" target="_blank" rel="noopener">题解1</a><br><a href="https://www.nowcoder.com/discuss/486688?channel=1009&source_id=discuss_terminal_discuss_sim" target="_blank" rel="noopener">题解2（python实现）</a></p><h1 id="1-使括号有效的最小添加"><a href="#1-使括号有效的最小添加" class="headerlink" title="1. 使括号有效的最小添加"></a>1. 使括号有效的最小添加</h1><p><img src="https://img-blog.csdnimg.cn/20200824165931141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><blockquote><p>如果是单类别的括号，就是：<br><a href="https://leetcode-cn.com/problems/minimum-add-to-make-parentheses-valid/solution/python-tong-ji-shi-gua-hao-you-xiao-de-tian-jia-by/" target="_blank" rel="noopener">LeetCode921题</a><br>给定一个由 ‘（’ 和 ‘）’ 括号组成的字符串 S，我们需要添加最少的括号（ ‘（’ 或是<br>‘）’，可以在任何位置），以使得到的括号字符串有效。</p><p>从形式上讲，只有满足下面几点之一，括号字符串才是有效的：</p><ul><li>它是一个空字符串，或者 </li><li>它可以被写成 AB （A 与 B 连接）, 其中 A 和 B 都是有效字符串，或者 </li><li>它可以被写作 (A)，其中 A是有效字符串。 </li></ul><p>给定一个括号字符串，返回为使结果字符串有效而必须添加的最少括号数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minAddToMakeValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> S<span class="token punctuation">)</span><span class="token punctuation">:</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'?'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 加一个'?'打底，防止栈为空并且需要pop时报错</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> S<span class="token punctuation">:</span>            <span class="token keyword">if</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span> <span class="token operator">and</span> i<span class="token operator">==</span><span class="token string">')'</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 栈顶为左括号，且当前元素为右括号，可以互相抵消。此时栈顶出栈</span>                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 抵消不了的元素通通入栈</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> ```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><strong>本题解题思路：</strong></p><ul><li>经典区间dp问题，构建一个<code>len(s)*len(s)</code>的二维数组。dp[i][j]代表着从字符串i位置到j位置需要的最小括号匹配数。</li><li>对角线部分（<code>dp[i][i]</code>）为1，从下到上遍历上三角部分，    <code>dp[0][len(s)-1]</code> 为所求结果</li><li>当i&lt;j 时:<ul><li>如果第i个位置和第j个位置的两个括号是匹配的（<code>if((s[i]==&#39;[&#39; &amp;&amp; s[j]==&#39;]&#39;) or (s[i]==&#39;(&#39; &amp;&amp; s[j]==&#39;)&#39;))</code>），那么<code>dp[i][j] = dp[i+1][j-1]</code>，相当于两边分别都往外扩了一步；</li><li>如果第i个位置和第j个位置的两个括号无法抵消，则 <code>dp[i][j] = dp[i][k]+dp[k+1][j]</code>  k的范围为<code>[i,j)</code>:<ul><li>i和j处的括号无法抵消时，i和j的加入会影响<code>i+1到j-1范围内</code>的括号添加数。<del>因此不能用<code>dp[i][j-1]和dp[i+1][j]</code>来考虑<code>dp[i][j]</code>的状态转移。</del></li><li>所以用k遍历i到j之间的<code>dp[i][k]+dp[k+1][j]</code>相连结果。取相连结果的最小值（如<code>dp[2][4]</code>为 <code>dp[2][2]+dp[3][4]</code>,<code>dp[2][3]+dp[4][4]</code>中的最小值）</li><li>i和j之间由两个子字段组成。两个子字段的dp值相加（即：<code>dp[i][k]+dp[k+1][j]</code>）为潜在的<code>dp[i][j]</code>。最小的相加值“获胜”</li></ul></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 对角线初始化为1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 当i &lt; j时</span>            <span class="token comment" spellcheck="true"># 如果能抵消，则 dp[i][j]=dp[i+1][j-1]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'['</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span> <span class="token operator">or</span>  <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 如果不能抵消，则 dp[i][j] = dp[i][k]+dp[k+1][j] k的范围为[i,j)</span>                temp<span class="token operator">=</span>n                <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>                    temp<span class="token operator">=</span>min<span class="token punctuation">(</span>temp<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp        <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># s=str(input().strip())</span>s<span class="token operator">=</span><span class="token string">'()[)[)(][(]([)]]]((]]'</span>helper<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-求抛物线围成的面积"><a href="#2-求抛物线围成的面积" class="headerlink" title="2. 求抛物线围成的面积"></a>2. 求抛物线围成的面积</h1><p><img src="https://img-blog.csdnimg.cn/20200824184943576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><ul><li>题目要求取6位小数，注意输出的格式：<code>print(&quot;{:.6f}&quot;.format(ans))</code><br><a href="https://www.runoob.com/python/att-string-format.html" target="_blank" rel="noopener">Python format 格式化函数</a></li><li>计算n组面积</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">,</span>D<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 简单的微积分后，求得的面积</span>    ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span>A<span class="token operator">*</span><span class="token punctuation">(</span>D<span class="token operator">**</span><span class="token number">3</span><span class="token operator">-</span>C<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token operator">*</span><span class="token punctuation">(</span>D<span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span>C<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>B<span class="token operator">*</span><span class="token punctuation">(</span>D<span class="token operator">-</span>C<span class="token punctuation">)</span>    <span class="token keyword">return</span> ansn <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ans <span class="token operator">=</span> abs<span class="token punctuation">(</span>solution<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print("%.6f"%ans)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:.6f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-选队长的方案"><a href="#3-选队长的方案" class="headerlink" title="3. 选队长的方案"></a>3. 选队长的方案</h1><p><img src="https://img-blog.csdnimg.cn/20200824193626747.png#pic_center" alt><br>主要考察的知识点：</p><ul><li>排列组合找规律：方案数为 <code>ans=n * 2^(n-1)</code></li><li>用<strong>快速幂</strong>来计算方案数：<a href="https://leetcode-cn.com/problems/powx-n/solution/50-powx-n-kuai-su-mi-qing-xi-tu-jie-by-jyd/" target="_blank" rel="noopener">Krahets的快速幂知识点讲解</a></li></ul><p><img src="https://img-blog.csdnimg.cn/20200824194151327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">myPow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 若为0，直接返回结果</span>        res <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> x<span class="token punctuation">,</span> <span class="token operator">-</span>n <span class="token comment" spellcheck="true"># 把n为负数的情况转化成正数</span>        <span class="token keyword">while</span> n<span class="token punctuation">:</span>            <span class="token keyword">if</span> n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>res<span class="token operator">*=</span>x <span class="token comment" spellcheck="true"># res随着x的增大越来越大</span>            x<span class="token operator">*=</span>x             n<span class="token operator">=</span>n<span class="token operator">//</span><span class="token number">2</span> <span class="token comment" spellcheck="true"># 幂每次向下除2，直至为0</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以本题把方案数带进去即可：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 求x的n次方</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>    res <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> x<span class="token punctuation">,</span> <span class="token operator">-</span>n    <span class="token keyword">while</span> n<span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> res <span class="token operator">*=</span> x        x <span class="token operator">*=</span> x        n <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">2</span>    <span class="token keyword">return</span> resn<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>output<span class="token operator">=</span>n<span class="token operator">*</span>myPow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-计算图的价值"><a href="#4-计算图的价值" class="headerlink" title="4.  计算图的价值"></a>4.  计算图的价值</h1><p><img src="https://img-blog.csdnimg.cn/20200824232431214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt><br><img src="https://img-blog.csdnimg.cn/20200824232603550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><ul><li>统计小伙伴相同的点对数量。用     <code>defaultdict</code> 实现。<br>（AC 90%）</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict<span class="token comment" spellcheck="true"># 数据输入</span><span class="token triple-quoted-string string">'''4 31 22 32 4'''</span>n<span class="token punctuation">,</span>m<span class="token operator">=</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 统计每个点的对应的小伙伴。主人（1个）：小伙伴（1个或多个）</span>host<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> res<span class="token punctuation">:</span>    host<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 键为x对应的小伙伴</span>    host<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(host) # defaultdict(&lt;class 'list'>, {1: [2], 2: [1, 3, 4], 3: [2], 4: [2]})</span><span class="token comment" spellcheck="true"># 统计小伙伴相同的（主人）键。此时，小伙伴(处理过了，是独特的1个名称)：主人（1个或多个）</span>partner<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token keyword">for</span> u<span class="token punctuation">,</span>v <span class="token keyword">in</span> host<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span>sorted<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 小伙伴从  [1,3,4]-> 134</span>    partner<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(partner) # defaultdict(&lt;class 'list'>, {'2': [1, 3, 4], '134': [2]})</span><span class="token comment" spellcheck="true"># partner中，主人数>1的才会对图产生价值 （1:2，然后 2:1 的这种无价值）</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> v<span class="token punctuation">,</span>u <span class="token keyword">in</span> partner<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    hostLen<span class="token operator">=</span>len<span class="token punctuation">(</span>u<span class="token punctuation">)</span>    <span class="token keyword">if</span> hostLen<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 从n种样品中 取 2种，无先后区分。则一共有 n*（n-1）/2 种组合</span>        ans<span class="token operator">+=</span>hostLen<span class="token operator">*</span><span class="token punctuation">(</span>hostLen<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团2020笔试及赛码网输入输出示例</title>
      <link href="/2020/08/22/leetcode/others/mei-tuan-2020-bi-shi-ji-sai-ma-wang-shu-ru-shu-chu/"/>
      <url>/2020/08/22/leetcode/others/mei-tuan-2020-bi-shi-ji-sai-ma-wang-shu-ru-shu-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a><a href="https://www.nowcoder.com/discuss/485689?toCommentId=6937138" target="_blank" rel="noopener">字符匹配</a></h1><p>规则：<br>首字母必须为字母<br>只能包含数字和字母<br>数字和字母必须都有</p><p>(<a href="https://mofanpy.com/tutorials/python-basic/basic/regular-expression/" target="_blank" rel="noopener">莫烦python</a>，也可以用正则表达式解决)</p><p><strong>每一行输入都对应一行输出</strong></p><blockquote><p>输入：<br>第一行：数字（需要判断的行数）<br>后面的行：每行一个字符串<br>输出： Accept 或者 Wrong</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> s<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># 判断首字母是否为字母</span>    <span class="token keyword">if</span> <span class="token operator">not</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># 判断字符串是否由字母和数字组成</span>    <span class="token keyword">if</span> <span class="token operator">not</span> s<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># 判断是否含有数字</span>    numMatch <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'[0-9]'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> numMatch<span class="token punctuation">.</span>search<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token comment" spellcheck="true"># # 判断是否含有数字也可以这样：截止现在，只剩下 全字母  和  字母+数字 组合</span>    <span class="token comment" spellcheck="true"># if s.isalpha():</span>    <span class="token comment" spellcheck="true">#     return False</span>    <span class="token comment" spellcheck="true"># else:</span>    <span class="token comment" spellcheck="true">#     return True</span>T <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这里要strip,大坑耽误不少时间</span>    <span class="token keyword">if</span> isValid<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Accept'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Wrong'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="小美跑腿"><a href="#小美跑腿" class="headerlink" title="小美跑腿"></a>小美跑腿</h1><p><strong>输入所有行后才输出结果</strong></p><blockquote><p>输入示例:<br>输入第一行:<br>[5,2] # 5个订单，只能取2个订单。<br>后面的行：# 赚的钱是第一个数+第二个数<em>2。<br>[1,2] # 1+2</em>2=5元<br>[3,1] # 5<br>[4,2] # 8<br>[4,2] # 8<br>[5,1] # 7<br>输出：<br>要赚最多的钱，返回小美选择的订单序列 </p></blockquote><pre class="line-numbers language-python"><code class="language-python">n<span class="token punctuation">,</span> m <span class="token operator">=</span> map<span class="token punctuation">(</span>int<span class="token punctuation">,</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    v<span class="token punctuation">,</span> w <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>v<span class="token operator">+</span>w<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>arr<span class="token operator">=</span>sorted<span class="token punctuation">(</span>arr<span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 按第一个元素降序排列，第一个元素相同时，按第二个元素升序排列</span>res<span class="token operator">=</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>res<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>394. 字符串解码</title>
      <link href="/2020/08/20/leetcode/394-zi-fu-chuan-jie-ma/"/>
      <url>/2020/08/20/leetcode/394-zi-fu-chuan-jie-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="394-字符串解码"><a href="#394-字符串解码" class="headerlink" title="394. 字符串解码"></a><a href="https://leetcode-cn.com/problems/decode-string/solution/decode-string-fu-zhu-zhan-fa-di-gui-fa-by-jyd/" target="_blank" rel="noopener">394. 字符串解码</a></h1><p><a href="https://leetcode-cn.com/problems/decode-string/solution/zhan-by-ssk-x/" target="_blank" rel="noopener">方法1：利用栈先进后出原则（模拟递归）</a></p><ul><li>digit = []   ###存放数字</li><li>letter = []  ###存放数字前面的字母串</li><li>res = ‘’     ###解码结果。在遍历过程中，也会临时存放字母串<ul><li>遇到左括号时，根据res更新letter，并清空res</li><li>遇到右括号时，更新res </li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">decodeString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        digit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">###存放数字</span>        letter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">###存放数字前面的字母串</span>        res <span class="token operator">=</span> <span class="token string">''</span>     <span class="token comment" spellcheck="true">###左括号后面的字母串</span>        number <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment" spellcheck="true">###数字</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">'0'</span><span class="token operator">&lt;=</span>i<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">:</span>                number <span class="token operator">=</span> number<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">:</span>                digit<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">###当遇见左括号的时候数字结束，这个很关键</span>                letter<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true">###遇见左括号的时候数字前面的字符串也存入栈</span>                number <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">###置零</span>                res <span class="token operator">=</span> <span class="token string">''</span>   <span class="token comment" spellcheck="true">###置空</span>            <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">###当遇见右括号取出数字前面的字母串，数字，然后数字乘以当前字符串</span>                a <span class="token operator">=</span> digit<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                b <span class="token operator">=</span> letter<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                res <span class="token operator">=</span> b<span class="token operator">+</span>a<span class="token operator">*</span>res            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> i <span class="token comment" spellcheck="true">###当前数字后面的字母串</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://leetcode-cn.com/problems/decode-string/solution/394zi-fu-chuan-jie-ma-zhan-by-zhouzhoucn-2/" target="_blank" rel="noopener">方法2：递归函数</a></p><ul><li>将 <code>[</code> 和 <code>]</code> 分别作为递归的开启与终止条件。 </li><li>明确递归函数的功能<del>（不要跳进递归函数内）</del>：<code>decoding(s, index)</code>返回字符串s中，<strong>以index下标开始的后面的子字符串解码后的结果</strong>。<ul><li>当<code>&#39;s[i]==&#39;[&#39;</code>，进入递归函数，并接受返回值</li><li>当 <code>s[i]==&#39;]&#39;</code>，跳出此次递归</li></ul></li></ul><blockquote><p>类似的题目有<a href="https://ismxue.github.io/2021/08/26/labuladong/di-si-zhang-ru-he-shi-xian-yi-ge-ji-suan-qi/#toc-heading-6">224.基本计算器</a></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//#include &lt;bits/stdc++.h></span><span class="token comment" spellcheck="true">//using namespace std;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一个全局变量记录当前遍历的位置</span>    string <span class="token function">decodeString</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录结果</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录字符（串）前面的次数</span>        string tmp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录字符（串）</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>idx <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到当前的字符，并且让索引+1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果数字，则进行更新</span>                num <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> num <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'['</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果是[ ，则进入递归</span><span class="token comment" spellcheck="true">//                得到[后面的结果（相信递归函数能返回我需要的结果）</span>                tmp <span class="token operator">=</span> <span class="token function">decodeString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 把这个结果添加到res中</span>                    res <span class="token operator">+</span><span class="token operator">=</span> tmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                tmp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//            如果是字母，则添加到res中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 res <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">']'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果是],则跳出递归函数</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int main() {</span><span class="token comment" spellcheck="true">////    string s = "3[a]2[bc]";</span><span class="token comment" spellcheck="true">//    string s = "a2[x]";</span><span class="token comment" spellcheck="true">//    Solution so;</span><span class="token comment" spellcheck="true">//    cout &lt;&lt; so.decodeString(s); // "aaabcbc"</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">decodeString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">decoding</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># num储存当前遍历到的数字</span>            <span class="token comment" spellcheck="true"># res储存当前遍历到的字符串</span>            num <span class="token operator">=</span> <span class="token string">""</span>            res <span class="token operator">=</span> <span class="token string">""</span>            <span class="token comment" spellcheck="true"># 遍历字符串</span>            <span class="token keyword">while</span> index <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 读取当前字符串</span>                current <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span>                <span class="token comment" spellcheck="true"># index表示当前字符的索引</span>                <span class="token comment" spellcheck="true"># 如果是数字，添加到num</span>                <span class="token keyword">if</span> current<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    num <span class="token operator">+=</span> current                <span class="token comment" spellcheck="true"># 如果是字母，添加到res</span>                <span class="token keyword">if</span> current<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    res <span class="token operator">+=</span> current                <span class="token comment" spellcheck="true"># 如果是"["，进入下一层递归并返回下一状态的res</span>                <span class="token comment" spellcheck="true"># 返回的res与当前状态下的num相乘，并添加到当前的res</span>                <span class="token keyword">if</span> current <span class="token operator">==</span> <span class="token string">"["</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># temp表示解码后的结果，index表示下标</span>                    temp<span class="token punctuation">,</span> index <span class="token operator">=</span> decoding<span class="token punctuation">(</span>s<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                    res <span class="token operator">+=</span> int<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">*</span> temp                    num <span class="token operator">=</span> <span class="token string">""</span>                <span class="token comment" spellcheck="true"># 如果是"]",返回这一状态的res与index</span>                <span class="token keyword">if</span> current <span class="token operator">==</span> <span class="token string">"]"</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 返回这一状态的res与index</span>                    <span class="token keyword">return</span> res<span class="token punctuation">,</span> index                <span class="token comment" spellcheck="true"># 下标右移，继续下一次循环</span>                index <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># 遍历完所有字符串，返回res</span>            <span class="token keyword">return</span> res        <span class="token comment" spellcheck="true"># 开始递归，index初始为0  </span>        <span class="token keyword">return</span> decoding<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2020秋招腾讯后台笔试题（一）"><a href="#2020秋招腾讯后台笔试题（一）" class="headerlink" title="2020秋招腾讯后台笔试题（一）"></a><a href="https://zhuanlan.zhihu.com/p/116482908" target="_blank" rel="noopener">2020秋招腾讯后台笔试题（一）</a></h1><p>该题的思路同上，也是利用栈</p><ul><li><code>|</code>就相当于上题的<code>[</code>的功能。</li><li>而<code>[</code> 在本题没用，删除掉<code>[</code>（或者直接跳过）即可<ul><li>C++删除<code>[</code>：<code>s.erase(remove(s.begin(),s.end(),&#39;[&#39;),s.end());</code></li><li>python删除<code>[</code>：<code>s=s.replace(&#39;[&#39;,&#39;&#39;)</code></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decodeString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 删除掉'['字符</span>    s<span class="token operator">=</span>s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    digit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">###存放数字</span>    letter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">###存放数字前面的字母串</span>    res <span class="token operator">=</span> <span class="token string">''</span>     <span class="token comment" spellcheck="true">###左括号后面的字母串</span>    number <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment" spellcheck="true">###数字</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'0'</span><span class="token operator">&lt;=</span>i<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">:</span>            number <span class="token operator">=</span> number<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token string">'|'</span><span class="token punctuation">:</span>            digit<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">###当遇见左括号的时候数字结束，这个很关键</span>            letter<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true">###遇见左括号的时候数字前面的字符串也存入栈</span>            number <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">###置零</span>            res <span class="token operator">=</span> <span class="token string">''</span>   <span class="token comment" spellcheck="true">###置空</span>        <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">###当遇见右括号取出数字前面的字母串，数字，然后数字乘以当前字符串</span>            a <span class="token operator">=</span> digit<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            b <span class="token operator">=</span> letter<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> b<span class="token operator">+</span>a<span class="token operator">*</span>res        <span class="token keyword">else</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> i <span class="token comment" spellcheck="true">###当前数字后面的字母串</span>    <span class="token keyword">return</span> resa<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>decodeString<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//#include &lt;bits/stdc++.h></span><span class="token comment" spellcheck="true">//using namespace std;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一个全局变量记录当前遍历的位置</span>    string <span class="token function">decodeString</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        string tmp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>idx <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到当前的字符，并且让索引+1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果数字，则进行更新</span>                num <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> num <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'|'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果是[ ，则进入索引</span><span class="token comment" spellcheck="true">//                得到[后面的结果（相信递归函数能返回我需要的结果）</span>                tmp <span class="token operator">=</span> <span class="token function">decodeString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 把这个结果添加到res中</span>                    res <span class="token operator">+</span><span class="token operator">=</span> tmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                tmp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//            如果是字母，则添加到res中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">']'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果是],则退出递归函数</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int main() {</span><span class="token comment" spellcheck="true">//    string s = "HG[3|B[2|CA]]F";</span><span class="token comment" spellcheck="true">//    Solution so;</span><span class="token comment" spellcheck="true">//    cout &lt;&lt; so.decodeString(s); // "aaabcbc"</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>54. 螺旋矩阵</title>
      <link href="/2020/08/20/leetcode/54-luo-xuan-ju-zhen/"/>
      <url>/2020/08/20/leetcode/54-luo-xuan-ju-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54. 螺旋矩阵"></a><a href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/solution/mian-shi-ti-29-shun-shi-zhen-da-yin-ju-zhen-she-di/" target="_blank" rel="noopener">54. 螺旋矩阵</a></h1><p>顺时针打印矩阵</p><ul><li>设定上下左右四个点</li><li>从左到右彻底遍历一行，然后上边界+1。若上边界超过下边界：跳出</li><li>从上到下彻底遍历一列，然后右边界-1。若左边界超过右边界：跳出</li><li>从右到左彻底遍历一行，然后下边界-1。若上边界超过下边界：跳出</li><li>从下到上彻底遍历一列，然后左边界+1。若左边界超过右边界：跳出</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> matrix<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        l <span class="token operator">=</span> <span class="token number">0</span>        r <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        t <span class="token operator">=</span> <span class="token number">0</span>        b <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 从左到右</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            t <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> t <span class="token operator">></span> b<span class="token punctuation">:</span> <span class="token keyword">break</span>            <span class="token comment" spellcheck="true"># 从上到下</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>t<span class="token punctuation">,</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>            r <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> l <span class="token operator">></span> r<span class="token punctuation">:</span> <span class="token keyword">break</span>            <span class="token comment" spellcheck="true"># 从右到左</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>r<span class="token punctuation">,</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            b <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> t <span class="token operator">></span> b<span class="token punctuation">:</span> <span class="token keyword">break</span>            <span class="token comment" spellcheck="true"># 从下到上</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>b<span class="token punctuation">,</span> t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>            l <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> l <span class="token operator">></span> r<span class="token punctuation">:</span> <span class="token keyword">break</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有种取巧的方法（仅供参考）：</p><ul><li>把第一行pop出来，加到结果中</li><li>把剩下的矩阵逆时针翻转90度，把第一行pop出来，加到结果中。直至结束</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type matrix: List[List[int]]        :rtype: List[int]        """</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> matrix<span class="token punctuation">:</span>            res<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            matrix<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>list<span class="token punctuation">,</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2020-8-19-华为笔试题目1"><a href="#2020-8-19-华为笔试题目1" class="headerlink" title="2020.8.19 华为笔试题目1"></a><a href="https://www.nowcoder.com/discuss/482620?type=1&channel=0&source_id=discuss_terminal_discuss_hot" target="_blank" rel="noopener">2020.8.19 华为笔试题目1</a></h1><ul><li>同样是顺时针遍历数组，只是增加了一个判断个位十位的功能</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 判断个位十位的函数</span><span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span> <span class="token comment" spellcheck="true"># 个位</span>    b <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">//</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token comment" spellcheck="true"># 十位</span>    <span class="token keyword">return</span> a <span class="token operator">==</span> <span class="token number">7</span> <span class="token operator">and</span> b <span class="token operator">%</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">getRes</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 超过范围，返回</span>    <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">&lt;=</span> M <span class="token operator">&lt;=</span> <span class="token number">1000</span> <span class="token operator">and</span> <span class="token number">10</span> <span class="token operator">&lt;=</span> N <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[]"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    idx <span class="token operator">=</span> <span class="token number">0</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    l <span class="token operator">=</span> <span class="token number">0</span>    r <span class="token operator">=</span> N <span class="token operator">-</span> <span class="token number">1</span>    t <span class="token operator">=</span> <span class="token number">0</span>    b <span class="token operator">=</span> M <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 从左到右</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            idx <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> helper<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>t<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span>        t <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> t <span class="token operator">></span> b<span class="token punctuation">:</span> <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># 从上到下：</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>t<span class="token punctuation">,</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            idx <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> helper<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> r<span class="token punctuation">]</span><span class="token punctuation">)</span>        r <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">if</span> l <span class="token operator">></span> r<span class="token punctuation">:</span> <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># 从右到左</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>r<span class="token punctuation">,</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            idx <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> helper<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span>        b <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">if</span> t <span class="token operator">></span> b<span class="token punctuation">:</span> <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># 从下到上</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>b<span class="token punctuation">,</span> t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            idx <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> helper<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> l<span class="token punctuation">]</span><span class="token punctuation">)</span>        l <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> l <span class="token operator">></span> r<span class="token punctuation">:</span> <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># print(res)</span>    res <span class="token operator">=</span> str<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    tmp<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    M<span class="token operator">=</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    N<span class="token operator">=</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    getRes<span class="token punctuation">(</span>M<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客网编程常见输入输出练习</title>
      <link href="/2020/08/19/leetcode/others/niu-ke-wang-bian-cheng-chang-jian-shu-ru-shu-chu-lian-xi/"/>
      <url>/2020/08/19/leetcode/others/niu-ke-wang-bian-cheng-chang-jian-shu-ru-shu-chu-lian-xi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/5649#question" target="_blank" rel="noopener">OJ在线编程常见输入输出练习场题目链接</a></p><p><a href="https://www.codeleading.com/article/67893417412/" target="_blank" rel="noopener">python:各种字符输入、数值输入总结、OJ输入输出</a></p><blockquote><ul><li>python可以用下面的函数处理输入</li></ul><pre class="line-numbers language-python"><code class="language-python">n<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a,b=list(map(int,input().strip().split()))  # 如果只有两个数据，可通过直接a,b=...赋值</span>res<span class="token operator">=</span>sorted<span class="token punctuation">(</span>res<span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果是二维数据</li></ul><pre class="line-numbers language-python"><code class="language-python">n<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> n<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><ul><li>C++中，有两种方式来处理（习惯<strong>用第一种</strong>，因为是一行一行地处理，比较直观; 并且可以灵活处理分隔符）<ul><li><code>while(getline(cin,s))</code> 和<code>while (getline(ss,tmp,&#39; &#39;))</code> 一行一行地处理输入 。getline第一个参数是输入流，第二个参数是字符串，第三个参数是分隔符（若没有第三个参数，表示把数据传给字符串s）</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        string tmp<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span>vec<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        在此处对向量vec <span class="token keyword">do</span> something<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一个一个地处理元素，并用<code>if (cin.get()==&#39;\n&#39;)</code>来判断是否换行。注意：操作完向量后，要记得清空，使其不影响后续操作</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            在此处对向量 <span class="token keyword">do</span> something<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            vec<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意：要清空向量</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果是二维向量（把数据全部输入后，再处理）,则：<br>当输入整数，按回车，实际上输入的是:整数和换行符号(\n)。cin把整数读进了，但是换行符号没有读。因此如果接下来输入其他内容，首先会读入\n。与题意不符。<strong>所以要再加<code>cin.get();</code>,用于舍弃输入流中的不需要的字符,或者舍弃回车</strong>。然后再用<code>getlien()</code>函数</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> vec<span class="token punctuation">;</span>    string line<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    cin.get(无参数)没有参数主要是用于舍弃输入流中的不需要的字符,或者舍弃回车</span>    cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一定要加这一行</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>        string item<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> vec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>j<span class="token operator">:</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">////输入</span><span class="token comment" spellcheck="true">//2</span><span class="token comment" spellcheck="true">//1,2,3</span><span class="token comment" spellcheck="true">//4,5,6</span><span class="token comment" spellcheck="true">////输出</span><span class="token comment" spellcheck="true">//123</span><span class="token comment" spellcheck="true">//456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h1 id="A-B-1"><a href="#A-B-1" class="headerlink" title="A+B(1)"></a>A+B(1)</h1><ul><li>可以输入无数次</li><li>每次输入一行后，输出一行结果</li></ul><p><img src="https://img-blog.csdnimg.cn/20200822232853963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">for</span> line <span class="token keyword">in</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">:</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> map<span class="token punctuation">(</span>int<span class="token punctuation">,</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">for</span> line <span class="token keyword">in</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">:</span>    a <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a是这样的：['1','2']</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> int<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        a<span class="token punctuation">,</span>b<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><ul><li>通用</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token operator">+</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    或者用accumulate 函数求和</span><span class="token comment" spellcheck="true">//    res= accumulate(v.begin(),v.end(),long(0));    </span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        string item<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> vec<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>item<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stol</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sum</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一般</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">res</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="A-B-2"><a href="#A-B-2" class="headerlink" title="A+B(2)"></a>A+B(2)</h1><ul><li>可以输入<code>t</code>次</li><li>每次输入一行后，输出一行结果</li></ul><p><img src="https://img-blog.csdnimg.cn/20200823080711526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><h2 id="python-1"><a href="#python-1" class="headerlink" title="python"></a>python</h2><pre class="line-numbers language-python"><code class="language-python">t<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token punctuation">,</span>b<span class="token operator">=</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># a,b=list(map(int,input().strip().split())) # 也可以</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h2><ul><li>通用<ul><li>用变量i跳过第一行</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token operator">+</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    或者用accumulate 函数求和</span><span class="token comment" spellcheck="true">//    res= accumulate(v.begin(),v.end(),long(0));</span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        string item<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>item<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stol</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sum</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一般</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">res</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 或者</span><span class="token comment" spellcheck="true">// int main() {</span><span class="token comment" spellcheck="true">//     int t;</span><span class="token comment" spellcheck="true">//     int a, b;</span><span class="token comment" spellcheck="true">//     cin >> t;</span><span class="token comment" spellcheck="true">//     for (int i = 0; i &lt; t; ++i) {</span><span class="token comment" spellcheck="true">//         cin >> a >> b;</span><span class="token comment" spellcheck="true">//         cout &lt;&lt; res(a, b) &lt;&lt; endl;</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="A-B-3"><a href="#A-B-3" class="headerlink" title="A+B(3)"></a>A+B(3)</h1><ul><li>可以输入无数次, 但遇到 输入为0 0 时，结束输入 （跳出循环） </li><li>每次输入一行后，输出一行结果</li></ul><p><img src="https://img-blog.csdnimg.cn/2020082308113630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><h2 id="python-2"><a href="#python-2" class="headerlink" title="python"></a>python</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        a<span class="token punctuation">,</span>b<span class="token operator">=</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> a<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">and</span> b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-2"><a href="#C-2" class="headerlink" title="C++"></a>C++</h2><ul><li>通用</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token operator">+</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    或者用accumulate 函数求和</span><span class="token comment" spellcheck="true">//    res= accumulate(v.begin(),v.end(),long(0));</span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        string item<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>item<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stol</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> vec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">sum</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一般</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">res</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="A-B-4"><a href="#A-B-4" class="headerlink" title="A+B(4)"></a>A+B(4)</h1><ul><li><p>可以输入无数次, 但如果输入的第一个元素为0，结束输入（跳出循环） </p></li><li><p>每次输入一行后，输出一行结果</p><p><img src="https://img-blog.csdnimg.cn/20200823081848657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p></li></ul><h2 id="python-3"><a href="#python-3" class="headerlink" title="python"></a>python</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        l <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-3"><a href="#C-3" class="headerlink" title="C++"></a>C++</h2><ul><li>通用</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token operator">+</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    或者用accumulate 函数求和</span><span class="token comment" spellcheck="true">//    res= accumulate(v.begin(),v.end(),long(0));</span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        string item<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>item<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stol</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">sum</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一般</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">res</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    或者直接利用累积函数</span><span class="token comment" spellcheck="true">//    return accumulate(v.begin(), v.end(), 0);</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i<span class="token punctuation">;</span>            cin <span class="token operator">>></span> i<span class="token punctuation">;</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">res</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        vec<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意：要清空向量</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="A-B-5"><a href="#A-B-5" class="headerlink" title="A+B(5)"></a>A+B(5)</h1><ul><li>可以输入<code>t</code>次</li><li>每次输入一行后，输出一行结果</li></ul><p><img src="https://img-blog.csdnimg.cn/20200823083446835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><h2 id="python-4"><a href="#python-4" class="headerlink" title="python"></a>python</h2><pre class="line-numbers language-python"><code class="language-python">t<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>    l<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-4"><a href="#C-4" class="headerlink" title="C++"></a>C++</h2><ul><li>通用</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token operator">+</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    或者用accumulate 函数求和</span><span class="token comment" spellcheck="true">//    res= accumulate(v.begin(),v.end(),long(0));</span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        string item<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>item<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stol</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">sum</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一般</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">res</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    或者直接利用累积函数</span><span class="token comment" spellcheck="true">//    return accumulate(v.begin(), v.end(), 0);</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i<span class="token punctuation">;</span>            cin <span class="token operator">>></span> i<span class="token punctuation">;</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">res</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        vec<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意：要清空向量</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="A-B-6"><a href="#A-B-6" class="headerlink" title="A+B(6)"></a>A+B(6)</h1><ul><li>可以输入无数次</li><li>每次输入一行后，输出一行结果</li></ul><p><img src="https://img-blog.csdnimg.cn/20200823084416906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><h2 id="python-5"><a href="#python-5" class="headerlink" title="python"></a>python</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        l<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-5"><a href="#C-5" class="headerlink" title="C++"></a>C++</h2><ul><li>通用</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token operator">+</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    或者用accumulate 函数求和</span><span class="token comment" spellcheck="true">//    res= accumulate(v.begin(),v.end(),long(0));</span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        string item<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>item<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stol</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sum</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一般</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">res</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    或者直接利用累积函数</span><span class="token comment" spellcheck="true">//    return accumulate(v.begin(), v.end(), 0);</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        if (n == 0) break; // 和第四题一样，只是注释了这句话</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i<span class="token punctuation">;</span>            cin <span class="token operator">>></span> i<span class="token punctuation">;</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">res</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        vec<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意：要清空向量</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="A-B-7"><a href="#A-B-7" class="headerlink" title="A+B(7)"></a>A+B(7)</h1><ul><li>可以输入无数次</li><li>每次输入一行后，输出一行结果</li></ul><p><img src="https://img-blog.csdnimg.cn/20200823084921151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><h2 id="python-6"><a href="#python-6" class="headerlink" title="python"></a>python</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        l <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-6"><a href="#C-6" class="headerlink" title="C++"></a>C++</h2><ul><li>通用</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token operator">+</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    或者用accumulate 函数求和</span><span class="token comment" spellcheck="true">//    res= accumulate(v.begin(),v.end(),long(0));</span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        string item<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>item<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stol</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sum</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一般</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">res</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    或者直接利用累积函数</span><span class="token comment" spellcheck="true">//    return accumulate(v.begin(), v.end(), 0);</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token function">res</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            vec<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意：要清空向量</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符串排序-1"><a href="#字符串排序-1" class="headerlink" title="字符串排序(1)"></a>字符串排序(1)</h1><ul><li>输入有两行，第一行表示字符串的个数<code>n</code>，第二行是输入的<code>n</code>个字符串</li><li>每次完整输入后，输出一行结果</li></ul><p><img src="https://img-blog.csdnimg.cn/20200823090055420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><h2 id="python-7"><a href="#python-7" class="headerlink" title="python"></a>python</h2><pre class="line-numbers language-python"><code class="language-python">n<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res<span class="token operator">=</span>sorted<span class="token punctuation">(</span>res<span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 也可以这样写：res=" ".join(map(str,res))</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-1"><a href="#C-1" class="headerlink" title="C++ 1"></a>C++ 1</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印vector （确保结尾无空格）</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i<span class="token operator">&lt;&lt;</span><span class="token string">'\n'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        string tmp<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span>vec<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">output</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-2"><a href="#C-2" class="headerlink" title="C++ 2"></a>C++ 2</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> str<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string s<span class="token punctuation">;</span>        cin <span class="token operator">>></span> s<span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 确保无结尾空格</span>    <span class="token function">sort</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">!=</span>str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            cout<span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i<span class="token operator">&lt;&lt;</span><span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout<span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符串排序-2"><a href="#字符串排序-2" class="headerlink" title="字符串排序(2)"></a>字符串排序(2)</h1><ul><li>可以输入无数次 </li><li>每次输入（空格隔开）一行后，输出一行结果</li></ul><p><img src="https://img-blog.csdnimg.cn/20200823091047706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><h2 id="python-8"><a href="#python-8" class="headerlink" title="python"></a>python</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        l<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        l<span class="token operator">=</span>sorted<span class="token punctuation">(</span>l<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-1-1"><a href="#C-1-1" class="headerlink" title="C++ 1"></a>C++ 1</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印vector （确保结尾无空格）</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i<span class="token operator">&lt;&lt;</span><span class="token string">'\n'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        string tmp<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span>vec<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">output</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-2-1"><a href="#C-2-1" class="headerlink" title="C++ 2"></a>C++ 2</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sort</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i<span class="token operator">&lt;&lt;</span><span class="token string">'\n'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> str<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin<span class="token operator">>></span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>        str<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">output</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            str<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符串排序-3"><a href="#字符串排序-3" class="headerlink" title="字符串排序(3)"></a>字符串排序(3)</h1><ul><li>可以输入无数次 </li><li>每次输入（逗号隔开）一行后，输出一行结果</li></ul><p><img src="https://img-blog.csdnimg.cn/2020082309124959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70#pic_center" alt></p><h2 id="python-9"><a href="#python-9" class="headerlink" title="python"></a>python</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        l<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        l<span class="token operator">=</span>sorted<span class="token punctuation">(</span>l<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>当输入的行数不确定时</li></ul><p>输入示例：<br>1 2回车<br>3 4回车<br>回车</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sysres<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    line <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读取该行的内容 如 1空格2</span>    <span class="token keyword">if</span> <span class="token operator">not</span> line<span class="token punctuation">:</span>        <span class="token keyword">break</span>    lineList <span class="token operator">=</span> str<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 以空格间开</span>    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>lineList<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [['1', '2'], ['3', '4']]</span>resNum<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">:</span>    i<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    resNum<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resNum<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [[1, 2], [3, 4]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="C-1-2"><a href="#C-1-2" class="headerlink" title="C++ 1"></a>C++ 1</h2><p>和上一题一样，只是把分隔符换成了<code>,</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印vector （确保结尾无空格）</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">','</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i<span class="token operator">&lt;&lt;</span><span class="token string">'\n'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string line<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        string tmp<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span>vec<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">output</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-2-2"><a href="#C-2-2" class="headerlink" title="C++ 2"></a>C++ 2</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sort</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">','</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i<span class="token operator">&lt;&lt;</span><span class="token string">'\n'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> vec<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin<span class="token operator">>></span>s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        把字符串按‘，’分隔，并存进向量vec中</span>        <span class="token keyword">int</span> item_start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>item_start<span class="token punctuation">,</span>i<span class="token operator">-</span>item_start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                item_start<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        还要把最后一个item也存进去</span>        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>item_start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">output</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>            vec<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="自测本地通过"><a href="#自测本地通过" class="headerlink" title="自测本地通过"></a><a href="https://ac.nowcoder.com/acm/contest/5657/K" target="_blank" rel="noopener">自测本地通过</a></h1><p><img src="https://i.loli.net/2021/08/13/asKdBqojcZhG7Hw.png" alt="20210813110444"></p><ul><li>C++中该题的整数不要用<code>int</code>(因为测试用例中有超过int类型的整数) ，要用<code>long</code> 或者 <code>long long</code></li></ul><h2 id="python-10"><a href="#python-10" class="headerlink" title="python"></a>python</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        l<span class="token operator">=</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-1-3"><a href="#C-1-3" class="headerlink" title="C++ 1"></a>C++ 1</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token operator">+</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    或者用accumulate 函数求和</span><span class="token comment" spellcheck="true">//    res= accumulate(v.begin(),v.end(),long(0));    </span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        string item<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> vec<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>item<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stol</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sum</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-2-3"><a href="#C-2-3" class="headerlink" title="C++ 2"></a>C++ 2</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token operator">+</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    或者用accumulate 函数求和</span><span class="token comment" spellcheck="true">//    res= accumulate(v.begin(),v.end(),long(0));</span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string item<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> vec<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin<span class="token operator">>></span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">stol</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">sum</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章：如何去除有序数组的重复元素</title>
      <link href="/2020/08/18/labuladong/di-si-zhang-ru-he-qu-chu-you-xu-shu-zu-de-chong-fu-yuan-su/"/>
      <url>/2020/08/18/labuladong/di-si-zhang-ru-he-qu-chu-you-xu-shu-zu-de-chong-fu-yuan-su/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://labuladong.gitbook.io/algo/mu-lu-ye-3/mu-lu-ye-2/yuan-di-xiu-gai-shu-zu" target="_blank" rel="noopener">如何去除有序数组的重复元素</a></p><p>用<strong>快慢指针</strong>解决问题（两种初始化都可以）</p><pre class="line-numbers language-python"><code class="language-python">slow<span class="token punctuation">,</span>fast<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>slow<span class="token punctuation">,</span>fast<span class="token operator">=</span>head<span class="token punctuation">,</span>head<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-python"><code class="language-python">slow<span class="token punctuation">,</span>fast<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>slow<span class="token punctuation">,</span>fast<span class="token operator">=</span>head<span class="token punctuation">,</span>head<span class="token punctuation">.</span>next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="26-删除排序数组中的重复项"><a href="#26-删除排序数组中的重复项" class="headerlink" title="26. 删除排序数组中的重复项"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">26. 删除排序数组中的重复项</a></h1><ul><li>快指针在前面探路，慢指针在后。快指针在每次前进时，如果和慢指针的元素不同，则慢指针跳1格，然后把快指针的元素赋给慢指针（先跳再赋值）</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># nums = [0,0,1,1,1,2,2,3,3,4]</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">0</span>        slow<span class="token punctuation">,</span>fast<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">while</span> fast<span class="token operator">&lt;</span>n<span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token operator">!=</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">:</span>                slow <span class="token operator">+=</span> <span class="token number">1</span>                nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>            fast<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> slow<span class="token operator">+</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83. 删除排序链表中的重复元素"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener">83. 删除排序链表中的重复元素</a></h1><p>与上题一样，也是用快慢指针。最后<code>slow.next=None</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> head<span class="token punctuation">:</span> <span class="token keyword">return</span> None        slow<span class="token operator">=</span>head        fast<span class="token operator">=</span>head<span class="token punctuation">.</span>next        <span class="token keyword">while</span> fast<span class="token operator">!=</span>None<span class="token punctuation">:</span>            <span class="token keyword">if</span> slow<span class="token punctuation">.</span>val<span class="token operator">!=</span>fast<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next                slow<span class="token punctuation">.</span>val<span class="token operator">=</span>fast<span class="token punctuation">.</span>val            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next        slow<span class="token punctuation">.</span>next<span class="token operator">=</span>None        <span class="token keyword">return</span> head<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode-cn.com/problems/remove-element/" target="_blank" rel="noopener">27. 移除元素</a></h1><p>同样利用快慢指针，若遇到目标值，快指针直接跳过，不进行任何操作。否则将快指针的值赋给慢指针，然后慢指针前进</p><ul><li>根据对题目的不同要求，与上两题的相比，本题是先给慢指针赋值，慢指针再前进。（先赋值再跳）<ul><li>如[0,1,0,6],去除0。slow指向0，fast指向0。fast跳到1，此时fast指向目标值。然后slow处的0被覆盖为1（<code>nums[slow]=nums[fast]</code>），然后slow再向右跳（<code>slow+=1</code>）</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type val: int        :rtype: int        """</span>        slow<span class="token punctuation">,</span>fast<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">while</span> fast<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token operator">!=</span>val<span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>                slow<span class="token operator">+=</span><span class="token number">1</span>            fast<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> slow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode-cn.com/problems/move-zeroes/" target="_blank" rel="noopener">283. 移动零</a></h1><p>本题相当于在27题的基础上进行修改：移除所有目标值为0的元素，并把后面的元素赋值为0</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: None Do not return anything, modify nums in-place instead.        """</span>        <span class="token comment" spellcheck="true"># 27题去除目标值的代码</span>        <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""            :type nums: List[int]            :type val: int            :rtype: int            """</span>            slow<span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>            <span class="token keyword">while</span> fast <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">:</span>                    nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>                    slow <span class="token operator">+=</span> <span class="token number">1</span>                fast <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span> slow        <span class="token comment" spellcheck="true"># 去除 nums 中的所有 0，并返回去除0之后的数组长度</span>        slow<span class="token operator">=</span>removeElement<span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 然后把slow后面的元素赋值为0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>slow<span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">return</span> numsso<span class="token operator">=</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>so<span class="token punctuation">.</span>moveZeroes<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出 [1, 3, 12, 0, 0]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章：如何高效解决接雨水问题</title>
      <link href="/2020/08/17/labuladong/di-si-zhang-ru-he-gao-xiao-jie-jue-jie-yu-shui-wen-ti/"/>
      <url>/2020/08/17/labuladong/di-si-zhang-ru-he-gao-xiao-jie-jue-jie-yu-shui-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://labuladong.gitbook.io/algo/gao-pin-mian-shi-xi-lie/jie-yu-shui" target="_blank" rel="noopener">如何高效解决接雨水问题</a></p><h1 id="42-接雨水"><a href="#42-接雨水" class="headerlink" title="42. 接雨水"></a><a href="https://leetcode-cn.com/problems/trapping-rain-water/" target="_blank" rel="noopener">42. 接雨水</a></h1><p>我们开两个数组 r_max 和 l_max 充当备忘录</p><ul><li>l_max[i] 表示位置 i 左边最高的柱子高度（包括<strong>本身</strong>在内，正着遍历）， r_max[i] 表示位置 i 右边最高的柱子高度（包括<strong>本身</strong>在内，倒着遍历）。位置 i 能保存的最大的水柱高度就是 <code>min(l_max, r_max)- height[i]</code> </li><li>初始化时，首柱子左边最大为自己：<code>l_max[0]=height[0]</code>。尾柱子右边最大为自己：<code>r_max[n-1]=height[n-1]</code></li><li>预先把这两个数组计算好，避免重复计算</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">trap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type height: List[int]        :rtype: int        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> height<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true">#初始化</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>height<span class="token punctuation">)</span>        l_max<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n        r_max<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n        l_max<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>height<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        r_max<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>height<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 计算i对应的左右最大值</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            l_max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>l_max<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            r_max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>r_max<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 计算面积</span>        ans<span class="token operator">=</span><span class="token number">0</span>        <span class="token comment" spellcheck="true"># 也可以从1开始，for i in range(1,n): 第0个位置存不住水，面积为0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>             ans<span class="token operator">+=</span>min<span class="token punctuation">(</span>l_max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>r_max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章：如何运用二分查找算法</title>
      <link href="/2020/08/17/labuladong/di-si-zhang-ru-he-yun-yong-er-fen-cha-zhao-suan-fa/"/>
      <url>/2020/08/17/labuladong/di-si-zhang-ru-he-yun-yong-er-fen-cha-zhao-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://labuladong.gitbook.io/algo/gao-pin-mian-shi-xi-lie/koko-tou-xiang-jiao" target="_blank" rel="noopener">如何运用二分查找算法</a></p><h1 id="875-爱吃香蕉的珂珂"><a href="#875-爱吃香蕉的珂珂" class="headerlink" title="875. 爱吃香蕉的珂珂"></a><a href="https://leetcode-cn.com/problems/koko-eating-bananas/" target="_blank" rel="noopener">875. 爱吃香蕉的珂珂</a></h1><ul><li><code>canFinish()</code> 函数：当前速度下，能吃完的小时数（注意要<strong>向上整除</strong>）    </li><li>最小速度为1，最大速度为数组中最大值。因此利用二分查找框架求h（<strong>h相当于二分查找中的目标值</strong>），注意当计算的时间与要求的时间相等时，也是更新右边界。最后<strong>返回左边界</strong> </li><li>关于向上整除（<code>pile</code>和<code>speed</code>都是int型）<ul><li>python<ul><li>python3：<code>pile/speed</code> 是传统除法，除不完时有小数。因此向上整除可以写为<code>math.ceil(pile / speed)</code></li><li>python2.6及以前：<code>pile/speed</code> 是向下整除，除不完时无小数（如：17/6=2）。因此向上整除不能写为<code>math.ceil(pile / speed)</code>。要根据是否有余数，将<code>h += math.ceil(pile / speed)</code>改为<code>h += (pile/ speed)+ (1 if pile % speed&gt;0 else 0)</code> </li><li>python2/python3统一：<ul><li><code>int(a/b)</code>和<code>a//b</code>都表示向下整除。所以可以根据是否有余数，将向上整除统一写为<code>h += int(pile/ speed)+ (1 if pile % speed&gt;0 else 0)</code> 或 <code>h += pile// speed+ (1 if pile % speed&gt;0 else 0)</code></li><li>只要<code>pile</code>和<code>speed</code>中，<strong>任意一个为浮点型</strong>，<code>/</code>就表示传统除法。因此可以通过<code>speed+0.0</code>或者<code>float(speed)</code>,将向上整除写为<code>h += math.ceil(pile / (speed+0.0))</code> 或者<code>h += math.ceil(pile / float(speed))</code></li></ul></li></ul></li><li>C++：默认的<code>/</code>表示向下除法。可以通过<code>speed+0.0</code>或者<code>float(speed)</code>将int型的speed转成float,再用<code>/</code>进行传统除法,最后用<code>ceil()</code>将其向上转换</li><li>如果不想用ceil函数，则两个数相除向上取整可以写为<code>(a + b - 1) / b</code></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minEatingSpeed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> piles<span class="token punctuation">,</span> H<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type piles: List[int]        :type H: int        :rtype: int        """</span>        <span class="token keyword">import</span> math        <span class="token comment" spellcheck="true"># 当前速度下需要的时间</span>        <span class="token keyword">def</span> <span class="token function">canFinish</span><span class="token punctuation">(</span>piles<span class="token punctuation">,</span> speed<span class="token punctuation">)</span><span class="token punctuation">:</span>            h <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> pile <span class="token keyword">in</span> piles<span class="token punctuation">:</span>                h <span class="token operator">+=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>pile <span class="token operator">/</span> <span class="token punctuation">(</span>speed<span class="token operator">+</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 或者 h += math.ceil(pile / float(speed))</span>            <span class="token keyword">return</span> h        <span class="token comment" spellcheck="true"># 二分查找</span>        l <span class="token operator">=</span> <span class="token number">1</span>        r <span class="token operator">=</span> max<span class="token punctuation">(</span>piles<span class="token punctuation">)</span>        <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>            speed <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> canFinish<span class="token punctuation">(</span>piles<span class="token punctuation">,</span> speed<span class="token punctuation">)</span> <span class="token operator">></span> H<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 速度太慢</span>                l <span class="token operator">=</span> speed <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">elif</span> canFinish<span class="token punctuation">(</span>piles<span class="token punctuation">,</span>speed<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> H<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 速度太快</span>                <span class="token comment" spellcheck="true"># 因为是找左边界，所以若相等，更新右边界</span>                r <span class="token operator">=</span> speed <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">return</span> l<span class="token comment" spellcheck="true">###################################</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minEatingSpeed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> piles<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type piles: List[int]        :type h: int        :rtype: int        """</span>        <span class="token keyword">import</span> math        <span class="token keyword">def</span> <span class="token function">can_finish</span><span class="token punctuation">(</span>piles<span class="token punctuation">,</span>speed<span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> piles<span class="token punctuation">:</span>                time<span class="token operator">+=</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token operator">/</span>speed<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span>  time<span class="token operator">&lt;=</span>h <span class="token keyword">else</span> <span class="token boolean">False</span>        l<span class="token operator">=</span><span class="token number">1</span>        r<span class="token operator">=</span>max<span class="token punctuation">(</span>piles<span class="token punctuation">)</span>        <span class="token keyword">while</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">:</span>            mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> can_finish<span class="token punctuation">(</span>piles<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">:</span>                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">canFinish</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>piles<span class="token punctuation">,</span> <span class="token keyword">int</span> speed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i<span class="token operator">:</span>piles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            time <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token punctuation">(</span>speed<span class="token operator">+</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            time += ceil(i / float(speed));</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> time<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">minEatingSpeed</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>piles<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>piles<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> piles<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">int</span> speed <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canFinish</span><span class="token punctuation">(</span>piles<span class="token punctuation">,</span> speed<span class="token punctuation">)</span> <span class="token operator">></span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>l <span class="token operator">=</span> speed <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>           <span class="token keyword">else</span> <span class="token punctuation">{</span>               r <span class="token operator">=</span> speed <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>        <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="1011-在D天内送达包裹的能力"><a href="#1011-在D天内送达包裹的能力" class="headerlink" title="1011.在D天内送达包裹的能力"></a><a href="https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/" target="_blank" rel="noopener">1011.在D天内送达包裹的能力</a></h1><p>与上题思路相同，只是</p><ul><li>cap 的最小值和最大值分别为 <code>max(weights)</code> 和 <code>sum(weights)</code>。</li><li>按照有无超过容量来更新完成的天数<code>d</code></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">shipWithinDays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> weights<span class="token punctuation">,</span> D<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type weights: List[int]        :type D: int        :rtype: int        """</span>        <span class="token comment" spellcheck="true"># 当前capacity下完成的天数</span>        <span class="token keyword">def</span> <span class="token function">canFinish</span><span class="token punctuation">(</span>weights<span class="token punctuation">,</span>cap<span class="token punctuation">)</span><span class="token punctuation">:</span>            cur_w<span class="token operator">=</span><span class="token number">0</span>            d<span class="token operator">=</span><span class="token number">1</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> weights<span class="token punctuation">:</span>                <span class="token keyword">if</span> cur_w<span class="token operator">+</span>i<span class="token operator">></span>cap<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 超过容量了，放不下，天数加1，当前容量更新为i</span>                    d<span class="token operator">+=</span><span class="token number">1</span>                    cur_w<span class="token operator">=</span>i                <span class="token keyword">else</span><span class="token punctuation">:</span>                    cur_w<span class="token operator">+=</span>i <span class="token comment" spellcheck="true"># 没有超过，当前容量+i</span>            <span class="token keyword">return</span> d        <span class="token comment" spellcheck="true"># 二分搜索找左边界</span>        l<span class="token operator">=</span>max<span class="token punctuation">(</span>weights<span class="token punctuation">)</span>        r<span class="token operator">=</span>sum<span class="token punctuation">(</span>weights<span class="token punctuation">)</span>        <span class="token keyword">while</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">:</span>            cap<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> canFinish<span class="token punctuation">(</span>weights<span class="token punctuation">,</span> cap<span class="token punctuation">)</span><span class="token operator">></span>D<span class="token punctuation">:</span>                l<span class="token operator">=</span>cap<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">elif</span> canFinish<span class="token punctuation">(</span>weights<span class="token punctuation">,</span> cap<span class="token punctuation">)</span><span class="token operator">&lt;=</span>D<span class="token punctuation">:</span>                r<span class="token operator">=</span>cap<span class="token number">-1</span>        <span class="token keyword">return</span> l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章：如何高效寻找素数</title>
      <link href="/2020/08/17/labuladong/di-si-zhang-ru-he-gao-xiao-xun-zhao-su-shu/"/>
      <url>/2020/08/17/labuladong/di-si-zhang-ru-he-gao-xiao-xun-zhao-su-shu/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/gao-pin-mian-shi-xi-lie/da-yin-su-shu" target="_blank" rel="noopener">如何高效寻找素数</a></p><h1 id="204-计数质数"><a href="#204-计数质数" class="headerlink" title="204. 计数质数"></a><a href="https://leetcode-cn.com/problems/count-primes/solution/qiu-zhi-shu-chao-guo-90-by-powcai/" target="_blank" rel="noopener">204. 计数质数</a></h1><p>统计所有<strong>小于非负整数 n</strong> 的质数的数量</p><ul><li>初始化时，给每个位置立一个flag，并初始化为1</li><li>遍历时，对于i而言：<ul><li>如果这个位置的flag为1，说明数字 i  没有被比 i 小的数整除过，说明它是质数，计数器+1。</li><li>i 的倍数一定不是质数，将这些数的flag设置为0</li></ul></li></ul><p>一切尽在<a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95" target="_blank" rel="noopener">sieve of Eratosthenes算法的图</a>中</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#给每个位置立一个flag，初始化为1</span>        isPrimes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        <span class="token comment" spellcheck="true">#result，输出的质数总个数的计数器，初始化为0</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true">#循环，从最小质数i开始到n循环</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#如果这个位置的flag为1，说明数字 i  没有被比 i 小的数整除过，说明它是质数，计数器+1</span>            <span class="token keyword">if</span> isPrimes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> res <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true">#下面这几步的思路是， i 的倍数一定不是质数，将这些数的flag设置为0</span>            <span class="token comment" spellcheck="true">#设置倍数 j ，初始化与 i 相等。 因为i也是一点点加上来的，比如 i=5的时候，i 的4倍一定在 i=4 时已经设置为0过。</span>            j <span class="token operator">=</span> i            <span class="token comment" spellcheck="true"># 因为统计的是所有小于非负整数 n 的质数的数量，当 i 的 j 倍 >=n 时，跳出循环</span>            <span class="token keyword">while</span> i <span class="token operator">*</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#设置i 的 j 倍的flag为0</span>                isPrimes<span class="token punctuation">[</span>i <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                <span class="token comment" spellcheck="true"># 自增，下一个找 j+1 倍</span>                j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true">#返回结果</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章：递归详解</title>
      <link href="/2020/08/17/labuladong/di-san-zhang-di-gui-xiang-jie/"/>
      <url>/2020/08/17/labuladong/di-san-zhang-di-gui-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://labuladong.gitbook.io/algo/suan-fa-si-wei-xi-lie/di-gui-xiang-jie" target="_blank" rel="noopener">递归详解</a></p><h1 id="437-路径总和-III"><a href="#437-路径总和-III" class="headerlink" title="437. 路径总和 III"></a><a href="https://leetcode-cn.com/problems/path-sum-iii/" target="_blank" rel="noopener">437. 路径总和 III</a></h1><h2 id="方法1-递归"><a href="#方法1-递归" class="headerlink" title="方法1:递归"></a>方法1:递归</h2><blockquote><p>递归时，想清楚：</p><ul><li>这个函数是干什么的？不要跳进递归，没用。</li><li>这个函数参数中的变量是什么？（函数的参数中可以传递这个变量）</li><li>得到函数的递归结果，你应该干什么 （比如前序、中序、后序等…）</li></ul></blockquote><ul><li><p>明白一个递归函数的作用并相信它能完成这个任务，千万不要试图跳进细节</p></li><li><p>补充递归结束的条件</p></li><li><p><code>pathSum(self, root, sum)</code> : 给定root 和目标值，返回和为目标值的路径总数。选择时，有两种情况： 路径开始时，<strong>选择当前节点/不选择当前节点，只考虑左右孩子</strong></p><ul><li>结果由3部分构成：以自己开头+（不以自己开头，只考虑左孩子）+ （不以自己开头，只考虑右孩子）</li><li>以自己开头时，<code>count(self,root,sum)</code>:  返回count的个数 （能凑出几个<strong>以该节点为路径开头</strong>，和为目标值的路径总数）<ul><li>结果由3部分构成：自己独挡一面+（自己出力+左孩子出力）+（自己出力+右孩子出力）</li></ul></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :type sum: int        :rtype: int        """</span>        <span class="token comment" spellcheck="true"># 注意递归结束条件</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 左边路径总数（相信他能算出来），后序遍历：左</span>        l<span class="token operator">=</span>self<span class="token punctuation">.</span>pathSum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>sum<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 右边路径总数（相信他能算出来），后修遍历：右</span>        r<span class="token operator">=</span>self<span class="token punctuation">.</span>pathSum<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>sum<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 自己为开头的路径数，后序遍历：中</span>        ro<span class="token operator">=</span>self<span class="token punctuation">.</span>count<span class="token punctuation">(</span>root<span class="token punctuation">,</span>sum<span class="token punctuation">)</span>        res<span class="token operator">=</span>ro<span class="token operator">+</span>l<span class="token operator">+</span>r        <span class="token keyword">return</span> res    <span class="token comment" spellcheck="true"># 返回count的个数 （能凑出几个以该节点为路径开头，和为目标值的路径总数）</span>    <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 注意递归结束条件</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 我自己能不能独当一面，作为一条单独的路径呢？</span>        isMe<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">if</span> root<span class="token punctuation">.</span>val<span class="token operator">==</span>sum <span class="token keyword">else</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 左边的小老弟，你那边能凑几个sum - node.val 呀？</span>        lc<span class="token operator">=</span>self<span class="token punctuation">.</span>count<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>sum<span class="token operator">-</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 右边的小老弟，你那边能凑几个sum - node.val 呀？</span>        rc<span class="token operator">=</span>self<span class="token punctuation">.</span>count<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>sum<span class="token operator">-</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 以我这个头开始的节点，能凑这么多个</span>        countAll<span class="token operator">=</span>isMe<span class="token operator">+</span>lc<span class="token operator">+</span>rc        <span class="token keyword">return</span> countAll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2-前缀和、回溯算法与哈希表的综合运用"><a href="#方法2-前缀和、回溯算法与哈希表的综合运用" class="headerlink" title="方法2:前缀和、回溯算法与哈希表的综合运用"></a>方法2:<a href="https://leetcode.cn/problems/path-sum-iii/solution/-by-taffy-jellyfish-4nvr/" target="_blank" rel="noopener">前缀和、回溯算法与哈希表的综合运用</a></h2><p><img src="https://s2.loli.net/2022/10/05/u5UAyXdK2M9iL6T.png" alt="image.png"></p><p><a href="https://leetcode.com/problems/path-sum-iii/discuss/91892/Python-solution-with-detailed-explanation/181882" target="_blank" rel="noopener">用字典保存累加和的次数，注意有回溯的步骤</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :type targetSum: int        :rtype: int        """</span>        <span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict        dic<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        dic<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>        self<span class="token punctuation">.</span>res<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>curSum<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 递归结束的条件</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span>            curSum<span class="token operator">+=</span>root<span class="token punctuation">.</span>val <span class="token comment" spellcheck="true"># 改变当前的前缀和</span>            <span class="token keyword">if</span> curSum<span class="token operator">-</span>targetSum <span class="token keyword">in</span> dic<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 类似两数之和的思想，如果curSum-targetSum已经存在字典中，则更新self.res</span>                self<span class="token punctuation">.</span>res<span class="token operator">+=</span>dic<span class="token punctuation">[</span>curSum<span class="token operator">-</span>targetSum<span class="token punctuation">]</span>            dic<span class="token punctuation">[</span>curSum<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 当前前缀和存到字典中</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>curSum<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>curSum<span class="token punctuation">)</span>            dic<span class="token punctuation">[</span>curSum<span class="token punctuation">]</span> <span class="token operator">-=</span><span class="token number">1</span> <span class="token comment" spellcheck="true"># 回溯，减少当前前缀和出现的次数</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="盖房子"><a href="#盖房子" class="headerlink" title="盖房子"></a>盖房子</h1><blockquote><p>在某一个点盖一个红房子，之后每个月都在上一次盖的新房子左边盖一个绿房子（G），右边盖一个红房子(R)（不考虑间隔,房子之间距离很大）<br>输入一个n，表示经过n轮以后，从左到右打印房子的排列。第一个房子为R<br>输入1<br>输出 R<br>输入 2<br>输出 GRR<br>输入3<br>输出 GGRRGRR</p></blockquote><p>用递归方法解决，不要跳进递归中</p><ul><li>递归函数的含义：给定一个根节点（子树的根节点的颜色可能为’G’/ ‘R’），返回该节点对应的盖房子结果<ul><li>相信递归函数可以返回我需要的信息</li><li>因为递归过程中，根节点的颜色是一个<strong>变量</strong>（有G和R两种），因此用一个helper函数中的<strong>color来记录这个信息</strong></li></ul></li><li>注意递归终止的条件（否则会陷入死循环）<ul><li>当n为1时，说明已经到了最下面的叶子节点了，需要return这个叶子结果了</li></ul></li><li>得到递归结果后，应该干什么：可理解为二叉树的中序遍历：左子树helper(n-1,’G’)+中间节点color+右子树helper(n-1,’R’)</li></ul><pre class="line-numbers language-python"><code class="language-python">n<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">house</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 用helper函数记录额外的"头结点"信息</span>    <span class="token comment" spellcheck="true"># 相信这个函数可以返回我需要的信息</span>    <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>color<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 递归结束时，返回"头结点"</span>            <span class="token keyword">return</span> color        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 返回左子树的结果+"头结点"+右子树的结果</span>            <span class="token keyword">return</span> helper<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">)</span><span class="token operator">+</span>color<span class="token operator">+</span>helper<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> helper<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">)</span> res<span class="token operator">=</span>house<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章：信封嵌套问题</title>
      <link href="/2020/08/16/labuladong/di-san-zhang-xin-feng-qian-tao-wen-ti/"/>
      <url>/2020/08/16/labuladong/di-san-zhang-xin-feng-qian-tao-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://labuladong.gitbook.io/algo/suan-fa-si-wei-xi-lie/xin-feng-qian-tao-wen-ti#yi-ti-mu-gai-shu" target="_blank" rel="noopener">信封嵌套问题</a></p><p><a href="https://leetcode-cn.com/problems/russian-doll-envelopes/" target="_blank" rel="noopener">354. 俄罗斯套娃信封问题</a></p><ul><li>先对宽度（第一个数）进行升序排序，宽度相同时，对高度（第二个数）降序排序 <code>envelopes=sorted(envelopes,key=lambda x:(x[0],-x[1]))</code></li><li>然后对高度求最长上升子序列</li></ul><p>这个解法的关键在于，对于宽度 w 相同的数对，要<strong>对其高度 h 进行降序排序</strong>。因为两个宽度相同的信封不能相互包含的，<strong>逆序排序保证在 w 相同的数对中最多只选取一个。</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxEnvelopes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> envelopes<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># w升序，w相同时h降序</span>        envelopes<span class="token operator">=</span>sorted<span class="token punctuation">(</span>envelopes<span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        h<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> envelopes<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 取h</span>        res<span class="token operator">=</span>self<span class="token punctuation">.</span>lengthOfLIS<span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 调用函数</span>        <span class="token keyword">return</span> res    <span class="token comment" spellcheck="true"># 最长上升子序列函数</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//#include &lt;vector></span><span class="token comment" spellcheck="true">//#include &lt;iostream></span><span class="token comment" spellcheck="true">//#include &lt;algorithm></span><span class="token comment" spellcheck="true">//using namespace std;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//求最大递增子序列的长度</span>    <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">maxEnvelopes</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token operator">&amp;</span>envelopes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 宽度升序排列，如果宽度相同，则高度降序排列</span>        <span class="token comment" spellcheck="true">// 用到了lambda表达式</span>        <span class="token function">sort</span><span class="token punctuation">(</span>envelopes<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> envelopes<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果宽度相同，则高度降序排列</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 宽度升序排列</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把动态数组的第二列（即：高度）取出来</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> h<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>item<span class="token operator">:</span>envelopes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            h<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 求高度对应的最长递增子序列</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int main(){</span><span class="token comment" spellcheck="true">//    vector&lt;vector&lt;int>> envelops={{5,4},{6,4},{6,7},{2,3}};</span><span class="token comment" spellcheck="true">//    Solution so;</span><span class="token comment" spellcheck="true">//    cout&lt;&lt;so.maxEnvelopes(envelops)&lt;&lt;endl; // 3</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python装饰器</title>
      <link href="/2020/08/13/python/python-zhuang-shi-qi/"/>
      <url>/2020/08/13/python/python-zhuang-shi-qi/</url>
      
        <content type="html"><![CDATA[<ul><li>什么是装饰器？<ul><li>python装饰器用于装饰函数。可以在保留原函数功能的条件下，赋予该函数更丰富的功能（而无需改动原函数）</li></ul></li><li>为什么要用装饰器？<ul><li>可以更便于开发，实现代码复用</li></ul></li><li>装饰器可以解决哪些问题？<ul><li>不破坏原函数的条件下，扩展函数功能(或函数权限)</li></ul></li></ul><blockquote><p>小明每学会一个新本领，他妈妈都会说：“小明太棒了”。所以把妈妈说的话单独写个函数，以后在每次调用时，就可以代码复用</p><ul><li><code>momSaid(func)</code>里的参数为函数</li><li><code>def wrapper(*args,**kwargs)</code>  … <code>return wrapper</code> 可以自动调用函数参数。（如 <code>learnAdd</code>函数有3个参数，<code>learnSubtraction</code> 有两个，但是完全没问题）</li></ul></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">momSaid</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        f<span class="token operator">=</span>func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"算数结果为{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"妈妈说小明太棒了"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> f    <span class="token keyword">return</span> wrapper@momSaid<span class="token keyword">def</span> <span class="token function">learnAdd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小明学会了加法"</span><span class="token punctuation">)</span>    res<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c    <span class="token keyword">return</span> res@momSaid<span class="token keyword">def</span> <span class="token function">learnSubtraction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小明学会了减法"</span><span class="token punctuation">)</span>    res<span class="token operator">=</span>a<span class="token operator">-</span>b    <span class="token keyword">return</span> reslearnAdd<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"==="</span><span class="token punctuation">)</span>learnSubtraction<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为：</p><pre><code>小明学会了加法算数结果为6妈妈说小明太棒了===小明学会了减法算数结果为1妈妈说小明太棒了</code></pre><blockquote><p>小明和他爸爸都喜欢看动画片。于是小明的妈妈在电视上加了年龄权限，当爸爸在看天线宝宝时，会提醒他别看啦（增加函数权限）。而小明在看时，就不会提醒（不破坏原函数）</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">accessTV</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> age<span class="token operator">&lt;=</span><span class="token number">18</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小明的爸爸，你都成年啦，别看天线宝宝啦"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wapper@accessTV<span class="token keyword">def</span> <span class="token function">watchTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小明在看天线宝宝"</span><span class="token punctuation">)</span>age<span class="token operator">=</span><span class="token number">10</span>watchTV<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为：</p><pre><code>age小于等于18时，函数输出：小明在看天线宝宝age大于18时，函数输出：小明的爸爸，你都成年啦，别看天线宝宝啦</code></pre><p><a href="https://www.youtube.com/watch?v=QqRvteWBSWg" target="_blank" rel="noopener">参考1</a>,<a href="https://www.zhihu.com/question/26930016/answer/360300235" target="_blank" rel="noopener">参考2</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章：前缀和技巧</title>
      <link href="/2020/08/12/labuladong/di-san-zhang-qian-zhui-he-ji-qiao/"/>
      <url>/2020/08/12/labuladong/di-san-zhang-qian-zhui-he-ji-qiao/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://labuladong.gitbook.io/algo/suan-fa-si-wei-xi-lie/qian-zhui-he-ji-qiao" target="_blank" rel="noopener">前缀和技巧</a></p><h1 id="560-和为K的子数组"><a href="#560-和为K的子数组" class="headerlink" title="560. 和为K的子数组"></a><a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/solution/qian-zhui-he-si-xiang-560-he-wei-kde-zi-shu-zu-by-/" target="_blank" rel="noopener">560. 和为K的子数组</a></h1><h2 id="方法1：前缀和-暴力超时"><a href="#方法1：前缀和-暴力超时" class="headerlink" title="方法1：前缀和 (暴力超时)"></a>方法1：前缀和 (暴力超时)</h2><p>保存一个数组的前缀和，然后利用差分法得出任意区间段的和</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>      cnt<span class="token punctuation">,</span> n <span class="token operator">=</span>  <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>      pre <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> pre<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span> cnt <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token keyword">return</span> cnt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2：改进版的前缀和，维护更新hashmap"><a href="#方法2：改进版的前缀和，维护更新hashmap" class="headerlink" title="方法2：改进版的前缀和，维护更新hashmap"></a>方法2：<a href="https://leetcode.cn/problems/subarray-sum-equals-k/solution/python3-by-wu-qiong-sheng-gao-de-qia-non-w6jw/" target="_blank" rel="noopener">改进版的前缀和，维护更新hashmap</a></h2><ul><li>维护一个hashmap，hashmap的<strong>key 为累加值 acc，value 为累加值 acc 出现的次数</strong>。</li><li>遍历数组，然后不断更新 acc 和 hashmap，如果 acc 等于 k，那么很明显应该+1. 如果 hashmap[acc - k] 存在，我们就把它加到结果中去即可。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type k: int        :rtype: int        """</span>        <span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict        record<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        res<span class="token operator">=</span><span class="token number">0</span>        record<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>        presum<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            presum<span class="token operator">+=</span>i            <span class="token keyword">if</span> presum<span class="token operator">-</span>k <span class="token keyword">in</span> record<span class="token punctuation">:</span>                res<span class="token operator">+=</span>record<span class="token punctuation">[</span>presum<span class="token operator">-</span>k<span class="token punctuation">]</span>            record<span class="token punctuation">[</span>presum<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章：双指针技巧总结</title>
      <link href="/2020/08/12/labuladong/di-san-zhang-shuang-zhi-zhen-ji-qiao-zong-jie/"/>
      <url>/2020/08/12/labuladong/di-san-zhang-shuang-zhi-zhen-ji-qiao-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://labuladong.gitbook.io/algo/suan-fa-si-wei-xi-lie/shuang-zhi-zhen-ji-qiao" target="_blank" rel="noopener">双指针技巧总结</a></p><p>利用快慢指针或者左右指针解决问题</p><h1 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">141. 环形链表</a></h1><p>利用快慢指针，一开始都指到头结点处，然后每次快指针走两步，慢指针。若最后相遇了，说明有环</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: bool        """</span>        slow<span class="token operator">=</span>head        fast<span class="token operator">=</span>head        <span class="token keyword">while</span> fast<span class="token operator">!=</span>None <span class="token operator">and</span> fast<span class="token punctuation">.</span>next<span class="token operator">!=</span>None<span class="token punctuation">:</span>            slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next            <span class="token keyword">if</span> slow<span class="token operator">==</span>fast<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode <span class="token operator">*</span>slow<span class="token operator">=</span>head<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>fast<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span><span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            slow<span class="token operator">=</span>slow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            fast<span class="token operator">=</span>fast<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>slow<span class="token operator">==</span>fast<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/142kuai-man-zhi-zhen-by-821218213/" target="_blank" rel="noopener">142. 环形链表 II</a></h1><p>返回入环的第一个链表</p><ul><li>快慢指针相遇后，把任意一个指针指向头结点，然后两个指针同速前进，当他们再次相遇时，即是入环口<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""      :type head: ListNode      :rtype: ListNode      """</span>      <span class="token comment" spellcheck="true"># 找到相遇点</span>      slow<span class="token punctuation">,</span>fast<span class="token operator">=</span>head<span class="token punctuation">,</span>head      <span class="token keyword">while</span> fast<span class="token operator">!=</span>None <span class="token operator">and</span> fast<span class="token punctuation">.</span>next<span class="token operator">!=</span>None<span class="token punctuation">:</span>          slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next          fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next          <span class="token keyword">if</span> slow<span class="token operator">==</span>fast<span class="token punctuation">:</span>              <span class="token keyword">break</span>      <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> None      slow<span class="token operator">=</span>head      <span class="token keyword">while</span> slow<span class="token operator">!=</span>fast<span class="token punctuation">:</span>          slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next          fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next      <span class="token keyword">return</span> slow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="倒数第k个节点"><a href="#倒数第k个节点" class="headerlink" title="倒数第k个节点"></a><a href="https://leetcode-cn.com/problems/kth-node-from-end-of-list-lcci/" target="_blank" rel="noopener">倒数第k个节点</a></h1><ul><li>让快指针先走k步，然后快慢指针一起同步走。快指针到达终点时，慢指针指向的就是倒数第k个节点</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kthToLast</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :type k: int        :rtype: int        """</span>        fast<span class="token punctuation">,</span>slow<span class="token operator">=</span>head<span class="token punctuation">,</span>head        <span class="token keyword">while</span> k<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#相当于 while k>0</span>            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next            k<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">while</span> fast<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 相当于while fast!=None</span>            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next            slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next        <span class="token keyword">return</span> slow<span class="token punctuation">.</span>val<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="167-两数之和2"><a href="#167-两数之和2" class="headerlink" title="167. 两数之和2"></a><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener">167. 两数之和2</a></h1><ul><li>只要数组有序，就应该想到双指针技巧</li><li>类似于二分查找，通过调节左右指针，得到目标和<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>      left<span class="token operator">=</span><span class="token number">0</span>      right<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>      <span class="token keyword">while</span> left<span class="token operator">&lt;</span>right<span class="token punctuation">:</span>          <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">:</span>              right<span class="token operator">-=</span><span class="token number">1</span>          <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">:</span>              left<span class="token operator">+=</span><span class="token number">1</span>          <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">:</span>              <span class="token keyword">return</span> <span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="1-两数之和1（无序）"><a href="#1-两数之和1（无序）" class="headerlink" title="1. 两数之和1（无序）"></a><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">1. 两数之和1（无序）</a></h1><ul><li>遍历过程中，利用字典保存值对应的下标。若找到目标和，则返回下标</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: List[int]        """</span>    <span class="token comment" spellcheck="true"># def two_sum(nums,target):</span>        dic<span class="token operator">=</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target<span class="token operator">-</span>v  <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                <span class="token keyword">return</span> i<span class="token punctuation">,</span> dic<span class="token punctuation">[</span>target<span class="token operator">-</span>v<span class="token punctuation">]</span>            dic<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>i          <span class="token comment" spellcheck="true"># for i,j in enumerate(nums):</span>        <span class="token comment" spellcheck="true">#     if target-j in nums[i+1:]:</span>        <span class="token comment" spellcheck="true">#         return i, i+1+nums[i+1:].index(target-j)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344. 反转字符串"></a><a href="https://leetcode-cn.com/problems/reverse-string/" target="_blank" rel="noopener">344. 反转字符串</a></h1><ul><li>利用同步赋值，交换左右指针对应的值<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""      :type s: List[str]      :rtype: None Do not return anything, modify s in-place instead.      """</span>      left<span class="token operator">=</span><span class="token number">0</span>      right<span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>      <span class="token keyword">while</span> left<span class="token operator">&lt;</span>right<span class="token punctuation">:</span>          s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span>          left<span class="token operator">+=</span><span class="token number">1</span>          right<span class="token operator">-=</span><span class="token number">1</span>      <span class="token keyword">return</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章：回溯算法最佳实践：括号生成</title>
      <link href="/2020/08/12/labuladong/di-san-zhang-hui-su-suan-fa-zui-jia-shi-jian-gua-hao-sheng-cheng/"/>
      <url>/2020/08/12/labuladong/di-san-zhang-hui-su-suan-fa-zui-jia-shi-jian-gua-hao-sheng-cheng/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://labuladong.gitbook.io/algo/suan-fa-si-wei-xi-lie/he-fa-kuo-hao-sheng-cheng" target="_blank" rel="noopener">回溯算法最佳实践：括号生成</a></p><h1 id="22-括号生成"><a href="#22-括号生成" class="headerlink" title="22. 括号生成"></a><a href="https://leetcode-cn.com/problems/generate-parentheses/" target="_blank" rel="noopener">22. 括号生成</a></h1><p>问题转化为：<strong>现在有 2n 个位置，每个位置可以放置字符 ‘(‘ 或者 ‘)’，求生成所有可能的并且有效的括号组合</strong></p><ul><li>可用的左括号数量为 left 个，可用的右括号数量为 rgiht 个。cur表示当前字符串状态</li><li>左右括号都能用完，说明是合法的，res中记录当前cur</li><li>剩下的左括号比右括号多，或者括号数量小于0，说明是不合法的，直接return</li><li>回溯：做选择，撤销选择</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type n: int        :rtype: List[str]        """</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        choose<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 还可以放几个左括号/右括号，当前字符串的状态</span>            <span class="token comment" spellcheck="true"># 合法的情况</span>            <span class="token keyword">if</span> left<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> right<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 左右括号都用完了，合法</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token comment" spellcheck="true"># 不合法的情况</span>            <span class="token comment" spellcheck="true"># 剩下的左括号比右括号多，或者括号数量小于0</span>            <span class="token keyword">if</span> left<span class="token operator">></span>right <span class="token operator">or</span> left<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> right<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token comment" spellcheck="true"># 回溯， 有两种写法</span>            <span class="token comment" spellcheck="true"># 写法1：以左括号为例</span>            cur<span class="token operator">=</span>cur<span class="token operator">+</span>choose<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 做选择 ，尝试放左括号</span>            backtrack<span class="token punctuation">(</span>left<span class="token number">-1</span><span class="token punctuation">,</span>right<span class="token punctuation">,</span>cur<span class="token punctuation">)</span>              cur<span class="token operator">=</span>cur<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#撤销选择</span>            <span class="token comment" spellcheck="true"># 写法2：以右括号为例，直接在backtrack中进行更新</span>            backtrack<span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token number">-1</span><span class="token punctuation">,</span>cur<span class="token operator">+</span>choose<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        backtrack<span class="token punctuation">(</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector <span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>    vector <span class="token operator">&lt;</span>string<span class="token operator">></span> choose<span class="token punctuation">{</span><span class="token string">"("</span><span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>string visited<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right <span class="token operator">||</span> left <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> right <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        只有两种选择，分别列举即可</span>        visited<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>choose<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>visited<span class="token punctuation">,</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        visited<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        visited<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>choose<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>visited<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        visited<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// // 或者写成回溯框架</span>        <span class="token comment" spellcheck="true">// for (int i = 0; i &lt; 2; ++i) {</span>        <span class="token comment" spellcheck="true">//     if (i == 0) {</span>        <span class="token comment" spellcheck="true">//         visited.append(choose[0]);</span>        <span class="token comment" spellcheck="true">//         backtrack(visited, left - 1, right);</span>        <span class="token comment" spellcheck="true">//     } else {</span>        <span class="token comment" spellcheck="true">//         visited.append(choose[1]);</span>        <span class="token comment" spellcheck="true">//         backtrack(visited, left, right - 1);</span>        <span class="token comment" spellcheck="true">//     }</span>        <span class="token comment" spellcheck="true">//     visited.pop_back();</span>        <span class="token comment" spellcheck="true">// }</span>    <span class="token punctuation">}</span>    vector <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string visited<span class="token punctuation">;</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>visited<span class="token punctuation">,</span> n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章：递归反转链表的一部分</title>
      <link href="/2020/08/12/labuladong/di-er-zhang-di-gui-fan-zhuan-lian-biao-de-yi-bu-fen/"/>
      <url>/2020/08/12/labuladong/di-er-zhang-di-gui-fan-zhuan-lian-biao-de-yi-bu-fen/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://labuladong.gitbook.io/algo/shu-ju-jie-gou-xi-lie/di-gui-fan-zhuan-lian-biao-de-yi-bu-fen" target="_blank" rel="noopener">递归反转链表的一部分</a></p><h1 id="92-反转链表-II"><a href="#92-反转链表-II" class="headerlink" title="92. 反转链表 II"></a>92. 反转链表 II</h1><h2 id="方法1-递归反转链表"><a href="#方法1-递归反转链表" class="headerlink" title="方法1.递归反转链表 "></a>方法1.<a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/solution/pythondi-gui-jie-jue-by-clark-12/" target="_blank" rel="noopener"><del>递归反转链表</del> </a></h2><p>（只是说明递归方法的思想，本题优解应参考方法2）</p><blockquote><ul><li>先看例题<a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">206. 反转整个链表</a><ul><li>对于递归算法，最重要的就是<strong>明确递归函数实现的功能</strong><del>（而不是跳进递归中）</del> ，因此，reverseList函数定义为：输入一个节点 head，将「以 head 为起点」的链表反转，并返回反转之后的头结点</li></ul></li></ul><p><img src="https://i.loli.net/2021/08/14/JHjav5O8Eoxs7Ug.png" alt="20210814115651">    </p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 递归结束条件</span>        <span class="token keyword">if</span> head<span class="token operator">==</span>None <span class="token operator">or</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span>None<span class="token punctuation">:</span> <span class="token keyword">return</span> head        <span class="token comment" spellcheck="true"># reverseList函数返回反转后的头结点</span>        last<span class="token operator">=</span>self<span class="token punctuation">.</span>reverseList<span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span>        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">=</span>head        head<span class="token punctuation">.</span>next<span class="token operator">=</span>None        <span class="token keyword">return</span> last<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) {} *     ListNode(int x) : val(x), next(nullptr) {} *     ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">nullptr</span> <span class="token operator">||</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode <span class="token operator">*</span>sub<span class="token operator">=</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> tail<span class="token operator">=</span><span class="token function">reverseList</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>        sub<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>        head<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tail<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>先用递归实现：反转以head开头的前n个节点</li><li>首先，如果 m == 1（因为头结点是从1开始计数的），就相当于反转链表开头的 n 个元素，也就是函数<code>reverseN(head, n)</code>   (也是<code>reverseBetween</code>结束递归的条件)</li><li>如果 m != 1 怎么办？如果我们把 head 的索引视为 1，那么我们是想从第 m 个元素开始反转；如果把 head.next 的索引视为 1 呢？那么相对于 head.next，反转的区间应该是从第 m - 1 个元素开始的；那么对于 head.next.next 呢……因此有：<pre class="line-numbers language-python"><code class="language-python">      <span class="token comment" spellcheck="true"># 如果不是第一个，那么以下一个为头结点开始递归，直到触发m==1递归终止条件</span>      head<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>reverseBetween<span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>综上，反转m到n之间的节点的整体代码为：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 先用递归实现：反转以head开头的前n个节点</span>        <span class="token keyword">def</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                successor <span class="token operator">=</span> head<span class="token punctuation">.</span>next <span class="token comment" spellcheck="true"># 拿到后继节点</span>                <span class="token keyword">return</span> head<span class="token punctuation">,</span> successor            <span class="token comment" spellcheck="true"># 以 head.next 为起点，需要反转前 n - 1 个节点</span>            last<span class="token punctuation">,</span> successor <span class="token operator">=</span> reverseN<span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span>            head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head            head<span class="token punctuation">.</span>next <span class="token operator">=</span> successor            <span class="token keyword">return</span> last<span class="token punctuation">,</span> successor        <span class="token keyword">if</span> m <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 递归终止条件</span>            <span class="token comment" spellcheck="true"># 这里应该是反转以m为开头的n-m+1个节点，</span>            <span class="token comment" spellcheck="true"># 所以应该写成res, _ = reverseN(head, n-m+1)，只是m等于1，所以写成res, _ = reverseN(head, n)也可以</span>            res<span class="token punctuation">,</span> _ <span class="token operator">=</span> reverseN<span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span>            <span class="token keyword">return</span> res        <span class="token comment" spellcheck="true"># 如果不是第一个，那么以下一个为头结点开始递归，直到触发条件</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>reverseBetween<span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> head<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list * struct ListNode { *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) {} *     ListNode(int x) : val(x), next(nullptr) {} *     ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span>successor <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span><span class="token function">reverseN</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            successor <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode <span class="token operator">*</span>last <span class="token operator">=</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">,</span> t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> successor<span class="token punctuation">;</span>        <span class="token keyword">return</span> last<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ListNode <span class="token operator">*</span><span class="token function">reverseBetween</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">,</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2-找到要翻转部分的链表-将其翻转-再与原链表拼接"><a href="#方法2-找到要翻转部分的链表-将其翻转-再与原链表拼接" class="headerlink" title="方法2. 找到要翻转部分的链表,将其翻转,再与原链表拼接"></a>方法2. <a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/solution/liang-chong-fang-fa-by-powcai/" target="_blank" rel="noopener">找到要翻转部分的链表,将其翻转,再与原链表拼接</a></h2><blockquote><ol><li><a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/" target="_blank" rel="noopener">复习一下逐个反转链表元素的代码：</a><ul><li>pre -&gt; cur (pre在前，cur 在后)</li><li>把cur的next指向pre，然后pre和cur分别向右跳一格。（利用<strong>同步赋值语句</strong>同时实现这些功能） </li><li>同步赋值表达式首先将右侧的表达式按照顺序进行计算，然后再赋值给左侧的变量</li></ul></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>        pre<span class="token operator">=</span>None        cur<span class="token operator">=</span>head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            cur<span class="token punctuation">.</span>next<span class="token punctuation">,</span>pre<span class="token punctuation">,</span>cur<span class="token operator">=</span>pre<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>cur<span class="token punctuation">.</span>next        <span class="token keyword">return</span> pre<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不合并的写法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token triple-quoted-string string">"""          :type head: ListNode          :rtype: ListNode          """</span>          <span class="token comment" spellcheck="true"># 申请两个节点，pre和 cur，pre指向None</span>          pre <span class="token operator">=</span> None          cur <span class="token operator">=</span> head          <span class="token comment" spellcheck="true"># 遍历链表，while循环里面的内容其实可以写成一行</span>          <span class="token keyword">while</span> cur<span class="token punctuation">:</span>               <span class="token comment" spellcheck="true"># 记录当前节点的下一个节点</span>               tmp <span class="token operator">=</span> cur<span class="token punctuation">.</span>next               <span class="token comment" spellcheck="true"># 然后将当前节点指向pre</span>               cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre               <span class="token comment" spellcheck="true"># pre和cur节点都前进一位</span>               pre <span class="token operator">=</span> cur               cur <span class="token operator">=</span> tmp          <span class="token keyword">return</span> pre   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><strong>思路</strong></p><ul><li>先添加dummy节点，并连接在头结点前面</li><li>cur跳到位置m处，pre在cur左面</li><li>反转m到n的节点</li><li>连接各节点</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self):</span><span class="token comment" spellcheck="true">#         self.val=x</span><span class="token comment" spellcheck="true">#         self.next=None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        dummy<span class="token operator">=</span>ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        dummy<span class="token punctuation">.</span>next<span class="token operator">=</span>head        pre<span class="token operator">=</span>dummy        <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next        cur<span class="token operator">=</span>pre<span class="token punctuation">.</span>next        node<span class="token operator">=</span>pre        <span class="token comment" spellcheck="true"># node保存m的前一个节点，为后续连接做准备</span>        <span class="token comment" spellcheck="true"># cur为反转的当前节点，node为cur的上一个节点 </span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token operator">-</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#反转m到n的节点</span>            cur<span class="token punctuation">.</span>next<span class="token punctuation">,</span>node<span class="token punctuation">,</span>cur<span class="token operator">=</span>node<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>cur<span class="token punctuation">.</span>next <span class="token comment" spellcheck="true">#注意顺序，cur.next 在最前</span>        <span class="token comment" spellcheck="true">#连接反转后的各节点</span>        pre<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">=</span>cur        pre<span class="token punctuation">.</span>next<span class="token operator">=</span>node        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/03/01/CdLfF4M3m7KZgih.jpg" alt></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) {} *     ListNode(int x) : val(x), next(nullptr) {} *     ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        m和n指向同一个节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        把指针跳到需要反转的位置:pre为开始反转的前一个节点，cur为开始反转的节点</span>        dummy<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pre<span class="token operator">=</span>dummy<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token number">-1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pre<span class="token operator">=</span>pre<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode<span class="token operator">*</span> cur<span class="token operator">=</span>pre<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        反转m到n的这部分链表</span>        ListNode<span class="token operator">*</span> node<span class="token operator">=</span>pre<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode<span class="token operator">*</span> tmp<span class="token operator">=</span>cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>node<span class="token punctuation">;</span>            node<span class="token operator">=</span>cur<span class="token punctuation">;</span>            cur<span class="token operator">=</span>tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        拼接</span>        pre<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>cur<span class="token punctuation">;</span>        pre<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>node<span class="token punctuation">;</span>        <span class="token keyword">return</span> dummy<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章：特殊数据结构：单调队列</title>
      <link href="/2020/08/05/labuladong/di-er-zhang-te-shu-shu-ju-jie-gou-dan-diao-dui-lie/"/>
      <url>/2020/08/05/labuladong/di-er-zhang-te-shu-shu-ju-jie-gou-dan-diao-dui-lie/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://labuladong.gitbook.io/algo/shu-ju-jie-gou-xi-lie/dan-tiao-dui-lie" target="_blank" rel="noopener">特殊数据结构：单调队列</a></p><h1 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a><a href="https://leetcode-cn.com/problems/sliding-window-maximum/solution/python-deque-by-frankchen250/" target="_blank" rel="noopener">239. 滑动窗口最大值</a></h1><h2 id="方法1：更新滑动窗口法（暴力遍历，超时）"><a href="#方法1：更新滑动窗口法（暴力遍历，超时）" class="headerlink" title="方法1：更新滑动窗口法（暴力遍历，超时）"></a><del>方法1：更新滑动窗口法（暴力遍历，超时）</del></h2><ul><li>滑动窗口没有完全进入数组时，把数据加入窗口中</li><li>窗口完全进入数组后，保存最大值，同时弹出窗口最左侧的元素（即，右边进，左边出，更新窗口），继续进行下一次循环</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        window<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 滑动窗口未完全进入数组，把元素添加到窗口中</span>                window<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                window<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>max<span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 记录窗口中最大值</span>                window<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 弹出窗口最左边的元素</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法二：维护一个递减的单调队列"><a href="#方法二：维护一个递减的单调队列" class="headerlink" title="方法二：维护一个递减的单调队列"></a>方法二：维护一个递减的单调队列</h2><p><strong>踩扁前面比他小的数</strong><br><img src="https://img-blog.csdnimg.cn/20200624150009357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70" alt="图片来自labuladong"><br><img src="https://img-blog.csdnimg.cn/20200624145943325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70" alt="图片来自labuladong"><br><img src="https://img-blog.csdnimg.cn/20200624145958795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70" alt="图片来自labuladong"></p><blockquote><blockquote><p>给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p></blockquote><p>返回滑动窗口中的最大值。</p><p>进阶：</p><p>你能在线性时间复杂度内解决此题吗？</p><p>示例:<br>输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3 输出: [3,3,5,5,6,7]  解释: </p></blockquote><table><thead><tr><th>滑动窗口的位置</th><th>最大值</th></tr></thead><tbody><tr><td>[1  3  -1] -3  5  3  6  7</td><td>3</td></tr><tr><td>1 [3  -1  -3] 5  3  6  7</td><td>3</td></tr><tr><td>1  3 [-1  -3  5] 3  6  7</td><td>5</td></tr><tr><td>1  3  -1 [-3  5  3] 6  7</td><td>5</td></tr><tr><td>1  3  -1  -3 [5  3  6] 7</td><td>6</td></tr><tr><td>1  3  -1  -3  5 [3  6  7]</td><td>7</td></tr></tbody></table><blockquote><p>每次循环结束后，deque中存储的元素：</p><p>deque([1])    （前两次窗口未满）<br>deque([3])      （前两次窗口未满）<br>deque([3, -1])<br>deque([-1, -3])   （当前窗口中的元素为[3,-1,-3], 队列中最左边的元素queue[0]为nums[i - k + 1]，则把队头删掉；否则不满足queue[0] == nums[i - k + 1]，pop_num（）函数中if语句不执行，相当于不用删队头）<br>deque([5])<br>deque([5, 3])<br>deque([6])<br>deque([7])</p></blockquote><ul><li>双端队列中存储着<strong>压扁后</strong>剩下的结果 （确保队列单调递减）</li><li>队列中的最大值有重复时，保留重复（只踩扁比它小的数，相同的不踩，确保次序一致）</li><li><strong>之所以要判断<code>queue[0] == n</code>，是因为我们想删除的队头元素 n 可能已经被「压扁」了，这时候就不用删除了</strong><ul><li>若加进来的元素一直压不扁队头，但队列已满时，要删掉最左边的队头元素 （如果已经压扁过了，那么<code>queue[0] == nums[i - k + 1]</code>不成立 ,不用删了）<ul><li>以滑动窗口位置在<code>[6 5 4] 8</code>  为例，当前i指向4时，现在的队列是[6 5 4] （5 和 4 都没能压扁6），窗口最大值为6。此时队头元素为<code>nums[i - k + 1]</code>，把队头 6 pop出去。队列变为<code>[5 4]</code>。此次循环结束</li><li>现在要把8加进来，8把它们都压扁了，现在队列为<code>[8]</code>,最大值为队首8, queue[0]并不等于<code>nums[i - k + 1]（也就是5）</code>，if语句不执行,所以不用popleft</li></ul></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">push_num</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 把元素n加入双端队列，小于n的元素被n踩扁</span>            <span class="token keyword">while</span> queue <span class="token operator">and</span> queue<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">pop_num</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 把最左端的元素n弹出双端队列</span>            <span class="token keyword">if</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> n<span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">from</span> collections <span class="token keyword">import</span> deque        queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 双端队列没有完全进入列表，则把该元素（以能否压扁的机制）加入队列</span>                push_num<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                push_num<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 把该元素加入队列</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 最左端为最大值</span>                pop_num<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 删除位置为i-k+1的元素 （若已经被压扁了，则不用删了）</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//#include &lt;vector></span><span class="token comment" spellcheck="true">//#include &lt;deque></span><span class="token comment" spellcheck="true">//#include &lt;iostream></span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//using namespace std;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">push_num</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            q<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        q<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">pop_num</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            q<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">push_num</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">push_num</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">pop_num</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int main() {</span><span class="token comment" spellcheck="true">//    Solution s;</span><span class="token comment" spellcheck="true">//    vector&lt;int> nums{1, 3, -1, -3, 5, 3, 6, 7};</span><span class="token comment" spellcheck="true">//    int k = 3;</span><span class="token comment" spellcheck="true">//    vector&lt;int> ans = s.maxSlidingWindow(nums, k);</span><span class="token comment" spellcheck="true">//    for (auto &amp;i: ans) {</span><span class="token comment" spellcheck="true">//        cout &lt;&lt; i &lt;&lt; "\t";</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://leetcode.cn/problems/sliding-window-maximum/solution/acm-xuan-shou-tu-jie-leetcode-hua-dong-c-i3wj/" target="_blank" rel="noopener">其他写法：</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果数组为空或 k = 0，直接返回空</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums <span class="token operator">or</span> <span class="token operator">not</span> k<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 如果数组只有1个元素，直接返回该元素</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 初始化队列和结果，队列存储数组的下标</span>        queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 如果当前队列最左侧存储的下标等于 i-k 的值，代表目前队列已满。</span>            <span class="token comment" spellcheck="true"># 但是新元素需要进来，所以列表最左侧的下标出队列</span>            <span class="token keyword">if</span> queue <span class="token operator">and</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> i <span class="token operator">-</span> k<span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 对于新进入的元素，如果队列前面的数比它小，那么前面的都出队列</span>            <span class="token keyword">while</span> queue <span class="token operator">and</span> nums<span class="token punctuation">[</span>queue<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 新元素入队列</span>            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 当前的大值加入到结果数组中</span>            <span class="token keyword">if</span> i <span class="token operator">>=</span> k<span class="token number">-1</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章：特殊数据结构：单调栈</title>
      <link href="/2020/08/05/labuladong/di-er-zhang-te-shu-shu-ju-jie-gou-dan-diao-zhan/"/>
      <url>/2020/08/05/labuladong/di-er-zhang-te-shu-shu-ju-jie-gou-dan-diao-zhan/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://labuladong.gitbook.io/algo/shu-ju-jie-gou-xi-lie/dan-tiao-zhan" target="_blank" rel="noopener">特殊数据结构：单调栈</a></p><blockquote><p>栈（stack）是很简单的一种数据结构，先进后出的逻辑顺序，符合某些问题的特点，比如说函数调用栈。单调栈实际上就是栈，只是利用了一些巧妙的逻辑，使得每次新元素入栈后，栈内的元素都保持有序（单调递增或单调递减）</p></blockquote><blockquote><p>文章例题：<br>给你一个数组 [2,1,2,4,3]，你返回数组 [4,2,4,-1,-1]。<br>解释：第一个 2 后面比 2 大的数是 4; 1 后面比 1 大的数是 2；第二个 2 后面比 2 大的数是 4; 4 后面没有比 4 大的数，填 -1；3 后面没有比 3 大的数，填 -1。</p></blockquote><p>这个问题可以这样抽象思考：把数组的元素想象成并列站立的人，元素大小想象成人的身高。这些人站成一列，如何求元素「2」的 Next Greater Number 呢？很简单，如果能够看到元素「2」，那么他后面可见的第一个人就是「2」的 Next Greater Number，因为比「2」小的元素身高不够，都被「2」挡住了，第一个露出来的就是答案。</p><p>这就是单调栈解决问题的模板。<strong>for 循环要从后往前扫描元素，因为我们借助的是栈的结构，倒着入栈，其实是正着出栈。while 循环是把两个“高个”元素之间的元素排除，因为他们的存在没有意义，前面挡着个“更高”的元素，所以他们不可能被作为后续进来的元素的 Next Great Number 了。</strong></p><p>P.S., <strong>也可以用“压扁思想”理解（倒序遍历）：</strong><br>3没有东西压扁，栈为空，所以对应-1。然后3进栈，此时栈为[3]<br>4能压扁3，pop后栈为空，所以对应-1。然后4进栈,此时栈为[4]<br>2不能压扁4，不能pop，栈为[4],所以对应4。然后2进栈，此时栈为[4,2]<br>1不能压扁2和4，不能pop，栈为[4,2],所以对应2。然后1进栈，此时栈为[4,2,1]<br>2能压扁1,2,不能压扁4，栈为[4],所以对应4。<del>然后2进栈，此时栈为[4,2]</del></p><p><img src="https://img-blog.csdnimg.cn/20200623194612914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70" alt="图片来自labuladong"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    s<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#倒着往栈里放</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">while</span>  s <span class="token operator">and</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#矮个起开</span>            s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span>  s <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>        s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 进队，接受之后的身高判定</span>    <span class="token keyword">return</span> ansnums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ans:"</span><span class="token punctuation">,</span>nextGreaterElement<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果输出（栈里的元素始终单调递减）：</p><blockquote><p>每次的s:<br>[]<br>[3]<br>[4]<br>[4, 2]<br>[4, 2, 1]</p><p>ans: [4, 2, 4, -1, -1]</p></blockquote><h1 id="503-下一个更大元素-II"><a href="#503-下一个更大元素-II" class="headerlink" title="503. 下一个更大元素 II"></a><a href="https://leetcode-cn.com/problems/next-greater-element-ii/" target="_blank" rel="noopener">503. 下一个更大元素 II</a></h1><ul><li>从<strong>最后一个</strong>元素开始逆序遍历，维护一个单调递减的<strong>栈</strong>。</li><li>因为这个栈是<strong>先进后出</strong>，且<strong>单调递减</strong>的，所以弹出栈中<strong>小于等于</strong>当前元素的值后，栈顶的元素就是找到的结果</li><li>把<strong>当前元素入栈</strong>，这样，它前面的元素才能和它继续比较 </li><li>根据不同输出结果的要求，栈中存放当前元素对应的信息，此题存放<strong>当前元素</strong></li></ul><blockquote><p>以 [2,1,2,4,3] 为例，<code>nums*2</code> 后得[2,1,2,4,3,2,1,2,4,3] （扩充数组，以便求取最后一个值对应的结果）。<br>当前值对应的结果为栈中当前值所在的<strong>前一个</strong>元素（记录结果后才把当前值入栈），当前值前面没有元素，则结果为-1</p><p>则逆序遍历过程中：<br>当前值为：3，加入当前值后对应的栈为[3]   （无解，-1）<br>当前值为：4，加入当前值后对应的栈为[4] （无解，-1）<br>当前值为：2，加入当前值后对应的栈为[<strong>4</strong>, 2]<br>当前值为：1，加入当前值后对应的栈为[4, <strong>2</strong>, 1]<br>当前值为：2，加入当前值后对应的栈为[<strong>4</strong>, 2]<br><em>当前值为：3，加入当前值后对应的栈为[<strong>4</strong>, 3]<br>当前值为：4，加入当前值后对应的栈为[4]   （无解，-1）<br>当前值为：2，加入当前值后对应的栈为[<strong>4</strong>, 2]<br>当前值为：1，加入当前值后对应的栈为[4, <strong>2</strong>, 1]<br>当前值为：2，加入当前值后对应的栈为[<strong>4</strong>, 2]</em></p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">nextGreaterElements</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[int]        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        nums<span class="token operator">=</span>nums<span class="token operator">*</span><span class="token number">2</span>  <span class="token comment" spellcheck="true"># 扩充数组</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 初始化</span>        s<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 逆序遍历</span>            <span class="token keyword">while</span> s <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 1.弹出栈中小于等于当前元素的值</span>                s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> s <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment" spellcheck="true"># 2.弹出不符合的元素后，栈顶元素就是所求的结果</span>            s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3. 当前元素入栈，这样，它前面的元素才能和它继续比较</span>        <span class="token keyword">return</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//#include &lt;vector></span><span class="token comment" spellcheck="true">//#include &lt;stack></span><span class="token comment" spellcheck="true">//#include &lt;iostream></span><span class="token comment" spellcheck="true">//using namespace std;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">nextGreaterElements</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        把数组扩大到两倍</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums1 <span class="token operator">=</span> nums<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 或者vector&lt;int> nums1(nums.begin(), nums.end());</span>        nums<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存结果</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 单调递减的栈</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            压扁栈中比nums[i]小的数</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 尽量压扁后，第i个位置的结果就是栈顶的数字</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前元素入栈，这样，它前面的元素才能和它继续比较</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取前一半的结果</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int main() {</span><span class="token comment" spellcheck="true">//    Solution s;</span><span class="token comment" spellcheck="true">//    vector&lt;int> nums = {1, 2, 1};</span><span class="token comment" spellcheck="true">//    vector&lt;int> ans = s.nextGreaterElements(nums);</span><span class="token comment" spellcheck="true">//    for (auto &amp;i:ans) {</span><span class="token comment" spellcheck="true">//        cout &lt;&lt; i &lt;&lt;endl;</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="496-下一个更大元素-I"><a href="#496-下一个更大元素-I" class="headerlink" title="496. 下一个更大元素 I"></a><a href="https://leetcode-cn.com/problems/next-greater-element-i/" target="_blank" rel="noopener">496. 下一个更大元素 I</a></h1><ul><li>该题与上题的区别是： <ul><li>上题直接给定列表，在逆序遍历的同时，更新单调栈</li><li>本题中，对任意的nums1[i], 需要找到当前元素在nums2 中的位置，并把该位置及其后面的元素取出来并反转后作为栈<code>s</code> 中的内容 （<code>nums2[nums2.index(nums1[i]):][::-1]</code>）,然后进行比较。 <ul><li>（这里并不是维护单调递减的栈，而是把找到的反转栈从尾部开始逐个弹出不符合条件的元素，最终得到结果）</li></ul></li><li>根据不同输出结果的要求，栈中存放当前元素的信息，此题存放<strong>当前元素在nums2中对应的本身及其后面的元素（并反转）</strong></li></ul></li></ul><blockquote><p>以 nums1=[4,1,2]， nums2=[1,3,4,2] 为例，<br>则逆序遍历过程中：<br>当前值为2,对应的反转后的栈为[2]<br>当前值为1,对应的反转后的栈为[2, 4, 3, 1]<br>（解释：<em>nums2中找到1的位置，1及其1后面的元素为[1,3,4,2],反转后为[2,4,3,1]）</em><br>当前值为4,对应的反转后的栈为[2, 4]</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums1<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#若为空数组，则返回</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#逆序遍历</span>            <span class="token comment" spellcheck="true"># 用反转，使得pop的顺序一致</span>            <span class="token comment" spellcheck="true"># 比如1 要和[1,3,4,2]比，输出3</span>            <span class="token comment" spellcheck="true"># 则反转后为[2,4,3,1], 弹1，得到3为符合条件的值</span>            s<span class="token operator">=</span>nums2<span class="token punctuation">[</span>nums2<span class="token punctuation">.</span>index<span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 找到每个元素对应的栈，并反转</span>            <span class="token keyword">while</span> s <span class="token operator">and</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 1.弹出栈中小于等于当前元素的值</span>                s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#矮个起开</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> s <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment" spellcheck="true"># 2.弹出不符合的元素后，栈顶元素就是所求的结果</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="739-每日温度"><a href="#739-每日温度" class="headerlink" title="739.每日温度"></a><a href="https://leetcode-cn.com/problems/daily-temperatures/" target="_blank" rel="noopener">739.每日温度</a></h1><ul><li>用栈记录的是list中元素的index，而不是list中元素值本身 （与503题类似，根据不同输出结果的要求，栈中存放当前元素的信息，此题存放<strong>当前元素的index下标</strong>）</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type T: List[int]        :rtype: List[int]        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> T <span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        s<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 这里放元素索引，而不是元素</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> s <span class="token operator">and</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>T<span class="token punctuation">[</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>i <span class="token keyword">if</span> s <span class="token keyword">else</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 得到索引间距</span>            s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 放入索引</span>        <span class="token comment" spellcheck="true"># print(ans)</span>        <span class="token keyword">return</span> ansT<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">]</span>so<span class="token operator">=</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>so<span class="token punctuation">.</span>dailyTemperatures<span class="token punctuation">(</span>T<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章：如何计算完全二叉树的节点数</title>
      <link href="/2020/08/02/labuladong/di-er-zhang-ru-he-ji-suan-wan-quan-er-cha-shu-de-jie-dian-shu/"/>
      <url>/2020/08/02/labuladong/di-er-zhang-ru-he-ji-suan-wan-quan-er-cha-shu-de-jie-dian-shu/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://mp.weixin.qq.com/s/xW2fbE3v4JhMSKfxoxIHBg" target="_blank" rel="noopener">如何计算完全二叉树的节点数</a></p><h1 id="222-完全二叉树的节点个数"><a href="#222-完全二叉树的节点个数" class="headerlink" title="222. 完全二叉树的节点个数"></a><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/" target="_blank" rel="noopener">222. 完全二叉树的节点个数</a></h1><ul><li>完全二叉树都是<strong>紧凑靠左排列</strong>的</li><li>满二叉树<strong>每一层都是满的</strong> （除底层的叶子节点外，左右孩子都有），<strong>是一种特殊的完全二叉树</strong></li></ul><p>遍历二叉树节点时：</p><ol><li>若是普通的二叉树，则在遍历节点时计数即可</li><li>若是满二叉树，则说明左右子树的高度相等，节点个数=2^高度-1</li></ol><p>因此，若判断该完全二叉树是满二叉树，则用情况2，否则用情况1</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        l<span class="token punctuation">,</span>r<span class="token operator">=</span>root<span class="token punctuation">,</span>root        hl<span class="token punctuation">,</span>hr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">while</span> l<span class="token operator">!=</span>None<span class="token punctuation">:</span>            l<span class="token operator">=</span>l<span class="token punctuation">.</span>left            hl<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">while</span> r<span class="token operator">!=</span>None<span class="token punctuation">:</span>            r<span class="token operator">=</span>r<span class="token punctuation">.</span>right            hr<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">if</span> hl<span class="token operator">==</span>hr<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 左右子树高度相等，是满二叉树，用公式计算</span>            <span class="token keyword">return</span> pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>hl<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span>self<span class="token punctuation">.</span>countNodes<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>countNodes<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 普通二叉树，用递归方法计算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章：LRU算法详解</title>
      <link href="/2020/08/01/labuladong/di-er-zhang-lru-suan-fa-xiang-jie/"/>
      <url>/2020/08/01/labuladong/di-er-zhang-lru-suan-fa-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://labuladong.gitbook.io/algo/shu-ju-jie-gou-xi-lie/lru-suan-fa" target="_blank" rel="noopener">LRU算法详解</a></p><p><a href="https://leetcode-cn.com/problems/lru-cache/solution/pythonde-ordereddict-huo-zhe-ha-xi-shuang-xiang-li/" target="_blank" rel="noopener">146. LRU(Least Recently Used) 缓存机制</a></p><p>利用<strong>字典+双向链表</strong></p><ul><li>字典里存的是<strong>Node的节点类</strong>，self.add(Node(key, value))</li><li>传给add函数的是一个Node类，这个字典的<strong>键是node.key</strong>，<strong>值是Node类</strong></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 构建Node类</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>key <span class="token operator">=</span> key        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>prev <span class="token operator">=</span> None        self<span class="token punctuation">.</span>next <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">LRUCache</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 构建首尾节点, 使之相连</span>        <span class="token comment" spellcheck="true"># 之后处理head到tail之间的node</span>        self<span class="token punctuation">.</span>head <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tail <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>tail        self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> self<span class="token punctuation">.</span>head        self<span class="token punctuation">.</span>lookup <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>max_len <span class="token operator">=</span> capacity    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>lookup<span class="token punctuation">:</span>            node <span class="token operator">=</span> self<span class="token punctuation">.</span>lookup<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            self<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>node<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>node<span class="token punctuation">)</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>val        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>lookup<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lookup<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 移除该节点</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lookup<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>max_len<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 把表头位置节点删除(说明最近的数据值)</span>            self<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Node<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 删除链表节点</span>    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> self<span class="token punctuation">.</span>lookup<span class="token punctuation">[</span>node<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 删除该节点</span>        node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next <span class="token comment" spellcheck="true"># 更新链表</span>        node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev    <span class="token comment" spellcheck="true"># 加在链表尾</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>lookup<span class="token punctuation">[</span>node<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> node <span class="token comment" spellcheck="true"># 添加(key ,node)节点</span>        pre_tail <span class="token operator">=</span> self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev <span class="token comment" spellcheck="true">#暂存该节点</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>tail <span class="token comment" spellcheck="true">#更新链表</span>        self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> node        pre_tail<span class="token punctuation">.</span>next <span class="token operator">=</span> node        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pre_tail<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：贪心算法之区间调度问题</title>
      <link href="/2020/07/31/labuladong/di-yi-zhang-tan-xin-suan-fa-zhi-qu-jian-diao-du-wen-ti/"/>
      <url>/2020/07/31/labuladong/di-yi-zhang-tan-xin-suan-fa-zhi-qu-jian-diao-du-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/tan-xin-suan-fa-zhi-qu-jian-tiao-du-wen-ti" target="_blank" rel="noopener">贪心算法之区间调度问题</a></p><h1 id="435-无重叠区间"><a href="#435-无重叠区间" class="headerlink" title="435. 无重叠区间"></a><a href="https://leetcode-cn.com/problems/non-overlapping-intervals/" target="_blank" rel="noopener">435. 无重叠区间</a></h1><blockquote><p>一天有好多活动，你可以选择不重叠的时间尽量多参加活动。</p><ul><li>按照活动结束的时间排序后（不管开始得多早，都不如选择早点结束的活动，这样还能继续选其他活动）<ul><li>假设当前参加的是活动A，如果活动B的开始时间大于等于活动A的结束时间，则继续参加B活动。</li><li>这时活动数+1，后面的活动开始时间要和活动B结束的时间进行比较，所以活动结束的时间更新为活动B结束的时间。</li></ul></li></ul></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eraseOverlapIntervals</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> intervals<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> intervals<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        intervals<span class="token operator">=</span>sorted<span class="token punctuation">(</span>intervals<span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        end<span class="token operator">=</span>intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 第0个活动结束的时间</span>        count<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>intervals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 可以想象成当前活动开始的时间大于等于之前活动结束的时间，那么参加当前活动</span>            <span class="token keyword">if</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>=</span>end<span class="token punctuation">:</span>                count<span class="token operator">+=</span><span class="token number">1</span>                end<span class="token operator">=</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>intervals<span class="token punctuation">)</span><span class="token operator">-</span>count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">eraseOverlapIntervals</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>intervals<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end<span class="token operator">=</span>intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>=</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                end<span class="token operator">=</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> intervals<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：动态规划之子序列问题解题模板</title>
      <link href="/2020/07/31/labuladong/di-yi-zhang-dong-tai-gui-hua-zhi-zi-xu-lie-wen-ti-jie-ti-mo-ban/"/>
      <url>/2020/07/31/labuladong/di-yi-zhang-dong-tai-gui-hua-zhi-zi-xu-lie-wen-ti-jie-ti-mo-ban/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://github.com/labuladong/fucking-algorithm/blob/master/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E6%A8%A1%E6%9D%BF.md" target="_blank" rel="noopener">动态规划之子序列问题解题模板</a></p><h1 id="516-最长回文子序列"><a href="#516-最长回文子序列" class="headerlink" title="516. 最长回文子序列"></a><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/" target="_blank" rel="noopener">516. 最长回文子序列</a></h1><blockquote><p>如果暂时想不到状态转移方程，可以先确定<strong>base case</strong>和<strong>最终状态</strong>，然后通过它们的<strong>相对位置</strong>，来猜测状态转移方程，猜测<code>dp[i][j]</code><strong>可能从哪些状态转移而来</strong>。以本题为例：</p><ul><li>base case：dp表的左下角三角形为0，对角线元素为1（回文子序列为自己）</li><li>最终状态是<code>dp[o][n-1]</code></li><li>对于<code>dp[i][j]</code>,它知道了左边元素，下边元素，左下边元素; 此外，通过结合最终状态的位置，所以考虑<strong>从左到右从下到上</strong>的次序遍历dp表。于是思考状态转移方程及遍历过程：</li></ul><pre class="line-numbers language-python"><code class="language-python">        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ol><li>dp数组的含义：s[i…j] 中最长回文子序列的长度保存在dp[i][j] 中</li><li>状态转移方程：如果i处和j处的字符相同，则从短串s[i+1…j-1]中扩充2（<code>dp[i][j]=dp[i+1][j-1]+2</code>）。 否则继承 s[i+1…j] ， s[i…j-1] 的最长回文子序列长度的最大值 （<code>max(dp[i+1][j],dp[i][j-1])</code>）</li><li>base case: dp 数组先初始化为 0 （而且对角线下半部分的三角形表示i &gt; j, 不可能出现这种情况，因此为0）。i 和 j 指向同一个字符时，回文子序列为其本身， 因此对角线处的dp数组元素初始化为1</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestPalindromeSubseq</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：经典动态规划：最长公共子序列</title>
      <link href="/2020/07/31/labuladong/di-yi-zhang-jing-dian-dong-tai-gui-hua-zui-chang-gong-gong-zi-xu-lie/"/>
      <url>/2020/07/31/labuladong/di-yi-zhang-jing-dian-dong-tai-gui-hua-zui-chang-gong-gong-zi-xu-lie/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-chang-gong-gong-zi-xu-lie" target="_blank" rel="noopener">经典动态规划：最长公共子序列</a></p><h1 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143. 最长公共子序列"></a><a href="https://leetcode-cn.com/problems/longest-common-subsequence/" target="_blank" rel="noopener">1143. 最长公共子序列</a></h1><p><em>（在dp数组中添加0行和0列可以包含text为空的情况，并且更便于状态转移）</em></p><ol><li>dp数组的含义： 对于 text1[0..i-1] 和 text2[0..j-1]，dp[i][j]中保存当前位置的最长公共子序列的长度</li><li>状态转移方程：若当前元素相等，则在之前状态下+1 （<code>dp[i][j]=dp[i-1][j-1]+1</code>）。 若不相等，则继承之前的最大值（<code>dp[i][j]=max(dp[i-1][j],dp[i][j-1])</code>）</li><li>base case : 第0行和第0列初始化为0 。（至少有一个为空字符时，不可能有公共子序列 （两个都为空时，公共子序列长度也为0））</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text1<span class="token punctuation">,</span> text2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>text1 <span class="token operator">and</span> text2<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        m<span class="token operator">=</span>len<span class="token punctuation">(</span>text1<span class="token punctuation">)</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>text2<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> text1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span>text2<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：经典动态规划：编辑距离</title>
      <link href="/2020/07/30/labuladong/di-yi-zhang-jing-dian-dong-tai-gui-hua-bian-ji-ju-chi/"/>
      <url>/2020/07/30/labuladong/di-yi-zhang-jing-dian-dong-tai-gui-hua-bian-ji-ju-chi/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/bian-ji-ju-li" target="_blank" rel="noopener">经典动态规划：编辑距离</a></p><p><a href="https://leetcode-cn.com/problems/edit-distance/" target="_blank" rel="noopener">72. 编辑距离</a></p><p><img src="https://img-blog.csdnimg.cn/2020073020134580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70" alt></p><ul><li>在word1 和word2 前面分别插入<code>&quot;&quot;</code> 不仅可以包括字符串为空的情况，而且可以更清楚地用空字符串说明状态转移的过程</li><li>i 和 j 中，因为最前面加了<code>&quot;&quot;</code>, 因此第i个字符的下标为i-1 <ul><li>若两个字符相等（<code>word1[i-1]==word2[j-1]</code>），则i和j分别继续向右跳一格</li><li>若不相等，则增（dp[i][j-1]，如第0行），改（dp[i-1][j-1]），删（dp[i-1][j]，如第0列）的最小操作数 +1 </li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word1<span class="token punctuation">,</span> word2<span class="token punctuation">)</span><span class="token punctuation">:</span>        m<span class="token operator">=</span>len<span class="token punctuation">(</span>word1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>word2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>j        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>i        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> word1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span>word2<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：动态规划设计：最大子数组</title>
      <link href="/2020/07/29/labuladong/di-yi-zhang-dong-tai-gui-hua-she-ji-zui-da-zi-shu-zu/"/>
      <url>/2020/07/29/labuladong/di-yi-zhang-dong-tai-gui-hua-she-ji-zui-da-zi-shu-zu/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-da-zi-shu-zu" target="_blank" rel="noopener">动态规划设计：最大子数组</a></p><p><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">53. 最大子序和</a></p><hr><p>课堂上，学生排排坐。</p><p>老师：“这门课的作业，你们可以选择自己完成，也可以根据座位顺序，和你前面的同学组队（前面的同学可能和前前面的同学组了队，也可能就他一个人）。” </p><p>每个人都想把自己的作业完成得最好。</p><p> 在座位<code>i</code>处的大佬心想：“前面可能是大大佬（可以组队, <code>dp[i-1]+nums[i]</code>），也可能是小小菜（组队会拖我后腿，还不如我自己<code>nums[i]</code>）。”  不管哪种选择，最后，他的最好成绩取这两种选择的最大值即可。</p><hr><ul><li>dp数组含义： <strong>以nums[i]结尾</strong>的当前最大子序和保存在dp[i] 中</li><li>状态转移方程：<strong>nums[i] 有两种「选择」，要么与前面的相邻子数组连接，形成一个和更大的子数组；要么不与前面的子数组连接，自成一派，自己作为一个子数组</strong><ul><li><strong>对nums[i]而言</strong>（dp数组的含义决定了子序和是以nums[i]结尾的），若连接前面的子序列，则dp[i]=dp[i-1]+nums[i]。 若不连接，则自立门户 dp[i]=nums[i] 。根据这两种选择，直接取最大值即可 <code>dp[i]=max(nums[i],dp[i-1]+nums[i])</code>。</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 也可以分开写  (但没必要，可以放到max()函数中，让函数自己判断)</span><span class="token comment" spellcheck="true"># class Solution(object):</span><span class="token comment" spellcheck="true">#     def maxSubArray(self, nums):</span><span class="token comment" spellcheck="true">#         </span><span class="token triple-quoted-string string">"""#         :type nums: List[int]#         :rtype: int#         """</span><span class="token comment" spellcheck="true">#         dp=[0 for _ in range(len(nums))]</span><span class="token comment" spellcheck="true">#         dp[0]=nums[0]</span><span class="token comment" spellcheck="true">#         for i in range(1, len(nums)):</span><span class="token comment" spellcheck="true">#            # 前面是大大佬</span><span class="token comment" spellcheck="true">#             if dp[i-1]>0: </span><span class="token comment" spellcheck="true">#                 dp[i]=dp[i-1]+nums[i]</span><span class="token comment" spellcheck="true">#           # 前面是小小菜</span><span class="token comment" spellcheck="true">#             else:</span><span class="token comment" spellcheck="true">#                 dp[i]=nums[i]</span><span class="token comment" spellcheck="true">#         return max(dp)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：动态规划设计：最长递增子序列</title>
      <link href="/2020/07/29/labuladong/di-yi-zhang-dong-tai-gui-hua-she-ji-zui-chang-di-zeng-zi-xu-lie/"/>
      <url>/2020/07/29/labuladong/di-yi-zhang-dong-tai-gui-hua-she-ji-zui-chang-di-zeng-zi-xu-lie/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://github.com/labuladong/fucking-algorithm/blob/master/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AE%BE%E8%AE%A1%EF%BC%9A%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97.md" target="_blank" rel="noopener">动态规划设计：最长递增子序列</a></p><h1 id="300-最长上升子序列"><a href="#300-最长上升子序列" class="headerlink" title="300. 最长上升子序列"></a><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener">300. 最长上升子序列</a></h1><ul><li>dp数组的含义：以nums[i] 结尾的当前最长上升子序列的长度记录在dp[i]中</li><li>状态转移方程：nums[i] 与它之前的元素nums[j]进行比较，若大于nums[j], 则比较之前保存的dp[i] 和dp[j]+1 的大小，并更新dp[i] （始终保存最大值）</li><li>base case： 上升子序列至少为自己，因此dp数组初始化为1</li></ul><blockquote><p>如何找到动态规划的状态转移关系：</p><p>1、明确 dp 数组的定义。这一步对于任何动态规划问题都很重要，如果不得当或者不够清晰，会阻碍之后的步骤。</p><p>2、根据 dp 数组的定义，运用数学归纳法的思想，假设 dp[0…i-1] 都已知，想办法求出 dp[i]，一旦这一步完成，整个题目基本就解决了。</p><p>但如果无法完成这一步，很可能就是 dp 数组的定义不够恰当，需要重新定义 dp 数组的含义；或者可能是 dp 数组存储的信息还不够，不足以推出下一步的答案，需要把 dp 数组扩大成二维数组甚至三维数组。</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：动态规划和回溯算法到底谁是谁爹？</title>
      <link href="/2020/07/29/labuladong/di-yi-zhang-dong-tai-gui-hua-he-hui-su-suan-fa-dao-di-shui-shi-shui-die/"/>
      <url>/2020/07/29/labuladong/di-yi-zhang-dong-tai-gui-hua-he-hui-su-suan-fa-dao-di-shui-shi-shui-die/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/targetsum" target="_blank" rel="noopener">动态规划和回溯算法到底谁是谁爹？</a></p><h1 id="494-目标和"><a href="#494-目标和" class="headerlink" title="494. 目标和"></a><a href="https://leetcode-cn.com/problems/target-sum/solution/dong-tai-gui-hua-by-powcai-22/" target="_blank" rel="noopener">494. 目标和</a></h1><h2 id="方法1：动态规划（dp二维数组）"><a href="#方法1：动态规划（dp二维数组）" class="headerlink" title="方法1：动态规划（dp二维数组）"></a>方法1：动态规划（dp二维数组）</h2><p>dp[i][j]表示 <strong>数组中前i个元素组成和为j的方案数</strong></p><ol><li>base case: </li></ol><ul><li>首先初始化数组第0行。如果第一个元素为0，则<code>dp[0][total]=2</code> <ul><li>（-0 和+0 都为0，所以先初始化为2） 比如 [0,1,2], 目标和为3，则有-0+1+2=3，+0+1+2=3</li></ul></li><li>否则和为±nums[0] 的位置的方案数置为1</li></ul><pre class="line-numbers language-python"><code class="language-python">        <span class="token keyword">if</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>total<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span>            <span class="token comment" spellcheck="true"># 相当于</span>            <span class="token comment" spellcheck="true"># dp[0][total-nums[0]]=2   # 如何凑出target 和如何把target见=减到0 是一样的</span>            <span class="token comment" spellcheck="true"># dp[0][total+nums[0]]=2</span>            <span class="token comment" spellcheck="true"># 只是此时nums[0]=0，因此写成 dp[0][total]=2</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>total<span class="token operator">-</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>              dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>total<span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（或者直接用下面的代码来包含nums[0]为0 和非0的情况）</p><pre class="line-numbers language-python"><code class="language-python">        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>total<span class="token operator">-</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">+</span><span class="token number">1</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>total<span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">+</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><p>状态转移方程<br>保证数组的列索引在0到total*2+1范围内</p><pre class="line-numbers language-python"><code class="language-python">             l<span class="token operator">=</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">if</span> j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>             r<span class="token operator">=</span>j<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">if</span> j<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>total<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span>             dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>dp[i][j]的含义 : 数组中前i个元素组成和为j的方案数。因为和最大为sum（nums），所以和的范围为 <code>-sum（nums）</code>到 <code>0</code>到 <code>sum（nums）</code>。 数组大小设为<code>[[0 for _ in range(sum(nums)*2+1)] for _ in range(len(nums))]</code></p></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findTargetSumWays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> S<span class="token punctuation">)</span><span class="token punctuation">:</span>        total<span class="token operator">=</span>sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> abs<span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token operator">&lt;</span>abs<span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">#若目标和大于数组和，凑不成，返回0</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>total<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#初始化数组第0行</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>total<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>total<span class="token operator">-</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>total<span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>total<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># l和r要保证在合法的索引范围内</span>                l<span class="token operator">=</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">if</span> j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>                r<span class="token operator">=</span>j<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">if</span> j<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>total<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>total<span class="token operator">+</span>S<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2：动态规划（0-1背包的变体）"><a href="#方法2：动态规划（0-1背包的变体）" class="headerlink" title="方法2：动态规划（0-1背包的变体）"></a>方法2：动态规划（0-1背包的变体）</h2><blockquote><ul><li><em>dp数组行和列都分别增加1，第0列表示背包容量为0，第0行表示（虚拟）物品重量为0（这样做，方便初始化dp数组以及后续dp状态转移）</em></li><li><em>由于加了虚拟的0行和0列， 物品i从 1 开始，而数组索引是从 0 开始的，所以第 i 个物品的重量应该是 nums[i-1]</em></li></ul></blockquote><p>以[1,1,2,3]为例，目标和为 target=3.</p><p> 一种可行的方式为 <code>+1+1-2+3=3</code> 。正数列表为P=[1,1,3] , 负数列表为N=[2] 。 则有<br>    <code>sum（P）- sum（N）=target                （1）</code><br>  另一方面，<br>  <code>sum（P）+sum（N）=sum（nums）   （2）</code><br>  公式（1）与（2）相加，得 <code>sum（P）= （sum（nums）+target）/2</code><br>  问题转化为    -&gt;     <strong>各个物品大小为 [1,1,2,3], 背包容量为（sum（nums）+target）/2，求把背包正好装满的方案数</strong></p><p>但是，这里有个<strong>与0-1背包的区别</strong>：</p><ul><li>对于0-1 背包，物品大小为正数，可以先对二维数组初始化第0行（除[0][0]位置外全为0）和<strong>第0列（全为1）</strong>。<strong>然后<code>i</code>和<code>j</code>都从1开始遍历</strong></li><li>对于该问题，列表中可能存在为 0 的元素，因此选不选这个0，都能将容量为0的背包装满。所以<strong>只有<code>dp[0][0]=1</code></strong> （因为是增加的虚拟0行和0列）, 剩下的第0列的其他位置的值用状态转移方程确定 <del>（而不能初始化为1）</del> 。<strong>即<code>i</code>从1开始遍历，<code>j</code>从0开始遍历</strong><ul><li>如 列表为 [0,0,0] , 目标值为 0，则最终的dp数组为<code>[[1], [2], [4], [8]]</code></li><li>如 列表为 [0,0,1]，目标值为 1，则最终的dp数组为<code>[[1, 0], [2, 0], [4, 0], [4, 4]]</code></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findTargetSumWays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> S<span class="token punctuation">)</span><span class="token punctuation">:</span>        total <span class="token operator">=</span> sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> abs<span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token operator">&lt;</span> abs<span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 目标和太大</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">+</span> S<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">#(total + S)必须为偶数，即，能被2整除</span>        volume <span class="token operator">=</span> <span class="token punctuation">(</span>total <span class="token operator">+</span> S<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>volume <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span> volume <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 背包太小，装不下</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 装和不装的总和</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第零章：经典动态规划：完全背包问题</title>
      <link href="/2020/07/27/labuladong/di-ling-zhang-jing-dian-dong-tai-gui-hua-wan-quan-bei-bao-wen-ti/"/>
      <url>/2020/07/27/labuladong/di-ling-zhang-jing-dian-dong-tai-gui-hua-wan-quan-bei-bao-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/bei-bao-ling-qian" target="_blank" rel="noopener">经典动态规划：完全背包问题</a></p><hr><p>动态规划之背包汇总</p><p><a href="https://ismxue.github.io/2020/07/24/labuladong/di-ling-zhang-dong-tai-gui-hua-jie-ti-tao-lu-kuang-jia/">第零章：动态规划解题套路框架</a><br><a href="https://ismxue.github.io/2020/07/27/labuladong/di-yi-zhang-jing-dian-dong-tai-gui-hua-0-1-bei-bao-wen-ti/">第一章：经典动态规划：0-1 背包问题</a><br><a href="https://ismxue.github.io/2020/07/27/labuladong/di-ling-zhang-jing-dian-dong-tai-gui-hua-zi-ji-bei-bao-wen-ti/">第零章：经典动态规划：子集背包问题</a><br><a href="https://ismxue.github.io/2020/07/27/labuladong/di-ling-zhang-jing-dian-dong-tai-gui-hua-wan-quan-bei-bao-wen-ti/">第零章：经典动态规划：完全背包问题</a></p><hr><table><thead><tr><th>0-1背包</th><th>完全背包</th></tr></thead><tbody><tr><td>当前的物品放还是不放</td><td>当前的物品放还是不放，如果放，放几个（<strong>每种物品有无数个，可以无限次选取</strong>）</td></tr></tbody></table><p>dp[i][j]数组的含义：dp[i][j] 表示对前i个物品，背包容量为j时，可以凑的硬币组合数（dp数组可以加一行一列表示0物品或0容量时的状态，更便于进行状态转移）</p><ul><li>0-1 背包时，对第i行的硬币<code>coins[i-1]</code> ,若选择该硬币，则dp[i][j]=dp[i-1][j-coins[i-1]] (因为每种硬币只有一枚，<strong>所以状态是从上一枚硬币转到当前硬币</strong>)</li><li>完全背包时，对第i行的硬币<code>coins[i-1]</code> ,若选择该硬币，则dp[i][j]=dp[i][j-coins[i-1]] （因为硬币有无数枚，<strong>选完当前硬币可以再选当前硬币</strong>）。<ul><li>选的时候为<code>dp[i][j-coins[i-1]]</code>，选<code>coins[i-1]</code>时，总的金额减少到<code>j-coins[i-1]</code>,但由于是完全背包问题，每个物品可以选无限次，所以，剩下的可以选的硬币还应该是<code>coins[0...i-1]</code>前<code>i</code>个</li></ul></li></ul><h1 id="518-零钱兑换-II"><a href="#518-零钱兑换-II" class="headerlink" title="518. 零钱兑换 II"></a><a href="https://leetcode-cn.com/problems/coin-change-2/solution/bei-bao-si-xiang-jie-jue-ling-qian-dui-huan-wen-ti/" target="_blank" rel="noopener">518. 零钱兑换 II</a></h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> coins<span class="token punctuation">)</span><span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>coins<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 行和列都分别增加1，第0列表示背包容量为0，第一行表示（虚拟）物品重量为0</span>        <span class="token comment" spellcheck="true"># 这样做，方便初始化dp数组以及后续dp状态转移</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>coins<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 如果该物品重量超过容量，肯定不能放</span>                <span class="token keyword">if</span> j<span class="token operator">&lt;</span>coins<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token comment" spellcheck="true"># 如果没有超过重量，则有两种情况</span>                <span class="token comment" spellcheck="true"># 1. （不放当前的商品）之前的物品已经凑齐:dp[i-1][j]</span>                <span class="token comment" spellcheck="true"># 2. (放当前的商品) 比如用[1,2]凑5，已经知道了[1,2]凑（5-2）的方法，</span>                <span class="token comment" spellcheck="true">#     则把现在的2放进去就可以：dp[i][j-coins[i-1]]. (2可以多次使用)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>coins<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第零章：经典动态规划：子集背包问题</title>
      <link href="/2020/07/27/labuladong/di-ling-zhang-jing-dian-dong-tai-gui-hua-zi-ji-bei-bao-wen-ti/"/>
      <url>/2020/07/27/labuladong/di-ling-zhang-jing-dian-dong-tai-gui-hua-zi-ji-bei-bao-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/bei-bao-zi-ji" target="_blank" rel="noopener">经典动态规划：子集背包问题</a></p><hr><p>动态规划之背包汇总</p><p><a href="https://ismxue.github.io/2020/07/24/labuladong/di-ling-zhang-dong-tai-gui-hua-jie-ti-tao-lu-kuang-jia/">第零章：动态规划解题套路框架</a><br><a href="https://ismxue.github.io/2020/07/27/labuladong/di-yi-zhang-jing-dian-dong-tai-gui-hua-0-1-bei-bao-wen-ti/">第一章：经典动态规划：0-1 背包问题</a><br><a href="https://ismxue.github.io/2020/07/27/labuladong/di-ling-zhang-jing-dian-dong-tai-gui-hua-zi-ji-bei-bao-wen-ti/">第零章：经典动态规划：子集背包问题</a><br><a href="https://ismxue.github.io/2020/07/27/labuladong/di-ling-zhang-jing-dian-dong-tai-gui-hua-wan-quan-bei-bao-wen-ti/">第零章：经典动态规划：完全背包问题</a></p><hr><p>该背包问题相当于<strong>0-1背包问题</strong>的变体  </p><h1 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/solution/dong-tai-gui-hua-kong-jian-you-hua-zhu-xing-jie--2/" target="_blank" rel="noopener">416. 分割等和子集</a></h1><p>给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><table><thead><tr><th>0-1背包问题：背包容量为m，物品有大小和价值两种属性，求背包最大能装多少价值的物品？</th><th>0-1背包问题变体（分割等和子集）：<strong>背包容量为total/2, 每个物品的大小为 nums[i] 。对于前i个物品，是否有一种装法，能恰好装满背包？</strong></th></tr></thead><tbody><tr><td>dp[i][j] 表示对前i个物品，背包容量为j时，可以装的最大价值</td><td>dp[i][j] 表示对前i个物品，背包容量为j时，值为True/ False (能否装满)</td></tr></tbody></table><ul><li>dp数组行和列都分别增加1，第0列表示背包容量为0，第0行表示（虚拟）物品重量为0（这样做，方便初始化dp数组以及后续dp状态转移）</li><li>由于加了虚拟的0行和0列， 物品i从 1 开始，而数组索引是从 0 开始的，所以第 i 个物品的重量应该是 nums[i-1]</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canPartition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        total<span class="token operator">=</span>sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># total为列表之和</span>        <span class="token keyword">if</span> total<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># 若无法被2整除，说明无法等和，直接返回False</span>        <span class="token comment" spellcheck="true"># 行和列都分别增加1，第0列表示背包容量为0，第0行表示（虚拟）物品重量为0</span>        <span class="token comment" spellcheck="true"># 这样做，方便初始化dp数组以及后续dp状态转移</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>total<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 和为0时，第一列为True</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">True</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>total<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 若背包容量超过物品大小，装不下</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 继承之前的结果</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 继承之前装下/装不下的结果（只要之前有True，dp[i][j]就为True）</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">|</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：经典动态规划：0-1 背包问题</title>
      <link href="/2020/07/27/labuladong/di-yi-zhang-jing-dian-dong-tai-gui-hua-0-1-bei-bao-wen-ti/"/>
      <url>/2020/07/27/labuladong/di-yi-zhang-jing-dian-dong-tai-gui-hua-0-1-bei-bao-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247485064&idx=1&sn=550705eb67f5e71487c8b218382919d6&chksm=9bd7f880aca071962a5a17d0f85d979d6f0c5a5ce32c84b8fee88e36d451f9ccb3bb47b88f78&scene=21#wechat_redirect" target="_blank" rel="noopener">经典动态规划：0-1 背包问题</a></p><hr><p>动态规划之背包汇总</p><p><a href="https://ismxue.github.io/2020/07/24/labuladong/di-ling-zhang-dong-tai-gui-hua-jie-ti-tao-lu-kuang-jia/">第零章：动态规划解题套路框架</a><br><a href="https://ismxue.github.io/2020/07/27/labuladong/di-yi-zhang-jing-dian-dong-tai-gui-hua-0-1-bei-bao-wen-ti/">第一章：经典动态规划：0-1 背包问题</a><br><a href="https://ismxue.github.io/2020/07/27/labuladong/di-ling-zhang-jing-dian-dong-tai-gui-hua-zi-ji-bei-bao-wen-ti/">第零章：经典动态规划：子集背包问题</a><br><a href="https://ismxue.github.io/2020/07/27/labuladong/di-ling-zhang-jing-dian-dong-tai-gui-hua-wan-quan-bei-bao-wen-ti/">第零章：经典动态规划：完全背包问题</a></p><hr><p><a href="https://www.lintcode.com/problem/backpack-ii/description" target="_blank" rel="noopener">题目地址</a></p><blockquote><p>有 n 个物品和一个大小为 m 的背包. 给定数组 A 表示每个物品的大小和数组 V 表示每个物品的价值.</p><p>问最多能装入背包的总价值是多大?</p><p>样例 样例 1:</p><p>输入: m = 10, A = [2, 3, 5, 7], V = [1, 5, 2, 4] 输出: 9 解释: 装入 A[1] 和<br>A[3] 可以得到最大价值, V[1] + V[3] = 9  样例 2:</p><p>输入: m = 10, A = [2, 3, 8], V = [2, 5, 8] 输出: 10 解释: 装入 A[0] 和 A[2]<br>可以得到最大价值, V[0] + V[2] = 10</p></blockquote><ol><li>base case：0 物品和 0 背包容量时，价值为0</li><li>明确状态和选择<ul><li>状态：背包的容量 ，放进去的物品</li><li>选择：放/不放 当前物品到背包中</li></ul></li><li>dp数组的含义：因为状态有两个，所以dp用二维数组表示。<code>dp[i][j]</code>    表示对前<code>i</code>个物品，背包容量为<code>j</code>时，可以装的最大价值（dp数组可以加一行一列表示0物品或0容量时的状态，更<strong>便于进行状态转移</strong>）<ul><li>若书包容量太小，容不下（<code>if j&lt;A[i-1]</code>），则<code>dp[i][j]=dp[i-1][j]</code></li><li>否则，可以放进去<ul><li>若不放进去，则dp[i][j]=dp[i-1][j]</li><li>若放进去，则dp[i][j]=dp[i-1][j-A[i-1]]+V[i-1] （因为首行首列加了0物品0背包，所以数组中第0个物品其实是A[i-1]大小和V[i-1]价值）</li></ul></li></ul></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">backPackII</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">,</span> A<span class="token punctuation">,</span> V<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># write your code here</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                <span class="token keyword">if</span> j<span class="token operator">&lt;</span>A<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 若书包容量为j时，放不进去第i个物品（从0开始，所以A[i-1]表示第i个物品的大小）</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 否则，可以放进去</span>                    notBring<span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 选择不放</span>                    bring<span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>A<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>V<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 选择放</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>notBring<span class="token punctuation">,</span>bring<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 取最大值即可</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第零章：团灭 LeetCode 打家劫舍问题</title>
      <link href="/2020/07/26/labuladong/di-ling-zhang-tuan-mie-leetcode-da-jia-jie-she-wen-ti/"/>
      <url>/2020/07/26/labuladong/di-ling-zhang-tuan-mie-leetcode-da-jia-jie-she-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://github.com/labuladong/fucking-algorithm/blob/master/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%8A%A2%E6%88%BF%E5%AD%90.md" target="_blank" rel="noopener">团灭 LeetCode 打家劫舍问题</a></p><p><a href="https://leetcode-cn.com/problems/house-robber/solution/dong-tai-gui-hua-jie-ti-si-bu-zou-xiang-jie-cjavap/" target="_blank" rel="noopener">图解动态规划的解题四步骤</a></p><p>动态规划：在确定动态转移方程后，可以用<del>（自顶向下的使用备忘录递归的方法）</del> <strong>自底向上使用 dp 数组</strong>的方法</p><h1 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a><a href="https://leetcode-cn.com/problems/house-robber/" target="_blank" rel="noopener">198. 打家劫舍</a></h1><ul><li>dp数组表示第i个位置处能取得的最大金额（取该位置偷<code>nums[k-1] + dp[k-2]</code>和不偷<code>dp[k-1]</code>的最大值）</li><li>因为状态转移方程中，dp[i]涉及到dp[i-2], 在base case 中，在最前面加一个虚拟的空房子，状态更容易转换。而dp[1] 就初始化为nums[0]</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 子问题：</span>    <span class="token comment" spellcheck="true"># f(k) = 偷 [0..k) 房间中的最大金额</span>    <span class="token comment" spellcheck="true"># f(0) = 0</span>    <span class="token comment" spellcheck="true"># f(1) = nums[0]</span>    <span class="token comment" spellcheck="true"># f(k) = max{ rob(k-1), nums[k-1] + rob(k-2) }</span>    N <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="213-打家劫舍-II"><a href="#213-打家劫舍-II" class="headerlink" title="213. 打家劫舍 II"></a><a href="https://leetcode-cn.com/problems/house-robber-ii/" target="_blank" rel="noopener">213. 打家劫舍 II</a></h1><ul><li><p>现在房子环成了一个圈，也就是说第一间和最后一间不能同时抢。那么有：</p><ol><li><p>抢第一间，不抢最后一间</p></li><li><p>不抢第一间， 抢最后一间</p></li><li><p>不抢第一间， 不抢最后一间</p><p>实际上，情况3的结果是小于情况2的（或者可以说是包含关系）, 所以我们只需要考虑情况1,2。</p></li></ol></li><li><p>因此，当有多于1个房子时，只需要比较<code>nums[:-1] , nums[1:]</code> 并返回最大值<code>max(my_rob(nums[:-1]),my_rob(nums[1:]))</code>即可</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">my_rob</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""            :type nums: List[int]            :rtype: int            """</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>            dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>my_rob<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>my_rob<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token keyword">else</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 可能只有一个房子</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">helper</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">n1</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">n2</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">helper</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">helper</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="337-树形打家劫舍"><a href="#337-树形打家劫舍" class="headerlink" title="337 树形打家劫舍"></a><a href="https://leetcode-cn.com/problems/house-robber-iii/solution/shu-xing-dp-by-enda-2/" target="_blank" rel="noopener">337 树形打家劫舍</a></h1><ul><li>对于每一个节点，都只有选和不选两种情况。数组中<code>[ ,  ]</code>第一个index表示不打劫当前节点的收益，第二个index表示打劫当前节点的收益</li><li>如果没选当前节点，则可以选左右节点（<code>withoutRoot=max(l)+max(r)</code>）。如果选了当前节点，则不能选左右节点（<code>withRoot=root.val+l[0]+r[0]</code>）</li><li>递归函数返回以当前节点为根时<code>[不打劫当前节点，打劫当前节点]</code>时的状态.递归函数中，相当于进行了后序遍历：先求左右子树对应的结果，再根据这个结果和当前节点进行组合，得到当前节点的结果</li><li>递归函数结束的条件：当前节点为空</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dp</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 不偷/偷的收益. 递归结束的条件</span>            l<span class="token operator">=</span>dp<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 左节点不偷/偷带来的收益  # 后序遍历：左</span>            r<span class="token operator">=</span>dp<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 右节点不偷/偷带来的收益  # 后序遍历：右</span>            <span class="token comment" spellcheck="true"># 后序遍历：中</span>            <span class="token comment" spellcheck="true"># 若偷当前节点，则收益=当前节点+左节点不偷+右节点不偷</span>            <span class="token comment" spellcheck="true"># 若不偷当前节点，则收益=左节点偷或不偷的最大值+右节点偷或不偷的最大值</span>            withRoot<span class="token operator">=</span>root<span class="token punctuation">.</span>val<span class="token operator">+</span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 若偷当前节点</span>            withoutRoot<span class="token operator">=</span>max<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">+</span>max<span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 若不偷当前节点</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>withoutRoot<span class="token punctuation">,</span>withRoot<span class="token punctuation">]</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回 不偷/偷当前节点 的收益最大值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">helper</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        当前节点为空时，返回收益</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> l <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>         vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> r <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> withRoot<span class="token operator">=</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token operator">+</span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> withoutRoot<span class="token operator">=</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>withoutRoot<span class="token punctuation">,</span>withRoot<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token operator">=</span><span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第零章：我写了首诗，把滑动窗口算法变成了默写题</title>
      <link href="/2020/07/25/labuladong/di-ling-zhang-wo-xie-liao-shou-shi-ba-hua-dong-chuang-kou-suan-fa-bian-cheng-liao-mo-xie-ti/"/>
      <url>/2020/07/25/labuladong/di-ling-zhang-wo-xie-liao-shou-shi-ba-hua-dong-chuang-kou-suan-fa-bian-cheng-liao-mo-xie-ti/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://mp.weixin.qq.com/s/ioKXTMZufDECBUwRRp3zaA" target="_blank" rel="noopener">我写了首诗，把滑动窗口算法变成了默写题</a></p><ol><li>增大窗口 </li><li>找到可行解后缩小窗口</li><li><strong>注意维护valid及window中的内容</strong>（若包含需要找的元素，才更新window）</li></ol><blockquote><p> <strong>滑动窗口算法的思路</strong>是这样：</p><p>1、我们在字符串S中使用双指针中的左右指针技巧，初始化left = right = 0，把索引<strong>左闭右开区间</strong>[left, right)称为一个「窗口」。</p><p>2、我们先不断地增加right指针扩大窗口[left, right)，直到窗口中的字符串符合要求（包含了T中的所有字符）。</p><p>3、此时，我们停止增加right，转而不断增加left指针缩小窗口[left, right)，直到窗口中的字符串不再符合要求（不包含T中的所有字符了）。同时，每次增加left，我们都要更新一轮结果。</p><p>4、重复第 2 和第 3 步，直到right到达字符串S的尽头。</p><p>这个思路其实也不难，第 2 步相当于<strong>在寻找一个「可行解」</strong>，然后第 3 步再<strong>优化这个「可行解」</strong>，最终找到最优解，也就是最短的覆盖子串。左右指针轮流前进，窗口大小增增减减，窗口不断向右滑动，这就是「滑动窗口」这个名字的来历。</p></blockquote><h1 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76.最小覆盖子串"></a><a href="https://leetcode-cn.com/problems/minimum-window-substring/solution/hua-dong-chuang-kou-suan-fa-tong-yong-si-xiang-by-/" target="_blank" rel="noopener">76.最小覆盖子串</a></h1><ol><li>遍历t，得到need字典</li><li>窗口<strong>左闭右开</strong>。先增大右窗口，更新window 和valid （只有need中存在的键，window才会存放）</li><li>找全以后，开始缩小左窗口，相应地，也要更新window和valid。</li><li>在<strong>更新左窗口前</strong>，<strong>先用<code>ans</code>记录并更新左右指针位置</strong>来不断缩小子串（非常必要），然后再更新window和valid。这样的话，当窗口的字符串因左窗口的缩小而不再符合要求时（退出while循环），ans中保存的是仍然正好符合要求的左右指针</li><li>如果左指针从未更新过（仍为-1），说明没有在s中找到符合要求的字符串，返回””,否则返回左右指针对应的字符串</li><li>ans中，先指到s左右的外面。在更新窗口的过程中，不断缩小ans的范围</li></ol><blockquote><ul><li>在更新窗口过程中<br>在增大右窗口时，先<code>window[c]+=1</code>, 然后<code>if  window[c]==need[c]</code> 判断；在减小左窗口时，先<code>if window[c]==need[c]</code> 判断，然后<code>window[c]+=1</code>。这是因为 <code>window[c]</code>中的内容要严格与<code>need[c]</code>进行比较，在增大右窗口时，加进window中才能通过if更新valid；在减小左窗口时，通过if更新完valid后才能把当前的windows[c]的计数减1。即：<strong>window[c]的更新不能破坏 <code>if  ... valid</code>的条件</strong></li></ul></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minWindow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict        window<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        need<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> t<span class="token punctuation">:</span>            need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        l<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span>        valid<span class="token operator">=</span><span class="token number">0</span> <span class="token comment" spellcheck="true"># 合法元素的个数</span>        <span class="token keyword">while</span> r<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            c<span class="token operator">=</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 增大窗口 ：相应的要改变window和valid</span>            r<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token keyword">in</span> need<span class="token punctuation">:</span>                window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span>                    valid<span class="token operator">+=</span><span class="token number">1</span>            <span class="token comment" spellcheck="true"># 找到可行解后要缩小窗口：相应的要改变window和valid</span>            <span class="token keyword">while</span> valid<span class="token operator">==</span>len<span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 这里先记录当前的子串，非常必要, 确保ans中保存的始终是最短的记录</span>                <span class="token keyword">if</span> r<span class="token operator">-</span>l<span class="token operator">&lt;</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    ans<span class="token operator">=</span><span class="token punctuation">[</span>l<span class="token punctuation">,</span>r<span class="token punctuation">]</span>                c<span class="token operator">=</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span>                l<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> c <span class="token keyword">in</span> need<span class="token punctuation">:</span>                    <span class="token keyword">if</span> window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span>                        valid<span class="token operator">-=</span><span class="token number">1</span>                    window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token string">""</span> <span class="token keyword">if</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> s<span class="token punctuation">[</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>判断键值是否存在于need中时，可以用：<code>if (need.count(c))</code>  或者<code>if(need.find(c)!=need.end())</code></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//#include &lt;string></span><span class="token comment" spellcheck="true">//#include &lt;vector></span><span class="token comment" spellcheck="true">//#include &lt;iostream></span><span class="token comment" spellcheck="true">//#include &lt;unordered_map></span><span class="token comment" spellcheck="true">//using namespace std;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> need<span class="token punctuation">,</span> window<span class="token punctuation">;</span>    string <span class="token function">helper</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>t<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            need<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            r <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// if(need.find(c)!=need.end()){</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> valid <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>valid <span class="token operator">==</span> need<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>                    ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                l <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> valid <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                    window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string <span class="token function">minWindow</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        string res <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int main(){</span><span class="token comment" spellcheck="true">//    Solution so;</span><span class="token comment" spellcheck="true">//    string s="ADOBECODEBANC";</span><span class="token comment" spellcheck="true">//    string t = "ABC";</span><span class="token comment" spellcheck="true">//    cout&lt;&lt;so.minWindow(s,t)&lt;&lt;endl;</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="567-字符串的排列"><a href="#567-字符串的排列" class="headerlink" title="567. 字符串的排列"></a><a href="https://leetcode-cn.com/problems/permutation-in-string/" target="_blank" rel="noopener">567. 字符串的排列</a></h1><p>更新方式1：和上一题类似，找到合法的窗口后，若窗口大小和s1的大小相同，则返回<code>true</code>，否则返回<code>false</code></p><ul><li>python写法，注意： 需要有<code>if len(s1) &gt; len(s2): return False</code>,防止corner case的产生</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">checkInclusion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s1: str        :type s2: str        :rtype: bool        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">></span> len<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>valid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict        need<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        window<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s1<span class="token punctuation">:</span>            need<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">while</span> r<span class="token operator">!=</span>len<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>            c<span class="token operator">=</span>s2<span class="token punctuation">[</span>r<span class="token punctuation">]</span>            r<span class="token operator">+=</span><span class="token number">1</span>            <span class="token comment" spellcheck="true"># 更新右窗口相关的信息</span>            <span class="token keyword">if</span> c <span class="token keyword">in</span> need<span class="token punctuation">:</span>                window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span>                    valid<span class="token operator">+=</span><span class="token number">1</span>            <span class="token comment" spellcheck="true"># 更新左窗口相关的信息</span>            <span class="token keyword">while</span> valid<span class="token operator">==</span>len<span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>                    ans<span class="token operator">=</span><span class="token punctuation">[</span>l<span class="token punctuation">,</span>r<span class="token punctuation">]</span>                d<span class="token operator">=</span>s2<span class="token punctuation">[</span>l<span class="token punctuation">]</span>                l<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> d <span class="token keyword">in</span> need<span class="token punctuation">:</span>                    <span class="token keyword">if</span> window<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">==</span>need<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">:</span>                        valid<span class="token operator">-=</span><span class="token number">1</span>                    window<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">-=</span><span class="token number">1</span>        <span class="token comment" spellcheck="true"># print(s2[ans[0]:ans[1]])</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>len<span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token keyword">else</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># so=Solution()</span><span class="token comment" spellcheck="true"># s1="ab"</span><span class="token comment" spellcheck="true"># s2 = "a"</span><span class="token comment" spellcheck="true"># print(so.checkInclusion(s1,s2))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其他写法</p><ul><li>注意，在python中，return时，要确保ans[0]!=-1。<ul><li>否则有一些corner case会正好满足<code>(ans[1]-ans[0])==len(s1)</code>，导致返回错误的结果（如s1=”ab”, s2=”a”, 此时，ans保存的索引为[-1,1]。 1-（-1）正好为s1的长度，导致错误）</li><li>或者把 <code>ans=[-1,len(s2)]</code> 改为<code>ans=[-1,len(s2)+100]</code>，避免这种corner case</li></ul></li><li>整型的最大值可以写为<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys MAX_INT<span class="token operator">=</span>sys<span class="token punctuation">.</span>maxsize<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>所以ans初始化时，可写为ans=[-1,MAX_INT]</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">checkInclusion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s1: str        :type s2: str        :rtype: bool        """</span>        l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>valid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict        need<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        window<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s1<span class="token punctuation">:</span>            need<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">while</span> r<span class="token operator">!=</span>len<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>            c<span class="token operator">=</span>s2<span class="token punctuation">[</span>r<span class="token punctuation">]</span>            r<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token keyword">in</span> need<span class="token punctuation">:</span>                window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span>                    valid<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">while</span> valid<span class="token operator">==</span>len<span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>                    ans<span class="token operator">=</span><span class="token punctuation">[</span>l<span class="token punctuation">,</span>r<span class="token punctuation">]</span>                d<span class="token operator">=</span>s2<span class="token punctuation">[</span>l<span class="token punctuation">]</span>                l<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> d <span class="token keyword">in</span> need<span class="token punctuation">:</span>                    <span class="token keyword">if</span> window<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">==</span>need<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">:</span>                        valid<span class="token operator">-=</span><span class="token number">1</span>                    window<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">-=</span><span class="token number">1</span>        <span class="token comment" spellcheck="true"># print(s2[ans[0]:ans[1]])</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>len<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">and</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># so=Solution()</span><span class="token comment" spellcheck="true"># s1="ab"</span><span class="token comment" spellcheck="true"># s2 = "a"</span><span class="token comment" spellcheck="true"># print(so.checkInclusion(s1,s2))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">checkInclusion</span><span class="token punctuation">(</span>string s1<span class="token punctuation">,</span> string s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>need<span class="token punctuation">,</span>window<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>s1<span class="token punctuation">)</span><span class="token punctuation">{</span>            need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>valid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>start<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token operator">=</span>INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>s2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            更新右窗口信息</span>            <span class="token keyword">char</span> c<span class="token operator">=</span>s2<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            r<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    valid<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//            找到了包含s1的窗口（窗口可能比较大，需要缩小左窗口）</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>valid<span class="token operator">==</span>need<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">&lt;</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>                    start<span class="token operator">=</span>l<span class="token punctuation">;</span>                    len<span class="token operator">=</span>r<span class="token operator">-</span>l<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">char</span> c<span class="token operator">=</span>s2<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                l<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        valid<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> len<span class="token operator">==</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新方式2：若窗口大小等于s1长度，则判断窗口的内容是否符合条件。若符合，返回<code>True</code>。否则，继续更新左右窗口</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">checkInclusion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s1: str        :type s2: str        :rtype: bool        """</span>        <span class="token comment" spellcheck="true"># 准备初始值及统计信息</span>        <span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict        need<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        window<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        valid<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> s1<span class="token punctuation">:</span>            need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        l<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token comment" spellcheck="true"># 维护valid及window</span>        <span class="token keyword">while</span> r<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 维护及增大右窗口</span>            c<span class="token operator">=</span>s2<span class="token punctuation">[</span>r<span class="token punctuation">]</span>            r<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token keyword">in</span> need<span class="token punctuation">:</span>                window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span>                    valid<span class="token operator">+=</span><span class="token number">1</span>            <span class="token comment" spellcheck="true"># 如果窗口大小等于s1长度，则判断窗口的内容是否符合条件</span>            <span class="token comment" spellcheck="true"># 注意是左闭右开，所以是r-l==len(s1)，而不是r-l+1==len(s1)</span>            <span class="token keyword">if</span> r<span class="token operator">-</span>l<span class="token operator">==</span>len<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 若符合，返回True</span>                <span class="token keyword">if</span> valid<span class="token operator">==</span>len<span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">True</span>                <span class="token comment" spellcheck="true"># 收缩并更新左窗口</span>                c<span class="token operator">=</span>s2<span class="token punctuation">[</span>l<span class="token punctuation">]</span>                l<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> c <span class="token keyword">in</span> need<span class="token punctuation">:</span>                    <span class="token keyword">if</span> window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span>                        valid<span class="token operator">-=</span><span class="token number">1</span>                    window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438. 找到字符串中所有字母异位词"></a><a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/" target="_blank" rel="noopener">438. 找到字符串中所有字母异位词</a></h1><p>更新方式1：相当于在上题_更新方式1_的基础上，找到合法的窗口后，若窗口大小和p的大小相同，则把start加到结果中。因为<strong>这时len已缩小，但要从后面继续找符合的子串，所以把len恢复到INT_MAX最大</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//#include &lt;string></span><span class="token comment" spellcheck="true">//#include &lt;vector></span><span class="token comment" spellcheck="true">//#include &lt;iostream></span><span class="token comment" spellcheck="true">//#include &lt;unordered_map></span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//using namespace std;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> need<span class="token punctuation">,</span> window<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>            need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> len <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            更新右窗口信息</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            r<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    valid<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//            找到了包含s1的窗口（窗口可能比较大，需要缩小左窗口）</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>valid <span class="token operator">==</span> need<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    start <span class="token operator">=</span> l<span class="token punctuation">;</span>                    len <span class="token operator">=</span> r <span class="token operator">-</span> l<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//                添加如下代码：当长度相同时，记录当前start，并把len更新到最大</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 长度相同，说明在s中找到了一个异位词</span><span class="token comment" spellcheck="true">//                        cout &lt;&lt; "start:" &lt;&lt; start &lt;&lt; endl;</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存结果</span>                    len <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时len已经缩小了。因为要从后面继续找符合的子串，所以把len恢复到最大</span>                <span class="token punctuation">}</span>                <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                l<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        valid<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int main() {</span><span class="token comment" spellcheck="true">//    Solution so;</span><span class="token comment" spellcheck="true">//    string s = "cbaebabacd";</span><span class="token comment" spellcheck="true">//    string p = "abc";</span><span class="token comment" spellcheck="true">//    so.findAnagrams(s, p);</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s1: str        :type s2: str        :rtype: bool        """</span>        l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>valid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">]</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict        need<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        window<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> p<span class="token punctuation">:</span>            need<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">while</span> r<span class="token operator">!=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            c<span class="token operator">=</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span>            r<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token keyword">in</span> need<span class="token punctuation">:</span>                window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span>                    valid<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">while</span> valid<span class="token operator">==</span>len<span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>                    ans<span class="token operator">=</span><span class="token punctuation">[</span>l<span class="token punctuation">,</span>r<span class="token punctuation">]</span>                <span class="token comment" spellcheck="true"># 添加如下代码，如果长度相等，则保存左指针</span>                <span class="token keyword">if</span> r<span class="token operator">-</span>l<span class="token operator">==</span>len<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">)</span>                d<span class="token operator">=</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span>                l<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> d <span class="token keyword">in</span> need<span class="token punctuation">:</span>                    <span class="token keyword">if</span> window<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">==</span>need<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">:</span>                        valid<span class="token operator">-=</span><span class="token number">1</span>                    window<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">-=</span><span class="token number">1</span>        <span class="token comment" spellcheck="true"># print(s2[ans[0]:ans[1]])</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新方式2：相当于在上题_更新方式2_的基础上，返回所有满足条件的排列的初始索引值。 用res保存结果（用<code>res.append(l)</code> 添加左指针的索引）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 输入:</span><span class="token comment" spellcheck="true"># s: "cbaebabacd" p: "abc"</span><span class="token comment" spellcheck="true"># 输出:</span><span class="token comment" spellcheck="true"># [0, 6]</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :type p: str        :rtype: List[int]        """</span>        <span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict        need<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        window<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>valid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> p<span class="token punctuation">:</span>            need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">while</span> r<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            c<span class="token operator">=</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span>            r<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> c <span class="token keyword">in</span> need<span class="token punctuation">:</span>                window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span>                    valid<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> r<span class="token operator">-</span>l<span class="token operator">==</span>len<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> valid<span class="token operator">==</span>len<span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">)</span>                c<span class="token operator">=</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span>                l<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> c <span class="token keyword">in</span> need<span class="token punctuation">:</span>                    <span class="token keyword">if</span> window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span>need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span>                        valid<span class="token operator">-=</span><span class="token number">1</span>                    window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3. 无重复字符的最长子串</a></h1><ul><li>这次连need和valid都不需要，直接更新window即可</li><li><code>while window[c]&gt;1</code>时，说明窗口中存在重复元素，不符合条件，就该移动left缩小窗口了,直到子串再一次无重复</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> window<span class="token punctuation">;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>r<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            更新右窗口</span>            <span class="token keyword">char</span> c<span class="token operator">=</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            r<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            剔除左边的元素，直到子串再一次无重复</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">char</span> c<span class="token operator">=</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                l<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 输入: "abcabcbb"</span><span class="token comment" spellcheck="true"># 输出: 3</span><span class="token comment" spellcheck="true"># 解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict        window<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        l<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        res_max<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">while</span> r <span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 更新右窗口</span>            c<span class="token operator">=</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span>            r<span class="token operator">+=</span><span class="token number">1</span>            window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>            <span class="token comment" spellcheck="true"># 符合左窗口更新的条件</span>            <span class="token comment" spellcheck="true"># 注意这里要用while，把不符合条件的左窗口内容一直跳过去</span>            <span class="token comment" spellcheck="true"># 如 "pwwkew"，把左侧p移除后，继续移除左侧w</span>            <span class="token keyword">while</span> window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>                d<span class="token operator">=</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span>                l<span class="token operator">+=</span><span class="token number">1</span>                window<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">-=</span><span class="token number">1</span>            <span class="token comment" spellcheck="true"># 更新答案</span>            res_max<span class="token operator">=</span>max<span class="token punctuation">(</span>res_max<span class="token punctuation">,</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span>        <span class="token keyword">return</span> res_max<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>此题也可用动态规划解(不过耗时较长)：</p><ul><li>dp数组含义：<strong>包含</strong>第i个元素的所有无重复字符串的长度（即<code>len(visited)</code>）</li><li><code>visited</code> 用于保存无重复字符串元素。<code>visited=[s[i]]</code>一定包含当前元素，然后从 i-1 开始，逆序遍历之前的元素，若不在visited里，则添加到visited，否则break跳出。</li><li>最后返回dp数组的最大值</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: int        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            visited<span class="token operator">=</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                    visited<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>len<span class="token punctuation">(</span>visited<span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第零章：我写了首诗，让你闭着眼睛也能写对二分搜索</title>
      <link href="/2020/07/25/labuladong/di-ling-zhang-wo-xie-liao-shou-shi-rang-ni-bi-zhao-yan-jing-ye-neng-xie-dui-er-fen-sou-suo/"/>
      <url>/2020/07/25/labuladong/di-ling-zhang-wo-xie-liao-shou-shi-rang-ni-bi-zhao-yan-jing-ye-neng-xie-dui-er-fen-sou-suo/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/er-fen-cha-zhao-xiang-jie" target="_blank" rel="noopener">我写了首诗，让你闭着眼睛也能写对二分搜索</a></p><ul><li>二分查找的一个技巧是：不要出现 else，而是<strong>把所有情况用 <code>elif</code> 列出来</strong>，这样可以清楚地展现所有细节</li><li><code>mid=left + (right - left) // 2</code> 可防止溢出</li><li>对于左右侧边界的二分查找，<code>elif nums[mid]==target</code> 时<strong>更新的边界</strong>不一样。<code>while</code>循环结束后要通过<strong>打补丁</strong>的方式返回结果<h1 id="基本二分查找"><a href="#基本二分查找" class="headerlink" title="基本二分查找"></a><a href="https://leetcode-cn.com/problems/binary-search/" target="_blank" rel="noopener">基本二分查找</a></h1></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        left<span class="token operator">=</span><span class="token number">0</span>        right<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> left<span class="token operator">&lt;=</span>right<span class="token punctuation">:</span>            mid<span class="token operator">=</span>left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">:</span>                left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">:</span>                right<span class="token operator">=</span>mid<span class="token number">-1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">:</span>                <span class="token keyword">return</span> mid        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="寻找左右侧边界的二分查找"><a href="#寻找左右侧边界的二分查找" class="headerlink" title="寻找左右侧边界的二分查找"></a><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">寻找左右侧边界的二分查找</a></h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">searchRange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">leftSearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>            left<span class="token operator">=</span><span class="token number">0</span>            right<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">while</span> left<span class="token operator">&lt;=</span>right<span class="token punctuation">:</span>                mid<span class="token operator">=</span>left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">:</span>                    left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">:</span>                    right<span class="token operator">=</span>mid<span class="token number">-1</span>                <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">:</span>                    right<span class="token operator">=</span>mid<span class="token number">-1</span>            <span class="token comment" spellcheck="true"># 注意此处的打补丁，因为是左边界，所以是 nums[left]!=target</span>            <span class="token keyword">if</span> left<span class="token operator">>=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">or</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">!=</span>target<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">return</span> left            <span class="token comment" spellcheck="true"># # 或者</span>            <span class="token comment" spellcheck="true"># if left&lt;=len(nums)-1 and nums[left]==target: # 因为while中使用&lt;=,所以要确保left没有越界</span>            <span class="token comment" spellcheck="true">#     return left</span>            <span class="token comment" spellcheck="true"># return -1</span>        <span class="token keyword">def</span> <span class="token function">rightSearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>            left<span class="token operator">=</span><span class="token number">0</span>            right<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">while</span> left<span class="token operator">&lt;=</span>right<span class="token punctuation">:</span>                mid<span class="token operator">=</span>left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">:</span>                    left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">:</span>                    right<span class="token operator">=</span>mid<span class="token number">-1</span>                <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">:</span>                    left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>            <span class="token comment" spellcheck="true"># 注意此处的打补丁，因为是右边界，所以是 nums[right]!=target</span>            <span class="token keyword">if</span> right<span class="token operator">&lt;</span><span class="token number">0</span>  <span class="token operator">or</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">!=</span>target<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">return</span> right            <span class="token comment" spellcheck="true"># 或者</span>            <span class="token comment" spellcheck="true"># if right>=0 and nums[right]==target:</span>            <span class="token comment" spellcheck="true">#     return right</span>            <span class="token comment" spellcheck="true"># return -1</span>        l<span class="token operator">=</span>leftSearch<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">)</span>        r<span class="token operator">=</span>rightSearch<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>l<span class="token punctuation">,</span>r<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
            <tag> BinarySearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第零章：BFS 算法解题套路框架（暂）</title>
      <link href="/2020/07/24/labuladong/di-ling-zhang-bfs-suan-fa-jie-ti-tao-lu-kuang-jia-zan/"/>
      <url>/2020/07/24/labuladong/di-ling-zhang-bfs-suan-fa-jie-ti-tao-lu-kuang-jia-zan/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://leetcode-cn.com/problems/sliding-puzzle/solution/bfskuang-jia-miao-sha-ge-chong-yi-zhi-you-xi-by-la/" target="_blank" rel="noopener">BFS算法解题套路框架</a></p><p>BFS通常用于找到最短路径</p><ul><li>BFS的队列遍历过程：<a href="https://www.youtube.com/watch?v=oDqjPvD54Ss" target="_blank" rel="noopener">Breadth First Search Algorithm | Shortest Path | Graph Theory</a></li></ul><ul><li>BFS算法的框架：<ul><li>用<strong>队列</strong>存储数据。将父节点（比如a,b,c）放入队列<ul><li>依次判断当前的（父）节点是不是需要找的点（并存入visited中）<ul><li>如果是，则返回结果</li><li>如果不是，则将当前的（父）节点加入队列中 （并更新扩散的步数），等待后续判断</li></ul></li></ul></li><li>注意：要在for循环<strong>里面</strong>判断cur是否为目标。因为在for循环中，一次放<strong>一批</strong>节点（比如a,b,c）。在判断并弹出节点时，abc是相同的“地位”，因此都要在for循环里判断</li><li>用visited记录已经走过的路，防止跳入死循环</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 计算从起点 start 到终点 target 的最近距离</span><span class="token keyword">int</span> <span class="token function">BFS</span><span class="token punctuation">(</span>Node start<span class="token punctuation">,</span> Node target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Queue<span class="token operator">&lt;</span>Node<span class="token operator">></span> q<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 核心数据结构</span>    Set<span class="token operator">&lt;</span>Node<span class="token operator">></span> visited<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 避免走回头路</span>    q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将起点加入队列</span>    visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录扩散的步数</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q not empty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sz <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 将当前队列中的所有节点向四周扩散 */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到队头元素并弹出该队头</span>            <span class="token comment" spellcheck="true">/* 划重点：这里判断是否到达终点 */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur is target<span class="token punctuation">)</span>                <span class="token keyword">return</span> step<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 将 cur 的相邻节点加入队列 */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node x <span class="token operator">:</span> cur<span class="token punctuation">.</span><span class="token function">adj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x not in visited<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 划重点：更新步数在这里 */</span>        step<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111. 二叉树的最小深度"></a><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/solution/111-er-cha-shu-de-zui-xiao-shen-du-di-gu-ztum/" target="_blank" rel="noopener">111. 二叉树的最小深度</a></h1><h2 id="方法1：BFS"><a href="#方法1：BFS" class="headerlink" title="方法1：BFS"></a>方法1：BFS</h2><ul><li>因为这是一个二叉树，始终向下走，所以不用担心它会遍历到重复的节点，不需要用visited记录已访问的节点</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        初始化：若不存在节点，则返回0，否则把节点添加到队列中，深度为自己的1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        queue <span class="token operator">&lt;</span> TreeNode <span class="token operator">*</span> <span class="token operator">></span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            当前队列对应的相邻节点向四周扩散</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                判断当前节点是否满足结束条件</span>                TreeNode <span class="token operator">*</span>cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里切记要更新队列。pop出节点，否则队列始终不为空，跳不出while循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> depth<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                若不满足，则将相邻节点添加到队列</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            depth <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> depth<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2：递归"><a href="#方法2：递归" class="headerlink" title="方法2：递归"></a>方法2：递归</h2><ul><li>递归结束的条件或者特判：若是空节点，则返回0</li><li>若左右孩子都为空：返回1</li><li>若左右孩子有一个为空：返回非空孩子的递归结果+1</li><li>否则都不为空，返回左右孩子递归结果的最小值+1</li></ul><blockquote><p>注意：<br>在求最大深度时，可以通过代码直接求max:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: int        """</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>            l<span class="token operator">=</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            r<span class="token operator">=</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token keyword">return</span> max<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与最大深度不同的是，在求最小深度时，不能直接返回<code>1 + min(l, r)</code> 。要添加：<strong>如果有一个孩子，要返回 <code>1+这个孩子的深度</code></strong></p><ul><li>比如1的左子树为2，右子树为None。以2为根节点的最小深度为1，以None为根节点的最小深度为0. 则对于根节点1而言，最小深度为1（自己）+1（根节点2返回的结果）。也就是说：<ul><li>当左右子树都存在时，返回<code>1 + min(l, r)</code> （e.g., 2和3，返回1+最小值（2））</li><li>当左右子树只有一个存在时，返回<code>1+存在子树的结果</code> （e.g., 0和2，返回1+存在值（2））</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 如果左子树为空，右子树不为空，说明最小深度是1 + 右子树的深度</span><span class="token keyword">if</span> l<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> r<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span>r<span class="token comment" spellcheck="true"># 如果右子树为空，左子树不为空，说明最小深度是1 + 左子树的深度</span><span class="token keyword">if</span> r<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> l<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span>l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: int        """</span>        <span class="token comment" spellcheck="true"># 递归结束的条件</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        l <span class="token operator">=</span> minDepth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        r <span class="token operator">=</span> minDepth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 如果左子树为空，右子树不为空，说明最小深度是1 + 右子树的深度</span>        <span class="token keyword">if</span> l<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> r<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span>r        <span class="token comment" spellcheck="true"># 如果右子树为空，左子树不为空，说明最小深度是1 + 左子树的深度</span>        <span class="token keyword">if</span> r<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> l<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span>l        <span class="token comment" spellcheck="true"># 如果左右子树都不为空，则返回1+min(l, r)</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> min<span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">not</span> root<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// if (root->left ==NULL &amp;&amp; root->right!= NULL)</span>            <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> r<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> l<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">min</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第零章：回溯算法解题套路框架</title>
      <link href="/2020/07/24/labuladong/di-ling-zhang-hui-su-suan-fa-jie-ti-tao-lu-kuang-jia/"/>
      <url>/2020/07/24/labuladong/di-ling-zhang-hui-su-suan-fa-jie-ti-tao-lu-kuang-jia/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/hui-su-suan-fa-xiang-jie-xiu-ding-ban" target="_blank" rel="noopener">回溯算法解题套路框架</a></p><p>解决一个回溯问题，实际上就是一个<strong>决策树的遍历</strong>过程。主要考虑的问题有：</p><blockquote><ol><li>路径：也就是已经做出的选择。</li><li>选择列表：也就是你当前可以做的选择。</li><li>结束条件：也就是到达决策树底层，无法再做选择的条件。</li></ol></blockquote><p>回溯算法的框架：<br>（在想这个框架时，心里先建立一个N叉递归决策树，在每个决策点做选择）</p><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> 满足结束条件<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>add<span class="token punctuation">(</span>路径<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">for</span> 选择 <span class="token keyword">in</span> 选择列表<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 做选择, 类似前序遍历</span>        将该选择从选择列表移除        路径<span class="token punctuation">.</span>add<span class="token punctuation">(</span>选择<span class="token punctuation">)</span>        backtrack<span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 撤销选择，类似后序遍历</span>        路径<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>选择<span class="token punctuation">)</span>        将该选择再加入选择列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其核心就是 <strong>for 循环里面的递归</strong>，在递归<strong>调用之前「做选择」</strong>，在递归<strong>调用之后「撤销选择」</strong>。</li><li>for循环的一开始，往往先<strong>用<code>if ...continue</code>语句跳过不合法的选择</strong>（来更新选择列表）</li><li>可以<strong>把「路径」和「选择」列表</strong>作为决策树上<strong>每个节点的属性</strong>。<blockquote><p>以全排列为例，<a href="https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/hui-su-suan-fa-xiang-jie-xiu-ding-ban#yi-quan-pai-lie-wen-ti" target="_blank" rel="noopener">这张图</a>）非常清晰地说明了路径和选择列表的关系（加入路径后，选择也相应减少）。<br>backtrack 函数其实就<strong>像一个指针</strong>，在这棵树上游走，同时要<strong>正确维护每个节点的属性</strong>，每当走到树的底层，其「路径」就是一个全排列。<br><img src="https://img-blog.csdnimg.cn/20200724135038705.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70" alt></p></blockquote></li></ul><h1 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a><a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">46. 全排列</a></h1><ul><li>res保存整体结果，visited保存已经走过的路径</li><li><strong>for 循环的一开始，利用 <code>if num in visited: continue</code> 可巧妙地更新选择列表（通过continue跳出此次循环，避免选择到重复元素，达到剪枝的效果）</strong> （非常常用！！！）<ul><li>比如在[1,2,3]中，当前的visited为[2,3]. 此时站在节点处，回头一看，已经走过了2和3，因此在面对选择列表时，只选1（通过continue跳过2和3）</li></ul></li><li>利用<code>visited.append(num)</code> 和 <code>visited.pop()</code> 可更新路径（添加/回退选择）</li><li><code>res.append(visited[:])</code>   利用<strong>visited[:]</strong> 才可完整复制添加单个排列结果(深拷贝)<ul><li><a href="https://blog.csdn.net/T_T233333333/article/details/105011648" target="_blank" rel="noopener">a[:]是深复制，a是浅复制，相当于赋值a的话是赋值了指针，赋值a[:]相当于复制了a对应的那段空间</a><ul><li>如果使用<code>for x in a</code>，则在for循环中会改变a的内容；如果使用<code>for x in a[:]</code>， 则会建立一个a的副本（新对象），这个副本和a中的内容完全相同，所以我们可以在a已经修改的情况下进行remove操作</li></ul></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">permute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        visited<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>visited<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 选择列表和路径</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token operator">==</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>visited<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>                <span class="token keyword">if</span> num <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    visited<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>                    backtrack<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>visited<span class="token punctuation">)</span>                    visited<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        backtrack<span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token comment" spellcheck="true"># 或者分开写</span><span class="token comment" spellcheck="true"># class Solution(object):</span><span class="token comment" spellcheck="true">#     def __init__(self):</span><span class="token comment" spellcheck="true">#         self.res = []</span><span class="token comment" spellcheck="true">#     def backtrance(self, nums, visited):</span><span class="token comment" spellcheck="true">#         if len(nums) == len(visited):</span><span class="token comment" spellcheck="true">#             self.res.append(visited[:])</span><span class="token comment" spellcheck="true">#             return</span><span class="token comment" spellcheck="true">#         for i in range(len(nums)):</span><span class="token comment" spellcheck="true">#             if nums[i] in visited:</span><span class="token comment" spellcheck="true">#                 continue</span><span class="token comment" spellcheck="true">#             else:</span><span class="token comment" spellcheck="true">#                 visited.append(nums[i])</span><span class="token comment" spellcheck="true">#                 self.backtrance(nums, visited)</span><span class="token comment" spellcheck="true">#                 visited.pop()</span><span class="token comment" spellcheck="true">#     def permute(self, nums):</span><span class="token comment" spellcheck="true">#         </span><span class="token triple-quoted-string string">"""#         :type nums: List[int]#         :rtype: List[List[int]]#         """</span><span class="token comment" spellcheck="true">#         self.backtrance(nums, [])</span><span class="token comment" spellcheck="true">#         return self.res</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//#include &lt;vector></span><span class="token comment" spellcheck="true">//#include &lt;iostream></span><span class="token comment" spellcheck="true">//#include &lt;algorithm></span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//using namespace std;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> visited<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> visited<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            检查当前num是否在路径中，count返回0（不在）或1（在）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> visited<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            visited<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">permute</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int main() {</span><span class="token comment" spellcheck="true">//    vector&lt;int> nums = {1, 2, 3};</span><span class="token comment" spellcheck="true">//    Solution so;</span><span class="token comment" spellcheck="true">//    vector&lt;vector&lt;int>> output = so.permute(nums);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">////    结果的两种输出方式：1</span><span class="token comment" spellcheck="true">//    for (auto out:output) {</span><span class="token comment" spellcheck="true">//        for (auto each: out) {</span><span class="token comment" spellcheck="true">//            cout &lt;&lt; each;</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        cout &lt;&lt; endl;</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">////    结果的两种输出方式：2</span><span class="token comment" spellcheck="true">//    for (auto it = output.begin(); it &lt;output.end(); ++it) {</span><span class="token comment" spellcheck="true">//        for (auto j = (*it).begin(); j &lt; (*it).end(); ++j) {</span><span class="token comment" spellcheck="true">//                cout&lt;&lt;(*j);</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        cout&lt;&lt;endl;</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="78-子集"><a href="#78-子集" class="headerlink" title="78. 子集"></a><a href="https://leetcode-cn.com/problems/subsets/solution/hui-su-si-xiang-tuan-mie-pai-lie-zu-he-zi-ji-wen-t/" target="_blank" rel="noopener">78. 子集</a></h1><p><img src="https://i.loli.net/2021/04/21/7iOUEZmCdYhNHvx.png" alt="图片来自labuladong"></p><h2 id="方法1（更容易理解）"><a href="#方法1（更容易理解）" class="headerlink" title="方法1（更容易理解）"></a>方法1（更容易理解）</h2><ul><li>要有回溯结束的条件</li><li>用<code>nums[i+1:]</code>更新选择列表</li><li>for循环中：做选择-&gt;回溯-&gt;撤销选择</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        <span class="token comment" spellcheck="true"># nums.sort()</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>visited<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 回溯结束的条件：nums里没有元素了</span>            <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 做选择</span>                visited<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>visited<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 回溯，用nums[i+1:]更新选择列表</span>                backtrack<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>visited<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 撤销选择</span>                visited<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        backtrack<span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token comment" spellcheck="true"># nums=[1,2,3]</span><span class="token comment" spellcheck="true"># s=Solution()</span><span class="token comment" spellcheck="true"># print(s.subsets(nums))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>c++中，用一个start记录nums开始的地方</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//#include &lt;vector></span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">dfs</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>visited<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            visited<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//后面的dfs过程，只能选择nums[i+1:]范围的元素</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    全局变量保存结果</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">subsets</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> visited<span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法1的另一种写法-（供参考）"><a href="#方法1的另一种写法-（供参考）" class="headerlink" title="方法1的另一种写法 （供参考）"></a>方法1的另一种写法 （供参考）</h2><ul><li><p>在深度遍历决策树时，由于每个visited处对应的后续选择不一样，所以在回溯函数中加入idx参数用于记录选择的范围</p></li><li><p><a href="https://leetcode-cn.com/problems/subsets/solution/shou-hua-tu-jie-zi-ji-hui-su-fa-xiang-jie-wei-yun-/" target="_blank" rel="noopener">详细解释：</a></p><ul><li>每次传入子递归的 index 是：当前你选的数的索引+1</li><li>每次递归枚举的选项变少，一直递归到没有可选的数字，进入不了for循环，落入不了递归，整个DFS结束</li><li>可见我们没有显式地设置递归的出口，而是通过控制循环的起点，使得最后递归自然结束</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>idx<span class="token punctuation">,</span>visited<span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>visited<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>idx<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                visited<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                backtrack<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>visited<span class="token punctuation">)</span>                visited<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        visited<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        backtrack<span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>visited<span class="token punctuation">)</span>        <span class="token keyword">return</span> resnums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>s<span class="token operator">=</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>subsets<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：[[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2（纯递归写法）"><a href="#方法2（纯递归写法）" class="headerlink" title="方法2（纯递归写法）"></a>方法2（纯递归写法）</h2><ul><li>该题也可以用递归来解决：比如[1,2,3]的子集可以由[1,2]的子集基础上，在各个子集元素上追加3得到</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 直接合并递归的写法</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            res<span class="token operator">=</span>res<span class="token operator">+</span><span class="token punctuation">[</span> num<span class="token operator">+</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> res<span class="token punctuation">]</span>        <span class="token keyword">return</span> res    <span class="token comment" spellcheck="true"># 不合并，逐步递归的写法</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        <span class="token comment" spellcheck="true"># 递归结束的条件</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 取出nums的最后一个元素</span>        n<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        nums<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 先计算子集结果</span>        res<span class="token operator">=</span>self<span class="token punctuation">.</span>subsets<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 再在子集的基础上追加</span>        res<span class="token operator">+=</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">]</span>        <span class="token keyword">return</span> res<span class="token comment" spellcheck="true"># s = Solution()</span><span class="token comment" spellcheck="true"># nums = [1, 2, 3]</span><span class="token comment" spellcheck="true"># ans = s.subsets(nums)</span><span class="token comment" spellcheck="true"># print(ans)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">subsets</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 递归结束的条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        把最后一个元素取出来</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        得到子问题的结果</span>        vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res <span class="token operator">=</span> <span class="token function">subsets</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        在结果上依次追加</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a><a href="https://leetcode-cn.com/problems/combinations/" target="_blank" rel="noopener">77. 组合</a></h1><p>与上一题类似，也是用一个位置参数记录当前节点，然后调用子问题的backtrack时，选择列表从位置参数后面开始</p><p>78题子集问题：选择列表为空时跳出，每经过一个节点，记录当前visited路径<br>本题：visited的路径为给定的k时，结果中记录当前的visited，然后跳出</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combine</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type n: int        :type k: int        :rtype: List[List[int]]        """</span>        nums<span class="token operator">=</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        visited<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">backtrance</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>visited<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token operator">==</span>k<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>visited<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                visited<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                backtrance<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>visited<span class="token punctuation">)</span>                visited<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        backtrance<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>visited<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token comment" spellcheck="true"># so=Solution()</span><span class="token comment" spellcheck="true"># print(so.combine(4,2))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    用start记录选择列表开始的地方，小于该节点的选择一律不选</span>    <span class="token keyword">void</span>  <span class="token function">backtrack</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> visited<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> start<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            visited<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从位置j后面的列表中选</span>            visited<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> visited<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//    构建1到n的向量</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nums<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>start<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">17. 电话号码的字母组合</a></h2><h3 id="方法1：回溯"><a href="#方法1：回溯" class="headerlink" title="方法1：回溯"></a>方法1：回溯</h3><ul><li>用一个dic记录按键对应的字母</li><li>维护选择列表<code>choice</code>和已选择的路径<code>visited</code></li><li>用idx记录digits当前索引的位置,不同的idx对应不同的选择<ul><li><strong>在函数参数列表中用idx记录索引这种操作很常见，相当于用idx更新选择列表</strong></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type digits: str        :rtype: List[str]        """</span>        <span class="token comment" spellcheck="true"># dic = {"2": ['a', 'b', 'c'],</span>        <span class="token comment" spellcheck="true">#        "3": ['d', 'e', 'f'],</span>        <span class="token comment" spellcheck="true">#        "4": ['g', 'h', 'i'],</span>        <span class="token comment" spellcheck="true">#        "5": ['j', 'k', 'l'],</span>        <span class="token comment" spellcheck="true">#        "6": ['m', 'n', 'o'],</span>        <span class="token comment" spellcheck="true">#        "7": ['p', 'q', 'r', 's'],</span>        <span class="token comment" spellcheck="true">#        "8": ['t', 'u', 'v'],</span>        <span class="token comment" spellcheck="true">#        "9": ['w', 'x', 'y', 'z']}</span>        dic <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>            <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token string">'def'</span><span class="token punctuation">,</span>            <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token string">'ghi'</span><span class="token punctuation">,</span>            <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token string">'jkl'</span><span class="token punctuation">,</span>            <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token string">'mno'</span><span class="token punctuation">,</span>            <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token string">'pqrs'</span><span class="token punctuation">,</span>            <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token string">'tuv'</span><span class="token punctuation">,</span>            <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token string">'wxyz'</span>        <span class="token punctuation">}</span>        <span class="token keyword">def</span> <span class="token function">backtrace</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span>visited<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>visited<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 回溯结束的条件</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>visited<span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token comment" spellcheck="true"># 维护路径和选择列表</span>            choose <span class="token operator">=</span> dic<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 按照索引 选择 选择列表</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>choose<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                visited<span class="token operator">+=</span>choose<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 选择</span>                backtrace<span class="token punctuation">(</span>digits<span class="token punctuation">,</span>visited<span class="token punctuation">,</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                visited<span class="token operator">=</span>visited<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 撤销选择</span>        <span class="token keyword">if</span> digits<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        visited<span class="token operator">=</span><span class="token string">""</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        backtrace<span class="token punctuation">(</span>digits<span class="token punctuation">,</span> visited<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token comment" spellcheck="true"># so = Solution()</span><span class="token comment" spellcheck="true"># print(so.letterCombinations("23"))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// #include &lt;string></span><span class="token comment" spellcheck="true">// #include &lt;vector></span><span class="token comment" spellcheck="true">// #include &lt;map></span><span class="token comment" spellcheck="true">// #include &lt;iostream></span><span class="token comment" spellcheck="true">// #include &lt;unordered_map></span><span class="token comment" spellcheck="true">// using namespace std;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> string<span class="token operator">></span> table<span class="token punctuation">{</span>            <span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">"ghi"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">"mno"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">"pqrs"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">"tuv"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">"wxyz"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>string digits<span class="token punctuation">,</span>string visited<span class="token punctuation">,</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        递归结束的条件，</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>idx<span class="token operator">==</span>digits<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 或者 if (visited.size()==digits.size())...</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        string choice <span class="token operator">=</span> table<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当前的选择列表</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i<span class="token operator">:</span>choice<span class="token punctuation">)</span> <span class="token punctuation">{</span>            visited<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 做选择</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span>visited<span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归</span>            visited<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 撤销选择</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>string digits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 输入：digits = ""，输出：[] （而不是[""]）,所以加这句话进行特判</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>digits <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// int main() {</span><span class="token comment" spellcheck="true">//     Solution s;</span><span class="token comment" spellcheck="true">//     string digits = "23";</span><span class="token comment" spellcheck="true">//     vector&lt;string> res = s.letterCombinations(digits);</span><span class="token comment" spellcheck="true">//     for (auto &amp;i:res) {</span><span class="token comment" spellcheck="true">//         cout &lt;&lt; i &lt;&lt; '\t';</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法2：纯递归（也是一种回溯）"><a href="#方法2：纯递归（也是一种回溯）" class="headerlink" title="方法2：纯递归（也是一种回溯）"></a>方法2：<a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/solution/hui-su-dui-lie-tu-jie-by-ml-zimingmeng/" target="_blank" rel="noopener">纯递归（也是一种回溯）</a></h3><ul><li>明确递归函数的含义（不要跳进递归中）：返回digits对应的题目要求的结果<ul><li>选择第一个按键作为当前列表，然后把当前列表和子结果进行拼接，得到最终结果</li><li>注意递归结束的条件：digits长度为0，则… digits长度为1，则…   (有时候不确定递归结束的条件，则可以多写些base case)</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> digits<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        dict <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>            <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token string">'def'</span><span class="token punctuation">,</span>            <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token string">'ghi'</span><span class="token punctuation">,</span>            <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token string">'jkl'</span><span class="token punctuation">,</span>            <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token string">'mno'</span><span class="token punctuation">,</span>            <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token string">'pqrs'</span><span class="token punctuation">,</span>            <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token string">'tuv'</span><span class="token punctuation">,</span>            <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token string">'wxyz'</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># res = [] # 注意：res一定不要写在这里，否则递归过程中，res不断增加，导致出错</span>        <span class="token keyword">def</span> <span class="token function">recursive</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 递归结束的条件</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> list<span class="token punctuation">(</span>dict<span class="token punctuation">[</span>digits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 注意，这也是递归结束的条件</span>            children <span class="token operator">=</span> dict<span class="token punctuation">[</span>digits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 选择当前按键对应的列表</span>            digits<span class="token operator">=</span>digits<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># res写在这里，递归过程中，不断填充并更新res</span>            <span class="token keyword">for</span> child <span class="token keyword">in</span> children<span class="token punctuation">:</span>                subRes<span class="token operator">=</span>recursive<span class="token punctuation">(</span>digits<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 子结果</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> subRes<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 拼接结果并记录</span>                    tmp<span class="token operator">=</span>child<span class="token operator">+</span>i                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>            <span class="token keyword">return</span> res        <span class="token keyword">return</span> recursive<span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># so=Solution()</span><span class="token comment" spellcheck="true"># print(so.letterCombinations("234"))</span><span class="token comment" spellcheck="true">## 或者</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> digits<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        dict <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>            <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token string">'def'</span><span class="token punctuation">,</span>            <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token string">'ghi'</span><span class="token punctuation">,</span>            <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token string">'jkl'</span><span class="token punctuation">,</span>            <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token string">'mno'</span><span class="token punctuation">,</span>            <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token string">'pqrs'</span><span class="token punctuation">,</span>            <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token string">'tuv'</span><span class="token punctuation">,</span>            <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token string">'wxyz'</span>        <span class="token punctuation">}</span>        <span class="token keyword">def</span> <span class="token function">recursive</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> list<span class="token punctuation">(</span>dict<span class="token punctuation">[</span>digits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            children <span class="token operator">=</span> dict<span class="token punctuation">[</span>digits<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            digits<span class="token operator">=</span>digits<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>            subRes<span class="token operator">=</span>recursive<span class="token punctuation">(</span>digits<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> subRes<span class="token punctuation">:</span>                <span class="token keyword">for</span> child <span class="token keyword">in</span> children<span class="token punctuation">:</span>                    tmp<span class="token operator">=</span>i<span class="token operator">+</span>child                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>            <span class="token keyword">return</span> res        <span class="token keyword">return</span> recursive<span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># so=Solution()</span><span class="token comment" spellcheck="true"># print(so.letterCombinations("234"))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他写法：</p><ul><li>明确递归函数的含义recursive(digits, visited)：给定digits以及已经选择的路径，返回题目要求的结果。注意：不要跳进递归中</li><li>递归结束的条件：digits的长度为0</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">)</span> <span class="token punctuation">:</span>        dict <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>            <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token string">'def'</span><span class="token punctuation">,</span>            <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token string">'ghi'</span><span class="token punctuation">,</span>            <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token string">'jkl'</span><span class="token punctuation">,</span>            <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token string">'mno'</span><span class="token punctuation">,</span>            <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token string">'pqrs'</span><span class="token punctuation">,</span>            <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token string">'tuv'</span><span class="token punctuation">,</span>            <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token string">'wxyz'</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token operator">not</span> digits<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">recursive</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 递归结束的条件</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>visited<span class="token punctuation">)</span>                <span class="token keyword">return</span>             children <span class="token operator">=</span> dict<span class="token punctuation">[</span>digits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 选择当前数字对应的字母按键串</span>            <span class="token keyword">for</span> child <span class="token keyword">in</span> children<span class="token punctuation">:</span>                recursive<span class="token punctuation">(</span>digits<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> visited<span class="token operator">+</span>child<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 根据字母按键串中的字符更新visted</span>            <span class="token keyword">return</span> res        <span class="token keyword">return</span> recursive<span class="token punctuation">(</span>digits<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># so=Solution()</span><span class="token comment" spellcheck="true"># print(so.letterCombinations("23"))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++的其他写法：</p><p>用递归得到前面的结果，然后把前面的结果与当前的字符串进行拼接</p><ul><li>递归结束的条件是<code>digits.size() == 0</code>则返回<code>{&quot;&quot;}</code>。这样在递归树的最低层是从<code>&quot;&quot;</code>开始的，而不是从a（或b或c）开始，所以结果中记录的是全部的按键过程，最后要用长度过滤结果</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// #include &lt;string></span><span class="token comment" spellcheck="true">// #include &lt;vector></span><span class="token comment" spellcheck="true">// #include &lt;map></span><span class="token comment" spellcheck="true">// #include &lt;iostream></span><span class="token comment" spellcheck="true">// #include &lt;unordered_map></span><span class="token comment" spellcheck="true">// #include&lt;algorithm></span><span class="token comment" spellcheck="true">// using namespace std;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> string<span class="token operator">></span> table<span class="token punctuation">{</span>            <span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">"ghi"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">"mno"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">"pqrs"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">"tuv"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">"wxyz"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">helper</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>digits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>digits<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 递归结束的条件</span>        string cur <span class="token operator">=</span> table<span class="token punctuation">[</span>digits<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        digits<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取出最后一个元素</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> subRes <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 前面的结果</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span>subRes<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 前面的结果与当前元素进行拼接</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>j<span class="token operator">:</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>                string tmp <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>string digits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>digits <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 特判</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> digits<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> output <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans1<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i<span class="token operator">:</span>output<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 过滤掉不满足长度数的字符串</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>                ans1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// int main() {</span><span class="token comment" spellcheck="true">//     Solution s;</span><span class="token comment" spellcheck="true">//     string digits = "23";</span><span class="token comment" spellcheck="true">//     vector&lt;string>res=s.letterCombinations(digits);</span><span class="token comment" spellcheck="true">//     for (auto &amp;i:res) {</span><span class="token comment" spellcheck="true">//         cout &lt;&lt; i &lt;&lt; '\t';</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="51-N皇后"><a href="#51-N皇后" class="headerlink" title="51. N皇后"></a><a href="https://leetcode-cn.com/problems/n-queens/" target="_blank" rel="noopener">51. N皇后</a></h1><ul><li>与全排列类似，<strong>决策树的每一层表示棋盘上的每一行</strong>；每个节点可以做出的<strong>选择是</strong>，在该行的<strong>任意一列</strong>放置一个皇后。</li><li><code>backtrack(board,row)</code> 就是标准的回溯框架，只是在做选择时， 通过<code>isvalid()</code> 函数进行剪枝（continue 跳出当次循环），得到符合条件的排列<ul><li><code>isvalid()</code> 函数检查当列，左上，右上 是否与皇后有冲突</li><li><code>tmp_res.append(&#39;&#39;.join(b))</code> 的作用是得到符合输出格式的皇后摆放</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        board<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'.'</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 路径：board, 选择列表：row中的每一列</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#     if 满足条件:</span>            <span class="token comment" spellcheck="true">#         res.append(路径)</span>            <span class="token comment" spellcheck="true">#         return</span>            <span class="token comment" spellcheck="true"># 触底，添加</span>            <span class="token keyword">if</span> row<span class="token operator">==</span>n<span class="token punctuation">:</span>                tmp_res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> b <span class="token keyword">in</span> board<span class="token punctuation">:</span>                    tmp_res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp_res<span class="token punctuation">)</span>                <span class="token keyword">return</span> res            <span class="token comment" spellcheck="true">#     for 选择 in 选择列表:</span>            <span class="token comment" spellcheck="true">#         做选择</span>            <span class="token comment" spellcheck="true">#         backtrack(路径,选择列表)</span>            <span class="token comment" spellcheck="true">#         撤销选择</span>            <span class="token comment" spellcheck="true"># 判断row行，col列是否可以放Q</span>            <span class="token keyword">for</span> col <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token operator">not</span> isvalid<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'Q'</span>                backtrack<span class="token punctuation">(</span>board<span class="token punctuation">,</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'.'</span>        <span class="token keyword">def</span> <span class="token function">isvalid</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 检查列是否有皇后互相冲突</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Q'</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token comment" spellcheck="true"># 检查左上方是否有皇后互相冲突</span>            l_row<span class="token punctuation">,</span>l_col<span class="token operator">=</span>row<span class="token punctuation">,</span>col            <span class="token keyword">while</span> <span class="token number">0</span><span class="token operator">&lt;=</span><span class="token punctuation">(</span>l_row<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>n <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span><span class="token punctuation">(</span>l_col<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>n<span class="token punctuation">:</span>                l_row<span class="token operator">-=</span><span class="token number">1</span>                l_col<span class="token operator">-=</span><span class="token number">1</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>l_row<span class="token punctuation">]</span><span class="token punctuation">[</span>l_col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Q'</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token comment" spellcheck="true"># 检查右上方是否有皇后互相冲突</span>            r_row<span class="token punctuation">,</span>r_col<span class="token operator">=</span>row<span class="token punctuation">,</span>col            <span class="token keyword">while</span> <span class="token number">0</span><span class="token operator">&lt;=</span><span class="token punctuation">(</span>r_row<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>n <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span><span class="token punctuation">(</span>r_col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>n<span class="token punctuation">:</span>                r_row<span class="token operator">-=</span><span class="token number">1</span>                r_col<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>r_row<span class="token punctuation">]</span><span class="token punctuation">[</span>r_col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Q'</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        backtrack<span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第零章：动态规划解题套路框架</title>
      <link href="/2020/07/24/labuladong/di-ling-zhang-dong-tai-gui-hua-jie-ti-tao-lu-kuang-jia/"/>
      <url>/2020/07/24/labuladong/di-ling-zhang-dong-tai-gui-hua-jie-ti-tao-lu-kuang-jia/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/dong-tai-gui-hua-xiang-jie-jin-jie" target="_blank" rel="noopener">动态规划解题套路框架</a></p><hr><p>动态规划之背包汇总</p><p><a href="https://ismxue.github.io/2020/07/24/labuladong/di-ling-zhang-dong-tai-gui-hua-jie-ti-tao-lu-kuang-jia/">第零章：动态规划解题套路框架</a><br><a href="https://ismxue.github.io/2020/07/27/labuladong/di-yi-zhang-jing-dian-dong-tai-gui-hua-0-1-bei-bao-wen-ti/">第一章：经典动态规划：0-1 背包问题</a><br><a href="https://ismxue.github.io/2020/07/27/labuladong/di-ling-zhang-jing-dian-dong-tai-gui-hua-zi-ji-bei-bao-wen-ti/">第零章：经典动态规划：子集背包问题</a><br><a href="https://ismxue.github.io/2020/07/27/labuladong/di-ling-zhang-jing-dian-dong-tai-gui-hua-wan-quan-bei-bao-wen-ti/">第零章：经典动态规划：完全背包问题</a></p><hr><p>动态规划一般采用<strong>自底向上</strong>的方式<strong>求最值</strong>。<br>求解动态规划的核心问题是穷举,但是穷举过程中会存在<strong>重叠子问题</strong>，所以加上<strong>备忘录</strong>来优化过程<br>dp 三要素：</p><ol><li>明确 <strong>base case</strong></li><li>明确「状态」-&gt; 明确「选择」, 即<strong>状态转移方程</strong><ul><li>确定「<strong>状态</strong>」，也就是原问题和子问题中会变化的变量</li><li>确定「<strong>选择</strong>」，也就是导致「状态」产生变化的行为</li></ul></li><li>明确 <strong>dp数组/函数的含义</strong></li></ol><p>因此，dp 框架可写成：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化 base case</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token operator">=</span> base<span class="token comment" spellcheck="true"># 进行状态转移</span><span class="token keyword">for</span> 状态<span class="token number">1</span> <span class="token keyword">in</span> 状态<span class="token number">1</span>的所有取值：    <span class="token keyword">for</span> 状态<span class="token number">2</span> <span class="token keyword">in</span> 状态<span class="token number">2</span>的所有取值：        <span class="token keyword">for</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            dp<span class="token punctuation">[</span>状态<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>状态<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token operator">=</span> 求最值<span class="token punctuation">(</span>选择<span class="token number">1</span>，选择<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="509. 斐波那契数"></a><a href="https://leetcode-cn.com/problems/fibonacci-number/" target="_blank" rel="noopener">509. 斐波那契数</a></h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type N: int        :rtype: int        """</span>        <span class="token keyword">if</span> N<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//#include &lt;iostream></span><span class="token comment" spellcheck="true">//#include &lt;vector></span><span class="token comment" spellcheck="true">//using namespace std;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>N<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int main(){</span><span class="token comment" spellcheck="true">//    int s=Solution().fib(5);</span><span class="token comment" spellcheck="true">//    cout&lt;&lt;s&lt;&lt;endl;</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="322-零钱兑换"><a href="#322-零钱兑换" class="headerlink" title="322. 零钱兑换"></a><a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener">322. 零钱兑换</a></h1><h2 id="方法1：二维dp数组"><a href="#方法1：二维dp数组" class="headerlink" title="方法1：二维dp数组"></a>方法1：二维dp数组</h2><p>dp[i][j]的含义：前i枚硬币凑成j块钱所需要的最小硬币数</p><ul><li>因为求最小的硬币数，所以数组先初始化为较大的amount+1（最多需要amount+1枚硬币）</li><li>加一个虚拟的0行0列，第0行表示当前硬币为0，第0列表示当前金额数为0。第i行对应的硬币为第coins[i-1]个硬币</li><li>若金额大于当前硬币，则取装和不装的最小值<ul><li>不装当前硬币：dp[i][j]=dp[i-1][j]</li><li>装当前硬币：dp[i][j]=dp[i][j-coins[i-1]]+1<ul><li>注意dp[i][j]表示的是<strong>前i枚</strong>硬币凑成j块钱所需要的最小硬币数，这里的i已经包括了<strong>用和不用</strong>当前硬币, 所以不管是不是第一次用当前硬币，当前状态dp[i][j]都从dp[i][j-coins[i-1]]+1转移而来</li></ul></li></ul></li><li>若金额小于当前硬币，则不能装当前硬币：dp[i][j]=dp[i-1][j]</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>amount<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">dp</span><span class="token punctuation">(</span>coins<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">>=</span>coins<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>coins<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>coins<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token operator">==</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>dp<span class="token punctuation">[</span>coins<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2：一维dp数组"><a href="#方法2：一维dp数组" class="headerlink" title="方法2：一维dp数组"></a>方法2：一维dp数组</h2><ul><li>明确dp数组含义：凑好当前零钱数的最小硬币数量</li><li>明确 base case：dp[0]=0。 初始化时dp[i] 设为<code>float(&quot;inf&quot;)</code> 最大值</li><li>明确状态：零钱大小</li><li>明确选择：硬币。 <code>if i&gt;=coin</code> 时才做选择（零钱大小至少要比硬币值大）</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> coins<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span>float<span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> coin <span class="token keyword">in</span> coins<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 相当于在确定第i个值时，取所有（可行）硬币的状态转移的最小值+1</span>                <span class="token keyword">if</span> i<span class="token operator">>=</span>coin<span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>coin<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>float<span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//#include &lt;vector></span><span class="token comment" spellcheck="true">//#include &lt;iostream></span><span class="token comment" spellcheck="true">//using namespace std;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> coin<span class="token operator">:</span>coins<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>coin<span class="token operator">&lt;=</span>i<span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>coin<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>dp<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int main(){</span><span class="token comment" spellcheck="true">//    vector&lt;int> coins={1, 2, 5};</span><span class="token comment" spellcheck="true">//    int s=Solution().coinChange(coins,11);</span><span class="token comment" spellcheck="true">//    cout&lt;&lt;s&lt;&lt;endl;</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第零章：学习算法和刷题的框架思维</title>
      <link href="/2020/07/23/labuladong/di-ling-zhang-xue-xi-suan-fa-he-shua-ti-de-kuang-jia-si-wei/"/>
      <url>/2020/07/23/labuladong/di-ling-zhang-xue-xi-suan-fa-he-shua-ti-de-kuang-jia-si-wei/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/xue-xi-shu-ju-jie-gou-he-suan-fa-de-gao-xiao-fang-fa" target="_blank" rel="noopener">学习算法和刷题的框架思维</a></p><h1 id="124-二叉树中的最大路径和-后序遍历"><a href="#124-二叉树中的最大路径和-后序遍历" class="headerlink" title="124. 二叉树中的最大路径和_后序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/solution/er-cha-shu-zhong-de-zui-da-lu-jing-he-by-ikaruga/" target="_blank" rel="noopener">124. 二叉树中的最大路径和_后序遍历</a></h1><ul><li>采用后序遍历：先访问左子树，再访问右子树，最后根据左右子树的结果和当前节点更新当前节点对应的最大值</li><li><code>maxVal</code> 记录的是全局最大路径和（可以不返回，因为它始终在递归过程中更新即可，递归结束时，这个值也就出来了）</li><li>定义<a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/solution/shou-hui-tu-jie-hen-you-ya-de-yi-dao-dfsti-by-hyj8/" target="_blank" rel="noopener">递归函数的意义</a>：<ul><li>定义dfs函数：<strong>返回root的左（或右）子树能向root节点“提供”的最大路径和</strong>。即，<strong>一条从父节点延伸下来的路径</strong>，能在当前子树中获得的最大收益。也就是：<code>dfs()</code>函数<strong>返回</strong>的是<strong>包含root</strong>在内的<strong>单边</strong>最大路径和。分为三种情况：<ul><li>路径停在当前子树的根节点，在这个子树中收益：root.val</li><li>走入左子树，在这个子树中的最大收益：root.val + dfs(root.left)</li><li>走入右子树，在这个子树中的最大收益：root.val + dfs(root.right)  </li></ul></li></ul></li><li>若root的左节点对应的最大路径和是负数（在拖后腿，所以抛弃），则最大路径和为0，因此有<code>l=max(0,dfs(root.left))</code>。右节点同理</li><li>记得写<strong>递归结束</strong>的条件</li></ul><blockquote><p>Q：为什么递归函数返回的是以根节点为首的单边最大路径和，而不是两边最大路径和？<br>A：若以1为根节点，它对应的最大路径和当然是1+2+3。但对于9而言，1作为9的左子树，1节点只能提供1+3（单边最大路径和），而不能提供1+2+3，否则1+2+3+9会产生路径重复。因此递归函数要返回单边最大路径和，而递归过程中不断更新全局最大路径和<code>self.maxVal=max(self.maxVal,root.val+l+r)</code><br><img src="https://i.loli.net/2021/06/17/vuUGPrhHmTaxcfA.png" alt="20210617095226"></p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: int        """</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">0</span>            <span class="token comment" spellcheck="true"># 后序遍历：左</span>            l<span class="token operator">=</span>max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 后序遍历：右</span>            r<span class="token operator">=</span>max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 后序遍历：中，实现最大值的更新</span>            self<span class="token punctuation">.</span>maxVal<span class="token operator">=</span>max<span class="token punctuation">(</span>self<span class="token punctuation">.</span>maxVal<span class="token punctuation">,</span>root<span class="token punctuation">.</span>val<span class="token operator">+</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 递归函数返回： 从根节点延生下来的一条路径</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span>val<span class="token operator">+</span>max<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>maxVal<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">"-inf"</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>maxVal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ans <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">"-inf"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">help</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        l<span class="token operator">=</span>max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>help<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>        r<span class="token operator">=</span>max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>help<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ans<span class="token operator">=</span>max<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ans<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> l <span class="token operator">+</span> r<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span class="token punctuation">.</span>val<span class="token operator">+</span>max<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">maxPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: int        """</span>        <span class="token comment" spellcheck="true"># self.ans=float("-inf")</span>        self<span class="token punctuation">.</span>help<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    定义全局变量</span>    <span class="token keyword">int</span> maxVal <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dfs函数返回某个子树+当前节点对应的   单边最大和</span>    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maxVal <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxVal<span class="token punctuation">,</span> root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">+</span> l <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">maxPathSum</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> maxVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类似题目104-二叉树的最大深度-后序遍历"><a href="#类似题目104-二叉树的最大深度-后序遍历" class="headerlink" title="类似题目104. 二叉树的最大深度_后序遍历"></a>类似题目<a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">104. 二叉树的最大深度_后序遍历</a></h2><ul><li><code>dfs()</code>函数返回包含<code>root</code>在内的二叉树最大深度</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: int        """</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>            l<span class="token operator">=</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            r<span class="token operator">=</span>dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token keyword">return</span> max<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或者直接写：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="105-从前序与中序遍历序列构造二叉树-前序遍历"><a href="#105-从前序与中序遍历序列构造二叉树-前序遍历" class="headerlink" title="105. 从前序与中序遍历序列构造二叉树_前序遍历"></a><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/dong-hua-yan-shi-105-cong-qian-xu-yu-zhong-xu-bian/" target="_blank" rel="noopener">105. 从前序与中序遍历序列构造二叉树_前序遍历</a></h1><p><img src="https://i.loli.net/2021/06/17/A3KxBIqHoziC57g.png" alt><br><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/dong-hua-yan-shi-105-cong-qian-xu-yu-zhong-xu-bian/" target="_blank" rel="noopener">图片来源</a></p><blockquote><p>树的<strong>前序遍历</strong>：先构造根节点，基于根节点的信息找到左右子树的preorder和inorder范围，然后分别处理左右子树</p></blockquote><ul><li>前序遍历的第一个元素是根节点</li><li>在中序遍历中找到根节点的位置，其左边的元素就是左子树，右边的元素就是右子树</li><li>然后递归处理左右子树</li><li>注意写上递归结束条件（左右子树为空时）</li><li>前序数组怎么切分呢？前序数组的 （左子树部分+根节点） 长度 和  中序数组的 （左子树部分+根节点） 长度是一样的</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type preorder: List[int]        :type inorder: List[int]        :rtype: TreeNode        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>preorder <span class="token operator">and</span> inorder<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> None        root<span class="token operator">=</span>TreeNode<span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 前序遍历：根   构造根节点</span>        midIdx<span class="token operator">=</span>inorder<span class="token punctuation">.</span>index<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 递归处理左右子树</span>        root<span class="token punctuation">.</span>left<span class="token operator">=</span>self<span class="token punctuation">.</span>buildTree<span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span>midIdx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>inorder<span class="token punctuation">[</span><span class="token punctuation">:</span>midIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 前序遍历：左</span>        root<span class="token punctuation">.</span>right<span class="token operator">=</span>self<span class="token punctuation">.</span>buildTree<span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>midIdx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>inorder<span class="token punctuation">[</span>midIdx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 前序遍历：右</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> preorder<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>preorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span>inorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        TreeNode <span class="token operator">*</span>root<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> midIdx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>midIdx<span class="token punctuation">]</span><span class="token operator">!=</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>            midIdx<span class="token operator">++</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">preorder_l</span><span class="token punctuation">(</span>preorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>preorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>midIdx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">preorder_r</span><span class="token punctuation">(</span>preorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>midIdx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>preorder<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">inorder_l</span><span class="token punctuation">(</span>inorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>inorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>midIdx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">inorder_r</span><span class="token punctuation">(</span>inorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>midIdx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>inorder<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder_l<span class="token punctuation">,</span>inorder_l<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preorder_r<span class="token punctuation">,</span>inorder_r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="99-恢复二叉搜索树-中序遍历"><a href="#99-恢复二叉搜索树-中序遍历" class="headerlink" title="99. 恢复二叉搜索树_中序遍历"></a><a href="https://leetcode-cn.com/problems/recover-binary-search-tree/solution/san-chong-jie-fa-xiang-xi-tu-jie-99-hui-fu-er-cha-/" target="_blank" rel="noopener">99. 恢复二叉搜索树_中序遍历</a></h1><p>题目说二叉搜索树，中序遍历后应该是升序排列。否则若出现非递增的元素，说明这个地方有错误</p><ul><li>先中序遍历二叉搜索树，保存在nodes列表中（列表中的元素是节点）</li><li>pre保存遍历过程中i的前一个节点。如果发现异常，标定出</li><li>找到错误节点x、y后，交换x与y的值</li></ul><h2 id="方法1：递归"><a href="#方法1：递归" class="headerlink" title="方法1：递归"></a><a href="https://leetcode-cn.com/problems/recover-binary-search-tree/solution/zhong-xu-bian-li-by-powcai/" target="_blank" rel="noopener">方法1：递归</a></h2><ul><li>不要跳进递归，定义递归函数的意义并相信它能实现自己的功能 （注意加上递归结束的条件）<ul><li>递归函数的功能：记录异常点出现的位置,并且更新pre，使得pre始终在root前面</li><li>中序遍历左；</li><li>中序遍历中：找到两个变化的点，第一个点赋值pre，第二个点赋值root。及时记录并更新pre（这样，在后面的中序遍历右时，pre的值为根节点的值，可以进行新一轮的递归和比较）</li><li>中序遍历右</li><li>交换两个点的数值</li></ul></li></ul><blockquote><p>注意!!!!!!</p><pre class="line-numbers language-pytohn"><code class="language-pytohn">            <!--dfs中的代码块  -->            if self.pre!=None:                <!-- 代码块 -->         <!-- 给fir，sec，pre附初始值 -->        self.pre=None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在dfs函数中，一定要判断<code>if self.pre!=None:</code>，</p></li><li><p>（原因）为了能够递归起来，需要确保self.pre!=None（因为初始化 self.pre=None）</p></li><li><p>否则在执行<code>if self.fir == None and self.pre.val &gt;= root.val:</code>时，编译器都不确定<code>self.pre</code>成不成立，更别说<code>self.pre.val</code>了；</p></li><li><p><a href="https://www.cnblogs.com/qq952693358/p/9280717.html" target="_blank" rel="noopener">在c++中同理</a></p></li></ul></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">recoverTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: None Do not return anything, modify root in-place instead.        """</span>        <span class="token comment" spellcheck="true"># 中序遍历</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span>            <span class="token comment" spellcheck="true"># 中序遍历：左</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 中序遍历：中</span>            <span class="token comment" spellcheck="true"># 找到两个左大右小的地方，第一个地方把pre赋给fir，第二个地方把root赋给sec</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>pre<span class="token operator">!=</span>None<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 在递归过程中，pre不断进行更新，始终指向当前节点的前一个（不是物理空间的前面，是中序遍历顺序的前面）节点</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>fir <span class="token operator">==</span> None <span class="token operator">and</span> self<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>val <span class="token operator">>=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>fir <span class="token operator">=</span> self<span class="token punctuation">.</span>pre                <span class="token keyword">if</span> self<span class="token punctuation">.</span>fir <span class="token operator">!=</span> None <span class="token operator">and</span> self<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>val <span class="token operator">>=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>sec <span class="token operator">=</span> root            <span class="token comment" spellcheck="true"># pre为root前面（不是物理空间的前面，是中序遍历顺序的前面）的节点</span>            <span class="token comment" spellcheck="true"># 在下次进入dfs(root)入口前，及时记录并更新pre</span>            self<span class="token punctuation">.</span>pre <span class="token operator">=</span> root            <span class="token comment" spellcheck="true"># 中序遍历：右</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fir <span class="token operator">=</span> None        self<span class="token punctuation">.</span>sec <span class="token operator">=</span> None        self<span class="token punctuation">.</span>pre<span class="token operator">=</span>None        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 交换两个地方的值</span>        self<span class="token punctuation">.</span>fir<span class="token punctuation">.</span>val<span class="token punctuation">,</span>self<span class="token punctuation">.</span>sec<span class="token punctuation">.</span>val<span class="token operator">=</span>self<span class="token punctuation">.</span>sec<span class="token punctuation">.</span>val<span class="token punctuation">,</span>self<span class="token punctuation">.</span>fir<span class="token punctuation">.</span>val<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode <span class="token operator">*</span>fir <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    TreeNode <span class="token operator">*</span>sec <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    TreeNode <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        递归结束的条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        中序遍历：左</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        中序遍历：中</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fir <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">>=</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> fir <span class="token operator">=</span> pre<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fir <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">>=</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> sec <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pre <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        中序遍历：右</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">recoverTree</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> fir<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>        fir<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">=</span> sec<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>        sec<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>P.S., 以下供参考：</p><ul><li>在测试用例不严格的情况下，可以对pre赋一个最小的值，然后在dfs中对其更新，这样就不用判断pre是否合法了<ul><li>在python中可以通过</li><li>在c++中，由于有个测试用例中包括了<code>INT_MIN</code>,所以会报错，可以把pre 置为空指针</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">recoverTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: None Do not return anything, modify root in-place instead.        """</span>        self<span class="token punctuation">.</span>fir<span class="token operator">=</span>None        self<span class="token punctuation">.</span>sec<span class="token operator">=</span>None        self<span class="token punctuation">.</span>pre<span class="token operator">=</span>TreeNode<span class="token punctuation">(</span>float<span class="token punctuation">(</span><span class="token string">"-inf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>fir<span class="token operator">==</span>None <span class="token operator">and</span> self<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>val<span class="token operator">></span>root<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>fir<span class="token operator">=</span>self<span class="token punctuation">.</span>pre            <span class="token keyword">if</span> self<span class="token punctuation">.</span>fir <span class="token operator">and</span> self<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>val<span class="token operator">>=</span>root<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>sec<span class="token operator">=</span>root            self<span class="token punctuation">.</span>pre<span class="token operator">=</span>root            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fir<span class="token punctuation">.</span>val<span class="token punctuation">,</span>self<span class="token punctuation">.</span>sec<span class="token punctuation">.</span>val<span class="token operator">=</span>self<span class="token punctuation">.</span>sec<span class="token punctuation">.</span>val<span class="token punctuation">,</span>self<span class="token punctuation">.</span>fir<span class="token punctuation">.</span>val<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode <span class="token operator">*</span>fir <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    TreeNode <span class="token operator">*</span>sec <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    TreeNode <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>INT_MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        递归结束的条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        中序遍历：左</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        中序遍历：中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fir <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">>=</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> fir <span class="token operator">=</span> pre<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fir <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">>=</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> sec <span class="token operator">=</span> root<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 也可以这样</span>            <span class="token comment" spellcheck="true">//if (pre->val >= root->val) {</span>            <span class="token comment" spellcheck="true">//  fir = (fir == nullptr) ? pre : fir;</span>            <span class="token comment" spellcheck="true">//   sec = root;</span>          <span class="token comment" spellcheck="true">// }</span>        pre <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        中序遍历：右</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">recoverTree</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> fir<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>        fir<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">=</span> sec<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>        sec<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="方法2：遍历一次树，保存到数组中，再进行判断"><a href="#方法2：遍历一次树，保存到数组中，再进行判断" class="headerlink" title="方法2：遍历一次树，保存到数组中，再进行判断"></a>方法2：遍历一次树，保存到数组中，再进行判断</h2><p>  <img src="https://i.loli.net/2021/06/17/S9U7MzKq4EmJfrO.jpg" alt="微信图片_20210617185623"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">recoverTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[int]        """</span>        nodes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># nodes 中保存节点</span>        <span class="token comment" spellcheck="true"># 中序遍历二叉树,得到递增序列</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            nodes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 如果出现非递增的元素，说明这个地方有错误</span>        x<span class="token operator">=</span>None        y<span class="token operator">=</span>None        pre<span class="token operator">=</span>nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> pre<span class="token punctuation">.</span>val<span class="token operator">></span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">:</span>                y<span class="token operator">=</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token operator">not</span> x<span class="token punctuation">:</span>                    x<span class="token operator">=</span>pre            pre<span class="token operator">=</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 交换x与y的值</span>        <span class="token keyword">if</span> x <span class="token operator">and</span> y<span class="token punctuation">:</span>            x<span class="token punctuation">.</span>val<span class="token punctuation">,</span>y<span class="token punctuation">.</span>val<span class="token operator">=</span>y<span class="token punctuation">.</span>val<span class="token punctuation">,</span>x<span class="token punctuation">.</span>val<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.left = left</span><span class="token comment" spellcheck="true">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">recoverTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: None Do not return anything, modify root in-place instead.        """</span>        node <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 中序遍历把节点保存在列表中</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            node<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        pre <span class="token operator">=</span> node<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        x <span class="token operator">=</span> None        y <span class="token operator">=</span> None        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 第一次左大右小，保存左</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">not</span> x<span class="token punctuation">)</span> <span class="token operator">and</span> pre<span class="token punctuation">.</span>val <span class="token operator">></span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">:</span>                x <span class="token operator">=</span> pre            <span class="token comment" spellcheck="true"># 第二次左大右小，保存右</span>            <span class="token keyword">if</span> x <span class="token operator">and</span> pre<span class="token punctuation">.</span>val <span class="token operator">></span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">:</span>                y <span class="token operator">=</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            pre <span class="token operator">=</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 交换值</span>        <span class="token keyword">if</span> x <span class="token operator">and</span> y<span class="token punctuation">:</span>            x<span class="token punctuation">.</span>val<span class="token punctuation">,</span> y<span class="token punctuation">.</span>val <span class="token operator">=</span> y<span class="token punctuation">.</span>val<span class="token punctuation">,</span> x<span class="token punctuation">.</span>val<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意！！！！！！</p><ul><li><code>TreeNode *fir = nullptr;</code> 和<code>TreeNode *sec = nullptr;</code> 一定要赋初值nullptr，否则指针会乱指</li><li>传到dfs中的是nodes的<strong>引用</strong> （当然也可以把nodes置为全局变量）</li></ul></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//    注意这里传的是nodes的引用</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>TreeNode <span class="token operator">*</span><span class="token operator">></span> <span class="token operator">&amp;</span>nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        nodes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">recoverTree</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector <span class="token operator">&lt;</span> TreeNode <span class="token operator">*</span> <span class="token operator">></span> nodes<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里要给指针赋初值，否则它会乱指到其他地方</span>        TreeNode <span class="token operator">*</span>fir <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        TreeNode <span class="token operator">*</span>sec <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">></span> nodes<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sec <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fir <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fir <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fir <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> sec <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> fir<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>            fir<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">=</span> sec<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>            sec<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他写法：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>TreeNode <span class="token operator">*</span><span class="token operator">></span> nodes<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        nodes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">recoverTree</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode <span class="token operator">*</span>fir<span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        TreeNode <span class="token operator">*</span>sec<span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        TreeNode *pre = new TreeNode(INT_MIN);</span>        TreeNode <span class="token operator">*</span>pre<span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">>=</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sec <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fir<span class="token punctuation">)</span>                    fir <span class="token operator">=</span> pre<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span>            pre <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fir <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> sec <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> fir<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>        fir<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">=</span> sec<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>        sec<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python经典排序算法</title>
      <link href="/2020/07/22/leetcode/python-jing-dian-pai-xu-suan-fa/"/>
      <url>/2020/07/22/leetcode/python-jing-dian-pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/sort-an-array/solution/python-shi-xian-de-shi-da-jing-dian-pai-xu-suan-fa/" target="_blank" rel="noopener">Python经典排序算法</a></p><p><img src="https://img-blog.csdnimg.cn/20200722182404772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29wZW5jdnpzZWZ2,size_16,color_FFFFFF,t_70" alt></p><p><a href="https://www.youtube.com/watch?v=kS_gr2_-ws8" target="_blank" rel="noopener">Complete Beginner’s Guide to Big O Notation</a><br><img src="https://i.loli.net/2021/10/02/XLesPnp17ioEBtD.png" alt="20211002191518"></p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><ul><li>对每一个nums[i], 寻找 $range(i,n)$ 范围内比nums[i]大的数，并与之交换</li><li>以此类推，位置 i 处就是 第i 小的数</li></ul><blockquote><p>两次for循环，时间复杂度为 $O(n^2)$</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">selection_sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> nums<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="==冒泡排序=="></a>==冒泡排序==</h1><ul><li>最坏的情况是: 原始的nums是倒序，从倒序转顺序</li><li>对每一个nums[i], 需要比较n-i次<strong>相邻元素</strong><blockquote><p>两次for循环，时间复杂度为 $O(n^2)$</p></blockquote></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">return</span> nums<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="==插入排序=="></a>==插入排序==</h1><ul><li>对每一个nums[i], 将其插入到符合大小顺序的位置处</li><li>随着i的增加，需要比较的次数也增加。比较时，从最近的相邻元素开始，倒序比<blockquote><p>时间复杂度为 $O(n^2)$</p></blockquote></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> i<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span>                i<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">return</span> nums<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    i<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">return</span> nums<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="希尔排序（了解）"><a href="#希尔排序（了解）" class="headerlink" title="希尔排序（了解）"></a>希尔排序（了解）</h1><ul><li>希尔排序是插入排序的优化，通过<code>gap</code>减少排序过程中交换的次数<blockquote><p>时间复杂度为 $O(n^2)$</p></blockquote></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        gap<span class="token operator">=</span>n<span class="token operator">//</span><span class="token number">2</span>        <span class="token keyword">while</span> gap<span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>gap<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">while</span> i<span class="token operator">-</span>gap<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">:</span>                                nums<span class="token punctuation">[</span>i<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span>gap<span class="token punctuation">]</span>                    i<span class="token operator">-=</span>gap            gap<span class="token operator">=</span>gap<span class="token operator">//</span><span class="token number">2</span>        <span class="token keyword">return</span> nums<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="==归并排序=="></a>==归并排序==</h1><p>归并排序是理解<strong>递归方法</strong>的一个很好的例子</p><ul><li><strong>不要跳进</strong>递归里面去 （<del>跳进去没任何用处，反而会更混乱</del> ）。归并排序就是先把数组分左右两个子数组并<strong>对子数组排序</strong>，然后<strong>合并</strong></li><li>递归是逐步缩小子问题，主要是理解<strong>函数的作用及返回的内容</strong><ul><li><code>sortArray()</code> 函数的作用是排序，返回排好序的列表<ul><li>如 [7,5,3] -&gt; 返回[3,5,7]    </li></ul></li><li><code>merge()</code> 函数的作用是对两个有序数组按照由小到大的顺序合并<ul><li>如 left=[2,4,6],right=[3,5,7]-&gt; 合并后返回[2,3,4,5,6,7]</li></ul></li></ul></li></ul><blockquote><p>时间复杂度为 $O(n^2)$，空间复杂度为 $O(n)$。参考<a href="https://blog.csdn.net/touch_2011/article/details/6785881" target="_blank" rel="noopener">漫谈经典排序算法</a></p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 函数的作用是排序，不要跳进递归中</span>    <span class="token keyword">def</span> <span class="token function">sortArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> nums        mid<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>        <span class="token comment" spellcheck="true"># 分成有序的左右两个子列</span>        left<span class="token operator">=</span>self<span class="token punctuation">.</span>sortArray<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        right<span class="token operator">=</span>self<span class="token punctuation">.</span>sortArray<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 合并</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 按照大小顺序，合并两个子数组</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 从while条件中跳出后，左右子数组中可能仍有未pop出的元素</span>        <span class="token comment" spellcheck="true"># 所以将其连接到res后面即可</span>        res<span class="token operator">+=</span>left        res<span class="token operator">+=</span>right        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="==快速排序=="></a>==快速排序==</h1><ul><li>将列表的第一个（或最后一个）元素设为pivot，然后在<code>range(1,len(nums))</code>中，小于等于pivot的元素放l，大于pivot的元素放r</li><li>对l和r列表分别递归调用排序函数，并通过<code>left+[pivot]+right</code> 将其连起开，返回最终结果</li><li>注意递归终止的条件及特判<code>if len(nums)&lt;=0:return nums</code><blockquote><p>时间复杂度为 $O(n^2)$</p></blockquote></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 递归终止的条件及特判</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">return</span> nums        <span class="token comment" spellcheck="true"># 将列表的第一个元素设为pivot，后面的元素中，小于pivot的在左，大于pivot的在右</span>        l<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        r<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        pivot<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>pivot<span class="token punctuation">:</span>                l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        left<span class="token operator">=</span>self<span class="token punctuation">.</span>sortArray<span class="token punctuation">(</span>l<span class="token punctuation">)</span>        right<span class="token operator">=</span>self<span class="token punctuation">.</span>sortArray<span class="token punctuation">(</span>r<span class="token punctuation">)</span>        <span class="token keyword">return</span> left<span class="token operator">+</span><span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token operator">+</span>right<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索旋转排序数组系列</title>
      <link href="/2020/07/17/leetcode/sou-suo-xuan-zhuan-pai-xu-shu-zu-xi-lie/"/>
      <url>/2020/07/17/leetcode/sou-suo-xuan-zhuan-pai-xu-shu-zu-xi-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="153-寻找旋转排序数组中的最小值"><a href="#153-寻找旋转排序数组中的最小值" class="headerlink" title="153. 寻找旋转排序数组中的最小值"></a><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/solution/er-fen-cha-zhao-wei-shi-yao-zuo-you-bu-dui-cheng-z/" target="_blank" rel="noopener">153. 寻找旋转排序数组中的最小值</a></h1><ul><li><p>二分查找过程中，比较mid与right（而非left）的原因：<br><strong>以 [1,2,3,4,5,6,7] 为例</strong>，分以下<strong>情况</strong></p><ol><li>若[1,2,3,<strong>4</strong>,5,6,7] 左&lt;中，<strong>中&lt;右</strong>。最小值在最左边， 所以更新 <strong>右指针</strong></li><li>若[6,7,1,<strong>2</strong>,3,4,5] 左&gt;中，<strong>中&lt;右</strong>。最小值在mid左边，所以更新 <strong>右指针</strong></li><li>若[4,5,6,<strong>7</strong>,1,2,3] 左&lt;中，<em>中&gt;右</em>。最小值在mid右边，所以更新 <em>左指针</em></li></ol></li><li><p>可见，当中&lt;右时（情况1,2），都是更新右指针，中&gt;右时 （情况3），都是更新左指针（<strong>因为是找最小值，最小值偏左，所以mid和右指针进行比较，更有区分度</strong>）。 但是左&lt;中时 （情况1,3）,指针更新不统一，讨论起来较麻烦。</p></li></ul><blockquote><p>循环条件<strong>l&lt;r</strong>:</p><ul><li>若<code>nums[mid]&gt;nums[r]</code>,说明mid在第一个递增序列，最小值在mid右边，所以l=mid+1 （情况3）</li><li>若<code>nums[mid]&lt;=nums[r]</code>,说明mid在第二个递增序列，最小值在mid处或mid左边，所以r=mid （情况2, 或者如[3,4,0,1,2]）</li></ul></blockquote><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        left<span class="token operator">=</span><span class="token number">0</span>        right<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> left<span class="token operator">&lt;</span>right<span class="token punctuation">:</span>            mid<span class="token operator">=</span>left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>                left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right<span class="token operator">=</span>mid        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="154-寻找旋转排序数组中的最小值-II"><a href="#154-寻找旋转排序数组中的最小值-II" class="headerlink" title="154. 寻找旋转排序数组中的最小值 II"></a><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/solution/er-fen-fa-python3-by-zhu_shi_fu/" target="_blank" rel="noopener">154. 寻找旋转排序数组中的最小值 II</a></h1><p>此题与上一题的区别是，增加了重复元素,所以循环条件略有区别，增加了<code>nums[mid]==nums[r]</code>等于时的特判，用right-=1跳过重复元素，使得right慢慢向左跳</p><blockquote><p>循环条件<strong>l&lt;r</strong>:</p><ul><li>若<code>nums[mid]&gt;nums[r]</code>,说明mid在第一个递增序列，最小值在mid右边，所以l=mid+1 （情况3）</li><li>若<code>nums[mid]&lt;nums[r]</code>,说明mid在第二个递增序列，最小值在mid处或mid左边，所以r=mid （情况2, 或者如[3,4,0,1,2]）</li><li>若<code>nums[mid]=nums[r]</code>,r 向左慢慢跳，所以r-=1 （如[1,0,1,1,1]）</li></ul></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        left<span class="token operator">=</span><span class="token number">0</span>        right<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> left<span class="token operator">&lt;</span>right<span class="token punctuation">:</span>            mid<span class="token operator">=</span>left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>                left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>                right<span class="token operator">=</span>mid            <span class="token keyword">else</span><span class="token punctuation">:</span>                right<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="33-搜索旋转排序数组"><a href="#33-搜索旋转排序数组" class="headerlink" title="33. 搜索旋转排序数组"></a><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/solution/duo-tu-yan-shi-33-sou-suo-xuan-zhuan-pai-xu-shu-zu/" target="_blank" rel="noopener">33. 搜索旋转排序数组</a></h1><p>方法1：找到数组中的最小值后，在第一或第二递增区域内找目标值</p><p>根据上题”153. 寻找旋转排序数组中的最小值” 可以得到最小值，若将最小值<code>minIdx</code>作为旋转点，则有</p><blockquote><ul><li>若最小值下标为0，说明序列是单调递增的，所以在<code>0 - n-1</code> 范围内进行二分查找</li><li>若<code>target&gt;=nums[0]</code>,说明target在第一段递增序列内，所以在<code>nums[0:minIdx]</code> 范围内进行二分查找</li><li>若<code>target&lt;nums[0]</code>,说明target需要在第二段递增序列内找，所以在<code>nums[minIdx:]</code> 范围内进行二分查找<ul><li>如果目标值不在第二递增序列中，则返回-1（如<code>[4,5,6,7,0,1,2]</code>中找target 3），否则返回 <code>minIdx+binarySearch(nums[minIdx:],target)</code>的结果</li></ul></li></ul></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: int        """</span>        <span class="token comment" spellcheck="true"># 找到最小值的下标</span>        <span class="token keyword">def</span> <span class="token function">findMin</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            l<span class="token operator">=</span><span class="token number">0</span>            r<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">while</span> l<span class="token operator">&lt;</span>r<span class="token punctuation">:</span>                mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                    l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    r<span class="token operator">=</span>mid            <span class="token keyword">return</span> l        <span class="token comment" spellcheck="true"># 普通的二分查找，用于确定目标值下标</span>        <span class="token keyword">def</span>  <span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>            l<span class="token operator">=</span><span class="token number">0</span>            r<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">while</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">:</span>                mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">:</span>                    <span class="token keyword">return</span> mid                <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">:</span>                    r<span class="token operator">=</span>mid<span class="token number">-1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        minIdx<span class="token operator">=</span>findMin<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> minIdx<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#单调递增，在整个范围内寻找</span>            <span class="token keyword">return</span> binarySearch<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">)</span>        <span class="token keyword">elif</span> target<span class="token operator">>=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 在第一个递增序列内找</span>            <span class="token keyword">return</span> binarySearch<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>minIdx<span class="token punctuation">]</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># target&lt;nums[0]: # 在第二个递增序列内找</span>            <span class="token comment" spellcheck="true"># 如果目标值不在第二递增序列中，则返回-1，否则返回 minIdx+tmp</span>            tmp<span class="token operator">=</span>binarySearch<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>minIdx<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> tmp<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> minIdx<span class="token operator">+</span>tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法2：直接二分查找,在<strong>严格的递增序列内</strong>找target，其余情况取反</p><ul><li>设置左右指针</li><li><code>nums[mid]==target</code>时，说明已找到目标值，返回 mid （也是while的结束条件）</li><li><code>当nums[mid]&gt;=nums[l]</code> 时（注意这里要取等号，使得满足递增序列只有一个元素的情况也符合(如<code>[3,1]</code>)），说明左边是递增序列，<ul><li>若<strong>target在递增序列内</strong>，则更新右指针</li><li>其他情况更新左指针 （target 在mid的右边，所以更新左指针）</li></ul></li><li>否则当<code>nums[mid]&lt;nums[l]</code>时，说明右边是递增序列<ul><li>若<strong>target在递增序列内</strong>，则更新左指针</li><li>其他情况更新右指针 （target 在mid的左边，所以更新右指针）</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: int        """</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        l<span class="token operator">=</span><span class="token number">0</span>        r<span class="token operator">=</span>n<span class="token number">-1</span>        <span class="token keyword">while</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">:</span>            mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token comment" spellcheck="true"># 找到后，结束循环，跳出</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">:</span>                <span class="token keyword">return</span> mid            <span class="token comment" spellcheck="true"># 左边是递增序列</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">>=</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># target 若在递增序列内，则更新右指针</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;=</span>target<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>                    r<span class="token operator">=</span>mid<span class="token number">-1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 剩余情况更新左指针</span>                    l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>            <span class="token comment" spellcheck="true"># 右边是递增序列</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># target 若在递增序列内，则更新左指针</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                    l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 剩余情况更新右指针</span>                    r<span class="token operator">=</span>mid<span class="token number">-1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment" spellcheck="true"># 不满足条件时，返回-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="81-搜索旋转排序数组-II"><a href="#81-搜索旋转排序数组-II" class="headerlink" title="81. 搜索旋转排序数组 II"></a><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/solution/er-fen-by-powcai/" target="_blank" rel="noopener">81. 搜索旋转排序数组 II</a></h1><p>与上题相比，本题增加了重复元素。因此，若检测到重复元素，则左（右）指针要跳，直到不重复：</p><blockquote><p>如[1,1,1,1,2,1], 可保证跳过相邻的相同元素<br>与上题相比，增加如下判断：</p><pre><code>        if nums[mid]==nums[l]==nums[r]:            l+=1            r-=1</code></pre></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: int        """</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        l<span class="token operator">=</span><span class="token number">0</span>        r<span class="token operator">=</span>n<span class="token number">-1</span>        <span class="token keyword">while</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">:</span>            mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token comment" spellcheck="true"># 找到后，结束循环，跳出</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token comment" spellcheck="true"># ******与上题相比，增加的部分****** #</span>            <span class="token triple-quoted-string string">"""            如[1,1,1,1,2,1], 可保证跳过相邻的相同元素            """</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                l<span class="token operator">+=</span><span class="token number">1</span>                r<span class="token operator">-=</span><span class="token number">1</span>            <span class="token comment" spellcheck="true"># ******与上题相比，增加的部分****** #</span>            <span class="token comment" spellcheck="true"># 左边是递增序列</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">>=</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># target 若在递增序列内，则更新右指针</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;=</span>target<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>                    r<span class="token operator">=</span>mid<span class="token number">-1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 剩余情况更新左指针</span>                    l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>            <span class="token comment" spellcheck="true"># 右边是递增序列</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># target 若在递增序列内，则更新左指针</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                    l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 剩余情况更新右指针</span>                    r<span class="token operator">=</span>mid<span class="token number">-1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># 不满足条件时，返回-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第零章：一个方法团灭 nSum 问题</title>
      <link href="/2020/07/16/labuladong/di-ling-zhang-yi-ge-fang-fa-tuan-mie-nsum-wen-ti/"/>
      <url>/2020/07/16/labuladong/di-ling-zhang-yi-ge-fang-fa-tuan-mie-nsum-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://mp.weixin.qq.com/s/fSyJVvggxHq28a0SdmZm6Q" target="_blank" rel="noopener">一个方法团灭 nSum 问题</a></p><h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">1. 两数之和</a></h1><h2 id="方法1：利用字典去重"><a href="#方法1：利用字典去重" class="headerlink" title="方法1：利用字典去重"></a>方法1：利用字典去重</h2><ul><li>利用字典保存遍历过程变量，若满足条件，则返回结果</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: List[int]        """</span>        dic<span class="token operator">=</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target<span class="token operator">-</span>j <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> dic<span class="token punctuation">[</span>target<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>            dic<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span>m<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>result<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sz<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 或者 m[nums[i]]=i;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2：排序后双指针逼近"><a href="#方法2：排序后双指针逼近" class="headerlink" title="方法2：排序后双指针逼近"></a>方法2：排序后双指针逼近</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: List[int]        """</span>        <span class="token keyword">import</span> copy        nums1<span class="token operator">=</span>copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        nums1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        l <span class="token operator">=</span> <span class="token number">0</span>        r <span class="token operator">=</span> len<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>            cur <span class="token operator">=</span> nums1<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums1<span class="token punctuation">[</span>r<span class="token punctuation">]</span>            <span class="token keyword">if</span> cur <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                l <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> cur <span class="token operator">></span> target<span class="token punctuation">:</span>                r <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># 找到原来的索引</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>nums1<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums1<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">15. 三数之和</a></h1><h2 id="方法1：利用字典去重-1"><a href="#方法1：利用字典去重-1" class="headerlink" title="方法1：利用字典去重"></a>方法1：利用字典去重</h2><ul><li>在2Sum 的基础上(如<code>[-10,4,4,5,5,6]</code>,对-10 而言，<code>res=[[4,6],[5,5]]</code>)，逐个遍历<code>nums</code> ,求满足target为<code>-nums[i]</code> 的结果</li><li>对每次的i而言，从i的<strong>后面数组</strong>中找<code>twoSum(nums[i+1:],target)</code>即可（如<code>[-10,0,1,10,2]</code>,与-10相对应的结果为<code>[-10,0,10]</code>。然后遍历0，只要从0的后面（<code>nums[i+1:]</code>）找另外两个数即可,不用管0前面的内容，因为前面能对应到的结果已经找全了）</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>            dic <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> target <span class="token operator">-</span> j <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>j<span class="token punctuation">,</span> target <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span>                dic<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i            <span class="token comment" spellcheck="true"># 去重，如[[1,2],[1,2],[0,3]] -> [[1,2],[0,3]] (假设target为3)</span>            resAll<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token punctuation">[</span>resAll<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> res <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> resAll<span class="token punctuation">]</span>            <span class="token keyword">return</span> resAll        all <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        nums<span class="token operator">=</span>sorted<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">continue</span>  <span class="token comment" spellcheck="true"># 若有相等元素，则跳过</span>            target<span class="token operator">=</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            cur<span class="token operator">=</span>twoSum<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 若没有满足条件的twoSum，对结果也没影响.</span>            <span class="token keyword">for</span> c <span class="token keyword">in</span> cur<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 对cur中的每组列表都添加当前的nums[i]</span>                c<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                all<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">return</span> all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>c++对应的去重方式：如[[1,2],[1,2],[0,3]] -&gt; [[1,2],[0,3]] (假设target为3)</p><pre class="line-numbers language-cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> v<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">s</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="方法2：排序后双指针逼近-1"><a href="#方法2：排序后双指针逼近-1" class="headerlink" title="方法2：排序后双指针逼近"></a>方法2：排序后双指针逼近</h2><ul><li><code>sorted(nums)</code>先对列表进行排序, 然后用双指针逼近</li><li>利用twoSum函数返回满足条件的所有列表 <ul><li>如<code>[-10,4,4,5,5,6]</code>,对-10 而言，<code>res=[[4,6],[5,5]]</code></li><li>设置<code>left</code>，保证<code>nums[l]</code>可以与其左边的元素比较是否相等（<code>right</code>同理）</li><li><code>for i in range(len(nums))</code>  对每一次遍历，就是求满足<code>target</code> 为<code>-nums[i]</code> 的结果</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>                cur <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span>                left <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span>                right <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span>                <span class="token keyword">if</span> cur <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                    <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r <span class="token operator">and</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> left<span class="token punctuation">:</span> l <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> cur <span class="token operator">></span> target<span class="token punctuation">:</span>                    <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r <span class="token operator">and</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> right<span class="token punctuation">:</span> r <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 设置left，保证nums[l]可以与其左边的元素比较是否相等（right 同理）</span>                    <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r <span class="token operator">and</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> left<span class="token punctuation">:</span> l <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 一直向右跳，直到不相等</span>                    <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r <span class="token operator">and</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> right<span class="token punctuation">:</span> r <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>            <span class="token keyword">return</span> res        all <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        nums<span class="token operator">=</span>sorted<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">continue</span>  <span class="token comment" spellcheck="true"># 若有相等元素，则跳过</span>            target<span class="token operator">=</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            cur<span class="token operator">=</span>twoSum<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 若没有满足条件的twoSum，则 不执行下面语句.因为cur为[].</span>            <span class="token keyword">for</span> c <span class="token keyword">in</span> cur<span class="token punctuation">:</span>                c<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                all<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">return</span> all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="nSum的变体"><a href="#nSum的变体" class="headerlink" title="nSum的变体"></a>nSum的变体</h1><p>nums中可能有<strong>多对</strong>元素之和都等于 target，请返回所有和为 target 的元素对，且<strong>不能出现重复</strong>。</p><p>比如输入为 nums = [1,3,1,2,2,3], target = 4，那么算法返回的结果就是：[[1,3],[2,2]]</p><ul><li>排序</li><li>通过左右指针更新，若有相同元素，则跳过。<code>left = nums[l]</code>和<code>right = nums[r]</code> 的作用是记录当前位置，从而便于后续跳过相同的元素</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    l <span class="token operator">=</span> <span class="token number">0</span>    r <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    nums <span class="token operator">=</span> sorted<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>        sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span>        left <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span>        right <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 便于后续跳过相同的元素</span>        <span class="token keyword">if</span> sum <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>            l <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> sum <span class="token operator">></span> target<span class="token punctuation">:</span>            r <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r <span class="token operator">and</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> left<span class="token punctuation">:</span> l <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r <span class="token operator">and</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> right<span class="token punctuation">:</span> r <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>target <span class="token operator">=</span> <span class="token number">4</span>twoSum<span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果为：[[1, 3], [2, 2]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章：如何判断回文链表</title>
      <link href="/2020/07/13/labuladong/di-si-zhang-ru-he-pan-duan-hui-wen-lian-biao/"/>
      <url>/2020/07/13/labuladong/di-si-zhang-ru-he-pan-duan-hui-wen-lian-biao/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/gao-pin-mian-shi-xi-lie/pan-duan-hui-wen-lian-biao" target="_blank" rel="noopener">如何判断回文链表</a></p><h1 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="234. 回文链表"></a><a href="https://leetcode-cn.com/problems/palindrome-linked-list/" target="_blank" rel="noopener">234. 回文链表</a></h1><h2 id="方法1：链表转列表，双指针逼近"><a href="#方法1：链表转列表，双指针逼近" class="headerlink" title="方法1：链表转列表，双指针逼近"></a>方法1：链表转列表，双指针逼近</h2><p>将链表转化为列表，然后利用左右双指针技巧，从两端到中间逼近</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: bool        """</span>        <span class="token comment" spellcheck="true"># 转成列表</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> head<span class="token punctuation">:</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            head<span class="token operator">=</span>head<span class="token punctuation">.</span>next        <span class="token comment" spellcheck="true"># 左右双指针逼近</span>        l<span class="token operator">=</span><span class="token number">0</span>        r<span class="token operator">=</span>len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">:</span>            <span class="token keyword">if</span>  stack<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">!=</span>stack<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                l<span class="token operator">+=</span><span class="token number">1</span>                r<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2：反转后半部分链表后，逐个比较节点值"><a href="#方法2：反转后半部分链表后，逐个比较节点值" class="headerlink" title="方法2：反转后半部分链表后，逐个比较节点值"></a>方法2：反转后半部分链表后，逐个比较节点值</h2><p><strong>思路</strong></p><ul><li>边界条件（如[] 或者 [2]）直接返回</li><li>快慢指针找中点</li><li>反转以slow为开头的链表</li><li>只需判断p2存在时，p1的前半部分元素是否与p2一样</li></ul><p><strong>步骤</strong></p><p>以偶数为例（奇数类似）</p><p>链表：<code>1-&gt;2-&gt;2-&gt;1</code><br>下标：[0] [1] [2] [3]</p><ol><li>快慢指针后，slow指向第二个2(下标为[2])，fast已跳出链表</li><li>此时slow后面的链表为<code>2-&gt;1</code>。反转时，2(下标为[2])指向prev的None,1指向2。最后有<code>None&lt;-2&lt;-1</code>（此时prev在下标[3]处）。（注意：此时前半段中，<strong>下标为[1]的节点2仍然指向下标为[2]的节点2</strong>）</li><li>此时，以head开头的p1为<code>1-&gt;2-&gt;2-&gt;None</code>,以prev开头的p2为<code>None&lt;-2&lt;-1</code>,所以只需判断p2存在时，p1是否等于p2。</li></ol><p><img src="https://i.loli.net/2021/08/13/eIdzBRTQcPqMnFA.png" alt="图片来自labuladong"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: bool        """</span>        <span class="token comment" spellcheck="true"># 边界条件，直接跳出,如[] 或者 [2]</span>        <span class="token comment" spellcheck="true"># if not head or not head.next: return True</span>        <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>head <span class="token operator">and</span> head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token comment" spellcheck="true"># 必须有括号，and后取其反</span>        <span class="token comment" spellcheck="true"># 快慢指针找中点</span>        slow<span class="token operator">=</span>head        fast<span class="token operator">=</span>head        <span class="token keyword">while</span> fast <span class="token operator">and</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">:</span>            slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        <span class="token comment" spellcheck="true"># 反转以slow开始的后半部分链表</span>        prev <span class="token operator">=</span> None        cur<span class="token operator">=</span>slow        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            cur<span class="token punctuation">.</span>next<span class="token punctuation">,</span>prev<span class="token punctuation">,</span>cur<span class="token operator">=</span>prev<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>cur<span class="token punctuation">.</span>next        p1<span class="token operator">=</span>head        p2<span class="token operator">=</span>prev        <span class="token comment" spellcheck="true"># 只需判断p2存在时，p1是否等于p2</span>        <span class="token keyword">while</span> p2<span class="token punctuation">:</span>            <span class="token keyword">if</span> p1<span class="token punctuation">.</span>val<span class="token operator">!=</span>p2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            p1<span class="token operator">=</span>p1<span class="token punctuation">.</span>next            p2<span class="token operator">=</span>p2<span class="token punctuation">.</span>next        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>完整示例：输出链表操作的结果</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#########开始：构建链表及链表基本操作###########</span><span class="token comment" spellcheck="true"># 节点类</span><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> next<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token comment" spellcheck="true"># 链表类：用于存放节点</span><span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>head <span class="token operator">=</span> None    <span class="token comment" spellcheck="true"># 判断链表是否为空</span>    <span class="token keyword">def</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>head <span class="token operator">==</span> None    <span class="token comment" spellcheck="true"># 给链表添加节点</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        newNode<span class="token operator">=</span>Node<span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 构建一个新的节点，该节点的值为val</span>        <span class="token comment" spellcheck="true"># 头结点存在，把cur指向头结点，cur逐步跳到链表尾部，然后添加节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>            cur<span class="token operator">=</span>self<span class="token punctuation">.</span>head            <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            cur<span class="token punctuation">.</span>next<span class="token operator">=</span>newNode <span class="token comment" spellcheck="true"># 通过next，在尾部不断连接节点</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 这是一个空链表，则在头结点处添加该节点</span>            self<span class="token punctuation">.</span>head<span class="token operator">=</span>newNode    <span class="token comment" spellcheck="true"># 判断链表的长度</span>    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        count<span class="token operator">=</span><span class="token number">0</span>        cur<span class="token operator">=</span>self<span class="token punctuation">.</span>head        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>            count<span class="token operator">+=</span><span class="token number">1</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next        <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 搜索某个元素是否存在</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>        cur<span class="token operator">=</span>self<span class="token punctuation">.</span>head        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val<span class="token operator">==</span>item<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># 打印该链表</span>    <span class="token keyword">def</span> <span class="token function">printLL</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cur<span class="token operator">=</span>self<span class="token punctuation">.</span>head        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token comment" spellcheck="true">#########结束：构建链表及链表基本操作###########</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Node<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> head <span class="token operator">or</span> <span class="token operator">not</span> head<span class="token punctuation">.</span>next<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>        slow<span class="token operator">=</span>head        fast<span class="token operator">=</span>head        <span class="token keyword">while</span> fast <span class="token operator">and</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">:</span>            slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        pre<span class="token operator">=</span>None        cur<span class="token operator">=</span>slow        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>            cur<span class="token punctuation">.</span>next<span class="token punctuation">,</span> pre<span class="token punctuation">,</span> cur <span class="token operator">=</span> pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>next            <span class="token comment" spellcheck="true"># cur.next=pre</span>            <span class="token comment" spellcheck="true"># pre=cur</span>            <span class="token comment" spellcheck="true"># cur=cur.next</span>        slow<span class="token punctuation">.</span>next<span class="token operator">=</span>None        <span class="token keyword">while</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> pre<span class="token punctuation">.</span>val<span class="token operator">!=</span>head<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next            head<span class="token operator">=</span>head<span class="token punctuation">.</span>next        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构建链表对象</span>    l<span class="token operator">=</span>LinkedList<span class="token punctuation">(</span><span class="token punctuation">)</span>    l<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    l<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    l<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    l<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 构建Solution对象</span>    s<span class="token operator">=</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>isPalindrome<span class="token punctuation">(</span>l<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出True或者False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) {} *     ListNode(int x) : val(x), next(nullptr) {} *     ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        边界条件：只有0或1个节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        找链表中点</span>        ListNode <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            slow <span class="token operator">=</span> slow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            fast<span class="token operator">=</span>fast<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        反转以slow为开头的后半段链表</span>        ListNode <span class="token operator">*</span> pre<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>        ListNode <span class="token operator">*</span> cur<span class="token operator">=</span>slow<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ListNode<span class="token operator">*</span> tmp<span class="token operator">=</span>cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>            cur<span class="token operator">=</span>tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        当以pre为开头的链表存在时，判断该链表是否与原始链表重合</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">!=</span>head<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            pre<span class="token operator">=</span>pre<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            head<span class="token operator">=</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章：如何同时寻找缺失和重复的元素</title>
      <link href="/2020/07/13/labuladong/di-si-zhang-ru-he-tong-shi-xun-zhao-que-shi-he-chong-fu-de-yuan-su/"/>
      <url>/2020/07/13/labuladong/di-si-zhang-ru-he-tong-shi-xun-zhao-que-shi-he-chong-fu-de-yuan-su/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/gao-pin-mian-shi-xi-lie/que-shi-he-zhong-fu-de-yuan-su" target="_blank" rel="noopener">如何同时寻找缺失和重复的元素</a></p><p><a href="https://leetcode-cn.com/problems/set-mismatch/" target="_blank" rel="noopener">645. 错误的集合</a></p><ul><li>利用set去重，并记录重复的元素</li><li>遍历一遍<code>range(1,len(nums)+1)</code>,找到并记录不存在的于set中的元素</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findErrorNums</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[int]        """</span>        se<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> se<span class="token punctuation">:</span>                se<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 利用set去重</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 顺便记录重复的元素</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> se<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 找到并记录不存在的于set中的元素</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章：如何寻找缺失的元素</title>
      <link href="/2020/07/13/labuladong/di-si-zhang-ru-he-xun-zhao-que-shi-de-yuan-su/"/>
      <url>/2020/07/13/labuladong/di-si-zhang-ru-he-xun-zhao-que-shi-de-yuan-su/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/gao-pin-mian-shi-xi-lie/xiao-shi-de-yuan-su" target="_blank" rel="noopener">如何寻找缺失的元素</a></p><p><a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/" target="_blank" rel="noopener">448. 找到所有数组中消失的数字</a></p><ul><li>先遍历列表，并加到set中。利用 HashSet 去重</li><li>若元素不在列表中，则表示该元素缺失</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findDisappearedNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[int]        """</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        se<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            se<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> se<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章：如何寻找最长回文子串</title>
      <link href="/2020/07/13/labuladong/di-si-zhang-ru-he-xun-zhao-zui-chang-hui-wen-zi-chuan/"/>
      <url>/2020/07/13/labuladong/di-si-zhang-ru-he-xun-zhao-zui-chang-hui-wen-zi-chuan/</url>
      
        <content type="html"><![CDATA[<p>labuladong <a href="https://github.com/labuladong/fucking-algorithm/blob/master/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2.md" target="_blank" rel="noopener">如何寻找最长回文子串</a></p><h1 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">5. 最长回文子串</a></h1><ul><li>回文串的长度可能是奇数也可能是偶数，如果是 abba这种情况，没有一个中心字符。所以可以：<ul><li>找到以 s[i] 为中心的回文串（对奇数回文串），<br>找到以 s[i] 和 s[i+1] 为中心的回文串（对偶数回文串），<br>更新答案</li></ul></li><li>选择最长的回文串，保存在res中</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: str        """</span>        <span class="token keyword">def</span> <span class="token function">palindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 若左右指针没越界，且元素相等，则指针向两边扩散</span>            <span class="token keyword">while</span> l<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> r<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                    l<span class="token operator">-=</span><span class="token number">1</span>                    r<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">return</span> s<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>r<span class="token punctuation">]</span>        res<span class="token operator">=</span><span class="token string">""</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s1<span class="token operator">=</span>palindrome<span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span>            s2<span class="token operator">=</span>palindrome<span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#这里越界无所谓，因为调用palindrome时已经不满足while条件，可直接跳出</span>            <span class="token comment" spellcheck="true"># 选择最长的回文串保存在res中</span>            res<span class="token operator">=</span>res <span class="token keyword">if</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">></span>len<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token keyword">else</span> s1            res<span class="token operator">=</span>res <span class="token keyword">if</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">></span>len<span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token keyword">else</span> s2        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章：如何k个一组反转链表</title>
      <link href="/2020/07/13/labuladong/di-si-zhang-ru-he-k-ge-yi-zu-fan-zhuan-lian-biao/"/>
      <url>/2020/07/13/labuladong/di-si-zhang-ru-he-k-ge-yi-zu-fan-zhuan-lian-biao/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/gao-pin-mian-shi-xi-lie/k-ge-yi-zu-fan-zhuan-lian-biao" target="_blank" rel="noopener">如何k个一组反转链表</a></p><p><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener">25. K 个一组翻转链表</a></p><p>利用栈先进后出，反转k个一组的链表</p><ul><li>stack中存放的是ListNode<ul><li>虽然存放在stack中，但ListNode之间的<strong>指向关系仍然保留</strong></li></ul></li></ul><p>以 1-&gt;2-&gt;3-&gt;4-&gt;5 为例，</p><ul><li>先在最左边加一个dummy头(-1)便于操作。</li><li>注意：大循环 <code>while cur</code>里面的while n&gt;0 <strong>and cur</strong> 一定要有，确保不够k个Node时n&gt;0，及时跳出（否则cur=cur.next也没有意义了）。</li><li>第一次while时，stack中存放 [3,2,1],pre产生的结果是： -1-&gt;3-&gt;2-&gt;1 。此时cur 指向4，pre指向3。<code>pre.next=cur</code>后现在的结果是-1-&gt;3-&gt;2-&gt;1-&gt;4-&gt;5</li><li>第二次while时，stack中存放[5,4],但是由于n！=0，直接break出循环（即<code>pre.next=cur</code>不执行）。此时cur已经指向5后面的None，但是现在已经跳出while循环了，<strong>不必理会cur</strong>。<ul><li>else break这里用else continue也可以，反正此时cur==nullprt，也要跳出while循环</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>head<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        dummy<span class="token operator">=</span>ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        dummy<span class="token punctuation">.</span>next<span class="token operator">=</span>head        pre<span class="token operator">=</span>dummy        cur<span class="token operator">=</span>head        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># while True：</span>            n<span class="token operator">=</span>k            <span class="token keyword">while</span> n<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> cur<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next                n<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">while</span> stack<span class="token punctuation">:</span>                    pre<span class="token punctuation">.</span>next<span class="token operator">=</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                    pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            pre<span class="token punctuation">.</span>next<span class="token operator">=</span>cur        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其他写法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, next=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :type k: int        :rtype: ListNode        """</span>        <span class="token comment" spellcheck="true"># 在最左边加一个dummy头(-1)便于操作</span>        dummy <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        dummy<span class="token punctuation">.</span>next<span class="token operator">=</span>head        pre <span class="token operator">=</span> dummy        cur <span class="token operator">=</span> head        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 把k个节点加到stack中</span>            <span class="token keyword">while</span> cur <span class="token operator">and</span> count <span class="token operator">&lt;</span> k<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next                count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># 当stack中存了k个节点时，pop出这些节点，并逐个加到pre后面</span>            <span class="token keyword">if</span> count <span class="token operator">==</span> k<span class="token punctuation">:</span>                <span class="token keyword">while</span> stack<span class="token punctuation">:</span>                    pre<span class="token punctuation">.</span>next <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                    pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next                    count <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span> <span class="token comment" spellcheck="true"># 如果不够k个，则跳出while cur循环</span>            <span class="token comment" spellcheck="true"># 不用担心跳出以后后面的节点</span>            <span class="token comment" spellcheck="true"># pre已经在这次的if语句执行前通过pre.next=cur 把后面的节点连在一起了</span>            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意C++中栈的操作，在top后要pop<ul><li>s.pop()                 删除栈顶元素但不返回其值</li><li>s.top()                 返回栈顶的元素，但不删除该元素</li><li>s.push()                在栈顶压入新元素</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) {} *     ListNode(int x) : val(x), next(nullptr) {} *     ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">reverseKGroup</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode <span class="token operator">*</span>dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dummy<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>pre<span class="token operator">=</span>dummy<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        stack <span class="token operator">&lt;</span> ListNode <span class="token operator">*</span> <span class="token operator">></span> stk<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            不管够不够k个，都尽量入栈</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                cur<span class="token operator">=</span>cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//            如果栈中有k个元素，则把这一组进行出栈并拼接</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stk<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    pre<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    pre<span class="token operator">=</span>pre<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里用continue也可以，反正此时cur==nullprt，也要跳出while循环</span>            pre<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每组操作后，把cur接到pre后面</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummy<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其他写法：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) {} *     ListNode(int x) : val(x), next(nullptr) {} *     ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">reverseKGroup</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode <span class="token operator">*</span>dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dummy<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>pre <span class="token operator">=</span> dummy<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span>ListNode <span class="token operator">*</span><span class="token operator">></span> s<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                count <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    pre<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    pre <span class="token operator">=</span> pre<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                    count <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            pre<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummy<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>补充：如果题目变成：后面不够的也要反转，只要把<code>else break</code>改成： （也就是把后面的stack中的节点pop出，并拼接到pre后即可）</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> stack<span class="token punctuation">:</span>        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next        count <span class="token operator">-=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章：如何运用贪心思想玩跳跃游戏</title>
      <link href="/2020/07/12/labuladong/di-si-zhang-ru-he-yun-yong-tan-xin-si-xiang-wan-tiao-yue-you-xi/"/>
      <url>/2020/07/12/labuladong/di-si-zhang-ru-he-yun-yong-tan-xin-si-xiang-wan-tiao-yue-you-xi/</url>
      
        <content type="html"><![CDATA[<p>labuladong<a href="https://labuladong.gitbook.io/algo/gao-pin-mian-shi-xi-lie/tiao-yue-you-xi" target="_blank" rel="noopener">如何运用贪心思想玩跳跃游戏</a></p><p>有关动态规划的问题，大多是让你求最值的，比如<strong>最长子序列，最小编辑距离，最长公共子串等等等</strong>。</p><p>那么贪心算法作为特殊的动态规划也是一样，也一定是让你求个最值。</p><blockquote><p>贪心问题往往<strong>可以通过动态规划</strong>来解决</p></blockquote><p>这道题就是让求：请问通过题目中的跳跃规则，<strong>最多能跳多远</strong>？如果能够越过最后一格，返回 true，否则返回 false。</p><h1 id="55-跳跃游戏1"><a href="#55-跳跃游戏1" class="headerlink" title="55. 跳跃游戏1"></a><a href="https://leetcode-cn.com/problems/jump-game/" target="_blank" rel="noopener">55. 跳跃游戏1</a></h1><h2 id="方法1：动态规划"><a href="#方法1：动态规划" class="headerlink" title="方法1：动态规划"></a>方法1：动态规划</h2><ul><li>dp数组的含义：dp[i]表示在当前位置<code>i</code>时，能到达的最远距离（的索引）（<strong>前提是能到达当前位置</strong>）</li><li>状态转移方程：当能到达当前位置时，<code>dp[i] = max(dp[i - 1], i + nums[i])</code>。也就是前一个位置能到达的最远距离和当前位置能到达的最远距离的最大值</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canJump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        n<span class="token operator">=</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token comment" spellcheck="true"># 构建dp数组</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>i<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 到达不了当前位置</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 可以到达i处，可以进行状态转移</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2：贪心算法"><a href="#方法2：贪心算法" class="headerlink" title="方法2：贪心算法"></a>方法2：贪心算法</h2><p>贪心作为一种特殊的动态规划，通常也是用于求最值。在本题，函数的结果并不需要返回dp数组中的值。所以可以用一个全局变量<code>cur</code>来代替dp数组的含义。为了求能到达的最远距离，我们只要在遍历过程中更新并维护这个<code>cur</code>距离即可。</p><ul><li>cur的含义：表示遍历到当前位置<code>i</code>时，能到达的最远距离（的索引）（<strong>前提是能到达当前位置</strong>）</li><li>在for循环中，<strong>每一步都计算一下从当前位置最远能够跳到哪里，然后和一个全局最优的最远位置<code>cur</code>做对比，通过每一步的最优解，更新全局最优解，这就是贪心</strong></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canJump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: bool        """</span>        cur<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cur<span class="token operator">&lt;</span>i<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 当前的“能量”不足以跳到i处</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            cur <span class="token operator">=</span> max<span class="token punctuation">(</span>cur<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 可以跳到i处，这时更新当前“能量”</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="45-跳跃游戏2"><a href="#45-跳跃游戏2" class="headerlink" title="45. 跳跃游戏2"></a><a href="https://leetcode-cn.com/problems/jump-game-ii/" target="_blank" rel="noopener">45. 跳跃游戏2</a></h1><h2 id="方法1：动态规划-1"><a href="#方法1：动态规划-1" class="headerlink" title="方法1：动态规划"></a>方法1：动态规划</h2><p>因为该题属于求极值问题，所以可以用动态规划的方法解决</p><ul><li>dp[i]数组的含义：到达位置i时，跳跃的最小次数</li><li>base case：先将dp数组设为最大值<code>float(&quot;inf&quot;)</code>,dp[0]=0（第0个位置不用跳）</li><li>状态转移方程：从i前面的位置开始顺序遍历，遍历过程中，如果i前面的某一个位置k处的“能量”能跳到i处（<code>nums[k]+k&gt;=i</code>）,则比较已保存的dp[i]和dp[k]+1，取二者的最小值 （始终使dp[i]保持最小值）</li></ul><blockquote><p>类似的题目有<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener">300. 最长递增子序列</a>,也是在两层for循环中，用if条件进行判断，从而（通过状态转移来）更新dp数组</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">jump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span>float<span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>k <span class="token operator">>=</span> i <span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">jump</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token operator">>=</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法2：贪心算法（供参考）"><a href="#方法2：贪心算法（供参考）" class="headerlink" title="方法2：贪心算法（供参考）"></a>方法2：贪心算法（供参考）</h2><p>在for循环中，<code>farthest</code>表示（从当前第<code>i</code>个位置）能到达最远距离的下标</p><ul><li>我们不需要【递归地】计算出所有选择的具体结果然后比较求最值，而只需要做出那个最有【潜力】，看起来最优的选择即可。</li><li>i 和 end 标记了可以选择的跳跃步数，farthest 标记了所有选择 <code>[i..end]</code> 中能够跳到的最远距离，step记录了跳跃次数。</li><li>当i到达end处时，把end更新为更远的farthest，步数+1</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">jump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        farthest<span class="token punctuation">,</span>end<span class="token punctuation">,</span>step<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            farthest<span class="token operator">=</span>max<span class="token punctuation">(</span>farthest<span class="token punctuation">,</span>i<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i<span class="token operator">==</span>end<span class="token punctuation">:</span>                end<span class="token operator">=</span>farthest                step<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> step<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> labuladong </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
